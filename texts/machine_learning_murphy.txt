Machine Learning
A Probabilistic Perspective
Kevin P. Murphy
“ An astonishing machine learning book: intuitive, full  
of examples, fun to read but still comprehensive, 
strong, and deep! A great starting point for any univer-
sity student—and a must-have for anybody in the field. ”
Jan Peters, Darmstadt University of Technology;  
Max-Planck Institute for Intelligent Systems
“Kevin Murphy excels at unraveling the complexities  
of machine learning methods while motivating the 
reader with a stream of illustrated examples and 
real-world case studies. The accompanying software 
package includes source code for many of the figures, 
making it both easy and very tempting to dive in and 
explore these methods for yourself. A must-buy for 
anyone interested in machine learning or curious 
about how to extract useful knowledge from big data. ”
John Winn, Microsoft Research
“This is a wonderful book that starts with basic topics 
in statistical modeling, culminating in the most ad-
vanced topics. It provides both the theoretical foun-
dations of probabilistic machine learning as well as 
practical tools, in the form of MATLAB code. The book 
should be on the shelf of any student interested in the 
topic, and any practitioner working in the field. ”
Y oram Singer, Google Research
“This book will be an essential reference for practitio-
ners of modern machine learning. It covers the basic 
concepts needed to understand the field as a whole, 
and the powerful modern methods that build on those 
concepts. In Machine Learning , the language of prob-
ability and statistics reveals important connections be-
tween seemingly disparate algorithms and strategies. 
Thus, its readers will become articulate in a holistic 
view of the state-of-the-art and poised to build the next 
generation of machine learning algorithms. ”
David Blei, Princeton University
 machine learning
Machine Learning
A Probabilistic Perspective
Kevin P . Murphy
Today’s Web-enabled deluge of electronic data calls for 
automated methods of data analysis. Machine learning 
provides these, developing methods that can automatically 
detect patterns in data and use the uncovered patterns to 
predict future data. This textbook offers a comprehensive 
and self-contained introduction to the field of machine 
learning, a unified, probabilistic approach. 
The coverage combines breadth and depth, offering 
necessary background material on such topics as probabili-
ty, optimization, and linear algebra as well as discussion of 
recent developments in the field, including conditional ran-
dom fields, L1 regularization, and deep learning. The book 
is written in an informal, accessible style, complete with 
pseudo-code for the most important algorithms. All topics 
are copiously illustrated with color images and worked 
examples drawn from such application domains as biology, 
text processing, computer vision, and robotics. Rather than 
providing a cookbook of different heuristic methods, the 
book stresses a principled model-based approach, often 
using the language of graphical models to specify mod-
els in a concise and intuitive way. Almost all the models 
described have been implemented in a MATLAB software 
package—PMTK (probabilistic modeling toolkit)—that is 
freely available online. The book is suitable for upper-level 
undergraduates with an introductory-level college math 
background and beginning graduate students.  
Kevin P . Murphy is a Research Scientist at Google. Previ-
ously, he was Associate Professor of Computer Science 
and Statistics at the University of British Columbia.
Adaptive Computation and Machine Learning seriesThe MIT Press
Massachusetts Institute of Technology
Cambridge, Massachusetts 02142
http://mitpress.mit.edu978-0-262-01802-9
The cover image is based on sequential Bayesian updating  
of a 2 D Gaussian distribution. See Figure 7 .11 for details.
Machine Learning: A Probabilistic Perspective

Machine Learning
A Probabilistic Perspective
Kevin P. Murphy
The MIT Press
Cambridge, MassachusettsLondon, England
© 2012 Massachusetts Institute of Technology
All rights reserved. No part of this book may be reproduced in any form by any electronic or mechanical
means (including photocopying, recording, or information storage and retrieval) without permission inwriting from the publisher.
For information about special quantity discounts, please email special_sales@mitpress.mit.eduThis book was set in the L
ATEX programming language by the author. Printed and bound in the United
States of America.Library of Congress Cataloging-in-Publication Information
Murphy, Kevin P.
Machine learning : a probabilistic perspective / Kevin P. Murphy.p. cm. — (Adaptive computation and machine learning series)Includes bibliographical references and index.ISBN 978-0-262-01802-9 (hardcover : alk. paper)1. Machine learning. 2. Probabilities. I. Title.Q325.5.M87 2012006.3’1—dc232012004558
1 0987654321
This book is dedicated to Alessandro, Michael and Stefano,
and to the memory of Gerard Joseph Murphy.

Contents
Preface xxvii
1 Introduction 1
1.1 Machine learning: what and why? 1
1.1.1 Types of machine learning 2
1.2 Supervised learning 3
1.2.1 Classiﬁcation 3
1.2.2 Regression 8
1.3 Unsupervised learning 9
1.3.1 Discovering clusters 101.3.2 Discovering latent factors 111.3.3 Discovering graph structure 131.3.4 Matrix completion 14
1.4 Some basic concepts in machine learning 16
1.4.1 Parametric vs non-parametric models 161.4.2 A simple non-parametric classiﬁer: K-nearest neighbors 16
1.4.3 The curse of dimensionality 181.4.4 Parametric models for classiﬁcation and regression 191.4.5 Linear regression 191.4.6 Logistic regression 211.4.7 Overﬁtting 221.4.8 Model selection 221.4.9 No free lunch theorem 24
2 Probability 27
2.1 Introduction 272.2 A brief review of probability theory 28
2.2.1 Discrete random variables 282.2.2 Fundamental rules 282.2.3 Bayes rule 292.2.4 Independence and conditional independence 302.2.5 Continuous random variables 32
viii CONTENTS
2.2.6 Quantiles 33
2.2.7 Mean and variance 33
2.3 Some common discrete distributions 34
2.3.1 The binomial and Bernoulli distributions 342.3.2 The multinomial and multinoulli distributions 352.3.3 The Poisson distribution 372.3.4 The empirical distribution 37
2.4 Some common continuous distributions 38
2.4.1 Gaussian (normal) distribution 382.4.2 Degenerate pdf 392.4.3 The Laplace distribution 412.4.4 The gamma distribution 412.4.5 The beta distribution 422.4.6 Pareto distribution 43
2.5 Joint probability distributions 44
2.5.1 Covariance and correlation 442.5.2 The multivariate Gaussian 462.5.3 Multivariate Student tdistribution 46
2.5.4 Dirichlet distribution 47
2.6 Transformations of random variables 49
2.6.1 Linear transformations 492.6.2 General transformations 502.6.3 Central limit theorem 51
2.7 Monte Carlo approximation 52
2.7.1 Example: change of variables, the MC way 532.7.2 Example: estimating πby Monte Carlo integration 54
2.7.3 Accuracy of Monte Carlo approximation 54
2.8 Information theory 56
2.8.1 Entropy 562.8.2 KL divergence 572.8.3 Mutual information 59
3 Generative models for discrete data 65
3.1 Introduction 653.2 Bayesian concept learning 65
3.2.1 Likelihood 673.2.2 Prior 673.2.3 Posterior 683.2.4 Posterior predictive distribution 713.2.5 A more complex prior 72
3.3 The beta-binomial model 72
3.3.1 Likelihood 733.3.2 Prior 743.3.3 Posterior 753.3.4 Posterior predictive distribution 77
CONTENTS ix
3.4 The Dirichlet-multinomial model 78
3.4.1 Likelihood 79
3.4.2 Prior 793.4.3 Posterior 793.4.4 Posterior predictive 81
3.5 Naive Bayes classiﬁers 82
3.5.1 Model ﬁtting 833.5.2 Using the model for prediction 853.5.3 The log-sum-exp trick 863.5.4 Feature selection using mutual information 863.5.5 Classifying documents using bag of words 87
4 Gaussian models 97
4.1 Introduction 97
4.1.1 Notation 974.1.2 Basics 974.1.3 MLE for an MVN 994.1.4 Maximum entropy derivation of the Gaussian * 101
4.2 Gaussian discriminant analysis 101
4.2.1 Quadratic discriminant analysis (QDA) 1024.2.2 Linear discriminant analysis (LDA) 1034.2.3 Two-class LDA 1044.2.4 MLE for discriminant analysis 1064.2.5 Strategies for preventing overﬁtting 1064.2.6 Regularized LDA * 1074.2.7 Diagonal LDA 1084.2.8 Nearest shrunken centroids classiﬁer * 109
4.3 Inference in jointly Gaussian distributions 110
4.3.1 Statement of the result 1114.3.2 Examples 1114.3.3 Information form 1154.3.4 Proof of the result * 116
4.4 Linear Gaussian systems 119
4.4.1 Statement of the result 1194.4.2 Examples 1204.4.3 Proof of the result * 124
4.5 Digression: The Wishart distribution * 125
4.5.1 Inverse Wishart distribution 1264.5.2 Visualizing the Wishart distribution * 127
4.6 Inferring the parameters of an MVN 127
4.6.1 Posterior distribution of μ128
4.6.2 Posterior distribution of Σ* 128
4.6.3 Posterior distribution of μandΣ* 132
4.6.4 Sensor fusion with unknown precisions * 138
x CONTENTS
5 Bayesian statistics 149
5.1 Introduction 149
5.2 Summarizing posterior distributions 149
5.2.1 MAP estimation 1495.2.2 Credible intervals 1525.2.3 Inference for a difference in proportions 154
5.3 Bayesian model selection 155
5.3.1 Bayesian Occam’s razor 1565.3.2 Computing the marginal likelihood (evidence) 1585.3.3 Bayes factors 1635.3.4 Jeffreys-Lindley paradox * 164
5.4 Priors 165
5.4.1 Uninformative priors 1655.4.2 Jeffreys priors * 1665.4.3 Robust priors 1685.4.4 Mixtures of conjugate priors 168
5.5 Hierarchical Bayes 171
5.5.1 Example: modeling related cancer rates 171
5.6 Empirical Bayes 172
5.6.1 Example: beta-binomial model 1735.6.2 Example: Gaussian-Gaussian model 173
5.7 Bayesian decision theory 176
5.7.1 Bayes estimators for common loss functions 1775.7.2 The false positive vs false negative tradeoff 1805.7.3 Other topics * 184
6 Frequentist statistics 191
6.1 Introduction 1916.2 Sampling distribution of an estimator 191
6.2.1 Bootstrap 1926.2.2 Large sample theory for the MLE * 193
6.3 Frequentist decision theory 194
6.3.1 Bayes risk 1956.3.2 Minimax risk 1966.3.3 Admissible estimators 197
6.4 Desirable properties of estimators 200
6.4.1 Consistent estimators 2006.4.2 Unbiased estimators 2006.4.3 Minimum variance estimators 2016.4.4 The bias-variance tradeoff 202
6.5 Empirical risk minimization 204
6.5.1 Regularized risk minimization 2056.5.2 Structural risk minimization 2066.5.3 Estimating the risk using cross validation 2066.5.4 Upper bounding the risk using statistical learning theory * 209
CONTENTS xi
6.5.5 Surrogate loss functions 210
6.6 Pathologies of frequentist statistics * 211
6.6.1 Counter-intuitive behavior of conﬁdence intervals 212
6.6.2 p-values considered harmful 2136.6.3 The likelihood principle 2146.6.4 Why isn’t everyone a Bayesian? 215
7 Linear regression 217
7.1 Introduction 2177.2 Model speciﬁcation 2177.3 Maximum likelihood estimation (least squares) 217
7.3.1 Derivation of the MLE 2197.3.2 Geometric interpretation 2207.3.3 Convexity 221
7.4 Robust linear regression * 2237.5 Ridge regression 225
7.5.1 Basic idea 2257.5.2 Numerically stable computation * 2277.5.3 Connection with PCA * 2287.5.4 Regularization effects of big data 230
7.6 Bayesian linear regression 231
7.6.1 Computing the posterior 2327.6.2 Computing the posterior predictive 2337.6.3 Bayesian inference when σ
2is unknown * 234
7.6.4 EB for linear regression (evidence procedure) 238
8 Logistic regression 245
8.1 Introduction 2458.2 Model speciﬁcation 2458.3 Model ﬁtting 245
8.3.1 MLE 2468.3.2 Steepest descent 2478.3.3 Newton’s method 2498.3.4 Iteratively reweighted least squares (IRLS) 2508.3.5 Quasi-Newton (variable metric) methods 2518.3.6 /lscript
2regularization 252
8.3.7 Multi-class logistic regression 252
8.4 Bayesian logistic regression 254
8.4.1 Laplace approximation 2558.4.2 Derivation of the BIC 2558.4.3 Gaussian approximation for logistic regression 2568.4.4 Approximating the posterior predictive 2568.4.5 Residual analysis (outlier detection) * 260
8.5 Online learning and stochastic optimization 261
8.5.1 Online learning and regret minimization 262
xii CONTENTS
8.5.2 Stochastic optimization and risk minimization 262
8.5.3 The LMS algorithm 2648.5.4 The perceptron algorithm 2658.5.5 A Bayesian view 266
8.6 Generative vs discriminative classiﬁers 267
8.6.1 Pros and cons of each approach 2688.6.2 Dealing with missing data 2698.6.3 Fisher’s linear discriminant analysis (FLDA) * 271
9 Generalized linear models and the exponential family 281
9.1 Introduction 2819.2 The exponential family 281
9.2.1 Deﬁnition 2829.2.2 Examples 2829.2.3 Log partition function 2849.2.4 MLE for the exponential family 2869.2.5 Bayes for the exponential family * 2879.2.6 Maximum entropy derivation of the exponential family * 289
9.3 Generalized linear models (GLMs) 290
9.3.1 Basics 2909.3.2 ML and MAP estimation 2929.3.3 Bayesian inference 293
9.4 Probit regression 293
9.4.1 ML/MAP estimation using gradient-based optimization 2949.4.2 Latent variable interpretation 2949.4.3 Ordinal probit regression * 2959.4.4 Multinomial probit models * 295
9.5 Multi-task learning 296
9.5.1 Hierarchical Bayes for multi-task learning 2969.5.2 Application to personalized email spam ﬁltering 2969.5.3 Application to domain adaptation 2979.5.4 Other kinds of prior 297
9.6 Generalized linear mixed models * 298
9.6.1 Example: semi-parametric GLMMs for medical data 2989.6.2 Computational issues 300
9.7 Learning to rank * 300
9.7.1 The pointwise approach 3019.7.2 The pairwise approach 3019.7.3 The listwise approach 3029.7.4 Loss functions for ranking 303
10 Directed graphical models (Bayes nets) 307
10.1 Introduction 307
10.1.1 Chain rule 30710.1.2 Conditional independence 308
CONTENTS xiii
10.1.3 Graphical models 308
10.1.4 Graph terminology 30910.1.5 Directed graphical models 310
10.2 Examples 311
10.2.1 Naive Bayes classiﬁers 31110.2.2 Markov and hidden Markov models 31210.2.3 Medical diagnosis 31310.2.4 Genetic linkage analysis * 31510.2.5 Directed Gaussian graphical models * 318
10.3 Inference 31910.4 Learning 320
10.4.1 Plate notation 32010.4.2 Learning from complete data 32210.4.3 Learning with missing and/or latent variables 323
10.5 Conditional independence properties of DGMs 324
10.5.1 d-separation and the Bayes Ball algorithm (global Markov
properties) 324
10.5.2 Other Markov properties of DGMs 32710.5.3 Markov blanket and full conditionals 327
10.6 Inﬂuence (decision) diagrams * 328
11 Mixture models and the EM algorithm 337
11.1 Latent variable models 33711.2 Mixture models 337
11.2.1 Mixtures of Gaussians 33911.2.2 Mixture of multinoullis 34011.2.3 Using mixture models for clustering 34011.2.4 Mixtures of experts 342
11.3 Parameter estimation for mixture models 345
11.3.1 Unidentiﬁability 34611.3.2 Computing a MAP estimate is non-convex 347
11.4 The EM algorithm 348
11.4.1 Basic idea 34911.4.2 EM for GMMs 35011.4.3 EM for mixture of experts 35711.4.4 EM for DGMs with hidden variables 35811.4.5 EM for the Student distribution * 35911.4.6 EM for probit regression * 36211.4.7 Theoretical basis for EM * 36311.4.8 Online EM 36511.4.9 Other EM variants * 367
11.5 Model selection for latent variable models 370
11.5.1 Model selection for probabilistic models 37011.5.2 Model selection for non-probabilistic methods 370
11.6 Fitting models with missing data 372
xiv CONTENTS
11.6.1 EM for the MLE of an MVN with missing data 373
12 Latent linear models 381
12.1 Factor analysis 381
12.1.1 FA is a low rank parameterization of an MVN 381
12.1.2 Inference of the latent factors 38212.1.3 Unidentiﬁability 38312.1.4 Mixtures of factor analysers 38512.1.5 EM for factor analysis models 38612.1.6 Fitting FA models with missing data 387
12.2 Principal components analysis (PCA) 387
12.2.1 Classical PCA: statement of the theorem 38712.2.2 Proof * 38912.2.3 Singular value decomposition (SVD) 39212.2.4 Probabilistic PCA 39512.2.5 EM algorithm for PCA 396
12.3 Choosing the number of latent dimensions 398
12.3.1 Model selection for FA/PPCA 39812.3.2 Model selection for PCA 399
12.4 PCA for categorical data 40212.5 PCA for paired and multi-view data 404
12.5.1 Supervised PCA (latent factor regression) 40512.5.2 Partial least squares 40612.5.3 Canonical correlation analysis 407
12.6 Independent Component Analysis (ICA) 407
12.6.1 Maximum likelihood estimation 41012.6.2 The FastICA algorithm 41112.6.3 Using EM 41412.6.4 Other estimation principles * 415
13 Sparse linear models 421
13.1 Introduction 42113.2 Bayesian variable selection 422
13.2.1 The spike and slab model 42413.2.2 From the Bernoulli-Gaussian model to /lscript
0regularization 425
13.2.3 Algorithms 426
13.3/lscript1regularization: basics 429
13.3.1 Why does /lscript1regularization yield sparse solutions? 430
13.3.2 Optimality conditions for lasso 43113.3.3 Comparison of least squares, lasso, ridge and subset selection 43513.3.4 Regularization path 43613.3.5 Model selection 43913.3.6 Bayesian inference for linear models with Laplace priors 440
13.4/lscript
1regularization: algorithms 441
13.4.1 Coordinate descent 441
CONTENTS xv
13.4.2 LARS and other homotopy methods 441
13.4.3 Proximal and gradient projection methods 44213.4.4 EM for lasso 447
13.5/lscript
1regularization: extensions 449
13.5.1 Group Lasso 44913.5.2 Fused lasso 45413.5.3 Elastic net (ridge and lasso combined) 455
13.6 Non-convex regularizers 457
13.6.1 Bridge regression 45813.6.2 Hierarchical adaptive lasso 45813.6.3 Other hierarchical priors 462
13.7 Automatic relevance determination (ARD)/sparse Bayesian learning (SBL) 463
13.7.1 ARD for linear regression 46313.7.2 Whence sparsity? 46513.7.3 Connection to MAP estimation 46513.7.4 Algorithms for ARD * 46613.7.5 ARD for logistic regression 468
13.8 Sparse coding * 468
13.8.1 Learning a sparse coding dictionary 46913.8.2 Results of dictionary learning from image patches 47013.8.3 Compressed sensing 47213.8.4 Image inpainting and denoising 472
14 Kernels 479
14.1 Introduction 47914.2 Kernel functions 479
14.2.1 RBF kernels 48014.2.2 Kernels for comparing documents 48014.2.3 Mercer (positive deﬁnite) kernels 48114.2.4 Linear kernels 48214.2.5 Matern kernels 48214.2.6 String kernels 48314.2.7 Pyramid match kernels 48414.2.8 Kernels derived from probabilistic generative models 485
14.3 Using kernels inside GLMs 486
14.3.1 Kernel machines 48614.3.2 L1VMs, RVMs, and other sparse vector machines 487
14.4 The kernel trick 488
14.4.1 Kernelized nearest neighbor classiﬁcation 48914.4.2 Kernelized K-medoids clustering 48914.4.3 Kernelized ridge regression 49214.4.4 Kernel PCA 493
14.5 Support vector machines (SVMs) 496
14.5.1 SVMs for regression 49714.5.2 SVMs for classiﬁcation 498
xvi CONTENTS
14.5.3 Choosing C504
14.5.4 Summary of key points 504
14.5.5 A probabilistic interpretation of SVMs 505
14.6 Comparison of discriminative kernel methods 50514.7 Kernels for building generative models 507
14.7.1 Smoothing kernels 50714.7.2 Kernel density estimation (KDE) 50814.7.3 From KDE to KNN 50914.7.4 Kernel regression 51014.7.5 Locally weighted regression 512
15 Gaussian processes 515
15.1 Introduction 51515.2 GPs for regression 516
15.2.1 Predictions using noise-free observations 51715.2.2 Predictions using noisy observations 51815.2.3 Effect of the kernel parameters 51915.2.4 Estimating the kernel parameters 52115.2.5 Computational and numerical issues * 52415.2.6 Semi-parametric GPs * 524
15.3 GPs meet GLMs 525
15.3.1 Binary classiﬁcation 52515.3.2 Multi-class classiﬁcation 52815.3.3 GPs for Poisson regression 531
15.4 Connection with other methods 532
15.4.1 Linear models compared to GPs 53215.4.2 Linear smoothers compared to GPs 53315.4.3 SVMs compared to GPs 53415.4.4 L1VM and RVMs compared to GPs 53415.4.5 Neural networks compared to GPs 53515.4.6 Smoothing splines compared to GPs * 53615.4.7 RKHS methods compared to GPs * 538
15.5 GP latent variable model 54015.6 Approximation methods for large datasets 542
16 Adaptive basis function models 543
16.1 Introduction 54316.2 Classiﬁcation and regression trees (CART) 544
16.2.1 Basics 54416.2.2 Growing a tree 54516.2.3 Pruning a tree 54916.2.4 Pros and cons of trees 55016.2.5 Random forests 55016.2.6 CART compared to hierarchical mixture of experts * 551
16.3 Generalized additive models 552
CONTENTS xvii
16.3.1 Backﬁtting 552
16.3.2 Computational efficiency 55316.3.3 Multivariate adaptive regression splines (MARS) 553
16.4 Boosting 554
16.4.1 Forward stagewise additive modeling 55516.4.2 L2boosting 55716.4.3 AdaBoost 55816.4.4 LogitBoost 55916.4.5 Boosting as functional gradient descent 56016.4.6 Sparse boosting 56116.4.7 Multivariate adaptive regression trees (MART) 56216.4.8 Why does boosting work so well? 56216.4.9 A Bayesian view 563
16.5 Feedforward neural networks (multilayer perceptrons) 563
16.5.1 Convolutional neural networks 56416.5.2 Other kinds of neural networks 56816.5.3 A brief history of the ﬁeld 56816.5.4 The backpropagation algorithm 56916.5.5 Identiﬁability 57216.5.6 Regularization 57216.5.7 Bayesian inference * 576
16.6 Ensemble learning 580
16.6.1 Stacking 58016.6.2 Error-correcting output codes 58116.6.3 Ensemble learning is not equivalent to Bayes model averaging 581
16.7 Experimental comparison 582
16.7.1 Low-dimensional features 58216.7.2 High-dimensional features 583
16.8 Interpreting black-box models 585
17 Markov and hidden Markov models 589
17.1 Introduction 58917.2 Markov models 589
17.2.1 Transition matrix 58917.2.2 Application: Language modeling 59117.2.3 Stationary distribution of a Markov chain * 59617.2.4 Application: Google’s PageRank algorithm for web page ranking * 600
17.3 Hidden Markov models 603
17.3.1 Applications of HMMs 604
17.4 Inference in HMMs 606
17.4.1 Types of inference problems for temporal models 60617.4.2 The forwards algorithm 60917.4.3 The forwards-backwards algorithm 61017.4.4 The Viterbi algorithm 61217.4.5 Forwards ﬁltering, backwards sampling 616
xviii CONTENTS
17.5 Learning for HMMs 617
17.5.1 Training with fully observed data 617
17.5.2 EM for HMMs (the Baum-Welch algorithm) 61817.5.3 Bayesian methods for “ﬁtting” HMMs * 62017.5.4 Discriminative training 62017.5.5 Model selection 621
17.6 Generalizations of HMMs 621
17.6.1 Variable duration (semi-Markov) HMMs 62217.6.2 Hierarchical HMMs 62417.6.3 Input-output HMMs 62517.6.4 Auto-regressive and buried HMMs 62617.6.5 Factorial HMM 62717.6.6 Coupled HMM and the inﬂuence model 62817.6.7 Dynamic Bayesian networks (DBNs) 628
18 State space models 631
18.1 Introduction 63118.2 Applications of SSMs 632
18.2.1 SSMs for object tracking 63218.2.2 Robotic SLAM 63318.2.3 Online parameter learning using recursive least squares 63618.2.4 SSM for time series forecasting * 637
18.3 Inference in LG-SSM 640
18.3.1 The Kalman ﬁltering algorithm 64018.3.2 The Kalman smoothing algorithm 643
18.4 Learning for LG-SSM 646
18.4.1 Identiﬁability and numerical stability 64618.4.2 Training with fully observed data 64718.4.3 EM for LG-SSM 64718.4.4 Subspace methods 64718.4.5 Bayesian methods for “ﬁtting” LG-SSMs 647
18.5 Approximate online inference for non-linear, non-Gaussian SSMs 647
18.5.1 Extended Kalman ﬁlter (EKF) 64818.5.2 Unscented Kalman ﬁlter (UKF) 65018.5.3 Assumed density ﬁltering (ADF) 652
18.6 Hybrid discrete/continuous SSMs 655
18.6.1 Inference 65618.6.2 Application: data association and multi-target tracking 65818.6.3 Application: fault diagnosis 65918.6.4 Application: econometric forecasting 660
19 Undirected graphical models (Markov random ﬁelds) 661
19.1 Introduction 66119.2 Conditional independence properties of UGMs 661
19.2.1 Key properties 661
CONTENTS xix
19.2.2 An undirected alternative to d-separation 663
19.2.3 Comparing directed and undirected graphical models 664
19.3 Parameterization of MRFs 665
19.3.1 The Hammersley-Clifford theorem 66519.3.2 Representing potential functions 667
19.4 Examples of MRFs 668
19.4.1 Ising model 66819.4.2 Hopﬁeld networks 66919.4.3 Potts model 67119.4.4 Gaussian MRFs 67219.4.5 Markov logic networks * 674
19.5 Learning 676
19.5.1 Training maxent models using gradient methods 67619.5.2 Training partially observed maxent models 67719.5.3 Approximate methods for computing the MLEs of MRFs 67819.5.4 Pseudo likelihood 67819.5.5 Stochastic maximum likelihood 67919.5.6 Feature induction for maxent models * 68019.5.7 Iterative proportional ﬁtting (IPF) * 681
19.6 Conditional random ﬁelds (CRFs) 684
19.6.1 Chain-structured CRFs, MEMMs and the label-bias problem 68419.6.2 Applications of CRFs 68619.6.3 CRF training 692
19.7 Structural SVMs 693
19.7.1 SSVMs: a probabilistic view 69319.7.2 SSVMs: a non-probabilistic view 69519.7.3 Cutting plane methods for ﬁtting SSVMs 69819.7.4 Online algorithms for ﬁtting SSVMs 70019.7.5 Latent structural SVMs 701
20 Exact inference for graphical models 707
20.1 Introduction 70720.2 Belief propagation for trees 707
20.2.1 Serial protocol 70720.2.2 Parallel protocol 70920.2.3 Gaussian BP * 71020.2.4 Other BP variants * 712
20.3 The variable elimination algorithm 714
20.3.1 The generalized distributive law * 71720.3.2 Computational complexity of VE 71720.3.3 A weakness of VE 720
20.4 The junction tree algorithm * 720
20.4.1 Creating a junction tree 72020.4.2 Message passing on a junction tree 72220.4.3 Computational complexity of JTA 725
xx CONTENTS
20.4.4 JTA generalizations * 726
20.5 Computational intractability of exact inference in the worst case 726
20.5.1 Approximate inference 727
21 Variational inference 731
21.1 Introduction 731
21.2 Variational inference 732
21.2.1 Alternative interpretations of the variational objective 73321.2.2 Forward or reverse KL? * 733
21.3 The mean ﬁeld method 735
21.3.1 Derivation of the mean ﬁeld update equations 73621.3.2 Example: mean ﬁeld for the Ising model 737
21.4 Structured mean ﬁeld * 739
21.4.1 Example: factorial HMM 740
21.5 Variational Bayes 742
21.5.1 Example: VB for a univariate Gaussian 74221.5.2 Example: VB for linear regression 746
21.6 Variational Bayes EM 749
21.6.1 Example: VBEM for mixtures of Gaussians * 750
21.7 Variational message passing and VIBES 75621.8 Local variational bounds * 756
21.8.1 Motivating applications 75621.8.2 Bohning’s quadratic bound to the log-sum-exp function 75821.8.3 Bounds for the sigmoid function 76021.8.4 Other bounds and approximations to the log-sum-exp function * 76221.8.5 Variational inference based on upper bounds 763
22 More variational inference 767
22.1 Introduction 76722.2 Loopy belief propagation: algorithmic issues 767
22.2.1 A brief history 76722.2.2 LBP on pairwise models 76822.2.3 LBP on a factor graph 76922.2.4 Convergence 77122.2.5 Accuracy of LBP 77422.2.6 Other speedup tricks for LBP * 775
22.3 Loopy belief propagation: theoretical issues * 776
22.3.1 UGMs represented in exponential family form 77622.3.2 The marginal polytope 77722.3.3 Exact inference as a variational optimization problem 77822.3.4 Mean ﬁeld as a variational optimization problem 77922.3.5 LBP as a variational optimization problem 77922.3.6 Loopy BP vs mean ﬁeld 783
22.4 Extensions of belief propagation * 783
22.4.1 Generalized belief propagation 783
CONTENTS xxi
22.4.2 Convex belief propagation 785
22.5 Expectation propagation 787
22.5.1 EP as a variational inference problem 788
22.5.2 Optimizing the EP objective using moment matching 78922.5.3 EP for the clutter problem 79122.5.4 LBP is a special case of EP 79222.5.5 Ranking players using TrueSkill 79322.5.6 Other applications of EP 799
22.6 MAP state estimation 799
22.6.1 Linear programming relaxation 79922.6.2 Max-product belief propagation 80022.6.3 Graphcuts 80122.6.4 Experimental comparison of graphcuts and BP 80422.6.5 Dual decomposition 806
23 Monte Carlo inference 815
23.1 Introduction 81523.2 Sampling from standard distributions 815
23.2.1 Using the cdf 81523.2.2 Sampling from a Gaussian (Box-Muller method) 817
23.3 Rejection sampling 817
23.3.1 Basic idea 81723.3.2 Example 81823.3.3 Application to Bayesian statistics 81923.3.4 Adaptive rejection sampling 81923.3.5 Rejection sampling in high dimensions 820
23.4 Importance sampling 820
23.4.1 Basic idea 82023.4.2 Handling unnormalized distributions 82123.4.3 Importance sampling for a DGM: likelihood weighting 82223.4.4 Sampling importance resampling (SIR) 822
23.5 Particle ﬁltering 823
23.5.1 Sequential importance sampling 82423.5.2 The degeneracy problem 82523.5.3 The resampling step 82523.5.4 The proposal distribution 82723.5.5 Application: robot localization 82823.5.6 Application: visual object tracking 82823.5.7 Application: time series forecasting 831
23.6 Rao-Blackwellised particle ﬁltering (RBPF) 831
23.6.1 RBPF for switching LG-SSMs 83123.6.2 Application: tracking a maneuvering target 83223.6.3 Application: Fast SLAM 834
24 Markov chain Monte Carlo (MCMC) inference 837
xxii CONTENTS
24.1 Introduction 837
24.2 Gibbs sampling 838
24.2.1 Basic idea 83824.2.2 Example: Gibbs sampling for the Ising model 83824.2.3 Example: Gibbs sampling for inferring the parameters of a GMM 84024.2.4 Collapsed Gibbs sampling * 84124.2.5 Gibbs sampling for hierarchical GLMs 84424.2.6 BUGS and JAGS 84624.2.7 The Imputation Posterior (IP) algorithm 84724.2.8 Blocking Gibbs sampling 847
24.3 Metropolis Hastings algorithm 848
24.3.1 Basic idea 84824.3.2 Gibbs sampling is a special case of MH 84924.3.3 Proposal distributions 85024.3.4 Adaptive MCMC 85324.3.5 Initialization and mode hopping 85424.3.6 Why MH works * 85424.3.7 Reversible jump (trans-dimensional) MCMC * 855
24.4 Speed and accuracy of MCMC 856
24.4.1 The burn-in phase 85624.4.2 Mixing rates of Markov chains * 85724.4.3 Practical convergence diagnostics 85824.4.4 Accuracy of MCMC 86024.4.5 How many chains? 862
24.5 Auxiliary variable MCMC * 863
24.5.1 Auxiliary variable sampling for logistic regression 86324.5.2 Slice sampling 86424.5.3 Swendsen Wang 86624.5.4 Hybrid/Hamiltonian MCMC * 868
24.6 Annealing methods 868
24.6.1 Simulated annealing 86924.6.2 Annealed importance sampling 87124.6.3 Parallel tempering 871
24.7 Approximating the marginal likelihood 872
24.7.1 The candidate method 87224.7.2 Harmonic mean estimate 87224.7.3 Annealed importance sampling 873
25 Clustering 875
25.1 Introduction 875
25.1.1 Measuring (dis)similarity 87525.1.2 Evaluating the output of clustering methods * 876
25.2 Dirichlet process mixture models 879
25.2.1 From ﬁnite to inﬁnite mixture models 87925.2.2 The Dirichlet process 882
CONTENTS xxiii
25.2.3 Applying Dirichlet processes to mixture modeling 885
25.2.4 Fitting a DP mixture model 886
25.3 Affinity propagation 88725.4 Spectral clustering 890
25.4.1 Graph Laplacian 89125.4.2 Normalized graph Laplacian 89225.4.3 Example 893
25.5 Hierarchical clustering 893
25.5.1 Agglomerative clustering 89525.5.2 Divisive clustering 89825.5.3 Choosing the number of clusters 89925.5.4 Bayesian hierarchical clustering 899
25.6 Clustering datapoints and features 901
25.6.1 Biclustering 90325.6.2 Multi-view clustering 903
26 Graphical model structure learning 907
26.1 Introduction 90726.2 Structure learning for knowledge discovery 908
26.2.1 Relevance networks 90826.2.2 Dependency networks 909
26.3 Learning tree structures 910
26.3.1 Directed or undirected tree? 91126.3.2 Chow-Liu algorithm for ﬁnding the ML tree structure 91226.3.3 Finding the MAP forest 91226.3.4 Mixtures of trees 914
26.4 Learning DAG structures 914
26.4.1 Markov equivalence 91426.4.2 Exact structural inference 91626.4.3 Scaling up to larger graphs 920
26.5 Learning DAG structure with latent variables 922
26.5.1 Approximating the marginal likelihood when we have missing data 92226.5.2 Structural EM 92526.5.3 Discovering hidden variables 92626.5.4 Case study: Google’s Rephil 92826.5.5 Structural equation models * 929
26.6 Learning causal DAGs 931
26.6.1 Causal interpretation of DAGs 93126.6.2 Using causal DAGs to resolve Simpson’s paradox 93326.6.3 Learning causal DAG structures 935
26.7 Learning undirected Gaussian graphical models 938
26.7.1 MLE for a GGM 93826.7.2 Graphical lasso 93926.7.3 Bayesian inference for GGM structure * 94126.7.4 Handling non-Gaussian data using copulas * 942
xxiv CONTENTS
26.8 Learning undirected discrete graphical models 942
26.8.1 Graphical lasso for MRFs/CRFs 942
26.8.2 Thin junction trees 944
27 Latent variable models for discrete data 945
27.1 Introduction 94527.2 Distributed state LVMs for discrete data 946
27.2.1 Mixture models 94627.2.2 Exponential family PCA 94727.2.3 LDA and mPCA 94827.2.4 GaP model and non-negative matrix factorization 949
27.3 Latent Dirichlet allocation (LDA) 950
27.3.1 Basics 95027.3.2 Unsupervised discovery of topics 95327.3.3 Quantitatively evaluating LDA as a language model 95327.3.4 Fitting using (collapsed) Gibbs sampling 95527.3.5 Example 95627.3.6 Fitting using batch variational inference 95727.3.7 Fitting using online variational inference 95927.3.8 Determining the number of topics 960
27.4 Extensions of LDA 961
27.4.1 Correlated topic model 96127.4.2 Dynamic topic model 96227.4.3 LDA-HMM 96327.4.4 Supervised LDA 967
27.5 LVMs for graph-structured data 970
27.5.1 Stochastic block model 97127.5.2 Mixed membership stochastic block model 97327.5.3 Relational topic model 974
27.6 LVMs for relational data 975
27.6.1 Inﬁnite relational model 97627.6.2 Probabilistic matrix factorization for collaborative ﬁltering 979
27.7 Restricted Boltzmann machines (RBMs) 983
27.7.1 Varieties of RBMs 98527.7.2 Learning RBMs 98727.7.3 Applications of RBMs 991
28 Deep learning 995
28.1 Introduction 99528.2 Deep generative models 995
28.2.1 Deep directed networks 99628.2.2 Deep Boltzmann machines 99628.2.3 Deep belief networks 99728.2.4 Greedy layer-wise learning of DBNs 998
28.3 Deep neural networks 999
CONTENTS xxv
28.3.1 Deep multi-layer perceptrons 999
28.3.2 Deep auto-encoders 100028.3.3 Stacked denoising auto-encoders 1001
28.4 Applications of deep networks 1001
28.4.1 Handwritten digit classiﬁcation using DBNs 100128.4.2 Data visualization and feature discovery using deep auto-encoders 100228.4.3 Information retrieval using deep auto-encoders (semantic hashing) 100328.4.4 Learning audio features using 1d convolutional DBNs 100428.4.5 Learning image features using 2d convolutional DBNs 1005
28.5 Discussion 1005
Notation 1009
Bibliography 1015
Indexes 1047
Index to code 1047Index to keywords 1050

Preface
Introduction
With the ever increasing amounts of data in electronic form, the need for automated methods
for data analysis continues to grow. The goal of machine learning is to develop methods thatcan automatically detect patterns in data, and then to use the uncovered patterns to predictfuture data or other outcomes of interest. Machine learning is thus closely related to the ﬁeldsof statistics and data mining, but differs slightly in terms of its emphasis and terminology. Thisbook provides a detailed introduction to the ﬁeld, and includes worked examples drawn fromapplication domains such as molecular biology, text processing, computer vision, and robotics.
Target audience
This book is suitable for upper-level undergraduate students and beginning graduate students incomputer science, statistics, electrical engineering, econometrics, or any one else who has theappropriate mathematical background. Speciﬁcally, the reader is assumed to already be familiarwith basic multivariate calculus, probability, linear algebra, and computer programming. Priorexposure to statistics is helpful but not necessary.
A probabilistic approach
This books adopts the view that the best way to make machines that can learn from data is touse the tools of probability theory, which has been the mainstay of statistics and engineering forcenturies. Probability theory can be applied to any problem involving uncertainty. In machinelearning, uncertainty comes in many forms: what is the best prediction (or decision) given somedata? what is the best model given some data? what measurement should I perform next? etc.
The systematic application of probabilistic reasoning to all inferential problems, including
inferring parameters of statistical models, is sometimes called a Bayesian approach. However,this term tends to elicit very strong reactions (either positive or negative, depending on whoyou ask), so we prefer the more neutral term “probabilistic approach”. Besides, we will oftenuse techniques such as maximum likelihood estimation, which are not Bayesian methods, butcertainly fall within the probabilistic paradigm.
Rather than describing a cookbook of different heuristic methods, this book stresses a princi-
pled model-based approach to machine learning. For any given model, a variety of algorithms
xxviii Preface
can often be applied. Conversely, any given algorithm can often be applied to a variety of
models. This kind of modularity, where we distinguish model from algorithm, is good pedagogyand good engineering.
We will often use the language of graphical models to specify our models in a concise and
intuitive way. In addition to aiding comprehension, the graph structure aids in developingefficient algorithms, as we will see. However, this book is not primarily about graphical models;it is about probabilistic modeling in general.
A practical approach
Nearly all of the methods described in this book have been implemented in a MATLABsoftware
package called PMTK, which stands for probabilistic modeling toolkit. This is freely available
from pmtk3.googlecode .com(the digit 3 refers to the third edition of the toolkit, which is the
one used in this version of the book). There are also a variety of supporting ﬁles, written by otherpeople, available at pmtksupport .googlecode .com. These will be downloaded automatically,
if you follow the setup instructions described on the PMTK website.
MATLABis a high-level, interactive scripting language ideally suited to numerical computation
and data visualization, and can be purchased from www.mathworks .com. Some of the code
requires the Statistics toolbox, which needs to be purchased separately. There is also a freeversion of Matlab called Octave, available at http://www .gnu.org/software/octave/ , which
supports most of the functionality of MATLAB. Some (but not all) of the code in this book also
works in Octave. See the PMTK website for details.
PMTK was used to generate many of the ﬁgures in this book; the source code for these ﬁgures
is included on the PMTK website, allowing the reader to easily see the effects of changing thedata or algorithm or parameter settings. The book refers to ﬁles by name, e.g., naiveBayesFit .
In order to ﬁnd the corresponding ﬁle, you can use two methods: within Matlab you can typewhich naiveBayesFit and it will return the full path to the ﬁle; or, if you do not have Matlab
but want to read the source code anyway, you can use your favorite search engine, which shouldreturn the corresponding ﬁle from the pmtk3.googlecode .comwebsite.
Details on how to use PMTK can be found on the website, which will be udpated over time.
Details on the underlying theory behind these methods can be found in this book.
Acknowledgments
A book this large is obviously a team effort. I would especially like to thank the following people:my wife Margaret, for keeping the home ﬁres burning as I toiled away in my office for the last sixyears; Matt Dunham, who created many of the ﬁgures in this book, and who wrote much of thecode in PMTK; Baback Moghaddam, who gave extremely detailed feedback on every page of anearlier draft of the book; Chris Williams, who also gave very detailed feedback; Cody Severinskiand Wei-Lwun Lu, who assisted with ﬁgures; generations of UBC students, who gave helpfulcomments on earlier drafts; Daphne Koller, Nir Friedman, and Chris Manning, for letting me usetheir latex style ﬁles; Stanford University, Google Research and Skyline College for hosting meduring part of my sabbatical; and various Canadian funding agencies (NSERC, CRC and CIFAR)who have supported me ﬁnancially over the years.
In addition, I would like to thank the following people for giving me helpful feedback on
Preface xxix
parts of the book, and/or for sharing ﬁgures, code, exercises or even (in some cases) text: David
Blei, Hannes Bretschneider, Greg Corrado, Arnaud Doucet, Mario Figueiredo, Nando de Freitas,Mark Girolami, Gabriel Goh, Tom Griffiths, Katherine Heller, Geoff Hinton, Aapo Hyvarinen,Tommi Jaakkola, Mike Jordan, Charles Kemp, Emtiyaz Khan, Bonnie Kirkpatrick, Daphne Koller,Zico Kolter, Honglak Lee, Julien Mairal, Andrew McPherson, Tom Minka, Ian Nabney, ArthurPope, Carl Rassmussen, Ryan Rifkin, Ruslan Salakhutdinov, Mark Schmidt, Daniel Selsam, DavidSontag, Erik Sudderth, Josh Tenenbaum, Kai Yu, Martin Wainwright, Yair Weiss.
Kevin Patrick Murphy
Palo Alto, CaliforniaJune 2012

1Introduction
1.1 Machine learning: what and why?
We are drowning in information and starving for knowledge. — John Naisbitt.
We are entering the era of big data. For example, there are about 1 trillion web pages1; one
hour of video is uploaded to YouTube every second, amounting to 10 years of content every
day2; the genomes of 1000s of people, each of which has a length of 3.8×109base pairs, have
been sequenced by various labs; Walmart handles more than 1M transactions per hour and hasdatabases containing more than 2.5 petabytes (2.5 ×10
15) of information (Cukier 2010); and so
on.
This deluge of data calls for automated methods of data analysis, which is what machine
learning provides. In particular, we deﬁne machine learning as a set of methods that can
automatically detect patterns in data, and then use the uncovered patterns to predict futuredata, or to perform other kinds of decision making under uncertainty (such as planning how tocollect more data!).
This books adopts the view that the best way to solve such problems is to use the tools
of probability theory. Probability theory can be applied to any problem involving uncertainty.In machine learning, uncertainty comes in many forms: what is the best prediction about thefuture given some past data? what is the best model to explain some data? what measurementshould I perform next? etc. The probabilistic approach to machine learning is closely related tothe ﬁeld of statistics, but differs slightly in terms of its emphasis and terminology
3.
We will describe a wide variety of probabilistic models, suitable for a wide variety of data and
tasks. We will also describe a wide variety of algorithms for learning and using such models.The goal is not to develop a cook book of ad hoc techiques, but instead to present a uniﬁedview of the ﬁeld through the lens of probabilistic modeling and inference. Although we will payattention to computational efficiency, details on how to scale these methods to truly massivedatasets are better described in other books, such as (Rajaraman and Ullman 2011; Bekkermanet al. 2011).
1.http://googleblog .blogspot .com/2008/07/we-knew-web-was-big .html
2. Source: http://www .youtube .com/t/press_statistics .
3. Rob Tibshirani, a statistician at Stanford university, has created an amusing comparison between machine learning
and statistics, available at http://www-stat .stanford .edu/~tibs/stat315a/glossary .pdf.
2 Chapter 1. Introduction
It should be noted, however, that even when one has an apparently massive data set, the
effective number of data points for certain cases of interest might be quite small. In fact, data
across a variety of domains exhibits a property known as the long tail, which means that a
few things (e.g., words) are very common, but most things are quite rare (see Section 2.4.6 fordetails). For example, 20% of Google searches each day have never been seen before
4. This
means that the core statistical issues that we discuss in this book, concerning generalizing fromrelatively small samples sizes, are still very relevant even in the big data era.
1.1.1 Types of machine learning
Machine learning is usually divided into two main types. In the predictive orsupervised
learning approach, the goal is to learn a mapping from inputs xto outputs y, given a labeled
set of input-output pairs D={(xi,yi)}N
i=1.H e r eDis called the training set, and Nis the
number of training examples.
In the simplest setting, each training input xiis aD-dimensional vector of numbers, rep-
resenting, say, the height and weight of a person. These are called features, attributes or
covariates. In general, however, xicould be a complex structured object, such as an image, a
sentence, an email message, a time series, a molecular shape, a graph, etc.
Similarly the form of the output or response variable can in principle be anything, but
most methods assume that yiis a categorical ornominal variable from some ﬁnite set,
yi∈{1,...,C}(such as male or female), or that yiis a real-valued scalar (such as income
level). When yiis categorical, the problem is known as classiﬁcation orpattern recognition,
and when yiis real-valued, the problem is known as regression. Another variant, known as
ordinal regression , occurs where label space Yhas some natural ordering, such as grades A–F.
The second main type of machine learning is the descriptive orunsupervised learning
approach. Here we are only given inputs, D={xi}Ni=1, and the goal is to ﬁnd “interesting
patterns” in the data. This is sometimes called knowledge discovery. This is a much less
well-deﬁned problem, since we are not told what kinds of patterns to look for, and there is no
obvious error metric to use (unlike supervised learning, where we can compare our predictionofyfor a given xto the observed value).
There is a third type of machine learning, known as reinforcement learning, which is
somewhat less commonly used. This is useful for learning how to act or behave when givenoccasional reward or punishment signals. (For example, consider how a baby learns to walk.)Unfortunately, RL is beyond the scope of this book, although we do discuss decision theoryin Section 5.7, which is the basis of RL. See e.g., (Kaelbling et al. 1996; Sutton and Barto 1998;Russell and Norvig 2010; Szepesvari 2010; Wiering and van Otterlo 2012) for more informationon RL.
4.
http://certifiedknowledge .org/blog/are-search-queries-becoming-even-more-unique-statistic
s-from-google .
1.2. Supervised learning 3
(a)
 (b)
Figure 1.1 Left: Some labeled training examples of colored shapes, along with 3 unlabeled test cases.
Right: Representing the training data as an N×Ddesign matrix. Row irepresents the feature vector xi.
The last column is the label, yi∈{0,1}. Based on a ﬁgure by Leslie Kaelbling.
1.2 Supervised learning
We begin our investigation of machine learning by discussing supervised learning, which is the
form of ML most widely used in practice.
1.2.1 Classiﬁcation
In this section, we discuss classiﬁcation. Here the goal is to learn a mapping from inputs x
to outputs y,w h e r ey∈{1,...,C}, withCbeing the number of classes. If C=2, this is
called binary classiﬁcation (in which case we often assume y∈{0,1}); ifC>2, this is called
multiclass classiﬁcation . If the class labels are not mutually exclusive (e.g., somebody may be
classiﬁed as tall and strong), we call it multi-label classiﬁcation , but this is best viewed as
predicting multiple related binary class labels (a so-called multiple output model ). When we
use the term “classiﬁcation”, we will mean multiclass classiﬁcation with a single output, unless
we state otherwise.
One way to formalize the problem is as function approximation . We assume y=f(x)for
some unknown function f, and the goal of learning is to estimate the function fgiven a labeled
training set, and then to make predictions using ˆy=ˆf(x). (We use the hat symbol to denote
an estimate.) Our main goal is to make predictions on novel inputs, meaning ones that we have
not seen before (this is called generalization ), since predicting the response on the training set
is easy (we can just look up the answer).
1.2.1.1 Example
As a simple toy example of classiﬁcation, consider the problem illustrated in Figure 1.1(a). We
have two classes of object which correspond to labels 0 and 1. The inputs are colored shapes.
These have been described by a set of Dfeatures or attributes, which are stored in an N×D
design matrix X, shown in Figure 1.1(b). The input features xcan be discrete, continuous or a
combination of the two. In addition to the inputs, we have a vector of training labels y.
In Figure 1.1, the test cases are a blue crescent, a yellow circle and a blue arrow. None of
these have been seen before. Thus we are required to generalize beyond the training set. A
4 Chapter 1. Introduction
reasonable guess is that blue crescent should be y=1, since all blue shapes are labeled 1 in the
training set. The yellow circle is harder to classify, since some yellow things are labeled y=1
and some are labeled y=0, and some circles are labeled y=1and some y=0. Consequently
it is not clear what the right label should be in the case of the yellow circle. Similarly, the correct
label for the blue arrow is unclear.
1.2.1.2 The need for probabilistic predictions
To handle ambiguous cases, such as the yellow circle above, it is desirable to return a probability.The reader is assumed to already have some familiarity with basic concepts in probability. Ifnot, please consult Chapter 2 for a refresher, if necessary.
We will denote the probability distribution over possible labels, given the input vector xand
training set Dbyp(y|x,D). In general, this represents a vector of length C. (If there are just two
classes, it is sufficient to return the single number p(y=1|x,D), sincep(y=1|x,D)+p(y=
0|x,D)=1.) In our notation, we make explicit that the probability is conditional on the test
inputx, as well as the training set D, by putting these terms on the right hand side of the
conditioning bar |. We are also implicitly conditioning on the form of model that we use to make
predictions. When choosing between different models, we will make this assumption explicit bywritingp(y|x,D,M),w h e r eMdenotes the model. However, if the model is clear from context,
we will drop Mfrom our notation for brevity.
Given a probabilistic output, we can always compute our “best guess” as to the “true label”
using
ˆy=ˆf(x)=
Cargmax
c=1p(y=c|x,D) (1.1)
This corresponds to the most probable class label, and is called the modeof the distribution
p(y|x,D); it is also known as a MAP estimate (MAP stands for maximum a posteriori). Using
the most probable label makes intuitive sense, but we will give a more formal justiﬁcation forthis procedure in Section 5.7.
Now consider a case such as the yellow circle, where p(ˆy|x,D)is far from 1.0. In such a
case we are not very conﬁdent of our answer, so it might be better to say “I don’t know” insteadof returning an answer that we don’t really trust. This is particularly important in domainssuch as medicine and ﬁnance where we may be risk averse, as we explain in Section 5.7.Another application where it is important to assess risk is when playing TV game shows, suchas Jeopardy. In this game, contestants have to solve various word puzzles and answer a varietyof trivia questions, but if they answer incorrectly, they lose money. In 2011, IBM unveiled acomputer system called Watson which beat the top human Jeopardy champion. Watson uses avariety of interesting techniques (Ferrucci et al. 2010), but the most pertinent one for our presentpurposes is that it contains a module that estimates how conﬁdent it is of its answer. The systemonly chooses to “buzz in” its answer if sufficiently conﬁdent it is correct. Similarly, Google has asystem known as SmartASS (ad selection system) that predicts the probability you will click onan ad based on your search history and other user and ad-speciﬁc features (Metz 2010). Thisprobability is known as the click-through rate orCTR, and can be used to maximize expected
proﬁt. We will discuss some of the basic principles behind systems such as SmartASS later inthis book.
1.2. Supervised learning 5
wordsdocuments
10 20 30 40 50 60 70 80 90 100100
200
300
400
500
600
700
800
900
1000
Figure 1.2 Subset of size 16242 x 100 of the 20-newsgroups data. We only show 1000 rows, for clarity.
Each row is a document (represented as a bag-of-words bit vector), each column is a word. The red
lines separate the 4 classes, which are (in descending order) comp, rec, sci, talk (these are the titles of
USENET groups). We can see that there are subsets of words whose presence or absence is indicative
of the class. The data is available from http://cs .nyu.edu/~roweis/data .html. Figure generated by
newsgroupsVisualize .
1.2.1.3 Real-world applications
Classiﬁcation is probably the most widely used form of machine learning, and has been used
to solve many interesting and often difficult real-world problems. We have already mentioned
some important applciations. We give a few more examples below.
Document classiﬁcation and email spam ﬁltering
Indocument classiﬁcation , the goal is to classify a document, such as a web page or email
message, into one of Cclasses, that is, to compute p(y=c|x,D),w h e r exis some represen-
tation of the text. A special case of this is email spam ﬁltering , where the classes are spam
y=1or hamy=0.
Most classiﬁers assume that the input vector xhas a ﬁxed size. A common way to represent
variable-length documents in feature-vector format is to use a bag of words representation.
This is explained in detail in Section 3.4.4.1, but the basic idea is to deﬁne xij=1iff wordj
occurs in document i. If we apply this transformation to every document in our data set, we get
a binary document ×word co-occurrence matrix: see Figure 1.2 for an example. Essentially the
document classiﬁcation problem has been reduced to one that looks for subtle changes in the
pattern of bits. For example, we may notice that most spam messages have a high probability of
containing the words “buy”, “cheap”, “viagra”, etc. In Exercise 8.1 and Exercise 8.2, you will get
hands-on experience applying various classiﬁcation techniques to the spam ﬁltering problem.
6 Chapter 1. Introduction
(a)
 (b)
 (c)
Figure 1.3 Three types of iris ﬂowers: setosa, versicolor and virginica. Source: http://www .statlab.u
ni-heidelberg .de/data/iris/ . Used with kind permission of Dennis Kramb and SIGNA.sepal lengthsepal lengthsepal width petal length petal widthsepal width petal length petal width
Figure 1.4 Visualization of the Iris data as a pairwise scatter plot. The diagonal plots the marginal
histograms of the 4 features. The off diagonals contain scatterplots of all possible pairs of features. Red
circle = setosa, green diamond = versicolor, blue star = virginica. Figure generated by fisheririsDemo .
Classifying ﬂowers
Figure 1.3 gives another example of classiﬁcation, due to the statistician Ronald Fisher. The goal
is to learn to distinguish three different kinds of iris ﬂower, called setosa, versicolor and virginica.
Fortunately, rather than working directly with images, a botanist has already extracted 4 useful
features or characteristics: sepal length and width, and petal length and width. (Such feature
extraction is an important, but difficult, task. Most machine learning methods use features
chosen by some human. Later we will discuss some methods that can learn good features from
the data.) If we make a scatter plot of the iris data, as in Figure 1.4, we see that it is easy to
distinguish setosas (red circles) from the other two classes by just checking if their petal length
1.2. Supervised learning 7
true class = 7
 true class = 2
 true class = 1
true class = 0
 true class = 4
 true class = 1
true class = 4
 true class = 9
 true class = 5
(a)
true class = 7
 true class = 2
 true class = 1
true class = 0
 true class = 4
 true class = 1
true class = 4
 true class = 9
 true class = 5
(b)
Figure 1.5 (a) First 9 test MNIST gray-scale images. (b) Same as (a), but with the features permuted
randomly. Classiﬁcation performance is identical on both versions of the data (assuming the training data
is permuted in an identical way). Figure generated by shuffledDigitsDemo .
or width is below some threshold. However, distinguishing versicolor from virginica is slightly
harder; any decision will need to be based on at least two features. (It is always a good idea
to perform exploratory data analysis , such as plotting the data, before applying a machine
learning method.)
Image classiﬁcation and handwriting recognition
Now consider the harder problem of classifying images directly, where a human has not pre-
processed the data. We might want to classify the image as a whole, e.g., is it an indoors or
outdoors scene? is it a horizontal or vertical photo? does it contain a dog or not? This is called
image classiﬁcation .
In the special case that the images consist of isolated handwritten letters and digits, for
example, in a postal or ZIP code on a letter, we can use classiﬁcation to perform handwriting
recognition . Astandarddatasetusedinthisareaisknownas MNIST,whichstandsfor“Modiﬁed
National Institute of Standards”5. (The term “modiﬁed” is used because the images have been
preprocessed to ensure the digits are mostly in the center of the image.) This dataset contains
60,000 training images and 10,000 test images of the digits 0 to 9, as written by various people.
The images are size 28×28and have grayscale values in the range 0 : 255. See Figure 1.5(a) for
some example images.
Many generic classiﬁcation methods ignore any structure in the input features, such as spatial
layout. Consequently, they can also just as easily handle data that looks like Figure 1.5(b), which
is the same data except we have randomly permuted the order of all the features. (You will
verify this in Exercise 1.1.) This ﬂexibility is both a blessing (since the methods are general
purpose) and a curse (since the methods ignore an obviously useful source of information). We
will discuss methods for exploiting structure in the input features later in the book.
5. Available from http://yann .lecun .com/exdb/mnist/ .
8 Chapter 1. Introduction
(a)
 (b)
Figure 1.6 Example of face detection. (a) Input image (Murphy family, photo taken 5 August 2010). Used
with kind permission of Bernard Diedrich of Sherwood Studios. (b) Output of classiﬁer, which detected 5
faces at different poses. This was produced using the online demo at http://demo .pittpatt .com/. The
classiﬁer was trained on 1000s of manually labeled images of faces and non-faces, and then was applied
to a dense set of overlapping patches in the test image. Only the patches whose probability of containing
a face was sufficiently high were returned. Used with kind permission of Pittpatt.com
Face detection and recognition
A harder problem is to ﬁnd objects within an image; this is called object detection orobject
localization . An important special case of this is face detection . One approach to this problem
is to divide the image into many small overlapping patches at different locations, scales and
orientations, and to classify each such patch based on whether it contains face-like texture or
not. This is called a sliding window detector . The system then returns those locations where
the probability of face is sufficiently high. See Figure 1.6 for an example. Such face detection
systems are built-in to most modern digital cameras; the locations of the detected faces are
used to determine the center of the auto-focus. Another application is automatically blurring
out faces in Google’s StreetView system.
Having found the faces, one can then proceed to perform face recognition , which means
estimating the identity of the person (see Figure 1.10(a)). In this case, the number of class labels
might be very large. Also, the features one should use are likely to be different than in the face
detection problem: for recognition, subtle differences between faces such as hairstyle may be
important for determining identity, but for detection, it is important to be invariant to such
details, and to just focus on the differences between faces and non-faces. For more information
about visual object detection, see e.g., (Szeliski 2010).
1.2.2 Regression
Regression is just like classiﬁcation except the response variable is continuous. Figure 1.7 shows
a simple example: we have a single real-valued input xi∈R, and a single real-valued response
yi∈R. We consider ﬁtting two models to the data: a straight line and a quadratic function.
(We explain how to ﬁt such models below.) Various extensions of this basic problem can arise,
such as having high-dimensional inputs, outliers, non-smooth responses, etc. We will discuss
ways to handle such problems later in the book.
1.3. Unsupervised learning 9
0 5 10 15 20−10−5051015degree 1
(a)0 5 10 15 20−10−5051015degree 2
(b)
Figure 1.7 (a) Linear regression on some 1d data. (b) Same data with polynomial regression (degree 2).
Figure generated by linregPolyVsDegree .
Here are some examples of real-world regression problems.
• Predict tomorrow’s stock market price given current market conditions and other possible
side information.
• Predict the age of a viewer watching a given video on YouTube.
• Predict the location in 3d space of a robot arm end effector, given control signals (torques)
sent to its various motors.
• Predict the amount of prostate speciﬁc antigen (PSA) in the body as a function of a number
of different clinical measurements.
• Predict the temperature at any location inside a building using weather data, time, door
sensors, etc.
1.3 Unsupervised learning
We now consider unsupervised learning, where we are just given output data, without any
inputs. The goal is to discover “interesting structure” in the data; this is sometimes called
knowledge discovery. Unlike supervised learning, we are not told what the desired output isfor each input. Instead, we will formalize our task as one of density estimation, that is, we
want to build models of the form p(x
i|θ). There are two differences from the supervised case.
First, we have written p(xi|θ)instead of p(yi|xi,θ); that is, supervised learning is conditional
density estimation, whereas unsupervised learning is unconditional density estimation. Second,x
iis a vector of features, so we need to create multivariate probability models. By contrast,
in supervised learning, yiis usually just a single variable that we are trying to predict. This
means that for most supervised learning problems, we can use univariate probability models(with input-dependent parameters), which signiﬁcantly simpliﬁes the problem. (We will discussmulti-output classiﬁcation in Chapter 19, where we will see that it also involves multivariateprobability models.)
Unsupervised learning is arguably more typical of human and animal learning. It is also
more widely applicable than supervised learning, since it does not require a human expert to
10 Chapter 1. Introduction
55 60 65 70 75 8080100120140160180200220240260280
heightweight
(a)55 60 65 70 75 8080100120140160180200220240260280
heightweightK=2
(b)
Figure 1.8 (a) The height and weight of some people. (b) A possible clustering using K=2clusters.
Figure generated by kmeansHeightWeight .
manually label the data. Labeled data is not only expensive to acquire6, but it also contains
relatively little information, certainly not enough to reliably estimate the parameters of complex
models. Geoff Hinton, who is a famous professor of ML at the University of Toronto, has said:
When we’re learning to see, nobody’s telling us what the right answers are — we justlook. Every so often, your mother says “that’s a dog”, but that’s very little information.You’d be lucky if you got a few bits of information — even one bit per second — thatway. The brain’s visual system has 10
14neural connections. And you only live for 109
seconds. So it’s no use learning one bit per second. You need more like 105bits per
second. And there’s only one place you can get that much information: from the inputitself. — Geoffrey Hinton, 1996 (quoted in (Gorder 2006)).
Below we describe some canonical examples of unsupervised learning.
1.3.1 Discovering clusters
As a canonical example of unsupervised learning, consider the problem of clustering data into
groups. For example, Figure 1.8(a) plots some 2d data, representing the height and weight ofa group of 210 people. It seems that there might be various clusters, or subgroups, althoughit is not clear how many. Let Kdenote the number of clusters. Our ﬁrst goal is to estimate
the distribution over the number of clusters, p(K|D); this tells us if there are subpopulations
within the data. For simplicity, we often approximate the distribution p(K|D)by its mode,
K
∗= argmax Kp(K|D). In the supervised case, we were told that there are two classes (male
and female), but in the unsupervised case, we are free to choose as many or few clusters as welike. Picking a model of the “right” complexity is called model selection, and will be discussedin detail below.
Our second goal is to estimate which cluster each point belongs to. Let z
i∈{1,...,K}
represent the cluster to which data point iis assigned. (z iis an example of a hiddenor
6. The advent of crowd sourcing web sites such as Mechanical Turk, (https://www .mturk .com/mturk/welcome ),
which outsource data processing tasks to humans all over the world, has reduced the cost of labeling data. Nevertheless,
the amount of unlabeled data is still orders of magnitude larger than the amount of labeled data.
1.3. Unsupervised learning 11
−8−6−4−202468
−4−2024−202
(a)−505
−4−2024
(b)
Figure 1.9 (a) A set of points that live on a 2d linear subspace embedded in 3d. The solid red line is the
ﬁrst principal component direction. The dotted black line is the second PC direction. (b) 2D representation
of the data. Figure generated by pcaDemo3d .
latentvariable, since it is never observed in the training set.) We can infer which cluster each
data point belongs to by computing z∗
i= argmaxkp(zi=k|xi,D). This is illustrated in
Figure 1.8(b), where we use different colors to indicate the assignments, assuming K=2.
In this book, we focus on model based clustering, which means we ﬁt a probabilistic model
to the data, rather than running some ad hoc algorithm. The advantages of the model-based
approach are that one can compare different kinds of models in an objective way (in terms ofthe likelihood they assign to the data), we can combine them together into larger systems, etc.
Here are some real world applications of clustering.
• In astronomy, the autoclass system (Cheeseman et al. 1988) discovered a new type of star,
based on clustering astrophysical measurements.
• In e-commerce, it is common to cluster users into groups, based on their purchasing or
web-surﬁng behavior, and then to send customized targeted advertising to each group (seee.g., (Berkhin 2006)).
• In biology, it is common to cluster ﬂow-cytometry data into groups, to discover different
sub-populations of cells (see e.g., (Lo et al. 2009)).
1.3.2 Discovering latent factors
When dealing with high dimensional data, it is often useful to reduce the dimensionality byprojecting the data to a lower dimensional subspace which captures the “essence” of the data.This is called dimensionality reduction. A simple example is shown in Figure 1.9, where we
project some 3d data down to a 2d plane. The 2d approximation is quite good, since most pointslie close to this subspace. Reducing to 1d would involve projecting points onto the red line inFigure 1.9(a); this would be a rather poor approximation. (We will make this notion precise inChapter 12.)
The motivation behind this technique is that although the data may appear high dimensional,
there may only be a small number of degrees of variability, corresponding to latent factors.F o r
example, when modeling the appearance of face images, there may only be a few underlyinglatent factors which describe most of the variability, such as lighting, pose, identity, etc, asillustrated in Figure 1.10.
12 Chapter 1. Introduction
(a)
 (b)
Figure 1.10 a) 25 randomly chosen 64×64pixel images from the Olivetti face database. (b) The mean
and the ﬁrst three principal component basis vectors (eigenfaces). Figure generated by pcaImageDemo .
When used as input to other statistical models, such low dimensional representations often
result in better predictive accuracy, because they focus on the “essence” of the object, ﬁltering
out inessential features. Also, low dimensional representations are useful for enabling fast
nearest neighbor searches and two dimensional projections are very useful for visualizing high
dimensional data.
The most common approach to dimensionality reduction is called principal components
analysis orPCA. This can be thought of as an unsupervised version of (multi-output) linear
regression, where we observe the high-dimensional response y, but not the low-dimensional
“cause”z. Thus the model has the form z→y; we have to “invert the arrow”, and infer the
latent low-dimensional zfrom the observed high-dimensional y. See Section 12.1 for details.
Dimensionality reduction, and PCA in particular, has been applied in many different areas.
Some examples include the following:
• In biology, it is common to use PCA to interpret gene microarray data, to account for the
fact that each measurement is usually the result of many genes which are correlated in their
behavior by the fact that they belong to different biological pathways.
• In natural language processing, it is common to use a variant of PCA called latent semantic
analysis for document retrieval (see Section 27.2.2).
• In signal processing (e.g., of acoustic or neural signals), it is common to use ICA (which is a
variant of PCA) to separate signals into their different sources (see Section 12.6).
• In computer graphics, it is common to project motion capture data to a low dimensional
space, and use it to create animations. See Section 15.5 for one way to tackle such problems.
1.3. Unsupervised learning 13
Figure 1.11 A sparse undirected Gaussian graphical model learned using graphical lasso (Section 26.7.2)
applied to some ﬂow cytometry data (from (Sachs et al. 2005)), which measures the phosphorylation status
of 11 proteins. Figure generated by ggmLassoDemo .
1.3.3 Discovering graph structure
Sometimes we measure a set of correlated variables, and we would like to discover which ones
are most correlated with which others. This can be represented by a graph G, in which nodes
represent variables, and edges represent direct dependence between variables (we will make
this precise in Chapter 10, when we discuss graphical models). We can then learn this graph
structure from data, i.e., we compute ˆG=a r g m a x p(G|D).
As with unsupervised learning in general, there are two main applications for learning sparse
graphs: to discover new knowledge, and to get better joint probability density estimators. We
now give somes example of each.
• Much of the motivation for learning sparse graphical models comes from the systems biology
community. For example, suppose we measure the phosphorylation status of some proteins
in a cell (Sachs et al. 2005). Figure 1.11 gives an example of a graph structure that was learned
from this data (using methods discussed in Section 26.7.2). As another example, Smith et al.
(2006) showed that one can recover the neural “wiring diagram” of a certain kind of bird
from time-series EEG data. The recovered structure closely matched the known functional
connectivity of this part of the bird brain.
• In some cases, we are not interested in interpreting the graph structure, we just want to
use it to model correlations and to make predictions. One example of this is in ﬁnancial
portfolio management, where accurate models of the covariance between large numbers of
different stocks is important. Carvalho and West (2007) show that by learning a sparse graph,
and then using this as the basis of a trading strategy, it is possible to outperform (i.e., make
more money than) methods that do not exploit sparse graphs. Another example is predicting
traffic jams on the freeway. Horvitz et al. (2005) describe a deployed system called JamBayes
for predicting traffic ﬂow in the Seattle area; predictions are made using a graphical model
whose structure was learned from data.
14 Chapter 1. Introduction
(a)
 (b)
Figure 1.12 (a) A noisy image with an occluder. (b) An estimate of the underlying pixel intensities, based
on a pairwise MRF model. Source: Figure 8 of (Felzenszwalb and Huttenlocher 2006). Used with kind
permission of Pedro Felzenszwalb.
1.3.4 Matrix completion
Sometimes we have missing data, that is, variables whose values are unknown. For example, we
might have conducted a survey, and some people might not have answered certain questions.
Or we might have various sensors, some of which fail. The corresponding design matrix will
then have “holes” in it; these missing entries are often represented by NaN, which stands for
“not a number”. The goal of imputation is to infer plausible values for the missing entries. This
is sometimes called matrix completion . Below we give some example applications.
1.3.4.1 Image inpainting
An interesting example of an imputation-like task is known as image inpainting . The goal is
to “ﬁll in” holes (e.g., due to scratches or occlusions) in an image with realistic texture. This is
illustrated in Figure 1.12, where we denoise the image, as well as impute the pixels hidden behind
the occlusion. This can be tackled by building a joint probability model of the pixels, given a
set of clean images, and then inferring the unknown variables (pixels) given the known variables
(pixels). This is somewhat like masket basket analysis, except the data is real-valued and spatially
structured, so the kinds of probability models we use are quite different. See Sections 19.6.2.7
and 13.8.4 for some possible choices.
1.3.4.2 Collaborative ﬁltering
Another interesting example of an imputation-like task is known as collaborative ﬁltering .A
common example of this concerns predicting which movies people will want to watch based
on how they, and other people, have rated movies which they have already seen. The key idea
is that the prediction is not based on features of the movie or user (although it could be), but
merely on a ratings matrix. More precisely, we have a matrix XwhereX(m,u)is the rating
1.3. Unsupervised learning 15
XVHUV
PRYLHV ""
" 
 "
Figure 1.13 Example of movie-rating data. Training data is in red, test data is denoted by ?, empty cells
are unknown.
(say an integer between 1 and 5, where 1 is dislike and 5 is like) by user uof movie m.N o t e
that most of the entries in Xwill be missing or unknown, since most users will not have rated
most movies. Hence we only observe a tiny subset of the Xmatrix, and we want to predict
a different subset. In particular, for any given user u, we might want to predict which of the
unrated movies he/she is most likely to want to watch.
In order to encourage research in this area, the DVD rental company Netﬂix created a com-
petition, launched in 2006, with a $1M USD prize (see http://netflixprize .com/). In
particular, they provided a large matrix of ratings, on a scale of 1 to 5, for ∼18kmovies
created by ∼500kusers. The full matrix would have ∼9×109entries, but only about 1%
of the entries are observed, so the matrix is extremely sparse. A subset of these are used for
training, and the rest for testing, as shown in Figure 1.13. The goal of the competition was to
predict more accurately than Netﬂix’s existing system. On 21 September 2009, the prize wasawarded to a team of researchers known as “BellKor’s Pragmatic Chaos”. Section 27.6.2 discussessome of their methodology. Further details on the teams and their methods can be found athttp://www .netflixprize .com/community/viewtopic .php?id=1537 .
1.3.4.3 Market basket analysis
In commercial data mining, there is much interest in a task called market basket analysis. The
data consists of a (typically very large but sparse) binary matrix, where each column representsan item or product, and each row represents a transaction. We set x
ij=1if itemjwas
purchased on the i’th transaction. Many items are purchased together (e.g., bread and butter),
so there will be correlations amongst the bits. Given a new partially observed bit vector,representing a subset of items that the consumer has bought, the goal is to predict which otherbits are likely to turn on, representing other items the consumer might be likely to buy. (Unlikecollaborative ﬁltering, we often assume there is no missing data in the training data, since weknow the past shopping behavior of each customer.)
This task arises in other domains besides modeling purchasing patterns. For example, similar
techniques can be used to model dependencies between ﬁles in complex software systems. Inthis case, the task is to predict, given a subset of ﬁles that have been changed, which other onesneed to be updated to ensure consistency (see e.g., (Hu et al. 2010)).
It is common to solve such tasks using frequent itemset mining, which create association
rules (see e.g., (Hastie et al. 2009, sec 14.2) for details). Alternatively, we can adopt a probabilisticapproach, and ﬁt a joint density model p(x
1,...,x D)to the bit vectors, see e.g., (Hu et al.
16 Chapter 1. Introduction
(a)
 (b)
Figure 1.14 (a) Illustration of a K-nearest neighbors classiﬁer in 2d for K=3. The 3 nearest neighbors
of test point x1have labels 1, 1 and 0, so we predict p(y=1|x1,D,K=3 )=2 /3. The 3 nearest
neighbors of test point x2have labels 0, 0, and 0, so we predict p(y=1|x2,D,K=3 )=0 /3. (b)
Illustration of the Voronoi tesselation induced by 1-NN. Based on Figure 4.13 of (Duda et al. 2001). Figure
generated by knnVoronoi .
2010). Such models often have better predictive acccuracy than association rules, although they
may be less interpretible. This is typical of the difference between data mining and machine
learning: in data mining, there is more emphasis on interpretable models, whereas in machine
learning, there is more emphasis on accurate models.
1.4 Some basic concepts in machine learning
In this Section, we provide an introduction to some key ideas in machine learning. We will
expand on these concepts later in the book, but we introduce them brieﬂy here, to give a ﬂavor
of things to come.
1.4.1 Parametric vs non-parametric models
In this book, we will be focussing on probabilistic models of the form p(y|x)orp(x), depending
on whether we are interested in supervised or unsupervised learning respectively. There are
many ways to deﬁne such models, but the most important distinction is this: does the model
have a ﬁxed number of parameters, or does the number of parameters grow with the amount
of training data? The former is called a parametric model , and the latter is called a non-
parametric model . Parametric models have the advantage of often being faster to use, but the
disadvantage of making stronger assumptions about the nature of the data distributions. Non-
parametric models are more ﬂexible, but often computationally intractable for large datasets.
We will give examples of both kinds of models in the sections below. We focus on supervised
learning for simplicity, although much of our discussion also applies to unsupervised learning.
1.4.2 A simple non-parametric classiﬁer: K-nearest neighbors
A simple example of a non-parametric classiﬁer is the Knearest neighbor (KNN) classiﬁer.
This simply “looks at” the Kpoints in the training set that are nearest to the test input x,
1.4. Some basic concepts in machine learning 17
−3 −2 −1 0 1 2 3−2−1012345train
(a)
p(y=1|data,K=10)
  
20 40 60 80 10020406080100120
00.10.20.30.40.50.60.70.80.91
(b)
p(y=2|data,K=10)
  
20 40 60 80 10020406080100120
00.10.20.30.40.50.60.70.80.91
(c)−3 −2 −1 0 1 2 3−2−1012345predicted label,  K=10
  
c1
c2
c3
(d)
Figure 1.15 (a) Some synthetic 3-class training data in 2d. (b) Probability of class 1 for KNN with K=1 0.
(c) Probability of class 2. (d) MAP estimate of class label. Figure generated by knnClassifyDemo .
counts how many members of each class are in this set, and returns that empirical fraction as
the estimate, as illustrated in Figure 1.14. More formally,
p(y=c|x,D,K)=1
K/summationdisplay
i∈NK(x,D)I(yi=c) (1.2)
whereNK(x,D)are the (indices of the) Knearest points to xinDandI(e)is the indicator
function deﬁned as follows:
I(e)=/braceleftbigg
1ifeis true
0ifeis false(1.3)
This method is an example of memory-based learning orinstance-based learning . It can
be derived from a probabilistic framework as explained in Section 14.7.3. The most common
18 Chapter 1. Introduction
s
11
0
(a)0 0.2 0.4 0.6 0.8 100.10.20.30.40.50.60.70.80.91
Fraction of data in neighborhoodEdge length of cube
d=1d=3d=5d=7d=10
(b)
Figure 1.16 Illustration of the curse of dimensionality. (a) We embed a small cube of side sinside a larger
unit cube. (b) We plot the edge length of a cube needed to cover a given volume of the unit cube as a
function of the number of dimensions. Based on Figure 2.6 from (Hastie et al. 2009). Figure generated bycurseDimensionality .
distance metric to use is Euclidean distance (which limits the applicability of the technique to
data which is real-valued), although other metrics can be used.
Figure 1.15 gives an example of the method in action, where the input is two dimensional, we
have three classes, and K=1 0. (We discuss the effect of Kbelow.) Panel (a) plots the training
data. Panel (b) plots p(y=1|x,D)wherexis evaluated on a grid of points. Panel (c) plots
p(y=2|x,D). We do not need to plot p(y=3|x,D), since probabilities sum to one. Panel (d)
plots the MAP estimate ˆy(x) = argmaxc(y=c|x,D).
A KNN classiﬁer with K=1induces a Voronoi tessellation of the points (see Figure 1.14(b)).
This is a partition of space which associates a region V(xi)with each point xiin such a way
that all points in V(xi)are closer to xithan to any other point. Within each cell, the predicted
label is the label of the corresponding training point.
1.4.3 The curse of dimensionality
The KNN classiﬁer is simple and can work quite well, provided it is given a good distance metricand has enough labeled training data. In fact, it can be shown that the KNN classiﬁer can comewithin a factor of 2 of the best possible performance if N→∞(Cover and Hart 1967).
However, the main problem with KNN classiﬁers is that they do not work well with high
dimensional inputs. The poor performance in high dimensional settings is due to the curse of
dimensionality.
To explain the curse, we give some examples from (Hastie et al. 2009, p22). Consider applying
a KNN classiﬁer to data where the inputs are uniformly distributed in the D-dimensional unit
cube. Suppose we estimate the density of class labels around a test point xby “growing” a
hyper-cube around xuntil it contains a desired fraction fof the data points. The expected edge
length of this cube will be e
D(f)=f1/D.I fD=1 0, and we want to base our estimate on 10%
1.4. Some basic concepts in machine learning 19
−3 −2 −1 0 1 2 300.050.10.150.20.250.30.350.4PDF
(a)
 (b)
Figure 1.17 (a) A Gaussian pdf with mean 0 and variance 1. Figure generated by gaussPlotDemo . (b)
Visualization of the conditional density model p(y|x,θ)=N(y|w0+w1x,σ2). The density falls off
exponentially fast as we move away from the regression line. Figure generated by linregWedgeDemo2 .
of the data, we have e10(0.1) = 0.8, so we need to extend the cube 80% along each dimension
aroundx. Even if we only use 1% of the data, we ﬁnd e10(0.01) = 0.63: see Figure 1.16. Since
the entire range of the data is only 1 along each dimension, we see that the method is no longer
very local, despite the name “nearest neighbor”. The trouble with looking at neighbors that are
so far away is that they may not be good predictors about the behavior of the input-output
function at a given point.
1.4.4 Parametric models for classiﬁcation and regression
The main way to combat the curse of dimensionality is to make some assumptions about
the nature of the data distribution (either p(y|x)for a supervised problem or p(x)for an
unsupervised problem). These assumptions, known as inductive bias , are often embodied in
the form of a parametric model , which is a statistical model with a ﬁxed number of parameters.
Below we brieﬂy describe two widely used examples; we will revisit these and other models in
much greater depth later in the book.
1.4.5 Linear regression
One of the most widely used models for regression is known as linear regression . This asserts
that the response is a linear function of the inputs. This can be written as follows:
y(x)=wTx+/epsilon1=D/summationdisplay
j=1wjxj+/epsilon1 (1.4)
wherewTxrepresents the inner or scalar product between the input vector xand the model’s
weight vector w7, and/epsilon1is the residual error between our linear predictions and the true
response.
7. In statistics, it is more common to denote the regression weights by β.
20 Chapter 1. Introduction
0 5 10 15 20−10−5051015degree 14
(a)0 5 10 15 20−10−5051015degree 20
(b)
Figure 1.18 Polynomial of degrees 14 and 20 ﬁt by least squares to 21 data points. Figure generated by
linregPolyVsDegree .
We often assume that /epsilon1has a Gaussian8ornormaldistribution. We denote this by /epsilon1∼
N(μ,σ2),w h e r eμis the mean and σ2is the variance (see Chapter 2 for details). When we plot
this distribution, we get the well-known bell curve shown in Figure 1.17(a).
To make the connection between linear regression and Gaussians more explicit, we can rewrite
the model in the following form:
p(y|x,θ)=N(y|μ(x),σ2(x)) (1.5)
This makes it clear that the model is a conditional probability density. In the simplest case, we
assumeμis a linear function of x,s oμ=wTx, and that the noise is ﬁxed, σ2(x)=σ2.I n
this case, θ=(w,σ2)are the parameters of the model.
For example, suppose the input is 1 dimensional. We can represent the expected response as
follows:
μ(x)=w0+w1x=wTx (1.6)
wherew0is the intercept or biasterm,w1is the slope, and where we have deﬁned the vector
x=( 1,x). (Prepending a constant 1 term to an input vector is a common notational trick which
allows us to combine the intercept term with the other terms in the model.) If w1is positive,
it means we expect the output to increase as the input increases. This is illustrated in 1d inFigure 1.17(b); a more conventional plot, of the mean response vs x, is shown in Figure 1.7(a).
Linear regression can be made to model non-linear relationships by replacing xwith some
non-linear function of the inputs, φ(x). That is, we use
p(y|x,θ)=N(y|w
Tφ(x),σ2) (1.7)
This is known as basis function expansion. For example, Figure 1.18 illustrates the case where
φ(x)=[ 1,x,x2,...,xd],f o rd=1 4andd=2 0; this is known as polynomial regression.
We will consider other kinds of basis functions later in the book. In fact, many popularmachine learning methods — such as support vector machines, neural networks, classiﬁcationand regression trees, etc. — can be seen as just different ways of estimating basis functionsfrom data, as we discuss in Chapters 14 and 16.
8. Carl Friedrich Gauss (1777–1855) was a German mathematician and physicist.
1.4. Some basic concepts in machine learning 21
−10 −5 0 5 1000.10.20.30.40.50.60.70.80.91
(a)460 480 500 520540560 580 600 62064000.10.20.30.40.50.60.70.80.91
(b)
Figure 1.19 (a) The sigmoid or logistic function. We have sigm(−∞)=0 ,sigm(0) = 0.5 , and
sigm(∞ )=1. Figure generated by sigmoidPlot . (b) Logistic regression for SAT scores. Solid black dots
are the data. The open red circles are the predicted probabilities. The green crosses denote two students
with the same SAT score of 525 (and hence same input representation x) but with different training labels
(one student passed, y=1, the other failed, y=0). Hence this data is not perfectly separable using just
the SAT feature. Figure generated by logregSATdemo .
1.4.6 Logistic regression
We can generalize linear regression to the (binary) classiﬁcation setting by making two changes.
First we replace the Gaussian distribution for ywith a Bernoulli distribution9,which is more
appropriate for the case when the response is binary, y∈{0,1}. That is, we use
p(y|x,w) = Ber(y|μ(x)) (1.8)
whereμ(x)=E[y|x]=p(y=1|x). Second, we compute a linear combination of the inputs,
as before, but then we pass this through a function that ensures 0≤μ(x)≤1by deﬁning
μ(x) = sigm(wTx) (1.9)
wheresigm(η)refers to the sigmoid function, also known as the logisticorlogitfunction.
This is deﬁned as
sigm(η)/defines1
1+exp(−η)=eη
eη+1(1.10)
The term “sigmoid” means S-shaped: see Figure 1.19(a) for a plot. It is also known as a squashing
function, since it maps the whole real line to [0,1], which is necessary for the output to be
interpreted as a probability.
Putting these two steps together we get
p(y|x,w) = Ber(y|sigm(wTx)) (1.11)
This is called logistic regression due to its similarity to linear regression (although it is a form
of classiﬁcation, not regression!).
9. Daniel Bernoulli (1700–1782) was a Dutch-Swiss mathematician and physicist.
22 Chapter 1. Introduction
A simple example of logistic regression is shown in Figure 1.19(b), where we plot
p(yi=1|xi,w) = sigm(w 0+w1xi) (1.12)
wherexiis the SAT10score of student iandyiis whether they passed or failed a class. The
solid black dots show the training data, and the red circles plot p(y=1|xi,ˆw),w h e r eˆware
the parameters estimated from the training data (we discuss how to compute these estimates in
Section 8.3.4).
If we threshold the output probability at 0.5, we can induce a decision rule of the form
ˆy(x)=1⇐⇒p(y=1|x)>0.5 (1.13)
By looking at Figure 1.19(b), we see that sigm(w0+w1x)=0.5forx≈545 =x∗. We can
imagine drawing a vertical line at x=x∗; this is known as a decision boundary. Everything to
the left of this line is classiﬁed as a 0, and everything to the right of the line is classiﬁed as a 1.
We notice that this decision rule has a non-zero error rate even on the training set. This
is because the data is not linearly separable, i.e., there is no straight line we can draw to
separate the 0s from the 1s. We can create models with non-linear decision boundaries usingbasis function expansion, just as we did with non-linear regression. We will see many examplesof this later in the book.
1.4.7 Overﬁtting
When we ﬁt highly ﬂexible models, we need to be careful that we do not overﬁtthe data, that
is, we should avoid trying to model every minor variation in the input, since this is more likelyto be noise than true signal. This is illustrated in Figure 1.18(b), where we see that using a highdegree polynomial results in a curve that is very “wiggly”. It is unlikely that the true functionhas such extreme oscillations. Thus using such a model might result in accurate predictions offuture outputs.
As another example, consider the KNN classiﬁer. The value of Kcan have a large effect on
the behavior of this model. When K=1, the method makes no errors on the training set (since
we just return the labels of the original training points), but the resulting prediction surface isvery “wiggly” (see Figure 1.20(a)). Therefore the method may not work well at predicting futuredata. In Figure 1.20(b), we see that using K=5results in a smoother prediction surface,
because we are averaging over a larger neighborhood. As Kincreases, the predictions becomes
smoother until, in the limit of K=N, we end up predicting the majority label of the whole
data set. Below we discuss how to pick the “right” value of K.
1.4.8 Model selection
When we have a variety of models of different complexity (e.g., linear or logistic regressionmodels with different degree polynomials, or KNN classiﬁers with different values of K), how
should we pick the right one? A natural approach is to compute the misclassiﬁcation rate on
10. SAT stands for “Scholastic Aptitude Test”. This is a standardized test for college admissions used in the United States
(the data in this example is from (Johnson and Albert 1999, p87)).
1.4. Some basic concepts in machine learning 23
−3 −2 −1 0 1 2 3−2−1012345predicted label,  K=1
  
c1
c2
c3
(a)−3 −2 −1 0 1 2 3−2−1012345predicted label,  K=5
  
c1
c2
c3
(b)
Figure 1.20 Prediction surface for KNN on the data in Figure 1.15(a). (a) K=1. (b) K=5. Figure generated by
knnClassifyDemo .
the training set for each method. This is deﬁned as follows:
err(f,D)=1
NN/summationdisplay
i=1I(f(xi)/negationslash=yi) (1.14)
wheref(x)is our classiﬁer. In Figure 1.21(a), we plot this error rate vs Kfor a KNN classiﬁer
(dotted blue line). We see that increasing Kincreasesour error rate on the training set, because
we are over-smoothing. As we said above, we can get minimal error on the training set by using
K=1, since this model is just memorizing the data.
However, what we care about is generalization error, which is the expected value of the
misclassiﬁcation rate when averaged over future data (see Section 6.3 for details). This can beapproximated by computing the misclassiﬁcation rate on a large independent test set, not used
during model training. We plot the test error vs Kin Figure 1.21(a) in solid red (upper curve).
Now we see a U-shaped curve: for complex models (small K), the method overﬁts, and for
simple models (big K), the method underﬁts. Therefore, an obvious way to pick Kis to pick
the value with the minimum error on the test set (in this example, any value between 10 and100 should be ﬁne).
Unfortunately, when training the model, we don’t have access to the test set (by assumption),
so we cannot use the test set to pick the model of the right complexity.
11However, we can create
a test set by partitioning the training set into two: the part used for training the model, and asecond part, called the validation set, used for selecting the model complexity. We then ﬁt all
the models on the training set, and evaluate their performance on the validation set, and pickthe best. Once we have picked the best, we can reﬁt it to all the available data. If we have aseparate test set, we can evaluate performance on this, in order to estimate the accuracy of ourmethod. (We discuss this in more detail in Section 6.5.3.)
Often we use about 80% of the data for the training set, and 20% for the validation set. But
if the number of training cases is small, this technique runs into problems, because the model
11. In academic settings, we usually do have access to the test set, but we should not use it for model ﬁtting or model
selection, otherwise we will get an unrealistically optimistic estimate of performance of our method. This is one of the
“golden rules” of machine learning research.
24 Chapter 1. Introduction
0 20 40 60 80 100 12000.050.10.150.20.250.30.35
Kmisclassification ratetrain
test
(a)
 (b)
Figure 1.21 (a) Misclassiﬁcation rate vs Kin a K-nearest neighbor classiﬁer. On the left, where Kis
small, the model is complex and hence we overﬁt. On the right, where Kis large, the model is simple
and we underﬁt. Dotted blue line: training set (size 200). Solid red line: test set (size 500). (b) Schematic
of 5-fold cross validation. Figure generated by knnClassifyDemo .
won’t have enough data to train on, and we won’t have enough data to make a reliable estimate
of the future performance.
A simple but popular solution to this is to use cross validation (CV). The idea is simple: we
split the training data into Kfolds; then, for each fold k∈{1,...,K}, we train on all the
folds but the k’th, and test on the k’th, in a round-robin fashion, as sketched in Figure 1.21(b).
We then compute the error averaged over all the folds, and use this as a proxy for the test error.
(Note that each point gets predicted only once, although it will be used for training K−1times.)
It is common to use K=5; this is called 5-fold CV. If we set K=N, then we get a method
called leave-one out cross validation ,o rLOOCV, since in fold i, we train on all the data cases
except for i, and then test on i. Exercise 1.3 asks you to compute the 5-fold CV estimate of the
test error vs K, and to compare it to the empirical test error in Figure 1.21(a).
Choosing Kfor a KNN classiﬁer is a special case of a more general problem known as model
selection , where we have to choose between models with different degrees of ﬂexibility. Cross-
validation is widely used for solving such problems, although we will discuss other approaches
later in the book.
1.4.9 No free lunch theorem
All models are wrong, but some models are useful. — George Box (Box and Draper 1987,
p424).12
Much of machine learning is concerned with devising different models, and different algorithms
to ﬁt them. We can use methods such as cross validation to empirically choose the best method
for our particular problem. However, there is no universally best model — this is sometimes
called the no free lunch theorem (Wolpert 1996). The reason for this is that a set of assumptions
that works well in one domain may work poorly in another.
12. George Box is a retired statistics professor at the University of Wisconsin.
1.4. Some basic concepts in machine learning 25
As a consequence of the no free lunch theorem, we need to develop many different types of
models, to cover the wide variety of data that occurs in the real world. And for each model,
there may be many different algorithms we can use to train the model, which make differentspeed-accuracy-complexity tradeoffs. It is this combination of data, models and algorithms thatwe will be studying in the subsequent chapters.
Exercises
Exercise 1.1 KNN classiﬁer on shuffled MNIST data
Runmnist1NNdemo and verify that the misclassiﬁcation rate (on the ﬁrst 1000 test cases) of MNIST of a
1-NN classiﬁer is 3.8%. (If you run it all on all 10,000 test cases, the error rate is 3.09%.) Modify the code
so that you ﬁrst randomly permute the features (columns of the training and test design matrices), as inshuffledDigitsDemo , and then apply the classiﬁer. Verify that the error rate is not changed.
Exercise 1.2 Approximate KNN classiﬁers
Use the Matlab/C++ code at http://people .cs.ubc.ca/~mariusm/index .php/FLANN/FLANN to per-
form approximate nearest neighbor search, and combine it with mnist1NNdemo to classify the MNIST data
set. How much speedup do you get, and what is the drop (if any) in accuracy?
Exercise 1.3 CV for KNN
UseknnClassifyDemo to plot the CV estimate of the misclassiﬁcation rate on the test set. Compare this
to Figure 1.21(a). Discuss the similarities and differences to the test error rate.

2 Probability
2.1 Introduction
Probability theory is nothing but common sense reduced to calculation. — Pierre Laplace,
1812
In the previous chapter, we saw how probability can play a useful role in machine learning. Inthis chapter, we discuss probability theory in more detail. We do not have to space to go intogreat detail — for that, you are better off consulting some of the excellent textbooks availableon this topic, such as (Jaynes 2003; Bertsekas and Tsitsiklis 2008; Wasserman 2004). But we willbrieﬂy review many of the key ideas you will need in later chapters.
Before we start with the more technical material, let us pause and ask: what is probability?
We are all familiar with the phrase “the probability that a coin will land heads is 0.5”. But whatdoes this mean? There are actually at least two different interpretations of probability. One iscalled the frequentist interpretation. In this view, probabilities represent long run frequencies
of events. For example, the above statement means that, if we ﬂip the coin many times, weexpect it to land heads about half the time.
1
The other interpretation is called the Bayesian interpretation of probability. In this view,
probability is used to quantify our uncertainty about something; hence it is fundamentally
related to information rather than repeated trials (Jaynes 2003). In the Bayesian view, the abovestatement means we believe the coin is equally likely to land heads or tails on the next toss.
One big advantage of the Bayesian interpretation is that it can be used to model our uncer-
tainty about events that do not have long term frequencies. For example, we might want tocompute the probability that the polar ice cap will melt by 2020 CE. This event will happen zeroor one times, but cannot happen repeatedly. Nevertheless, we ought to be able to quantify ouruncertainty about this event; based on how probable we think this event is, we will (hopefully!)take appropriate actions (see Section 5.7 for a discussion of optimal decision making underuncertainty). To give some more machine learning oriented examples, we might have receiveda speciﬁc email message, and want to compute the probability it is spam. Or we might haveobserved a “blip” on our radar screen, and want to compute the probability distribution overthe location of the corresponding target (be it a bird, plane, or missile). In all these cases, theidea of repeated trials does not make sense, but the Bayesian interpretation is valid and indeed
1. Actually, the Stanford statistician (and former professional magician) Persi Diaconis has shown that a coin is about
51% likely to land facing the same way up as it started, due to the physics of the problem (Diaconis et al. 2007).
28 Chapter2. Probability
0 1 2 3 4 500.250.50.751
(a)0 1 2 3 4 500.250.50.751
(b)
Figure 2.1 (A) a uniform distribution on {1,2,3,4}, withp(x=k)=1/4. (b) a degenerate distribution
p(x)=1ifx=1andp(x)=0ifx∈{2,3,4}. Figure generated by discreteProbDistFig .
quite natural. We shall therefore adopt the Bayesian interpretation in this book. Fortunately, the
basic rules of probability theory are the same, no matter which interpretation is adopted.
2.2 A brief review of probability theory
This section is a very brief review of the basics of probability theory, and is merely meant asa refresher for readers who may be “rusty”. Readers who are already familiar with these basicsmay safely skip this section.
2.2.1 Discrete random variables
The expression p(A)denotes the probability that the event Ais true. For example, Amight
be the logical expression “it will rain tomorrow”. We require that 0≤p(A)≤1,w h e r e
p(A)=0means the event deﬁnitely will not happen, and p(A)=1means the event deﬁnitely
will happen. We write p(A)to denote the probability of the event not A; this is deﬁned to
p(A)=1−p(A). We will often write A=1to mean the event Ais true, and A=0to mean
the event Ais false.
We can extend the notion of binary events by deﬁning a discrete random variable X, which
can take on any value from a ﬁnite or countably inﬁnite set X. We denote the probability of
the event that X=xbyp(X=x), or justp(x)for short. Here p()is called a probability
mass function orpmf. This satisﬁes the properties 0≤p(x)≤1and/summationtext
x∈Xp(x)=1.
Figure 2.1 shows two pmf’s deﬁned on the ﬁnite state space X={1,2,3,4,5}. On the left we
have a uniform distribution, p(x)=1/5, and on the right, we have a degenerate distribution,
p(x)= I(x=1 ),w h e r e I()is the binary indicator function. This distribution represents the
fact thatXis always equal to the value 1, in other words, it is a constant.
2.2.2 Fundamental rules
In this section, we review the basic rules of probability.
2.2. Abriefreviewofprobabilitytheory 29
2.2.2.1 Probability of a union of two events
Given two events, AandB, we deﬁne the probability of AorBas follows:
p(A∨B)=p( A)+p(B)−p(A∧B) (2.1)
=p(A)+p(B)ifAandBare mutually exclusive (2.2)
2.2.2.2 Joint probabilities
We deﬁne the probability of the joint event AandBas follows:
p(A,B)=p(A∧B)=p(A|B)p(B) (2.3)
This is sometimes called the product rule. Given a joint distribution on two events p(A,B),
we deﬁne the marginal distribution as follows:
p(A)=/summationdisplay
bp(A,B)=/summationdisplay
bp(A|B=b)p(B=b) (2.4)
where we are summing over all possible states of B. We can deﬁne p(B)similarly. This is
sometimes called the sum rule or therule of total probability.
The product rule can be applied multiple times to yield the chain rule of probability:
p(X1:D)=p(X1)p(X2|X1)p(X3|X2,X1)p(X4|X1,X2,X3)...p(XD|X1:D−1)(2.5)
where we introduce the Matlab-like notation 1:Dto denote the set {1,2,...,D}.
2.2.2.3 Conditional probability
We deﬁne the conditional probability of eventA, given that event Bis true, as follows:
p(A|B)=p(A,B)
p(B)ifp(B)>0 (2.6)
2.2.3 Bayes rule
Combining the deﬁnition of conditional probability with the product and sum rules yields Bayes
rule, also called Bayes Theorem2:
p(X=x|Y=y)=p(X=x,Y=y)
p(Y=y)=p(X=x)p(Y=y|X=x)/summationtext
x/primep(X=x/prime)p(Y=y|X=x/prime)(2.7)
2.2.3.1 Example: medical diagnosis
As an example of how to use this rule, consider the following medical diagonsis problem.
Suppose you are a woman in your 40s, and you decide to have a medical test for breast cancercalled amammogram. If the test is positive, what is the probability you have cancer? That
obviously depends on how reliable the test is. Suppose you are told the test has a sensitivity
2. Thomas Bayes (1702–1761) was an English mathematician and Presbyterian minister.
30 Chapter2. Probability
of 80%, which means, if you have cancer, the test will be positive with probability 0.8. In other
words,
p(x=1|y=1 )=0 .8 (2.8)
wherex=1is the event the mammogram is positive, and y=1is the event you have breast
cancer. Many people conclude they are therefore 80% likely to have cancer. But this is false! Itignores the prior probability of having breast cancer, which fortunately is quite low:
p(y=1 )=0 .004 (2.9)
Ignoring this prior is called the base rate fallacy. We also need to take into account the fact
that the test may be a false positive orfalse alarm. Unfortunately, such false positives are
quite likely (with current screening technology):
p(x=1|y=0 )=0 .1 (2.10)
Combining these three terms using Bayes rule, we can compute the correct answer as follows:
p(y=1|x=1 ) =p(x=1|y=1 )p(y=1 )
p(x=1|y=1 )p(y=1 )+p(x=1|y=0 )p(y=0 )(2.11)
=0.8×0.004
0.8×0.004+0.1×0.996=0.031 (2.12)
wherep(y=0 )=1 −p(y=1 )=0 .996. In other words, if you test positive, you only have
about a 3% chance of actually having breast cancer!3
2.2.3.2 Example: Generative classiﬁers
We can generalize the medical diagonosis example to classify feature vectors xof arbitrary type
as follows:
p(y=c|x,θ)=p(y=c|θ)p(x|y=c,θ)/summationtext
c/primep(y=c/prime|θ)p(x|y=c/prime,θ)(2.13)
This is called a generative classiﬁer, since it speciﬁes how to generate the data using the class-
conditional density p(x|y=c)and the class prior p(y=c). We discuss such models in detail
in Chapters 3 and 4. An alternative approach is to directly ﬁt the class posterior, p(y=c|x);
this is known as a discriminative classiﬁer. We discuss the pros and cons of the two approachesin Section 8.6.
2.2.4 Independence and conditional independence
We sayXandYareunconditionally independent ormarginally independent, denoted
X⊥Y, if we can represent the joint as the product of the two marginals (see Figure 2.2), i.e.,
X⊥Y⇐⇒p(X,Y)=p(X)p(Y) (2.14)
2.2. Abriefreviewofprobabilitytheory 31


Figure 2.2 Computing p(x,y)=p(x)p(y),w h e r eX⊥Y.H e r eXandYare discrete random variables;
Xhas 6 possible states (values) and Yhas 5 possible states. A general joint distribution on two such
variables would require (6×5)−1=2 9parameters to deﬁne it (we subtract 1 because of the sum-to-one
constraint). By assuming (unconditional) independence, we only need (6−1)+(5−1) = 9parameters
to deﬁne p(x,y).
In general, we say a set of variables is mutually independent if the joint can be written as a
product of marginals.
Unfortunately, unconditional independence is rare, because most variables can inﬂuence most
other variables. However, usually this inﬂuence is mediated via other variables rather than beingdirect. We therefore say XandYareconditionally independent (CI) given Ziff the conditional
joint can be written as a product of conditional marginals:
X⊥Y|Z⇐⇒p(X,Y|Z)=p(X|Z)p(Y|Z) (2.15)
When we discuss graphical models in Chapter 10, we will see that we can write this assumptionas a graph X−Z−Y, which captures the intuition that all the dependencies between XandY
are mediated via Z. For example, the probability it will rain tomorrow (event X) is independent
of whether the ground is wet today (event Y), given knowledge of whether it is raining today
(eventZ). Intuitively, this is because Z“causes” both XandY, so if we know Z,w ed on o t
need to know about Yin order to predict Xor vice versa. We shall expand on this concept in
Chapter 10.
Another characterization of CI is this:
Theorem 2.2.1. X⊥Y|Ziffthereexistfunction gandhsuchthat
p(x,y|z)=g(x,z)h(y,z) (2.16)
forallx,y,zsuch
 thatp(z)>0.
3. These numbers are from (McGrayne 2011, p257). Based on this analysis, the US government decided not to recommend
annual mammogram screening to women in their 40s: the number of false alarms would cause needless worry and
stress amongst women, and result in unnecesssary, expensive, and potentially harmful followup tests. See Section 5.7
for the optimal way to trade off risk reverse reward in the face of uncertainty.
32 Chapter2. Probability
See Exercise 2.8 for the proof.
CI assumptions allow us to build large probabilistic models from small pieces. We will see
many examples of this throughout the book. In particular, in Section 3.5, we discuss naive Bayesclassiﬁers, in Section 17.2, we discuss Markov models, and in Chapter 10 we discuss graphicalmodels; all of these models heavily exploit CI properties.
2.2.5 Continuous random variables
So far, we have only considered reasoning about uncertain discrete quantities. We will now show(following (Jaynes 2003, p107)) how to extend probability to reason about uncertain continuousquantities.
SupposeXis some uncertain continuous quantity. The probability that Xlies in any interval
a≤X≤bcan be computed as follows. Deﬁne the events A=(X≤a),B=(X≤b)and
W=(a<X≤b). We have that B=A∨W, and since AandWare mutually exclusive, the
sum rules gives
p(B)=p(A)+p(W) (2.17)
and hence
p(W)=p(B)−p(A) (2.18)
Deﬁne the function F(q)/definesp(X≤q). This is called the cumulative distribution function
orcdfofX. This is obviously a monotonically increasing function. See Figure 2.3(a) for an
example. Using this notation we have
p(a<X≤b)=F(b)−F(a) (2.19)
Now 
deﬁnef(x)=d
dxF(x)(we assume this derivative exists); this is called the probability
density function orpdf. See Figure 2.3(b) for an example. Given a pdf, we can compute the
probability of a continuous variable being in a ﬁnite interval as follows:
P(a<X≤b)=/integraldisplayb
af(x)dx (2.20)
As the size of the interval gets smaller, we can write
P(x≤X≤x+dx)≈p(x)dx (2.21)
We require p(x)≥0, but it is possible for p(x)>1for any given x, so long as the density
integrates to 1. As an example, consider the uniform distribution Unif(a,b):
Unif(x|a,b)=1
b−aI(a≤x≤b) (2.22)
If we seta=0andb=1
2,w eh a v ep( x)=2for anyx∈[0,1
2].
2.2. Abriefreviewofprobabilitytheory 33
−3 −2 −1 0 1 2 3020406080100CDF
(a)Φ−1(α/2) 0 Φ−1(1−α/2)α/2 α/2
(b)
Figure 2.3 (a) Plot of the cdf for the standard normal, N(0,1). (b) Corresponding pdf. The shaded
regions each contain α/2of the probability mass. Therefore the nonshaded region contains 1−αof the
probability mass. If the distribution is Gaussian N(0,1), then the leftmost cutoff point is Φ−1(α/2),w h e r e
Φis the cdf of the Gaussian. By symmetry, the rightost cutoff point is Φ−1(1−α/2) =−Φ−1(α/2).I f
α=0.05, the central interval is 95%, and the left cutoff is -1.96 and the right is 1.96. Figure generated by
quantileDemo.
2.2.6 Quantiles
Since the cdf Fis a monotonically increasing function, it has an inverse; let us denote this by
F−1.I fFis the cdf of X, thenF−1(α)is the value of xαsuch that P(X≤xα)=α; this is
called the αquantile ofF. The value F−1(0.5)is themedianof the distribution, with half of
the probability mass on the left, and half on the right. The values F−1(0.25)andF−1(0.75)
are the lower and upper quartiles.
We can also use the inverse cdf to compute tail area probabilities. For example, if Φis
the cdf of the Gaussian distribution N(0,1), then points to the left of Φ−1(α)/2)containα/2
probability mass, as illustrated in Figure 2.3(b). By symmetry, points to the right of Φ−1(1−α/2)
also contain α/2of the mass. Hence the central interval (Φ−1(α/2),Φ−1(1−α/2))contains
1−αof the mass. If we set α=0.05, the central 95% interval is covered by the range
(Φ−1(0.025),Φ−1(0.975)) = (−1. 96,1.96) (2.23)
If the distribution is N(μ,σ2), then the 95% interval becomes (μ−1.96σ,μ+1.96σ). This is
sometimes approximated by writing μ±2σ.
2.2.7 Mean and variance
The most familiar property of a distribution is its mean,o rexpected value, denoted by μ.F o r
discrete rv’s, it is deﬁned as E[X]/defines/summationtext
x∈Xxp(x), and for continuous rv’s, it is deﬁned as
E[X]/defines/integraltext
Xxp(x)dx. If this integral is not ﬁnite, the mean is not deﬁned (we will see some
examples of this later).
Thevariance is a measure of the “spread” of a distribution, denoted by σ2. This is deﬁned
34 Chapter2. Probability
as follows:
var[X]/definesE/bracketleftbig
(X−μ)2/bracketrightbig
=/integraldisplay
(x−μ)2p(x)dx (2.24)
=/integraldisplay
x2p(x)dx+μ2/integraldisplay
p(x)dx−2μ/integraldisplay
xp(x)dx=E/bracketleftbig
X2/bracketrightbig
−μ2(2.25)
from which we derive the useful result
E/bracketleftbig
X2/bracketrightbig
=μ2+σ2(2.26)
Thestandard deviation is deﬁned as
std[X]/defines/radicalbig
var[X] (2.27)
This is useful since it has the same units as Xitself.
2.3 Some common discrete distributions
In this section, we review some commonly used parametric distributions deﬁned on discrete
state spaces, both ﬁnite and countably inﬁnite.
2.3.1 The binomial and Bernoulli distributions
Suppose we toss a coin ntimes. Let X∈{0,...,n}be the number of heads. If the probability
of heads is θ, then we say Xhas abinomial distribution, written as X∼Bin(n,θ). The pmf
is given by
Bin(k|n,θ)/defines/parenleftbiggn
k/parenrightbigg
θk(1−θ)n−k(2.28)
where/parenleftbiggn
k/parenrightbigg
/definesn!
(n−k)!k!(2.29)
is the number of ways to choose kitems from n(this is known as the binomial coefficient,
and is pronounced “n choose k”). See Figure 2.4 for some examples of the binomial distribution.This distribution has the following mean and variance:
mean=θ,var=nθ(1−θ) (2.30)
Now suppose we toss a coin only once. Let X∈{0,1}be a binary random variable, with
probability of “success” or “heads” of θ. We say that Xhas aBernoulli distribution. This is
written as X∼Ber(θ), where the pmf is deﬁned as
Ber(x|θ)=θ
I(x=1)(1−θ)I(x=0)(2.31)
In other words,
Ber(x|θ)=/braceleftbiggθifx=1
1−θifx=0(2.32)
This is obviously just a special case of a Binomial distribution with n=1.
2.3. Somecommondiscretedistributions 35
0 1 2 3 4 5 6 7 8 9 1000.050.10.150.20.250.30.35θ=0.250
(a)0 1 2 3 4 5 6 7 8 9 1000.050.10.150.20.250.30.350.4θ=0.900
(b)
Figure 2.4 Illustration of the binomial distribution with n=1 0andθ∈{0.25,0.9}. Figure generated
bybinomDistPlot.
2.3.2 The multinomial and multinoulli distributions
The binomial distribution can be used to model the outcomes of coin tosses. To model the
outcomes of tossing a K-sided die, we can use the multinomial distribution. This is deﬁned as
follows: let x=(x1,...,x K)be a random vector, where xjis the number of times side jof
the die occurs. Then xhas the following pmf:
Mu(x|n,θ)/defines/parenleftbiggn
x1...xK/parenrightbiggK/productdisplay
j=1θxj
j (2.33)
whereθjis the probability that side jshows up, and
/parenleftbiggn
x1...xK/parenrightbigg
/definesn!
x1!x2!···xK!(2.34)
is themultinomial coefficient (the number of ways to divide a set of size n=/summationtextK
k=1xkinto
subsets with sizes x1up toxK).
Now suppose n=1. This is like rolling a K-sided dice once, so xwill be a vector of 0s
and 1s (a bit vector), in which only one bit can be turned on. Speciﬁcally, if the dice shows
up as face k, then the k’th bit will be on. In this case, we can think of xas being a scalar
categorical random variable with Kstates (values), and xis itsdummy encoding, that is,
x=[I(x=1 ),..., I(x=K)]. For example, if K=3, we encode the states 1, 2 and 3 as
(1,0,0),(0,1,0), and(0,0,1). This is also called a one-hot encoding, since we imagine that
only one of the K“wires” is “hot” or on. In this case, the pmf becomes
Mu(x|1,θ)=K/productdisplay
j=1θI(xj=1)
j (2.35)
See Figure 2.1(b-c) for an example. This very common special case is known as a categorical
ordiscretedistribution. (Gustavo Lacerda suggested we call it the multinoulli distribution,b y
analogy with the Binomial/ Bernoulli distinction, a term which we shall adopt in this book.) We
36 Chapter2. Probability
Name nKx
Multinomial - - x∈{0,1,...,n}K,/summationtextK
k=1xk=n
Multinoulli 1 - x∈{0,1}K,/summationtextK
k=1xk=1(1-of-Kencoding)
Binomial - 1 x∈{0,1,...,n}
Bernoulli 1 1 x∈{0,1}
Table 2.1 Summary of the multinomial and related distributions.
a t a g c c g g t a c g g c a 
t t a g c t g c a a c c g c a 
t c a g c c a c t a g a g c a 
a t a a c c g c g a c c g c a 
t t a g c c g c t a a g g t a 
t a a g c c t c g t a c g t a 
t t a g c c g t t a c g g c c 
a t a t c c g g t a c a g t a 
a t a g c a g g t a c c g a a 
a c a t c c g t g a c g g a a
(a)123456789101112131415012
Sequence PositionBits
(b)
Figure 2.5 (a) Some aligned DNA sequences. (b) The corresponding sequence logo. Figure generated by
seqlogoDemo .
will use the following notation for this case:
Cat(x|θ)/definesMu(x|1,θ) (2.36)
In otherwords, if x∼Cat(θ), thenp(x=j|θ)=θj. See Table 2.1 for a summary.
2.3.2.1 Application: DNA sequence motifs
An interesting application of multinomial models arises in biosequence analysis . Suppose
we have a set of (aligned) DNA sequences, such as in Figure 2.5(a), where there are 10 rows
(sequences) and 15 columns (locations along the genome). We see that several locations are con-
served by evolution (e.g., because they are part of a gene coding region), since the corresponding
columns tend to be “pure”. For example, column 7 is all G’s.
One way to visually summarize the data is by using a sequence logo : see Figure 2.5(b). We
plot the letters A, C, G and T with a fontsize proportional to their empirical probability, and with
the most probable letter on the top. The empirical probability distribution at location t,ˆθt,i s
gotten by normalizing the vector of counts (see Equation 3.48 ):
Nt=/parenleftBiggN/summationdisplay
i=1I(Xit=1 ),N/summationdisplay
i=1I(Xit=2 ),N/summationdisplay
i=1I(Xit=3 ),N/summationdisplay
i=1I(Xit=4 )/parenrightBigg
(2.37)
ˆθt=Nt/N (2.38)
This distribution is known as a motif. We can also compute the most probable letter in each
location; this is called the consensus sequence .
2.3. Somecommondiscretedistributions 37
0 5 10 15 20 25 3000.050.10.150.20.250.30.350.4Poi(λ=1.000)
(a)0 5 10 15 20 25 3000.020.040.060.080.10.120.14Poi(λ=10.000)
(b)
Figure 2.6 Illustration of some Poisson distributions for λ∈{1,10}. We have truncated the x-axis to
25 for clarity, but the support of the distribution is over all the non-negative integers. Figure generated by
poissonPlotDemo.
2.3.3 The Poisson distribution
We say that X∈{0,1,2,...}has aPoisson distribution with parameter λ>0, written
X∼Poi(λ), if its pmf is
Poi(x|λ)=e−λλx
x!(2.39)
The ﬁrst term is just the normalization constant, required to ensure the distribution sums to 1.
The Poisson distribution is often used as a model for counts of rare events like radioactive
decay and traffic accidents. See Figure 2.6 for some plots.
2.3.4 The empirical distribution
Given a set of data, D={x1,...,x N}, we deﬁne the empirical distribution, also called the
empirical measure, as follows:
pemp(A)/defines1
NN/summationdisplay
i=1δxi(A) (2.40)
whereδx(A)is theDirac measure, deﬁned by
δx(A)=/braceleftbigg0ifx/negationslash∈A
1ifx∈A(2.41)
In general, we can associate “weights” with each sample:
p(x)=N/summationdisplay
i=1wiδxi(x) (2.42)
where we require 0≤wi≤1and/summationtextN
i=1wi=1. We can think of this as a histogram, with
“spikes” at the data points xi,w h e r ewidetermines the height of spike i. This distribution
assigns 0 probability to any point not in the data set.
38 Chapter2. Probability
2.4 Some common continuous distributions
In this section we present some commonly used univariate (one-dimensional) continuous prob-
ability distributions.
2.4.1 Gaussian (normal) distribution
The most widely used distribution in statistics and machine learning is the Gaussian or normaldistribution. Its pdf is given by
N(x|μ,σ
2)/defines1√
2πσ2e−1
2σ2(x−μ)2(2.43)
Hereμ=E[X]is the mean (and mode), and σ2= var[X]is the variance.√
2πσ2is the
normalization constant needed to ensure the density integrates to 1 (see Exercise 2.11).
We write X∼N(μ,σ2)to denote that p(X=x)=N(x|μ,σ2).I fX∼N(0,1),w e
sayXfollows a standard normal distribution. See Figure 2.3(b) for a plot of this pdf; this is
sometimes called the bell curve.
We will often talk about the precision of a Gaussian, by which we mean the inverse variance:
λ=1/σ2. A high precision means a narrow distribution (low variance) centered on μ.4
Note that, since this is a pdf, we can have p(x)>1. To see this, consider evaluating the
density at its center, x=μ.W eh a v e N(μ|μ,σ2)=(σ√
2π)−1e0,so ifσ<1/√
2π,w eh a v e
p(x)>1.
The cumulative distribution function or cdf of the Gaussian is deﬁned as
Φ(x;μ,σ2)/defines/integraldisplayx
−∞N(z|μ,σ2)dz (2.44)
See Figure 2.3(a) for a plot of this cdf when μ=0,σ2=1. This integral has no closed form
expression, but is built in to most software packages. In particular, we can compute it in termsof theerror function (erf):
Φ(x;μ,σ)=1
2[1+erf(z/√
2)] (2.45)
wherez=(x−μ)/σand
erf(x)/defines2√π/integraldisplayx
0e−t2dt (2.46)
The Gaussian distribution is the most widely used distribution in statistics. There are several
reasons for this. First, it has two parameters which are easy to interpret, and which capturesome of the most basic properties of a distribution, namely its mean and variance. Second,the central limit theorem (Section 2.6.3) tells us that sums of independent random variableshave an approximately Gaussian distribution, making it a good choice for modeling residualerrors or “noise”. Third, the Gaussian distribution makes the least number of assumptions (has
4. The symbol λwill have many different meanings in this book, in order to be consistent with the rest of the literature.
The intended meaning should be clear from context.
2.4. Somecommoncontinuousdistributions 39
maximum entropy), subject to the constraint of having a speciﬁed mean and variance, as we
show in Section 9.2.6; this makes it a good default choice in many cases. Finally, it has a simplemathematical form, which results in easy to implement, but often highly effective, methods, aswe will see. See (Jaynes 2003, ch 7) for a more extensive discussion of why Gaussians are sowidely used.
2.4.2 Degenerate pdf
In the limit that σ2→0, the Gaussian becomes an inﬁnitely tall and inﬁnitely thin “spike”
centered at μ:
lim
σ2→0N(x|μ,σ2)=δ(x−μ) (2.47)
whereδis called a Dirac delta function, and is deﬁned as
δ(x)=/braceleftbigg∞ifx=0
0ifx/negationslash=0(2.48)
such that
/integraldisplay∞
−∞δ(x)dx=1 (2.49)
A useful property of delta functions is the sifting property, which selects out a single term
from a sum or integral:
/integraldisplay∞
−∞f(x)δ(x−μ)dx=f(μ) (2.50)
since the integrand is only non-zero if x−μ=0.
One problem with the Gaussian distribution is that it is sensitive to outliers, since the log-
probability only decays quadratically with distance from the center. A more robust distributionis theStudenttdistribution
5Its pdf is as follows:
T(x|μ,σ2,ν)∝/bracketleftBigg
1+1
ν/parenleftbiggx−μ
σ/parenrightbigg2/bracketrightBigg−(ν+1
2)
(2.51)
whereμis the mean, σ2>0is the scale parameter, and ν>0is called the degrees of
freedom. See Figure 2.7 for some plots. For later reference, we note that the distribution hasthe following properties:
mean=μ,mode=μ,var=νσ
2
(ν−2)(2.52)
5. This distribution has a colourful etymology. It was ﬁrst published in 1908 by William Sealy Gosset, who worked at the
Guinness brewery in Dublin. Since his employer would not allow him to use his own name, he called it the “Student”
distribution. The origin of the term tseems to have arisen in the context of Tables of the Student distribution, used by
Fisher when developing the basis of classical statistical inference. See http://jeff560.tripod.com/s.html for more
historical details.
40 Chapter2. Probability
−4 −3 −2 −1 0 1 2 3 400.10.20.30.40.50.60.70.8
  
Gauss
Student
Laplace
(a)−4 −3 −2 −1 0 1 2 3 4−9−8−7−6−5−4−3−2−10
  
Gauss
Student
Laplace
(b)
Figure 2.7 (a) The pdf’s for a N(0,1),T(0,1,1)andLap(0,1/√
2). The mean is 0 and the variance
is 1 for both the Gaussian and Laplace. The mean and variance of the Student is undeﬁned when ν=1.
(b) Log of these pdf’s. Note that the Student distribution is not log-concave for any parameter value, unlike
the Laplace distribution, which is always log-concave (and log-convex...) Nevertheless, both are unimodal.Figure generated by studentLaplacePdfPlot .
−5 0 5 1000.10.20.30.40.5
  
gaussian
student T
laplace
(a)−5 0 5 1000.10.20.30.40.5
  
gaussian
student T
laplace
(b)
Figure 2.8 Illustration of the effect of outliers on ﬁtting Gaussian, Student and Laplace distributions. (a)
No outliers (the Gaussian and Student curves are on top of each other). (b) With outliers. We see that theGaussian is more affected by outliers than the Student and Laplace distributions. Based on Figure 2.16 of(Bishop 2006a). Figure generated by robustDemo.
The variance is only deﬁned if ν>2. The mean is only deﬁned if ν>1.
As an illustration of the robustness of the Student distribution, consider Figure 2.8. On the
left, we show a Gaussian and a Student ﬁt to some data with no outliers. On the right, we
add some outliers. We see that the Gaussian is affected a lot, whereas the Student distributionhardly changes. This is because the Student has heavier tails, at least for small ν(see Figure 2.7).
Ifν=1, this distribution is known as the CauchyorLorentzdistribution. This is notable
for having such heavy tails that the integral that deﬁnes the mean does not converge.
To ensure ﬁnite variance, we require ν>2. It is common to use ν=4, which gives good
performance in a range of problems (Lange et al. 1989). For ν/greatermuch5, the Student distribution
rapidly approaches a Gaussian distribution and loses its robustness properties.
2.4. Somecommoncontinuousdistributions 41
1 2 3 4 5 6 70.10.20.30.40.50.60.70.80.9Gamma distributions
  
a=1.0,b=1.0
a=1.5,b=1.0
a=2.0,b=1.0
(a)0 0.5 1 1.5 2 2.500.511.522.533.5
(b)
Figure 2.9 (a) Some Ga(a,b=1 )distributions. If a≤1, the mode is at 0, otherwise it is >0.A s
we increase the rate b, we reduce the horizontal scale, thus squeezing everything leftwards and upwards.
Figure generated by gammaPlotDemo. (b) An empirical pdf of some rainfall data, with a ﬁtted Gamma
distribution superimposed. Figure generated by gammaRainfallDemo .
2.4.3 The Laplace distribution
Another distribution with heavy tails is the Laplace distribution6, also known as the double
sided exponential distribution. This has the following pdf:
Lap(x|μ,b)/defines1
2bexp/parenleftbigg
−|x−μ|
b/parenrightbigg
(2.53)
Hereμis a location parameter and b>0is a scale parameter. See Figure 2.7 for a plot. This
distribution has the following properties:
mean=μ,mode=μ,var=2b2(2.54)
Its robustness to outliers is illustrated in Figure 2.8. It also put mores probability density at 0
than the Gaussian. This property is a useful way to encourage sparsity in a model, as we willsee in Section 13.3.
2.4.4 The gamma distribution
Thegamma distribution is a ﬂexible distribution for positive real valued rv’s, x>0.I t i s
deﬁned in terms of two parameters, called the shape a>0and the rate b>0:7
Ga(T|shape =a,rate =b)/definesba
Γ(a)Ta−1e−Tb(2.55)
6. Pierre-Simon Laplace (1749–1827) was a French mathematician, who played a key role in creating the ﬁeld of Bayesian
statistics.
7. There is an alternative parameterization, where we use the scale parameter instead of the rate: Gas(T |a,b)/defines
Ga(T|a,1/b). This version is the one used by Matlab’s gampdf, although in this book will use the rate parameterization
unless otherwise speciﬁed.
42 Chapter2. Probability
whereΓ(a)is the gamma function:
Γ(x)/defines/integraldisplay∞
0ux−1e−udu (2.56)
See Figure 2.9 for some plots. For later reference, we note that the distribution has the following
properties:
mean=a
b,mode=a−1
b,var=a
b2(2.57)
There are several distributions which are just special cases of the Gamma, which we discuss
below.
•Exponential distribution This is deﬁned by Expon(x|λ)/definesGa(x|1,λ),w h e r eλis the rate
parameter. This distribution describes the times between events in a Poisson process, i.e. a
process in which events occur continuously and independently at a constant average rate λ.
•Erlang distribution This is the same as the Gamma distribution where ais an integer. It
is common to ﬁx a=2, yielding the one-parameter Erlang distribution, Erlang(x|λ)=
Ga(x|2,λ),w h e r eλ is the rate parameter.
•Chi-squared distribution This is deﬁned by χ2(x|ν)/definesGa(x|ν
2,1
2). This is the distribution
of the sum of squared Gaussian random variables. More precisely, if Zi∼N(0,1), and
S=/summationtextν
i=1Z2
i, thenS∼χ2
ν.
Another useful result is the following: If X∼Ga(a,b), then one can show (Exercise 2.10)
that1
X∼IG(a,b),w h e r eIG is theinverse gamma distribution deﬁned by
IG(x|shape =a,scale =b)/definesba
Γ(a)x−(a+1)e−b/x(2.58)
The distribution has these properties
mean=b
a−1,mode=b
a+1,var=b2
(a−1)2(a−2), (2.59)
The mean only exists if a>1. The variance only exists if a>2.
We will see applications of these distributions later on.
2.4.5 The beta distribution
Thebeta distribution has support over the interval [0,1]and is deﬁned as follows:
Beta(x|a,b)=1
B(a,b)xa−1(1−x)b−1(2.60)
HereB(p,q)is the beta function,
B(a,b)/definesΓ(a)Γ(b)
Γ(a+b)(2.61)
See Figure 2.10 for plots of some beta distributions. We require a,b >0to ensure the distribution
is integrable (i.e., to ensure B(a,b)exists). If a=b=1, we get the uniform distirbution. If
2.4. Somecommoncontinuousdistributions 43
0 0.2 0.4 0.6 0.8 100.511.522.53beta distributions
  
a=0.1, b=0.1
a=1.0, b=1.0
a=2.0, b=3.0
a=8.0, b=4.0
Figure 2.10 Some beta distributions. Figure generated by betaPlotDemo.
aandbare both less than 1, we get a bimodal distribution with “spikes” at 0 and 1; if aand
bare both greater than 1, the distribution is unimodal. For later reference, we note that the
distribution has the following properties (Exercise 2.16):
mean=a
a+b,mode=a−1
a+b−2,var=ab
(a+b)2(a+b+1)(2.62)
2.4.6 Pareto distribution
ThePareto distribution is used to model the distribution of quantities that exhibit long tails,
also called heavy tails. For example, it has been observed that the most frequent word in
English (“the”) occurs approximately twice as often as the second most frequent word (“of”),
which occurs twice as often as the fourth most frequent word, etc. If we plot the frequency ofwords vs their rank, we will get a power law; this is known as Zipf’s law. Wealth has a similarly
skewed distribution, especially in plutocracies such as the USA.
8
The Pareto pdf is deﬁned as follow:
Pareto(x|k,m)=kmkx−(k+1)I(x≥m) (2.63)
This density asserts that xmust be greater than some constant m, but not too much greater,
wherekcontrols what is “too much”. As k→∞, the distribution approaches δ(x−m). See
Figure 2.11(a) for some plots. If we plot the distibution on a log-log scale, it forms a straightline, of the form logp(x)=alogx+cfor some constants aandc. See Figure 2.11(b) for an
illustration (this is known as a power law). This distribution has the following properties
mean=km
k−1ifk>1,mode=m,var=m2k
(k−1)2(k−2)ifk>2 (2.64)
8. In the USA, 400 Americans have more wealth than half of all Americans combined. (Source:
http://www.politifact.com/wisconsin/statements/2011/mar/10/michael-moore/michael-moore-s
ays-400-americans-have-more-wealth- .) See (Hacker and Pierson 2010) for a political analysis of how such an
extreme distribution of income has arisen in a democratic country.
44 Chapter2. Probability
0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 500.20.40.60.811.21.41.61.82Pareto distribution
  
m=0.01, k=0.10
m=0.00, k=0.50
m=1.00, k=1.00
(a)10010−310−210−1100101Pareto(m=1, k) on log scale
  
k=1.0
k=2.0
k=3.0
(b)
Figure 2.11 (a) The Pareto distribution Pareto(x |m,k)form=1. (b) The pdf on a log-log scale. Figure
generated by paretoPlot.
2.5 Joint probability distributions
So far, we have been mostly focusing on modeling univariate probability distributions. In this
section, we start our discussion of the more challenging problem of building joint probabilitydistributions on multiple related random variables; this will be a central topic in this book.
Ajoint probability distribution has the form p(x
1,...,x D)f o ras e to fD> 1variables,
and models the (stochastic) relationships between the variables. If all the variables are discrete,we can represent the joint distribution as a big multi-dimensional array, with one variable perdimension. However, the number of parameters needed to deﬁne such a model is O(K
D),
whereKis the number of states for each variable.
We can deﬁne high dimensional joint distributions using fewer parameters by making con-
ditional independence assumptions, as we explain in Chapter 10. In the case of continuousdistributions, an alternative approach is to restrict the form of the pdf to certain functionalforms, some of which we will examine below.
2.5.1 Covariance and correlation
Thecovariance between two rv’s XandYmeasures the degree to which XandYare (linearly)
related. Covariance is deﬁned as
cov[X,Y ]/definesE[(X−E[X])(Y−E[Y])] = E[XY]−E[X]E[Y] (2.65)
2.5. Jointprobabilitydistributions 45
Figure 2.12 Several sets of (x,y)points, with the correlation coefficient of xandyfor each set. Note
that the correlation reﬂects the noisiness and direction of a linear relationship (top row), but not the slope
of that relationship (middle), nor many aspects of nonlinear relationships (bottom). N.B.: the ﬁgure in the
center has a slope of 0 but in that case the correlation coefficient is undeﬁned because the variance of Y
is zero. Source: http://en .wikipedia .org/wiki/File:Correlation_examples .png
Ifxis ad-dimensional random vector, its covariance matrix is deﬁned to be the following
symmetric, positive deﬁnite matrix:
cov[x]/definesE/bracketleftBig
(x−E[x])(x−E[x])T/bracketrightBig
(2.66)
=⎛
⎜⎜⎜⎝var[X1]c o v [ X1,X2]···cov[X1,Xd]
cov[X2,X1] var[ X2]···cov[X2,Xd]
............
cov[Xd,X1]c o v [Xd,X2]···var[Xd]⎞
⎟⎟⎟⎠(2.67)
Covariances can be between 0 and inﬁnity. Sometimes it is more convenient to work with a
normalized measure, with a ﬁnite upper bound. The (Pearson) correlation coefficient between
XandYis deﬁned as
corr[X,Y]/definescov[X,Y]/radicalbig
var[X]var[Y](2.68)
Acorrelation matrix has the form
R=⎛
⎜⎝corr[X1,X1] corr[X1,X2]···corr[X1,Xd]
............
corr[Xd,X1] corr[Xd,X2]···corr[Xd,Xd]⎞
⎟⎠ (2.69)
One can show (Exercise 4.3) that −1≤corr[X,Y]≤1. Hence in a correlation matrix, each
entry on the diagonal is 1, and the other entries are between -1 and 1.
One can also show that corr[X,Y]=1if and only if Y=aX+bfor some parameters a
andb, i.e., if there is a linearrelationship between XandY(see Exercise 4.4). Intuitively one
46 Chapter2. Probability
might expect the correlation coefficient to be related to the slope of the regression line, i.e., the
coefficient ain the expression Y=aX+b. However, as we show in Equation 7.99 later, the
regression coefficient is in fact given by a=c o v[X,Y]/var[X]. A better way to think of the
correlation coefficient is as a degree of linearity: see Figure 2.12.
IfXandYare independent, meaning p(X,Y)=p(X)p(Y)(see Section 2.2.4), then
cov[X,Y ]=0, and hence corr[X,Y ]=0so they are uncorrelated. However, the con-
v e r s ei sn o tt r u e : uncorrelateddoesnotimplyindependent. For example, let X∼U(−1,1)and
Y=X2. Clearly Yis dependent on X(in fact,Yis uniquely determined by X), yet one
can show (Exercise 4.1) that corr[X,Y ]=0. Some striking examples of this fact are shown in
Figure 2.12. This shows several data sets where there is clear dependendence between XandY,
and yet the correlation coefficient is 0. A more general measure of dependence between randomvariables is mutual information, discussed in Section 2.8.3. This is only zero if the variables trulyare independent.
2.5.2 The multivariate Gaussian
Themultivariate Gaussian ormultivariate normal (MVN) is the most widely used joint prob-
ability density function for continuous variables. We discuss MVNs in detail in Chapter 4; herewe just give some deﬁnitions and plots.
The pdf of the MVN in Ddimensions is deﬁned by the following:
N(x|μ,Σ)/defines1
(2π)D/2|Σ|1/2exp/bracketleftbigg
−1
2(x−μ)TΣ−1(x−μ)/bracketrightbigg
(2.70)
whereμ=E[x]∈RDis the mean vector, and Σ=c o v [x]is theD×Dcovariance
matrix. Sometimes we will work in terms of the precision matrix orconcentration matrix
instead. This is just the inverse covariance matrix, Λ=Σ−1. The normalization constant
(2π)−D/2|Λ|1/2just ensures that the pdf integrates to 1 (see Exercise 4.5).
Figure 2.13 plots some MVN densities in 2d for three different kinds of covariance matrices.
A full covariance matrix has D(D+1)/2parameters (we divide by 2 since Σis symmetric). A
diagonal covariance matrix has Dparameters, and has 0s in the off-diagonal terms. A spherical
orisotropic covariance, Σ=σ2ID, has one free parameter.
2.5.3 Multivariate Student tdistribution
A more robust alternative to the MVN is the multivariate Student t distribution, whose pdf is
given by
T(x|μ,Σ,ν)=Γ(ν/2+D/2)
Γ(ν/2)|Σ|−1/2
νD/2πD/2×/bracketleftbigg
1+1
ν(x−μ)TΣ−1(x−μ)/bracketrightbigg−(ν+D
2)
(2.71)
=Γ(ν/2+D/2)
Γ(ν/2)|πV|−1/2×/bracketleftbig
1+(x−μ)TV−1(x−μ)/bracketrightbig−(ν+D
2)(2.72)
whereΣis called the scale matrix (since it is not exactly the covariance matrix) and V=νΣ.
This has fatter tails than a Gaussian. The smaller νis, the fatter the tails. As ν→∞, the
2.5. Jointprobabilitydistributions 47
full
−6 −4 −2 0 2 4 6−6−4−20246
(a)diagonal
−5 −4 −3 −2 −1 0 1 2 3 4 5−10−8−6−4−20246810
(b)
spherical
−4 −2 0 2 4 6−5−4−3−2−1012345
(c)−505
−50500.050.10.150.2spherical
(d)
Figure 2.13 We show the level sets for 2d Gaussians. (a) A full covariance matrix has elliptical contours.
(b) A diagonal covariance matrix is an axis aligned ellipse. (c) A spherical covariance matrix has a circular
shape. (d) Surface plot for the spherical Gaussian in (c). Figure generated by gaussPlot2Ddemo.
distribution tends towards a Gaussian. The distribution has the following properties
mean=μ,mode=μ,Cov=ν
ν−2Σ (2.73)
2.5.4 Dirichlet distribution
A multivariate generalization of the beta distribution is the Dirichlet distribution9, which has
support over the probability simplex, deﬁned by
SK={x:0≤xk≤1,K/summationdisplay
k=1xk=1} (2.74)
The pdf is deﬁned as follows:
Dir(x|α)/defines1
B(α)K/productdisplay
k=1xαk−1
kI(x∈SK) (2.75)
9. Johann Dirichlet was a German mathematician, 1805–1859.
48 Chapter2. Probability
(a)
 (b)
(c)00.51
00.51051015
α=0.10
p
(d)
Figure 2.14 (a) The Dirichlet distribution when K=3deﬁnes a distribution over the simplex, which
can be represented by the triangular surface. Points on this surface satisfy 0≤θk≤1and/summationtext3
k=1θk=
1. (b) Plot of the Dirichlet density when α=( 2,2,2). (c) α= (20,2,2). Figure generated by
visDirichletGui , by Jonathan Huang. (d) α=( 0.1,0.1,0.1). (The comb-like structure on the edges is
a plotting artifact.) Figure generated by dirichlet3dPlot .
1 2 3 4 500.51Samples from Dir (alpha=0.1)
1 2 3 4 500.51
1 2 3 4 500.51
1 2 3 4 500.51
1 2 3 4 500.51
(a)1 2 3 4 500.51Samples from Dir (alpha=1)
1 2 3 4 500.51
1 2 3 4 500.51
1 2 3 4 500.51
1 2 3 4 500.51
(b)
Figure 2.15 Samples from a 5-dimensional symmetric Dirichlet distribution for different parameter values.
(a)α=( 0.1,...,0.1). This results in very sparse distributions, with many 0s. (b) α=( 1,...,1). This
results in more uniform (and dense) distributions. Figure generated by dirichletHistogramDemo .
2.6. Transformationsofrandomvariables 49
whereB(α1,...,α K)is the natural generalization of the beta function to Kvariables:
B(α)/defines/producttextK
k=1Γ(αk)
Γ(α0)(2.76)
whereα0/defines/summationtextKk=1αk.
Figure 2.14 shows some plots of the Dirichlet when K=3, and Figure 2.15 for some sampled
probability vectors. We see that α0=/summationtextKk=1αkcontrols the strength of the distribution (how
peaked it is), and the αkcontrol where the peak occurs. For example, Dir(1,1,1)is a uniform
distribution, Dir(2,2,2)is a broad distribution centered at (1/3,1/3,1/3), andDir(20,20,20)
is a narrow distribution centered at (1/3,1/3,1/3).I fαk<1for allk, we get “spikes” at the
corner of the simplex.
For future reference, the distribution has these properties
E[xk]=αk
α0,mode[xk]=αk−1
α0−K,var[xk]=αk(α0−αk)
α2
0(α0+1)(2.77)
whereα0=/summationtext
kαk. Often we use a symmetric Dirichlet prior of the form αk=α/K. In this
case, the mean becomes 1/K, and the variance becomes var[xk]=K−1
K2(α+1). So increasing α
increases the precision (decreases the variance) of the distribution.
2.6 Transformations of random variables
Ifx∼p()is some random variable, and y=f(x), what is the distribution of y? This is the
question we address in this section.
2.6.1 Linear transformations
Supposef()is a linear function:
y=f(x)=Ax+b (2.78)
In this case, we can easily derive the mean and covariance of yas follows. First, for the mean,
we have
E[y]=E[Ax+b]=Aμ+b (2.79)
whereμ=E[x]. This is called the linearity of expectation.I f f()is a scalar-valued function,
f(x)=aTx+b, the corresponding result is
E/bracketleftbig
aTx+b/bracketrightbig
=aTμ+b (2.80)
For the covariance, we have
cov[y]=c o v[Ax+b]=AΣAT(2.81)
whereΣ=c o v[x]. We leave the proof of this as an exercise. If f()is scalar valued, the result
becomes
var[y]=v a r/bracketleftbig
aTx+b/bracketrightbig
=aTΣa (2.82)
50 Chapter2. Probability
We will use both of these results extensively in later chapters. Note, however, that the mean
and covariance only completely deﬁne the distribution of yifxis Gaussian. In general we must
use the techniques described below to derive the full distribution of y, as opposed to just its
ﬁrst two moments.
2.6.2 General transformations
IfXis a discrete rv, we can derive the pmf for yby simply summing up the probability mass
for all the x’s such that f(x)=y:
py(y)=/summationdisplay
x:f(x)=ypx(x) (2.83)
For example, if f(X)=1ifXis even and f(X)=0otherwise, and px(X)is uniform on the
set{1,...,10}, then py(1) =/summationtext
x∈{2,4,6,8,10} px(x)=0.5, andpy(0) = 0.5 similarly. Note
that in this example, fis a many-to-one function.
IfXis continuous, we cannot use Equation 2.83 since px(x)is a density, not a pmf, and we
cannot sum up densities. Instead, we work with cdf’s, and write
Py(y)/definesP(Y≤y)=P(f(X)≤y)=P(X∈{x|f(x)≤y}) (2.84)
We can derive the pdf of yby differentiating the cdf.
In the case of monotonic and hence invertible functions, we can write
Py(y)=P(f(X)≤y)=P(X≤f−1(y)) =Px(f−1(y)) (2.85)
Taking derivatives we get
py(y)/definesd
dyPy(y)=d
dyPx(f−1(y)) =dx
dyd
dxPx(x)=dx
dypx(x) (2.86)
wherex=f−1(y). We can think of dxas a measure of volume in the x-space; similarly dy
measures volume in yspace. Thusdx
dymeasures the change in volume. Since the sign of this
change is not important, we take the absolute value to get the general expression:
py(y)=px(x)/vextendsingle/vextendsingledx
dy/vextendsingle/vextendsingle (2.87)
This is called change of variables formula. We can understand this result more intuitively as
follows. Observations falling in the range (x,x+δx)will get transformed into (y,y+δy),w h e r e
p
x(x)δx≈py(y)δy. Hence py(y)≈px(x)|δx
δy|. For example, suppose X∼U(−1,1), and
Y=X2. Thenpy(y)=1
2y−1
2. See also Exercise 2.10.
2.6.2.1 Multivariate change of variables *
We can extend the previous results to multivariate distributions as follows. Let fbe a function
that maps RntoRn, and lety=f(x). Then its Jacobian matrix Jis given by
Jx→y/defines∂(y1,...,y n)
∂(x1,...,x n)/defines⎛
⎜⎝∂y1
∂x1···∂y1
∂xn.........
∂yn
∂x1···∂yn
∂xn⎞
⎟⎠ (2.88)
2.6. Transformationsofrandomvariables 51
|detJ|measures how much a unit cube changes in volume when we apply f.
Iffis an invertible mapping, we can deﬁne the pdf of the transformed variables using the
Jacobian of the inverse mapping y→x:
py(y)=px(x)/vextendsingle/vextendsingledet/parenleftbigg∂x
∂y/parenrightbigg/vextendsingle/vextendsingle=p
x(x)|detJy→x| (2.89)
In Exercise 4.5 you will use this formula to derive the normalization constant for a multivariate
Gaussian.
As a simple example, consider transforming a density from Cartesian coordinates x=(x1,x2)
to polar coordinates y=(r,θ),w h e r ex 1=rcosθandx2=rsinθ. Then
Jy→x=/parenleftbigg∂x1
∂r∂x1
∂θ∂x2
∂r∂x2
∂θ/parenrightbigg
=/parenleftbiggcosθ−rsinθ
sinθrcosθ/parenrightbigg
(2.90)
and
|detJ|=|rcos2θ+rsin2θ|=|r| (2.91)
Hence
py(y)=p x(x)|detJ| (2.92)
pr,θ(r,θ)=p x1,x2(x1,x2)r=px1,x2(rcosθ,rsinθ)r (2.93)
To see this geometrically, notice that the area of the shaded patch in Figure 2.16 is given by
P(r≤R≤r+dr,θ≤Θ≤θ+dθ)=p r,θ(r,θ)drdθ (2.94)
In the limit, this is equal to the density at the center of the patch, p(r,θ), times the size of the
patch,rd rd θ. Hence
pr,θ(r,θ)drdθ=px1,x2(rcosθ,rsinθ)rd rd θ (2.95)
2.6.3 Central limit theorem
Now consider Nrandom variables with pdf’s (not necessarily Gaussian) p(xi), each with mean
μand variance σ2. We assume each variable is independent and identically distributed
oriidfor short. Let SN=/summationtextN
i=1Xibe the sum of the rv’s. This is a simple but widely
used transformation of rv’s. One can show that, as Nincreases, the distribution of this sum
approaches
p(SN=s)=1√
2πNσ2exp/parenleftbigg
−(s−Nμ)2
2Nσ2/parenrightbigg
(2.96)
Hence the distribution of the quantity
ZN/definesSN−Nμ
σ√
N=X−μ
σ/√
N(2.97)
converges to the standard normal, where X=1
N/summationtextNi=1xiis the sample mean. This is called
thecentral limit theorem. See e.g., (Jaynes 2003, p222) or (Rice 1995, p169) for a proof.
In Figure 2.17 we give an example in which we compute the mean of rv’s drawn from a beta
distribution. We see that the sampling distribution of the mean value rapidly converges to a
Gaussian distribution.
52 Chapter2. Probability
Figure 2.16 Change of variables from polar to Cartesian. The area of the shaded patch is rd rd θ. Based
on (Rice 1995) Figure 3.16.
0 0.5 10123N = 1
(a)0 0.5 10123N = 5
(b)
Figure 2.17 The central limit theorem in pictures. We plot a histogram of1
N/summationtextN
i=1xij,w h e r exij∼
Beta(1,5),f o rj= 1 : 10000 .A sN→∞, the distribution tends towards a Gaussian. (a) N=1. (b)
N=5. Based on Figure 2.6 of (Bishop 2006a). Figure generated by centralLimitDemo .
2.7 Monte Carlo approximation
In general, computing the distribution of a function of an rv using the change of variables
formula can be difficult. One simple but powerful alternative is as follows. First we generate
Ssamples from the distribution, call them x1,...,x S. (There are many ways to generate such
samples; one popular method, for high dimensional distributions, is called Markov chain Monte
Carlo or MCMC; this will be explained in Chapter 24.) Given the samples, we can approximate
the distribution of f(X)by using the empirical distribution of {f(xs)}S
s=1. This is called a
Monte Carlo approximation, named after a city in Europe known for its plush gambling casinos.
Monte Carlo techniques were ﬁrst developed in the area of statistical physics — in particular,
during development of the atomic bomb — but are now widely used in statistics and machine
learning as well.
We can use Monte Carlo to approximate the expected value of any function of a random
2.7. MonteCarloapproximation 53
−1 0 1−0.500.511.5
0 0.5 10246
0 0.5 100.050.10.150.20.25
Figure 2.18 Computing the distribution of y=x2,w h e r ep(x)is uniform (left). The analytic result is
shown in the middle, and the Monte Carlo approximation is shown on the right. Figure generated by
changeOfVarsDemo1d .
variable. We simply draw samples, and then compute the arithmetic mean of the function
applied to the samples. This can be written as follows:
E[f(X)] =/integraldisplay
f(x)p(x)dx≈1
SS/summationdisplay
s=1f(xs) (2.98)
wherexs∼p(X). This is called Monte Carlo integration, and has the advantage over numerical
integration (which is based on evaluating the function at a ﬁxed grid of points) that the functionis only evaluated in places where there is non-negligible probability.
By varying the function f(), we can approximate many quantities of interest, such as
•
x=1
S/summationtextS
s=1xs→E[X]
•1
S/summationtextSs=1(xs−x)2→var[X]
•1
S#{xs≤c}→P(X≤c)
• median{x 1,...,x S}→median( X)
We give some examples below, and will see many more in later chapters.
2.7.1 Example: change of variables, the MC way
In Section 2.6.2, we discussed how to analytically compute the distribution of a function of a
random variable, y=f(x). A much simpler approach is to use a Monte Carlo approximation.
For example, suppose x∼Unif(−1,1)andy=x2. We can approximate p(y)by drawing
many samples from p(x), squaring them, and computing the resulting empirical distribution.
See Figure 2.18 for an illustration. We will use this technique extensively in later chapters. Seealso Figure 5.2.
54 Chapter2. Probability
−2 −1 0 1 2−2−1.5−1−0.500.511.52
Figure 2.19 Estimating πby Monte Carlo integration. Blue points are inside the circle, red crosses are
outside. Figure generated by mcEstimatePi.
2.7.2 Example: estimating πby Monte Carlo integration
MC approximation can be used for many applications, not just statistical ones. Suppose we want
to estimate π. We know that the area of a circle with radius risπr2, but it is also equal to the
following deﬁnite integral:
I=/integraldisplayr
−r/integraldisplayr
−rI(x2+y2≤r2)dxdy (2.99)
Henceπ=I/(r2). Let us approximate this by Monte Carlo integration. Let f(x,y)=
I(x2+y2≤r2)be an indicator function that is 1 for points inside the circle, and 0 outside,
and letp(x)andp(y)be uniform distributions on [−r,r],s op(x)=p(y)=1/(2r). Then
I=( 2r)(2r)/integraldisplay/integraldisplay
f(x,y)p(x)p(y)dxdy (2.100)
=4r2/integraldisplay/integraldisplay
f(x,y)p(x)p(y)dxdy (2.101)
≈4r21
SS/summationdisplay
s=1f(xs,ys) (2.102)
We ﬁndˆπ=3.1416with standard error 0.09 (see Section 2.7.3 for a discussion of standard
errors). We can plot the points that are accepted/ rejected as in Figure 2.19.
2.7.3 Accuracy of Monte Carlo approximation
The accuracy of an MC approximation increases with sample size. This is illustrated in Fig-ure 2.20, On the top line, we plot a histogram of samples from a Gaussian distribution. Onthe bottom line, we plot a smoothed version of these samples, created using a kernel densityestimate (Section 14.7.2). This smoothed distribution is then evaluated on a dense grid of points
2.7. MonteCarloapproximation 55
0.5 1 1.5 2 2.5012345610 samples
(a)0.5 1 1.5 2 2.500.20.40.60.811.21.41.61.82100 samples
(b)
0.5 1 1.5 2 2.500.511.522.510 samples
(c)0.5 1 1.5 2 2.500.20.40.60.811.21.41.61.8100 samples
(d)
Figure 2.20 10 and 100 samples from a Gaussian distribution, N(μ=1.5,σ2=0.25). Solid red
line is true pdf. Top line: histogram of samples. Bottom line: kernel density estimate derived from
samples in dotted blue, solid red line is true pdf. Based on Figure 4.1 of (Hoff 2009). Figure generated bymcAccuracyDemo.
and plotted. Note that this smoothing is just for the purposes of plotting, it is not used for the
Monte Carlo estimate itself.
If we denote the exact mean by μ=E[f(X)], and the MC approximation by ˆμ, one can
show that, with independent samples,
(ˆμ−μ)→N(0,σ2
S) (2.103)
where
σ2= var[f(X)] =E/bracketleftbig
f(X)2/bracketrightbig
−E[f(X)]2(2.104)
This is a consequence of the central-limit theorem. Of course, σ2is unknown in the above
expression, but it can also be estimated by MC:
ˆσ2=1
SS/summationdisplay
s=1(f(xs)−ˆμ)2(2.105)
Then we have
P/braceleftbigg
μ−1.96ˆσ√
S≤ˆμ≤μ+1.96ˆσ√
S/bracerightbigg
≈0.95 (2.106)
56 Chapter2. Probability
The term/radicalBig
ˆσ2
Sis called the (numerical or empirical) standard error, and is an estimate of our
uncertainty about our estimate of μ. (See Section 6.2 for more discussion on standard errors.)
If we want to report an answer which is accurate to within ±/epsilon1with probability at least 95%,
we need to use a number of samples Swhich satisﬁes 1.96/radicalbig
ˆσ2/S≤/epsilon1. We can approximate
the 1.96 factor by 2, yielding S≥4ˆσ2
/epsilon12.
2.8 Information theory
information theory is concerned with representing data in a compact fashion (a task known as
data compression orsource coding), as well as with transmitting and storing it in a way that
is robust to errors (a task known as error correction orchannel coding). At ﬁrst, this seems
far removed from the concerns of probability theory and machine learning, but in fact there is
an intimate connection. To see this, note that compactly representing data requires allocatingshort codewords to highly probable bit strings, and reserving longer codewords to less probablebit strings. This is similar to the situation in natural language, where common words (such as“a”, “the”, “and”) are generally much shorter than rare words. Also, decoding messages sent overnoisy channels requires having a good probability model of the kinds of messages that peopletend to send. In both cases, we need a model that can predict which kinds of data are likelyand which unlikely, which is also a central problem in machine learning (see (MacKay 2003) formore details on the connection between information theory and machine learning).
Obviously we cannot go into the details of information theory here (see e.g., (Cover and
Thomas 2006) if you are interested to learn more). However, we will introduce a few basicconcepts that we will need later in the book.
2.8.1 Entropy
Theentropy of a random variable Xwith distribution p, denoted by H(X)or sometimes
H(p), is a measure of its uncertainty. In particular, for a discrete variable with Kstates, it is
deﬁned by
H(X)/defines−K/summationdisplay
k=1p(X=k)log2p(X=k) (2.107)
Usually we use log base 2, in which case the units are called bits(short for binary digits). If
we use log base e, the units are called nats. For example, if X∈{1,...,5}with histogram
distribution p=[ 0.25,0.25,0.2,0.15,0.15], we ﬁndH=2.2855. The discrete distribution with
maximum entropy is the uniform distribution (see Section 9.2.6 for a proof). Hence for a K-ary
random variable, the entropy is maximized if p(x=k)=1/K; in this case, H(X)=l o g2K.
Conversely, the distribution with minimum entropy (which is zero) is any delta-function thatputs all its mass on one state. Such a distribution has no uncertainty. In Figure 2.5(b), wherewe plotted a DNA sequence logo, the height of each bar is deﬁned to be 2−H,w h e r eHis
the entropy of that distribution, and 2 is the maximum possible entropy. Thus a bar of height 0corresponds to a uniform distribution, whereas a bar of height 2 corresponds to a deterministicdistribution.
2.8. Informationtheory 57
0 0.5 100.51
p(X = 1)H(X)
Figure 2.21 Entropy of a Bernoulli random variable as a function of θ. The maximum entropy is
log22=1. Figure generated by bernoulliEntropyFig .
For the special case of binary random variables, X∈{0,1}, we can write p(X=1 )=θ
andp(X=0 )=1 −θ. Hence the entropy becomes
H(X)=−[ p(X=1 )l o g2p(X=1 )+p(X=0 )l o g2p(X=0 ) ] (2.108)
=−[θlog2θ+(1−θ)log2(1−θ)] (2.109)
This is called the binary entropy function, and is also written H(θ). We plot this in Figure 2.21.
We see that the maximum value of 1 occurs when the distribution is uniform, θ=0.5.
2.8.2 KL divergence
One way to measure the dissimilarity of two probability distributions, pandq, is known as the
Kullback-Leibler divergence (KL divergence)o rrelative entropy. This is deﬁned as follows:
KL(p||q)/definesK/summationdisplay
k=1pklogpk
qk(2.110)
where the sum gets replaced by an integral for pdfs.10We can rewrite this as
KL(p||q)=/summationdisplay
kpklogpk−/summationdisplay
kpklogqk=−H(p)+H(p,q) (2.111)
where H(p,q)is called the cross entropy,
H(p,q)/defines−/summationdisplay
kpklogqk (2.112)
One can show (Cover and Thomas 2006) that the cross entropy is the average number of bits
needed to encode data coming from a source with distribution pwhen we use model qto
10. The KL divergence is not a distance, since it is asymmetric. One symmetric version of the KL divergence is the
Jensen-Shannon divergence, deﬁned as JS(p1,p2)=0.5KL (p1||q)+0.5KL (p2||q),w h e r eq =0.5p1+0.5p2.
58 Chapter2. Probability
deﬁne our codebook. Hence the “regular” entropy H(p)= H(p,p), deﬁned in Section 2.8.1, is
the expected number of bits if we use the true model, so the KL divergence is the difference
between these. In other words, the KL divergence is the average number of extrabits needed to
encode the data, due to the fact that we used distribution qto encode the data instead of the
true distribution p.
The “extra number of bits” interpretation should make it clear that KL(p||q)≥0, and that
the KL is only equal to zero iff q=p. We now give a proof of this important result.
Theorem 2.8.1. (Information inequality) KL(p||q)≥0withequalityiff p=q.
Proof.To prove the theorem, we need to use Jensen’s inequality. This states that, for any
convex function f,w eh a v et h a t
f/parenleftBiggn/summationdisplay
i=1λixi/parenrightBigg
≤n/summationdisplay
i=1λif(xi) (2.113)
whereλi≥0and/summationtextn
i=1λi=1. This is clearly true for n=2(by deﬁnition of convexity), and
can be proved by induction for n>2.
Let us now prove the main theorem, following (Cover and Thomas 2006, p28). Let A={x:
p(x)>0}be the support of p(x). Then
−KL(p||q)=−/summationdisplay
x∈Ap(x)logp(x)
q(x)=/summationdisplay
x∈Ap(x)logq(x)
p(x)(2.114)
≤log/summationdisplay
x∈Ap(x)q(x)
p(x)=l o g/summationdisplay
x∈Aq(x) (2.115)
≤log/summationdisplay
x∈Xq(x)=l o g1=0 (2.116)
where the ﬁrst inequality follows from Jensen’s. Since log(x)is a strictly concave function, we
have equality in Equation 2.115 iff p(x)=cq(x)for some c. We have equality in Equation 2.116
iff/summationtext
x∈Aq(x)=/summationtext
x∈Xq(x)=1, which implies c=1. Hence KL(p||q)=0iffp(x)=q(x)
for allx.
One important consequence of this result is that the discrete distribution with the maximum
entropy is the uniform distribution. More precisely, H(X)≤log|X|,w h e r e |X|is the number
of states for X, with equality iff p(x)is uniform. To see this, let u(x)=1/|X|. Then
0≤KL(p||u)=/summationdisplay
xp(x)logp(x)
u(x)(2.117)
=/summationdisplay
xp(x)logp(x)−/summationdisplay
xp(x)logu(x)=− H(X)+log|X| (2.118)
This is a formulation of Laplace’s principle of insufficient reason, which argues in favor of
using uniform distributions when there are no other reasons to favor one distribution over
another. See Section 9.2.6 for a discussion of how to create distributions that satisfy certainconstraints, but otherwise are as least-commital as possible. (For example, the Gaussian satisﬁesﬁrst and second moment constraints, but otherwise has maximum entropy.)
2.8. Informationtheory 59
2.8.3 Mutual information
Consider two random variables, XandY. Suppose we want to know how much knowing one
variable tells us about the other. We could compute the correlation coefficient, but this is only
deﬁned for real-valued random variables, and furthermore, this is a very limited measure ofdependence, as we saw in Figure 2.12. A more general approach is to determine how similar thejoint distribution p(X,Y)is to the factored distribution p(X)p(Y). This is called the mutual
information orMI, and is deﬁned as follows:
I(X;Y)/definesKL(p(X,Y)||p(X)p(Y)) =/summationdisplay
x/summationdisplay
yp(x,y)logp(x,y)
p(x)p(y)(2.119)
We have I(X;Y)≥0with equality iff p(X,Y)=p(X)p(Y). That is, the MI is zero iff the
variables are independent.
To gain insight into the meaning of MI, it helps to re-express it in terms of joint and conditional
entropies. One can show (Exercise 2.12) that the above expression is equivalent to the following:
I(X;Y)=H(X)−H(X|Y)=H(Y)−H(Y|X) (2.120)
where H(Y|X)is theconditional entropy, deﬁned as H(Y|X)=/summationtext
xp(x)H(Y|X=x).
Thus we can interpret the MI between XandYas the reduction in uncertainty about Xafter
observing Y, or, by symmetry, the reduction in uncertainty about Yafter observing X. We will
encounter several applications of MI later in the book. See also Exercises 2.13 and 2.14 for theconnection between MI and correlation coefficients.
A quantity which is closely related to MI is the pointwise mutual information or PMI. For
two events (not random variables) xandy, this is deﬁned as
PMI(x,y)/defineslogp(x,y)
p(x)p(y)=l o gp(x|y)
p(x)=l o gp(y|x)
p(y)(2.121)
This measures the discrepancy between these events occuring together compared to what wouldbe expected by chance. Clearly the MI of XandYis just the expected value of the PMI.
Interestingly, we can rewrite the PMI as follows:
PMI(x,y)=l o gp(x|y)
p(x)=l o gp(y|x)
p(y)(2.122)
This is the amount we learn from updating the prior p(x)into the posterior p(x|y), or equiva-
lently, updating the prior p(y)into the posterior p(y|x).
2.8.3.1 Mutual information for continuous random variables *
The above formula for MI is deﬁned for discrete random variables. For continuous randomvariables, it is common to ﬁrst discretize orquantize them, by dividing the ranges of each
variable into bins, and computing how many values fall in each histogram bin (Scott 1979). Wecan then easily compute the MI using the formula above (see mutualInfoAllPairsMixed for
some code, and miMixedDemo for a demo).
Unfortunately, the number of bins used, and the location of the bin boundaries, can have
a signiﬁcant effect on the results. One way around this is to try to estimate the MI directly,
60 Chapter2. Probability
/g22/g44/g52/g57/g47/g56/g57/g1/g22/g44/g52/g56/g47/g57/g61/g1/g4/g54/g44/g55/g1/g11/g10/g6/g10/g10/g10/g5-g13/g29/g47/g45/g44/g1/g29/g53/g56/g57/g1/g57/g53/g1/g27/g52/g48/g58/g55/g47/g44/g56/g1/g4/g3/g1/g61/g55/g56/g5/g12/g10/g13/g10
/g10/g11/g10/g14/g10
/g10 /g14 /g18 /g11/g12 /g11/g16-g15
/g31/g58/g51/g41/g44/g55/g1/g53/g45/g1/g33/g46/g61/g56/g47/g42/g47/g40/g52/g56/g22/g44/g40/g57/g46/g56/g1/g43/g58/g44/g1/g57/g53/g1/g26/g27/g37/g9/g20/g27/g22/g35
/g10/g1/g18/g10/g10/g1/g11/g16/g10/g10/g1
/g10/g1 /g11/g60/g11/g10/g15/g12/g60/g11/g10/g16/g1 /g12/g60/g11/g10/g15
/g26/g44/g40/g50/g57/g46/g1/g23/g60/g54/g8/g1/g9/g1/g33/g44/g55/g56/g53/g52/g1/g4/g36/g35/g2/g5/g1-g17
/g30/g44/g40/g56/g50/g44/g56/g1/g27/g51/g51/g8/g1/g22/g47/g56/g54/g40/g55/g47/g57/g61/g1/g4/g3/g5/g1/g10/g13/g10/g16/g10
/g10 /g11/g15/g10 /g13/g10/g10-g11

		


/g30/g27/g21/g1/g35/g42/g53/g55/g44-g13-g18
-g16
-g17 -g15
-g14
/g10 /g10/g8/g12/g15 /g10/g8/g15 /g10/g8/g17/g15 /g11/g7/g11/g7/g10/g8/g15/g10/g10/g8/g15/g11
-g2-g5-g3-g4
-g8-g9-g3-g7-g16
/g27/g52/g42/g53/g51/g44/g1/g9/g1/g33/g44/g55/g56/g53/g52/g1/g4/g27/g52/g57/g2/g5/g1/g20/g43/g58/g50/g57/g1/g4/g24/g44/g51/g40/g50/g44/g5/g1/g32/g41/g44/g56/g47/g57/g61/g1/g4/g3/g5/g1/g10/g12/g15/g15/g10/g17/g15
/g10 /g12/g10/g6/g10/g10/g10 /g14/g10/g6/g10/g10/g10-g14
/g21/g46/g47/g50/g43/g55/g44/g52/g1/g33/g44/g55/g1/g38/g53/g51/g40/g52/g1/g29/g47/g45/g44/g1/g23/g60/g54/g44/g42/g57/g40/g52/g42/g61/g1/g4/g39/g44/g40/g55/g56/g5/g1
/g12/g14/g16/g16/g10
/g13/g10/g19/g10
-g18
/g25/g55/g53/g56/g56/g1/g31/g40/g57/g62/g50/g1/g27/g52/g42/g1/g9/g1/g33/g44/g55/g56/g53/g52/g1/g4/g27/g52/g57/g2/g5/g1/g26/g44/g40/g50/g57/g46/g1/g23/g60/g54/g8/g1/g9/g1/g33/g44/g55/g56/g53/g52/g1/g4/g27/g52/g57/g1/g2/g5/g10/g12/g10/g10/g10/g14/g10/g10/g10/g16/g10/g10/g10
/g10 /g12/g10/g6/g10/g10/g10 /g14/g10/g6/g10/g10/g10
Figure 2.22 Left: Correlation coefficient vs maximal information criterion (MIC) for all pairwise relation-
ships in the WHO data. Right: scatter plots of certain pairs of variables. The red lines are non-parametric
smoothing regressions (Section 15.4.6) ﬁt separately to each trend. Source: Figure 4 of (Reshed et al. 2011) .
Used with kind permission of David Reshef and the American Association for the Advancement of Science.
without ﬁrst performing density estimation (Learned-Miller 2004). Another approach is to try
many different bin sizes and locations, and to compute the maximum MI achieved. This
statistic, appropriately normalized, is known as the maximal information coefficient (MIC)
(Reshed et al. 2011). More precisely, deﬁne
m(x,y)=maxG∈G(x,y)I(X(G);Y(G))
logmin(x,y)(2.123)
whereG(x,y)is the set of 2d grids of size x×y, andX(G),Y(G)represents a discretization of
the variables onto this grid. (The maximization over bin locations can be performed efficiently
using dynamic programming (Reshed et al. 2011).) Now deﬁne the MIC as
MIC/definesmax
x,y:xy<Bm(x,y) (2.124)
whereBis some sample-size dependent bound on the number of bins we can use and still
reliably estimate the distribution ((Reshed et al. 2011) suggest B=N0.6). It can be shown that
the MIC lies in the range [0,1], where 0 represents no relationship between the variables, and 1
represents a noise-free relationship of any form, not just linear.
Figure 2.22 gives an example of this statistic in action. The data consists of 357 variables
measuring a variety of social, economic, health and political indicators, collected by the World
Health Organization (WHO). On the left of the ﬁgure, we see the correlation coefficient (CC)
plotted against the MIC for all 63,566 variable pairs. On the right of the ﬁgure, we see scatter
plots for particular pairs of variables, which we now discuss:
• The point marked C has a low CC and a low MIC. The corresponding scatter plot makes it
2.8. Informationtheory 61
clear that there is no relationship between these two variables (percentage of lives lost to
injury and density of dentists in the population).
• The points marked D and H have high CC (in absolute value) and high MIC, because they
represent nearly linear relationships.
• The points marked E, F, and G have low CC but high MIC. This is because they correspond
to non-linear (and sometimes, as in the case of E and F, non-functional, i.e., one-to-many)relationships between the variables.
In summary, we see that statistics (such as MIC) based on mutual information can be used
to discover interesting relationships between variables in a way that simpler measures, such ascorrelation coefficients, cannot. For this reason, the MIC has been called “a correlation for the21st century” (Speed 2011).
Exercises
Exercise 2.1 Probabilities are sensitive to the form of the question that was used to generate the answer
(Source: Minka.) My neighbor has two children. Assuming that the gender of a child is like a coin ﬂip,
it is most likely, a priori, that my neighbor has one boy and one girl, with probability 1/2. The otherpossibilities—two boys or two girls—have probabilities 1/4 and 1/4.
a. Suppose I ask him whether he has any boys, and he says yes. What is the probability that one child is
a girl?
b. Suppose instead that I happen to see one of his children run by, and it is a boy. What is the probability
that the other child is a girl?
Exercise 2.2 Legal reasoning
(Source: Peter Lee.) Suppose a crime has been committed. Blood is found at the scene for which there isno innocent explanation. It is of a type which is present in 1% of the population.
a. The prosecutor claims: “There is a 1% chance that the defendant would have the crime blood type if he
were innocent. Thus there is a 99% chance that he guilty”. This is known as the prosecutor’s fallacy.
What is wrong with this argument?
b. The defender claims: “The crime occurred in a city of 800,000 people. The blood type would be
found in approximately 8000 people. The evidence has provided a probability of just 1 in 8000 that
the defendant is guilty, and thus has no relevance.” This is known as the defender’s fallacy. What is
wrong with this argument?
Exercise 2.3 Variance of a sum
Show that the variance of a sum is var[X+Y]=v a r[X]+v ar[Y]+2cov[X,Y ],wherecov[X,Y ]
is the covariance between XandY
Exercise 2.4 Bayes rule for medical diagnosis
(Source: Koller.) After your yearly checkup, the doctor has bad news and good news. The bad news is that
you tested positive for a serious disease, and that the test is 99% accurate (i.e., the probability of testingpositive given that you have the disease is 0.99, as is the probability of tetsing negative given that you don’thave the disease). The good news is that this is a rare disease, striking only one in 10,000 people. What are
the chances that you actually have the disease? (Show your calculations as well as giving the ﬁnal result.)
62 Chapter2. Probability
Exercise 2.5 The Monty Hall problem
(Source: Mackay.) On a game show, a contestant is told the rules as follows:
There are three doors, labelled 1, 2, 3. A single prize has been hidden behind one of them. You
get to select one door. Initially your chosen door will notbe opened. Instead, the gameshow host
will open one of the other two doors, and hewilldosoinsuchawayasnottorevealtheprize. For
example, if you ﬁrst choose door 1, he will then open one of doors 2 and 3, and it is guaranteed
that he will choose which one to open so that the prize will not be revealed.
At this point, you will be given a fresh choice of door: you can either stick with your ﬁrst choice,
or you can switch to the other closed door. All the doors will then be opened and you will receivewhatever is behind your ﬁnal choice of door.
Imagine that the contestant chooses door 1 ﬁrst; then the gameshow host opens door 3, revealing nothingbehind the door, as promised. Should the contestant (a) stick with door 1, or (b) switch to door 2, or (c)
does it make no difference? You may assume that initially, the prize is equally likely to be behind any of
the 3 doors. Hint: use Bayes rule.
Exercise 2.6 Conditional independence
(Source: Koller.)
a. LetH∈{1,...,K}be a discrete random variable, and let e
1ande2be the observed values of two
other random variables E1andE2. Suppose we wish to calculate the vector
/vectorP(H|e1,e2)=(P(H=1|e1,e2),...,P(H=K|e1,e2))
Which of the following sets of numbers are sufficient for the calculation?
i.P(e1,e2),P(H),P(e1|H),P(e2|H)
ii.P(e1,e2),P(H),P(e1,e2|H)
iii.P(e1|H),P(e2|H),P(H)
b. Now suppose we now assume E1⊥E2|H(i.e.,E1andE2are conditionally independent given H).
Which of the above 3 sets are sufficent now?
Show your calculations as well as giving the ﬁnal result. Hint: use Bayes rule.Exercise 2.7 Pairwise independence does not imply mutual independence
We say that two random variables are pairwise independent if
p(X
2|X1)=p(X2) (2.125)
and hence
p(X2,X1)=p(X1)p(X2|X1)=p(X1)p(X2) (2.126)
We say that nrandom variables are mutually independent if
p(Xi|XS)=p(Xi)∀S⊆{1,...,n}\{i} (2.127)
and hence
p(X1:n)=n/productdisplay
i=1p(Xi) (2.128)
Show that pairwise independence between all pairs of variables does not necessarily imply mutual inde-
pendence. It suffices to give a counter example.
2.8. Informationtheory 63
Exercise 2.8 Conditional independence iff joint factorizes
In the text we said X⊥Y|Ziff
p(x,y|z)=p(x|z)p(y|z) (2.129)
for allx,y,zsuch that p(z)>0. Now prove the following alternative deﬁnition: X⊥Y|Ziff there exist
functiongandhsuch that
p(x,y|z)=g(x,z)h(y,z) (2.130)
for allx,y,zsuch that p(z)>0.
Exercise 2.9 Conditional independence
(Source: Koller.) Are the following properties true? Prove or disprove. Note that we are not restricting
attention to distributions that can be represented by a graphical model.
a. True or false? (X⊥W|Z,Y)∧(X⊥Y|Z)⇒(X⊥Y,W|Z)
b.T
rue or false? (X⊥Y|Z)∧(X⊥Y|W)⇒(X⊥Y|Z,W)
Exercise 2.10 Deriving the inverse gamma density
LetX∼Ga(a,b), i.e.
Ga(x|a,b)=ba
Γ(a)xa−1e−xb(2.131)
LetY=1/X. Show that Y∼IG(a,b), i.e.,
IG(x|shape = a,scale =b)=ba
Γ(a)x−(a+1)e−b/x(2.132)
Hint: use the change of variables formula.
Exercise 2.11 Normalization constant for a 1D Gaussian
The normalization constant for a zero-mean Gaussian is given by
Z=/integraldisplayb
aexp/parenleftbigg
−x2
2σ2/parenrightbigg
dx (2.133)
wherea=−∞andb=∞. To compute this, consider its square
Z2=/integraldisplayb
a/integraldisplayb
aexp/parenleftbigg
−x2+y2
2σ2/parenrightbigg
dxdy (2.134)
Let us change variables from cartesian (x,y)to polar(r,θ)usingx=rcosθandy=rsinθ. Since
dxdy=rdrdθ, andcos2θ+sin2θ=1,w eh a v e
Z2=/integraldisplay2π
0/integraldisplay∞
0rexp/parenleftbigg
−r2
2σ2/parenrightbigg
drdθ (2.135)
Evaluate this integral and hence show Z=σ/radicalbig
(2π). Hint 1: separate the integral into a product of
two terms, the ﬁrst of which (involving dθ) is constant, so is easy. Hint 2: if u=e−r2/2σ2then
du/dr=−1
σ2re−r2/2σ2, so the second integral is also easy (since/integraltext
u/prime(r)dr=u(r)).
64 Chapter2. Probability
Exercise 2.12 Expressing mutual information in terms of entropies
Show that
I(X,Y)=H(X)−H(X|Y)=H(Y)−H(Y|X) (2.136)
Exercise 2.13 Mutual information for correlated normals
(Source: (Cover and Thomas 1991, Q9.3).) Find the mutual information I(X1,X2)where Xhas a bivariate
normal distribution:
/parenleftbiggX1
X2/parenrightbigg
∼N/parenleftbigg
0,/parenleftbiggσ2ρσ2
ρσ2σ2/parenrightbigg/parenrightbigg
(2.137)
EvaluateI(X1,X2)forρ=1,ρ=0andρ=−1and comment. Hint: The (differential) entropy of a
d-dimensional Gaussian is
h(X)=1
2log2/bracketleftBig
(2πe)ddetΣ/bracketrightBig
(2.138)
In the 1d case, this becomes
h(X)=1
2log2/bracketleftbig
2πeσ2/bracketrightbig
(2.139)
Hint:log(0) = ∞.
Exercise 2.14 A measure of correlation (normalized mutual information)
(Source: (Cover and Thomas 1991, Q2.20).) Let XandYbe discrete random variables which are identically
distributed (so H(X)=H(Y)) but not necessarily independent. Deﬁne
r=1−H(Y|X)
H(X)(2.140)
a. Showr=I(X,Y )
H(X)
b. Show0≤r≤1
c. When is r=0?
d. When is r=1?
Exercise 2.15 MLE minimizes KL divergence to the empirical distribution
Letpemp(x)betheempiricaldistribution, andlet q(x|θ)besomemodel. Showthat argminqKL(pemp||q)
is obtained by q(x)=q(x;ˆθ),w h e r eˆθis the MLE. Hint: use non-negativity of the KL divergence.
Exercise 2.16 Mean, mode, variance for the beta distribution
Supposeθ∼Beta(a,b) . Derive the mean, mode and variance.
Exercise 2.17 Expected value of the minimum
SupposeX,Yare two points sampled independently and uniformly at random from the interval [0,1].
What is the expected location of the left most point?
3 Generative models for discrete data
3.1 Introduction
In Section 2.2.3.2, we discussed how to classify a feature vector xby applying Bayes rule to a
generative classiﬁer of the form
p(y=c|x,θ)∝p(x|y=c,θ)p(y=c|θ) (3.1)
The key to using such models is specifying a suitable form for the class-conditional density
p(x|y=c,θ), which deﬁnes what kind of data we expect to see in each class. In this chapter,
we focus on the case where the observed data are discrete symbols. We also discuss how toinfer the unknown parameters θof such models.
3.2 Bayesian concept learning
Consider how a child learns to understand the meaning of a word, such as “dog”. Presumablythe child’s parents point out positive examples of this concept, saying such things as, “look atthe cute dog!”, or “mind the doggy”, etc. However, it is very unlikely that they provide negativeexamples, by saying “look at that non-dog”. Certainly, negative examples may be obtained duringan active learning process — the child says “look at the dog” and the parent says “that’s a cat,dear, not a dog” — but psychological research has shown that people can learn concepts frompositive examples alone (Xu and Tenenbaum 2007).
We can think of learning the meaning of a word as equivalent to concept learning, which in
turn is equivalent to binary classiﬁcation. To see this, deﬁne f(x)=1ifxis an example of the
conceptC, andf(x)=0otherwise. Then the goal is to learn the indicator function f, which
just deﬁnes which elements are in the set C. By allowing for uncertainty about the deﬁnition
off, or equivalently the elements of C, we can emulate fuzzy set theory, but using standard
probability calculus. Note that standard binary classiﬁcation techniques require positive andnegative examples. By contrast, we will devise a way to learn from positive examples alone.
For pedagogical purposes, we will consider a very simple example of concept learning called
thenumber game , based on part of Josh Tenenbaum’s PhD thesis (Tenenbaum 1999). The game
proceeds as follows. I choose some simple arithmetical concept C, such as “prime number” or
“a number between 1 and 10”. I then give you a series of randomly chosen positive examplesD={x
1,...,x N}drawn from C, and ask you whether some new test case ˜xbelongs to C,
i.e., I ask you to classify ˜x.
66 Chapter 3. Generative models for discrete data
481216202428323640444852566064687276808488929610000.5116Examples
481216202428323640444852566064687276808488929610000.5160
481216202428323640444852566064687276808488929610000.5116   8   2  64
481216202428323640444852566064687276808488929610000.5116  23  19  20
Figure 3.1 Empirical predictive distribution averaged over 8 humans in the number game. First two
rows: after seeing D={16}andD={60}. This illustrates diffuse similarity. Third row: after
seeingD={16,8,2,64}. This illustrates rule-like behavior (powers of 2). Bottom row: after seeing
D={16,23,19,20}. This illustrates focussed similarity (numbers near 20). Source: Figure 5.5 of
(Tenenbaum 1999). Used with kind permission of Josh Tenenbaum.
Suppose, for simplicity, that all numbers are integers between 1 and 100. Now suppose I tell
you “16” is a positive example of the concept. What other numbers do you think are positive?
17? 6? 32? 99? It’s hard to tell with only one example, so your predictions will be quite vague.Presumably numbers that are similar in some sense to 16 are more likely. But similar in whatway? 17 is similar, because it is “close by”, 6 is similar because it has a digit in common,32 is similar because it is also even and a power of 2, but 99 does not seem similar. Thussome numbers are more likely than others. We can represent this as a probability distribution,p(˜x|D), which is the probability that ˜x∈Cgiven the data Dfor any˜x∈{1,...,100}. This
is called the posterior predictive distribution. Figure 3.1(top) shows the predictive distribution
of people derived from a lab experiment. We see that people predict numbers that are similarto 16, under a variety of kinds of similarity.
Now suppose I tell you that 8, 2 and 64 are alsopositive examples. Now you may guess that
the hidden concept is “powers of two”. This is an example of induction. Given this hypothesis,
the predictive distribution is quite speciﬁc, and puts most of its mass on powers of 2, as shownin Figure 3.1(third row). If instead I tell you the data is D={16,23,19,20}, you will get a
different kind of generalization gradient, as shown in Figure 3.1(bottom).
How can we explain this behavior and emulate it in a machine? The classic approach to
induction is to suppose we have a hypothesis space of concepts, H, such as: odd numbers,
even numbers, all numbers between 1 and 100, powers of two, all numbers ending in j(for
3.2. Bayesian concept learning 67
0≤j≤9), etc. The subset of Hthat is consistent with the data Dis called the version space.
As we see more examples, the version space shrinks and we become increasingly certain about
the concept (Mitchell 1997).
However, the version space is not the whole story. After seeing D={16}, there are many
consistent rules; how do you combine them to predict if ˜x∈C? Also, after seeing D=
{16,8,2,64}, why did you choose the rule “powers of two” and not, say, “all even numbers”, or
“powers of two except for 32”, both of which are equally consistent with the evidence? We willnow provide a Bayesian explanation for this.
3.2.1 Likelihood
We must explain why we chose htwo/defines“powers of two”, and not, say, heven/defines“even numbers”
after seeing D={16,8,2,64}, given that both hypotheses are consistent with the evidence.
The key intuition is that we want to avoid suspicious coincidences. If the true concept was
even numbers, how come we only saw numbers that happened to be powers of two?
To formalize this, let us assume that examples are sampled uniformly at random from the
extension of a concept. (The extension of a concept is just the set of numbers that belong
to it, e.g., the extension of hevenis{2,4,6,...,98,100}; the extension of “numbers ending
in 9” is{9,19,...,99}.) Tenenbaum calls this the strong sampling assumption. Given this
assumption, the probability of independently sampling Nitems (with replacement) from his
given by
p(D|h)=⎨bracketleftbigg1
size(h)⎨bracketrightbiggN
=⎨bracketleftbigg1
|h|⎨bracketrightbiggN
(3.2)
This crucial equation embodies what Tenenbaum calls the size principle, which means the
model favors the simplest (smallest) hypothesis consistent with the data. This is more commonlyknown as Occam’s razor.
1
To see how it works, let D={16}. Then p(D|htwo)=1/6, since there are only 6 powers
of two less than 100, but p(D|heven)=1/50, since there are 50 even numbers. So the
likelihood that h=htwois higher than if h=heven. After 4 examples, the likelihood of htwo
is(1/6)4=7.7×10−4, whereas the likelihood of hevenis(1/50)4=1.6×10−7. This is
alikelihood ratio of almost 5000:1 in favor of htwo. This quantiﬁes our earlier intuition that
D={16,8,2,64}would be a very suspicious coincidence if generated by heven.
3.2.2 Prior
SupposeD={16,8,2,64}. Given this data, the concept h/prime=“powers of two except 32” is
more likely than h=“powers of two”, since h/primedoes not need to explain the coincidence that 32
is missing from the set of examples.
However, the hypothesis h/prime=“powers of two except 32” seems “conceptually unnatural”. We
can capture such intution by assigning low prior probability to unnatural concepts. Of course,your prior might be different than mine. This subjective aspect of Bayesian reasoning is a
source of much controversy, since it means, for example, that a child and a math professor
1. William of Occam (also spelt Ockham) was an English monk and philosopher, 1288–1348.
68 Chapter 3. Generative models for discrete data
will reach different answers. In fact, they presumably not only have different priors, but also
different hypothesis spaces. However, we can ﬁnesse that by deﬁning the hypothesis space ofthe child and the math professor to be the same, and then setting the child’s prior weight to bezero on certain “advanced” concepts. Thus there is no sharp distinction between the prior andthe hypothesis space.
Although the subjectivity of the prior is controversial, it is actually quite useful. If you are
told the numbers are from some arithmetic rule, then given 1200, 1500, 900 and 1400, you maythink 400 is likely but 1183 is unlikely. But if you are told that the numbers are examples ofhealthy cholesterol levels, you would probably think 400 is unlikely and 1183 is likely. Thus wesee that the prior is the mechanism by which background knowledge can be brought to bear ona problem. Without this, rapid learning (i.e., from small samples sizes) is impossible.
So, what prior should we use? For illustration purposes, let us use a simple prior which
puts uniform probability on 30 simple arithmetical concepts, such as “even numbers”, “oddnumbers”, “prime numbers”, “numbers ending in 9”, etc. To make things more interesting, wemake the concepts even and odd more likely apriori. We also include two “unnatural” concepts,namely “powers of 2, plus 37” and “powers of 2, except 32”, but give them low prior weight. SeeFigure 3.2(a) for a plot of this prior. We will consider a slightly more sophisticated prior later on.
3.2.3 Posterior
The posterior is simply the likelihood times the prior, normalized. In this context we have
p(h|D)=p(D|h)p(h)⎨summationtext
h/prime∈Hp(D,h/prime)=p(h)I(D∈h)/|h|N
⎨summationtext
h/prime∈Hp(h/prime)I(D∈h/prime)/|h/prime|N(3.3)
where I(D∈h)is 1iff(iff and only if) all the data are in the extension of the hypothesis
h. Figure 3.2 plots the prior, likelihood and posterior after seeing D={16}. We see that the
posterior is a combination of prior and likelihood. In the case of most of the concepts, the prioris uniform, so the posterior is proportional to the likelihood. However, the “unnatural” conceptsof “powers of 2, plus 37” and “powers of 2, except 32” have low posterior support, despite havinghigh likelihood, due to the low prior. Conversely, the concept of odd numbers has low posteriorsupport, despite having a high prior, due to the low likelihood.
Figure 3.3 plots the prior, likelihood and posterior after seeing D={16,8,2,64}. Now the
likelihood is much more peaked on the powers of two concept, so this dominates the posterior.Essentially the learner has an ahamoment, and ﬁgures out the true concept. (Here we see the
need for the low prior on the unnatural concepts, otherwise we would have overﬁt the data andpicked “powers of 2, except for 32”.)
In general, when we have enough data, the posterior p(h|D)becomes peaked on a single
concept, namely the MAP estimate, i.e.,
p(h|D)→δ
ˆhMAP(h) (3.4)
whereˆhMAP=a r g m a xhp(h|D)is the posterior mode, and where δis theDirac measure
deﬁned by
δx(A)=⎨braceleftbigg
1ifx∈A
0ifx/negationslash∈A(3.5)
3.2. Bayesian concept learning 69
0 0.1 0.2powers of 2 − {32}powers of 2 + {37}allpowers of 10powers of 9powers of 8powers of 7powers of 6powers of 5powers of 4powers of 3powers of 2ends in 9ends in 8ends in 7ends in 6ends in 5ends in 4ends in 3ends in 2ends in 1mult of 10mult of 9mult of 8mult of 7mult of 6mult of 5mult of 4mult of 3squaresoddeven
prior0 0.2 0.405101520253035
likdata = 16
0 0.2 0.405101520253035
post
Figure 3.2 Prior, likelihood and posterior for D={16}. Based on (Tenenbaum 1999). Figure generated
bynumbersGame .
Note that the MAP estimate can be written as
ˆhMAP= argmax
hp(D|h)p(h) = argmax
h[logp(D|h)+logp(h)] (3.6)
Since the likelihood term depends exponentially on N, and the prior stays constant, as we get
more and more data, the MAP estimate converges towards the maximum likelihood estimate
orMLE:
ˆhmle/definesargmax
hp(D|h) = argmax
hlogp(D|h) (3.7)
In other words, if we have enough data, we see that the data overwhelms the prior. In this
70 Chapter 3. Generative models for discrete data
0 0.1 0.2powers of 2 − {32}powers of 2 + {37}allpowers of 10powers of 9powers of 8powers of 7powers of 6powers of 5powers of 4powers of 3powers of 2ends in 9ends in 8ends in 7ends in 6ends in 5ends in 4ends in 3ends in 2ends in 1mult of 10mult of 9mult of 8mult of 7mult of 6mult of 5mult of 4mult of 3squaresoddeven
prior0 1 2
x 10−305101520253035
likdata = 16   8   2  64
0 0.5 105101520253035
post
Figure 3.3 Prior, likelihood and posterior for D={16,8,2,64}. Based on (Tenenbaum 1999). Figure
generated by numbersGame .
case, the MAP estimate converges towards the MLE.
If the true hypothesis is in the hypothesis space, then the MAP/ ML estimate will converge
upon this hypothesis. Thus we say that Bayesian inference (and ML estimation) are consistent
estimators (see Section 6.4.1 for details). We also say that the hypothesis space is identiﬁable in
the limit, meaning we can recover the truth in the limit of inﬁnite data. If our hypothesis classis not rich enough to represent the “truth” (which will usually be the case), we will convergeon the hypothesis that is as close as possible to the truth. However, formalizing this notion of“closeness” is beyond the scope of this chapter.
3.2. Bayesian concept learning 71
4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 10000.51
powers of 2 + {37}powers of 2 − {32}allmult of 4mult of 8evensquaresends in 6powers of 2powers of 4
0 0.5 1
p(h | 16 )
Figure 3.4 Posterior over hypotheses and the corresponding predictive distribution after seeing one
example, D={16}. A dot means this number is consistent with this hypothesis. The graph p(h|D)on
the right is the weight given to hypothesis h. By taking a weighed sum of dots, we get p(˜x∈C|D)(top).
Based on Figure 2.9 of (Tenenbaum 1999). Figure generated by numbersGame .
3.2.4 Posterior predictive distribution
The posterior is our internal belief state about the world. The way to test if our beliefs are
justiﬁed is to use them to predict objectively observable quantities (this is the basis of the
scientiﬁc method). Speciﬁcally, the posterior predictive distribution in this context is given by
p(˜x∈C|D)=⎨summationdisplay
hp(y=1|˜x,h)p(h|D) (3.8)
This is just a weighted average of the predictions of each individual hypothesis and is calledBayes model averaging (Hoeting et al. 1999). This is illustrated in Figure 3.4. The dots at the
bottom show the predictions from each hypothesis; the vertical curve on the right shows theweight associated with each hypothesis. If we multiply each row by its weight and add up, weget the distribution at the top.
When we have a small and/or ambiguous dataset, the posterior p(h|D)is vague, which
induces a broad predictive distribution. However, once we have “ﬁgured things out”, the posteriorbecomes a delta function centered at the MAP estimate. In this case, the predictive distribution
72 Chapter 3. Generative models for discrete data
becomes
p(˜x∈C|D)=⎨summationdisplay
hp(˜x|h)δˆh(h)=p(˜x|ˆh) (3.9)
This is called a plug-in approximation to the predictive density and is very widely used, due
to its simplicity. However, in general, this under-represents our uncertainty, and our predictions
will not be as “smooth” as when using BMA. We will see more examples of this later in the book.
Although MAP learning is simple, it cannot explain the gradual shift from similarity-based
reasoning (with uncertain posteriors) to rule-based reasoning (with certain posteriors). Forexample, suppose we observe D={16}. If we use the simple prior above, the minimal
consistent hypothesis is “all powers of 4”, so only 4 and 16 get a non-zero probability of beingpredicted. This is of course an example of overﬁtting. Given D={16,8,2,64}, the MAP
hypothesis is “all powers of two”. Thus the plug-in predictive distribution gets broader (or staysthe same) as we see more data: it starts narrow, but is forced to broaden as it seems more data.In contrast, in the Bayesian approach, we start broad and then narrow down as we learn more,which makes more intuitive sense. In particular, given D={16}, there are many hypotheses
with non-negligible posterior support, so the predictive distribution is broad. However, when weseeD={16,8,2,64}, the posterior concentrates its mass on one hypothesis, so the predictive
distribution becomes narrower. So the predictions made by a plug-in approach and a Bayesianapproach are quite different in the small sample regime, although they converge to the sameanswer as we see more data.
3.2.5 A more complex prior
To model human behavior, Tenenbaum used a slightly more sophisticated prior which was de-rived by analysing some experimental data of how people measure similarity between numbers;see (Tenenbaum 1999, p208) for details. The result is a set of arithmetical concepts similar tothose mentioned above, plus all intervals between nandmfor1≤n,m≤100. (Note that
these hypotheses are not mutually exclusive.) Thus the prior is a mixture of two priors, one
over arithmetical rules, and one over intervals:
p(h)=π
0prules(h)+(1− π0)pinterval(h) (3.10)
The only free parameter in the model is the relative weight, π0, given to these two parts of the
prior. The results are not very sensitive to this value, so long as π0>0.5, reﬂecting the fact
that people are more likely to think of concepts deﬁned by rules. The predictive distributionof the model, using this larger hypothesis space, is shown in Figure 3.5. It is strikingly similarto the human predictive distribution, shown in Figure 3.1, even though it was not ﬁt to humandata (modulo the choice of hypothesis space).
3.3 The beta-binomial model
The number game involved inferring a distribution over a discrete variable drawn from a ﬁnitehypothesis space, h∈H, given a series of discrete observations. This made the computations
particularly simple: we just needed to sum, multiply and divide. However, in many applications,the unknown parameters are continuous, so the hypothesis space is (some subset) of R
K,w h e r e
3.3. The beta-binomial model 73
481216202428323640444852566064687276808488929610000.5116Examples
481216202428323640444852566064687276808488929610000.5160
481216202428323640444852566064687276808488929610000.5116   8   2  64
481216202428323640444852566064687276808488929610000.5116  23  19  20
Figure 3.5 Predictive distributions for the model using the full hypothesis space. Compare to Figure 3.1.
The predictions of the Bayesian model are only plotted for those values of ˜xfor which human data is
available; this is why the top line looks sparser than Figure 3.4. Source: Figure 5.6 of (Tenenbaum 1999).
Used with kind permission of Josh Tenenbaum.
Kis the number of parameters. This complicates the mathematics, since we have to replace
sums with integrals. However, the basic ideas are the same.
We will illustrate this by considering the problem of inferring the probability that a coin shows
up heads, given a series of observed coin tosses. Although this might seem trivial, it turns out
that this model forms the basis of many of the methods we will consider later in this book,including naive Bayes classiﬁers, Markov models, etc. It is historically important, since it was theexample which was analyzed in Bayes’ original paper of 1763. (Bayes’ analysis was subsequentlygeneralized by Pierre-Simon Laplace, creating what we now call “Bayes rule” — see (Stigler 1986)for further historical details.)
We will follow our now-familiar recipe of specifying the likelihood and prior, and deriving the
posterior and posterior predictive.
3.3.1 Likelihood
Suppose Xi∼Ber(θ),w h e r eXi=1represents “heads”, Xi=0represents “tails”, and
θ∈[0,1]is the rate parameter (probability of heads). If the data are iid, the likelihood has the
form
p(D|θ)=θN1(1−θ)N0(3.11)
74 Chapter 3. Generative models for discrete data
w h e r ew eh a v eN 1=⎨summationtextN
i=1I(xi=1 )heads and N0=⎨summationtextNi=1I(xi=0 )tails. These two counts
are called the sufficient statistics of the data, since this is all we need to know about Dto
inferθ. (An alternative set of sufficient statistics are N1andN=N0+N1.)
More formally, we say s(D)is a sufficient statistic for data Difp(θ|D)=p(θ|s(data)).I f
we use a uniform prior, this is equivalent to saying p(D|θ∝p(s(D)|θ). Consequently, if we
have two datasets with the same sufficient statistics, we will infer the same value for θ.
Now suppose the data consists of the count of the number of heads N1observed in a ﬁxed
numberN=N1+N0of trials. In this case, we have N1∼Bin(N,θ),w h e r eBinrepresents
the binomial distribution, which has the following pmf:
Bin(k|n,θ)/defines⎨parenleftbiggn
k⎨parenrightbigg
θk(1−θ)n−k(3.12)
Since⎨parenleftbiggn
k⎨parenrightbigg
is a constant independent of θ, the likelihood for the binomial sampling model is the
same as the likelihood for the Bernoulli model. So any inferences we make about θwill be the
same whether we observe the counts, D=(N1,N), or a sequence of trials, D={x1,...,x N}.
3.3.2 Prior
We need a prior which has support over the interval [0,1]. To make the math easier, it would
convenient if the prior had the same form as the likelihood, i.e., if the prior looked like
p(θ)∝θγ1(1−θ)γ2(3.13)
for some prior parameters γ1andγ2. If this were the case, then we could easily evaluate the
posterior by simply adding up the exponents:
p(θ)∝p(D|θ)p(θ)=θN1(1−θ)N0θγ1(1−θ)γ2=θN1+γ1(1−θ)N0+γ2(3.14)
When the prior and the posterior have the same form, we say that the prior is a conjugate
priorfor the corresponding likelihood. Conjugate priors are widely used because they simplify
computation, and are easy to interpret, as we see below.
In the case of the Bernoulli, the conjugate prior is the beta distribution, which we encountered
in Section 2.4.5:
Beta(θ|a,b)∝θa−1(1−θ)b−1(3.15)
The parameters of the prior are called hyper-parameters. We can set them in order to encode
our prior beliefs. For example, to encode our beliefs that θhas mean 0.7 and standard deviation
0.2, we set a=2.975andb=1.275(Exercise 3.15). Or to encode our beliefs that θhas mean
0.15 and that we think it lives in the interval (0.05,0.30)with probability, then we ﬁnd a=4.5
andb=2 5.5(Exercise 3.16).
If we know “nothing” about θ, except that it lies in the interval [0,1], we can use a uni-
form prior, which is a kind of uninformative prior (see Section 5.4.2 for details). The uniform
distribution can be represented by a beta distribution with a=b=1.
3.3. The beta-binomial model 75
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 10123456
  
prior Be(2.0, 2.0)
lik Be(4.0, 18.0)
post Be(5.0, 19.0)
(a)0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 100.511.522.533.544.5
  
prior Be(5.0, 2.0)
lik Be(12.0, 14.0)
post Be(16.0, 15.0)
(b)
Figure 3.6 (a) Updating a Beta(2, 2) prior with a Binomial likelihood with sufficient statistics N1=
3,N0=1 7to yield a Beta(5,19) posterior. (b) Updating a Beta(5, 2) prior with a Binomial likeli-
hood with sufficient statistics N1=1 1,N0=1 3to yield a Beta(16, 15) posterior. Figure generated by
binomialBetaPosteriorDemo .
3.3.3 Posterior
If we multiply the likelihood by the beta prior we get the following posterior (following Equa-
tion 3.14):
p(θ|D)∝Bin(N 1|θ,N0+N1)Beta(θ|a,b)Beta(θ|N1+a,N0+b) (3.16)
In particular, the posterior is obtained by adding the prior hyper-parameters to the empiricalcounts. For this reason, the hyper-parameters are known as pseudo counts. The strength of the
prior, also known as the effective sample size of the prior, is the sum of the pseudo counts,
a+b; this plays a role analogous to the data set size, N
1+N0=N.
Figure 3.6(a) gives an example where we update a weak Beta(2,2) prior with a peaked likelihood
function, corresponding to a large sample size; we see that the posterior is essentially identicalto the likelihood: since the data has overwhelmed the prior. Figure 3.6(b) gives an examplewhere we update a strong Beta(5,2) prior with a peaked likelihood function; now we see that theposterior is a “compromise” between the prior and likelihood.
Note that updating the posterior sequentially is equivalent to updating in a single batch.
To see this, suppose we have two data sets D
aandDbwith sufficient statistics Na
1,Na
0and
Nb
1,Nb
0.L e tN1=Na
1+Nb
1andN0=Na
0+Nb
0be the sufficient statistics of the combined
datasets. In batch mode we have
p(θ|Da,Db)∝Bin(N 1|θ,N1+N0)Beta(θ|a,b)∝Beta(θ|N1+a,N0+b)(3.17)
In sequential mode, we have
p(θ|Da,Db)∝p(Db|θ)p(θ|Da) (3.18)
∝Bin(Nb
1|θ,Nb
1+Nb
0)Beta(θ|Na
1+a,Na
0+b) (3.19)
∝Beta(θ|Na
1+Nb
1+a,Na
0+Nb
0+b) (3.20)
This makes Bayesian inference particularly well-suited to online learning, as we will see later.
76 Chapter 3. Generative models for discrete data
3.3.3.1 Posterior mean and mode
From Equation 2.62, the MAP estimate is given by
ˆθMAP=a+N1−1
a+b+N−2(3.21)
If we use a uniform prior, then the MAP estimate reduces to the MLE, which is just the empirical
fraction of heads:
ˆθMLE=N1
N(3.22)
This makes intuitive sense, but it can also be derived by applying elementary calculus tomaximize the likelihood function in Equation 3.11. (Exercise 3.1).
By contrast, the posterior mean is given by,
θ=a+N1
a+b+N(3.23)
This difference between the mode and the mean will prove important later.
We will now show that the posterior mean is convex combination of the prior mean and the
MLE, which captures the notion that the posterior is a compromise between what we previouslybelieved and what the data is telling us.
Letα
0=a+bbe theequivalent sample size of the prior, which controls its strength, and
let the prior mean be m1=a/α0. Then the posterior mean is given by
E[θ|D]=α0m1+N1
N+α0=α0
N+α0m1+N
N+α0N1
N=λm1+(1−λ)ˆθMLE (3.24)
whereλ=α0
N+α 0is the ratio of the prior to posterior equivalent sample size. So the weaker the
prior, the smaller is λ, and hence the closer the posterior mean is to the MLE. One can show
similarly that the posterior mode is a convex combination of the prior mode and the MLE, andthat it too converges to the MLE.
3.3.3.2 Posterior variance
The mean and mode are point estimates, but it is useful to know how much we can trust them.The variance of the posterior is one way to measure this. The variance of the Beta posterior isgiven by
var[θ|D]=(a+N
1)(b+N0)
(a+N1+b+N0)2(a+N1+b+N0+1)(3.25)
We can simplify this formidable expression in the case that N/greatermucha,b,t og e t
var[θ|D]≈N1N0
NNN=ˆθ(1−ˆθ)
N(3.26)
whereˆθis the MLE. Hence the “error bar” in our estimate (i.e., the posterior standard deviation),
is given by
σ=⎨radicalbig
var[θ|D]≈⎨radicalBigg
ˆθ(1−ˆθ)
N(3.27)
3.3. The beta-binomial model 77
We see that the uncertainty goes down at a rate of 1/√
N. Note, however, that the uncertainty
(variance) is maximized when ˆθ=0.5, and is minimized when ˆθis close to 0 or 1. This means
it is easier to be sure that a coin is biased than to be sure that it is fair.
3.3.4 Posterior predictive distribution
So far, we have been focusing on inference of the unknown parameter(s). Let us now turn our
attention to prediction of future observable data.
Consider predicting the probability of heads in a single future trial under a Beta(a,b)poste-
rior. We have
p(˜x=1|D)=⎨integraldisplay1
0p(x=1|θ)p(θ|D)dθ (3.28)
=⎨integraldisplay1
0θBeta(θ|a,b)dθ=E[θ|D]=a
a+b(3.29)
Thus we see that the mean of the posterior predictive distribution is equivalent (in this case) toplugging in the posterior mean parameters: p(˜x|D)=B e r (˜x|E[θ|D]).
3.3.4.1 Overﬁtting and the black swan paradox
Suppose instead that we plug-in the MLE, i.e., we use p(˜x|D)≈Ber(˜x|ˆθ
MLE). Unfortunately,
this approximation can perform quite poorly when the sample size is small. For example,suppose we have seen N=3tails in a row. The MLE is ˆθ=0/3=0, since this makes the
observed data as probable as possible. However, using this estimate, we predict that heads areimpossible. This is called the zero count problem or thesparse data problem, and frequently
occurs when estimating counts from small amounts of data. One might think that in the eraof “big data”, such concerns are irrelevant, but note that once we partition the data based oncertain criteria — such as the number of times a speciﬁc person has engaged in a speciﬁc activity
— the sample sizes can become much smaller. This problem arises, for example, when tryingto perform personalized recommendation of web pages. Thus Bayesian methods are still useful,even in the big data regime (Jordan 2011).
The zero-count problem is analogous to a problem in philosophy called the black swan
paradox. This is based on the ancient Western conception that all swans were white. Inthat context, a black swan was a metaphor for something that could not exist. (Black swanswere discovered in Australia by European explorers in the 17th Century.) The term “black swanparadox” was ﬁrst coined by the famous philosopher of science Karl Popper; the term has alsobeen used as the title of a recent popular book (Taleb 2007). This paradox was used to illustratethe problem of induction, which is the problem of how to draw general conclusions about the
future from speciﬁc observations from the past.
Let us now derive a simple Bayesian solution to the problem. We will use a uniform prior, so
a=b=1. In this case, plugging in the posterior mean gives Laplace’s rule of succession
p(˜x=1|D)=N
1+1
N1+N0+2(3.30)
This justiﬁes the common practice of adding 1 to the empirical counts, normalizing and thenplugging them in, a technique known as add-one smoothing. (Note that plugging in the MAP
78 Chapter 3. Generative models for discrete data
parameters would not have this smoothing effect, since the mode has the form ˆθ=N1+a−1
N+a+b−2,
which becomes the MLE if a=b=1.)
3.3.4.2 Predicting the outcome of multiple future trials
Suppose now we were interested in predicting the number of heads, x,i nMfuture trials. This
is given by
p(x|D,M)=⎨integraldisplay1
0Bin(x|θ,M)Beta(θ|a,b)dθ (3.31)
=⎨parenleftbiggM
x⎨parenrightbigg1
B(a,b)⎨integraldisplay1
0θx(1−θ)M−xθa−1(1−θ)b−1dθ (3.32)
We recognize the integral as the normalization constant for a Beta(a+x,M−x+b)distribution.
Hence
⎨integraldisplay1
0θx(1−θ)M−xθa−1(1−θ)b−1dθ=B(x+a,M−x+b) (3.33)
Thus we ﬁnd that the posterior predictive is given by the following, known as the (compound)
beta-binomial distribution:
Bb(x|a,b,M)/defines⎨parenleftbiggM
x⎨parenrightbiggB(x+a,M−x+b)
B(a,b)(3.34)
This distribution has the following mean and variance
E[x]=Ma
a+b,var[x]=Mab
(a+b)2(a+b+M)
a+b+1(3.35)
IfM=1, and hence x∈{0,1}, we see that the mean becomes E[x|D]=p(x=1|D)=a
a+b,
which is consistent with Equation 3.29.
This process is illustrated in Figure 3.7(a). We start with a Beta(2,2) prior, and plot the
posterior predictive density after seeing N1=3heads and N0=1 7tails. Figure 3.7(b) plots
a plug-in approximation using a MAP estimate. We see that the Bayesian prediction has longertails, spreading its probablity mass more widely, and is therefore less prone to overﬁtting andblackswan type paradoxes.
3.4 The Dirichlet-multinomial model
In the previous section, we discussed how to infer the probability that a coin comes up heads.In this section, we generalize these results to infer the probability that a dice with Ksides
comes up as face k. This might seem like another toy exercise, but the methods we will study
are widely used to analyse text data, biosequence data, etc., as we will see later.
3.4. The Dirichlet-multinomial model 79
0 1 2 3 4 5 6 7 8 9 1000.050.10.150.20.250.30.35posterior predictive
(a)0 1 2 3 4 5 6 7 8 9 1000.050.10.150.20.250.30.35plugin predictive
(b)
Figure 3.7 (a) Posterior predictive distributions after seeing N1=3,N0=1 7. (b) Plugin approximation.
Figure generated by betaBinomPostPredDemo .
3.4.1 Likelihood
Suppose we observe Ndice rolls, D={x1,...,x N},w h e r e xi∈{1,...,K}. If we assume
the data is iid, the likelihood has the form
p(D|θ)=K⎨productdisplay
k=1θNk
k(3.36)
whereNk=⎨summationtextN
i=1I(yi=k)is the number of times event koccured (these are the sufficient
statistics for this model). The likelihood for the multinomial model has the same form, up to an
irrelevant constant factor.
3.4.2 Prior
Since the parameter vector lives in the K-dimensional probability simplex, we need a prior that
has support over this simplex. Ideally it would also be conjugate. Fortunately, the Dirichletdistribution (Section 2.5.4) satisﬁes both criteria. So we will use the following prior:
Dir(θ|α)=1
B(α)K⎨productdisplay
k=1θαk−1
kI(x∈SK) (3.37)
3.4.3 Posterior
Multiplying the likelihood by the prior, we ﬁnd that the posterior is also Dirichlet:
p(θ|D)∝p(D|θ)p(θ) (3.38)
∝K⎨productdisplay
k=1θNk
kθαk−1
k=K⎨productdisplay
k=1θαk+Nk−1
k(3.39)
= Dir(θ |α1+N1,...,α K+NK) (3.40)
80 Chapter 3. Generative models for discrete data
We see that the posterior is obtained by adding the prior hyper-parameters (pseudo-counts) αk
to the empirical counts Nk.
We can derive the mode of this posterior (i.e., the MAP estimate) by using calculus. However,
we must enforce the constraint that⎨summationtext
kθk=1.2. We can do this by using a Lagrange
multiplier. The constrained objective function, or Lagrangian, is given by the log likelihood
plus log prior plus the constraint:
/lscript(θ,λ)=⎨summationdisplay
kNklogθk+⎨summationdisplay
k(αk−1)logθk+λ⎨parenleftBigg
1−⎨summationdisplay
kθk⎨parenrightBigg
(3.41)
To simplify notation, we deﬁne N/prime
k/definesNk+αk−1. Taking derivatives with respect to λyields
the original constraint:
∂/lscript
∂λ=⎨parenleftBigg
1−⎨summationdisplay
kθk⎨parenrightBigg
=0 (3.42)
Taking derivatives with respect to θkyields
∂/lscript
∂θk=N/prime
k
θk−λ=0 (3.43)
N/prime
k=λθk (3.44)
We can solve for λusing the sum-to-one constraint:
⎨summationdisplay
kN/prime
k=λ⎨summationdisplay
kθk (3.45)
N+α0−K=λ (3.46)
whereα0/defines⎨summationtextK
k=1αkis the equivalent sample size of the prior. Thus the MAP estimate is
given by
ˆθk=Nk+αk−1
N+α0−K(3.47)
which is consistent with Equation 2.77. If we use a uniform prior, αk=1, we recover the MLE:
ˆθk=Nk/N (3.48)
This is just the empirical fraction of times face kshows up.
2. We do not need to explicitly enforce the constraint that θk≥0since the gradient of the objective has the form
Nk/θk−λ; so negative values would reduce the objective, rather than maximize it. (Of course, this does not preclude
settingθk=0, and indeed this is the optimal solution if Nk=0andαk=1.)
3.4. The Dirichlet-multinomial model 81
3.4.4 Posterior predictive
The posterior predictive distribution for a single multinoulli trial is given by the following
expression:
p(X=j|D)=⎨integraldisplay
p(X=j|θ)p(θ|D)dθ (3.49)
=⎨integraldisplay
p(X=j|θj)⎨bracketleftbigg⎨integraldisplay
p(θ−j,θj|D)dθ−j⎨bracketrightbigg
dθj (3.50)
=⎨integraldisplay
θjp(θj|D)dθj=E[θj|D]=αj+Nj⎨summationtext
k(αk+Nk)=αj+Nj
α0+N(3.51)
whereθ−jare all the components of θexceptθj. See also Exercise 3.13.
The above expression avoids the zero-count problem, just as we saw in Section 3.3.4.1. In
fact, this form of Bayesian smoothing is even more important in the multinomial case than thebinary case, since the likelihood of data sparsity increases once we start partitioning the datainto many categories.
3.4.4.1 Worked example: language models using bag of words
One application of Bayesian smoothing using the Dirichlet-multinomial model is to language
modeling, which means predicting which words might occur next in a sequence. Here wewill take a very simple-minded approach, and assume that the i’th word, X
i∈{1,...,K},i s
sampled independently from all the other words using a Cat(θ)distribution. This is called the
bag of words model. Given a past sequence of words, how can we predict which one is likely
to come next?
For example, suppose we observe the following sequence (part of a children’s nursery rhyme):
Mary had a little lamb, little lamb, little lamb,Mary had a little lamb, its fleece as white as snow
Furthermore, suppose our vocabulary consists of the following words:mary lamb little big fleece white black snow rain unk
1 2 34 56 7 8 9 1 0
Hereunkstands for unknown, and represents all other words that do not appear elsewhere on
the list. To encode each line of the nursery rhyme, we ﬁrst strip off punctuation, and remove
anystop words such as “a”, “as”, “the”, etc. We can also perform stemming, which means
reducing words to their base form, such as stripping off the ﬁnal sin plural words, or the ing
from verbs (e.g., runningbecomes run). In this example, no words need stemming. Finally, we
replace each word by its index into the vocabulary to get:
11 0323232
11 0321 051 068
We now ignore the word order, and count how often each word occurred, resulting in a
histogram of word counts:
82 Chapter 3. Generative models for discrete data
Token123 4 56789 1 0
Wordmary lamb little big ﬂeece white black snow rain unk
Count244 0 1 1010 4
Denote the above counts by Nj. If we use a Dir(α)prior for θ, the posterior predictive is
just
p(˜X=j|D)=E[θj|D]=αj+Nj⎨summationtext
j/primeαj/prime+Nj/prime=1+Nj
10+17(3.52)
If we setαj=1,w eg e t
p(˜X=j|D)=( 3/27,5/27,5/27,1/27,2/27,2/27,1/27,2/27,1/27,5/27) (3.53)
The modes of the predictive distribution are X=2(“lamb”) and X=1 0(“unk”). Note that the
words “big”, “black” and “rain” are predicted to occur with non-zero probability in the future,
even though they have never been seen before. Later on we will see more sophisticated languagemodels.
3.5 Naive Bayes classiﬁers
In this section, we discuss how to classify vectors of discrete-valued features, x∈{1,...,K}D,
whereKis the number of values for each feature, and Dis the number of features. We will use
a generative approach. This requires us to specify the class conditional distribution, p(x|y=c).
The simplest approach is to assume the features are conditionally independent given the class
label. This allows us to write the class conditional density as a product of one dimensionaldensities:
p(x|y=c,θ)=D⎨productdisplay
j=1p(xj|y=c,θjc) (3.54)
The resulting model is called a naive Bayes classiﬁer (NBC).
The model is called “naive” since we do not expect the features to be independent, even
conditional on the class label. However, even if the naive Bayes assumption is not true, it oftenresults in classiﬁers that work well (Domingos and Pazzani 1997). One reason for this is that themodel is quite simple (it only has O(CD)parameters, for Cclasses and Dfeatures), and hence
it is relatively immune to overﬁtting.
The form of the class-conditional density depends on the type of each feature. We give some
possibilities below:
• In the case of real-valued features, we can use the Gaussian distribution: p(x|y=c,θ)=⎨producttext
D
j=1N(xj|μjc,σ2
jc),w h e r eμjcis the mean of feature jin objects of class c, andσ2
jcis its
variance.
• In the case of binary features, xj∈{0,1}, we can use the Bernoulli distribution: p(x|y=
c,θ)=⎨producttextDj=1Ber(xj|μjc),w h e r eμjcis the probability that feature joccurs in class c.
This is sometimes called the multivariate Bernoulli naive Bayes model. We will see an
application of this below.
3.5. Naive Bayes classiﬁers 83
• In the case of categorical features, xj∈{1,...,K}, we can model use the multinoulli
distribution: p(x|y=c,θ)=⎨producttextD
j=1Cat(xj|μjc),w h e r eμjcis a histogram over the K
possible values for xjin classc.
Obviously we can handle other kinds of features, or use different distributional assumptions.
Also, it is easy to mix and match features of different types.
3.5.1 Model ﬁtting
We now discuss how to “train” a naive Bayes classiﬁer. This usually means computing the MLEor the MAP estimate for the parameters. However, we will also discuss how to compute the fullposterior, p(θ|D).
3.5.1.1 MLE for NBC
The probability for a single data case is given by
p(x
i,yi|θ)=p(yi|π)⎨productdisplay
jp(xij|θj)=⎨productdisplay
cπI(yi=c)
c⎨productdisplay
j⎨productdisplay
cp(xij|θjc)I(yi=c)(3.55)
Hence the log-likelihood is given by
logp(D|θ)=C⎨summationdisplay
c=1Nclogπc+D⎨summationdisplay
j=1C⎨summationdisplay
c=1⎨summationdisplay
i:yi=clogp(xij|θjc) (3.56)
We see that this expression decomposes into a series of terms, one concerning π, andDC
terms containing the θjc’s. Hence we can optimize all these parameters separately.
From Equation 3.48, the MLE for the class prior is given by
ˆπc=Nc
N(3.57)
whereNc/defines⎨summationtext
iI(yi=c)is the number of examples in class c.
The MLE for the likelihood depends on the type of distribution we choose to use for each
feature. For simplicity, let us suppose all features are binary, so xj|y=c∼Ber(θjc). In this
case, the MLE becomes
ˆθjc=Njc
Nc(3.58)
It is extremely simple to implement this model ﬁtting procedure: See Algorithm 8 for some
pseudo-code (and naiveBayesFit for some Matlab code). This algorithm obviously takes
O(ND)time. The method is easily generalized to handle features of mixed type. This simplicity
is one reason the method is so widely used.
Figure 3.8 gives an example where we have 2 classes and 600 binary features, representing the
presence or absence of words in a bag-of-words model. The plot visualizes the θcvectors for the
two classes. The big spike at index 107 corresponds to the word “subject”, which occurs in bothclasses with probability 1. (In Section 3.5.4, we discuss how to “ﬁlter out” such uninformativefeatures.)
84 Chapter 3. Generative models for discrete data
Algorithm 3.1: Fitting a naive Bayes classiﬁer to binary features
1Nc=0,Njc=0;
2fori=1:Ndo
3c=yi// Class label of i’th example;
4Nc:=Nc+1;
5forj=1:Ddo
6 ifxij=1then
7 Njc:=Njc+1
8ˆπc=Nc
N,ˆθjc=Njc
N
0 100 200 300 400 500 600 70000.10.20.30.40.50.60.70.80.91p(xj=1|y=1)
(a)0 100 200 300 400 500 600 70000.10.20.30.40.50.60.70.80.91p(xj=1|y=2)
(b)
Figure 3.8 Class conditional densities p(xj=1|y=c)for two document classes, corresponding to “X
windows” and “MS windows”. Figure generated by naiveBayesBowDemo .
3.5.1.2 Bayesian naive Bayes
The trouble with maximum likelihood is that it can overﬁt. For example, consider the example
in Figure 3.8: the feature corresponding to the word “subject” (call it feature j) always occurs
in both classes, so we estimate ˆθjc=1. What will happen if we encounter a new email which
does not have this word in it? Our algorithm will crash and burn, since we will ﬁnd thatp(y=c|x,ˆθ)=0for both classes! This is another manifestation of the black swan paradox
discussed in Section 3.3.4.1.
A simple solution to overﬁtting is to be Bayesian. For simplicity, we will use a factored prior:
p(θ)=p( π)D⎨productdisplay
j=1C⎨productdisplay
c=1p(θjc) (3.59)
We will use a Dir(α)prior for πand aBeta(β0,β1)prior for each θjc. Often we just take
α=1andβ=1, corresponding to add-one or Laplace smoothing.
3.5. Naive Bayes classiﬁers 85
Combining the factored likelihood in Equation 3.56 with the factored prior above gives the
following factored posterior:
p(θ|D)=p( π|D)D⎨productdisplay
j=1C⎨productdisplay
c=p(θjc|D) (3.60)
p(π|D)=D i r ( N1+α1...,NC+αC) (3.61)
p(θjc|D) = Beta((N c−Njc)+β0,Njc+β1) (3.62)
In other words, to compute the posterior, we just update the prior counts with the empirical
counts from the likelihood. It is straightforward to modify algorithm 8 to handle this version ofmodel “ﬁtting”.
3.5.2 Using the model for prediction
At test time, the goal is to compute
p(y=c|x,D)∝p(y=c|D)D⎨productdisplay
j=1p(xj|y=c,D) (3.63)
The correct Bayesian procedure is to integrate out the unknown parameters:
p(y=c|x,D)∝⎨bracketleftbigg⎨integraldisplay
Cat(y=c|π)p(π|D)dπ⎨bracketrightbigg
(3.64)
D⎨productdisplay
j=1⎨bracketleftbigg⎨integraldisplay
Ber(xj|y=c,θjc)p(θjc|D)⎨bracketrightbigg
(3.65)
Fortunately, this is easy to do, at least if the posterior is Dirichlet. In particular, from Equa-tion 3.51, we know the posterior predictive density can be obtained by simply plugging in theposterior mean parameters
θ. Hence
p(y=c|x,D)∝πcD⎨productdisplay
j=1(θjc)I(xj=1)(1−θjc)I(xj=0)(3.66)
θjk=Njc+β1
Nc+β0+β1(3.67)
πc=Nc+αc
N+α0(3.68)
whereα0=⎨summationtext
cαc.
If we have approximated the posterior by a single point, p(θ|D)≈δˆθ(θ),w h e r eˆθmay be
the ML or MAP estimate, then the posterior predictive density is obtained by simply plugging inthe parameters, to yield a virtually identical rule:
p(y=c|x,D)∝ˆπ
cD⎨productdisplay
j=1(ˆθjc)I(xj=1)(1−ˆθjc)I(xj=0)(3.69)
86 Chapter 3. Generative models for discrete data
The only difference is we replaced the posterior mean θwith the posterior mode or MLE ˆθ.
However, this small difference can be important in practice, since the posterior mean will result
in less overﬁtting (see Section 3.4.4.1).
3.5.3 The log-sum-exp trick
We now discuss one important practical detail that arises when using generative classiﬁers of anykind. We can compute the posterior over class labels using Equation 2.13, using the appropriateclass-conditional density (and a plug-in approximation). Unfortunately a naive implementationof Equation 2.13 can fail due to numerical underﬂow. The problem is that p(x|y=c)is often
a very small number, especially if xis a high-dimensional vector. This is because we require
that⎨summationtext
xp(x|y)=1, so the probability of observing any particular high-dimensional vector is
small. The obvious solution is to take logs when applying Bayes rule, as follows:
logp(y=c|x)=b c−log⎨bracketleftBiggC⎨summationdisplay
c/prime=1ebc/prime⎨bracketrightBigg
(3.70)
bc/defineslogp(x|y=c)+logp(y=c) (3.71)
However, this requires evaluating the following expression
log[⎨summationdisplay
c/primeebc/prime]=l o g⎨summationdisplay
c/primep(y=c/prime,x)=l o gp(x) (3.72)
and we can’t add up in the log domain. Fortunately, we can factor out the largest term, and justrepresent the remaining numbers relative to that. For example,
log(e
−120+e−121)=l o g⎨parenleftbig
e−120(e0+e−1)⎨parenrightbig
= log(e0+e−1)−120 (3.73)
In general, we have
log⎨summationdisplay
cebc=l o g⎨bracketleftBigg
(⎨summationdisplay
cebc−B)eB⎨bracketrightBigg
=⎨bracketleftBigg
log(⎨summationdisplay
cebc−B)⎨bracketrightBigg
+B (3.74)
whereB=m a x cbc. This is called the log-sum-exp trick, and is widely used. (See the function
logsumexp for an implementation.)
This trick is used in Algorithm 1 which gives pseudo-code for using an NBC to compute
p(yi|xi,ˆθ). See naiveBayesPredict for the Matlab code. Note that we do not need the
log-sum-exp trick if we only want to compute ˆyi, since we can just maximize the unnormalized
quantitylogp(yi=c)+logp(xi|y=c).
3.5.4 Feature selection using mutual information
Since an NBC is ﬁtting a joint distribution over potentially many features, it can suffer fromoverﬁtting. In addition, the run-time cost is O(D), which may be too high for some applications.
One common approach to tackling both of these problems is to perform feature selection,t o
remove “irrelevant” features that do not help much with the classiﬁcation problem. The simplestapproach to feature selection is to evaluate the relevance of each feature separately, and then
3.5. Naive Bayes classiﬁers 87
Algorithm 3.2: Predicting with a naive bayes classiﬁer for binary features
1fori=1:Ndo
2forc=1:Cdo
3 Lic= logˆπc;
4 forj=1:Ddo
5 ifxij=1thenLic:=Lic+logˆθjcelseLic:=Lic+log(1− ˆθjc)
6pic=e x p (Lic−logsumexp( Li,:));
7ˆyi=a r g m a xcpic;
take the top K,w h e r eKis chosen based on some tradeoff between accuracy and complexity.
This approach is known as variable ranking, ﬁltering,o rscreening.
One way to measure relevance is to use mutual information (Section 2.8.3) between feature
Xjand the class label Y:
I(X,Y)=⎨summationdisplay
xj⎨summationdisplay
yp(xj,y)logp(xj,y)
p(xj)p(y)(3.75)
The mutual information can be thought of as the reduction in entropy on the label distribution
once we observe the value of feature j. If the features are binary, it is easy to show (Exercise 3.21)
that the MI can be computed as follows
Ij=⎨summationdisplay
c⎨bracketleftbigg
θjcπclogθjc
θj+(1−θjc)πclog1−θjc
1−θj⎨bracketrightbigg
(3.76)
whereπc=p(y=c),θjc=p(xj=1|y=c), andθj=p(xj=1 )=⎨summationtext
cπcθjc. (All of these
quantities can be computed as a by-product of ﬁtting a naive Bayes classiﬁer.)
Figure 3.1 illustrates what happens if we apply this to the binary bag of words dataset used in
Figure 3.8. We see that the words with highest mutual information are much more discriminativethan the words which are most probable. For example, the most probable word in both classesis “subject”, which always occurs because this is newsgroup data, which always has a subjectline. But obviously this is not very discriminative. The words with highest MI with the classlabel are (in decreasing order) “windows”, “microsoft”, “DOS” and “motif”, which makes sense,since the classes correspond to Microsoft Windows and X Windows.
3.5.5 Classifying documents using bag of words
Document classiﬁcation is the problem of classifying text documents into different categories.
One simple approach is to represent each document as a binary vector, which records whethereach word is present or not, so x
ij=1iff wordjoccurs in document i, otherwise xij=0.
We can then use the following class conditional density:
p(xi|yi=c,θ)=D⎨productdisplay
j=1Ber(xij|θjc)=D⎨productdisplay
j=1θI(xij)
jc(1−θjc)I(1−xij)(3.77)
88 Chapter 3. Generative models for discrete data
class 1 prob class 2 prob highest MI MI
subject 0.998 subject 0.998 windows 0.215
this 0.628 windows 0.639 microsoft 0.095
with 0.535 this 0.540 dos 0.092
but 0.471 with 0.538 motif 0.078
you 0.431 but 0.518 window 0.067
Table 3.1 We list the 5 most likely words for class 1 (X windows) and class 2 (MS windows). We also show
the 5 words with highest mutual information with class label. Produced by naiveBayesBowDemo
This is called the Bernoulli product model,o rt h ebinary independence model.
However, ignoring the number of times each word occurs in a document loses some in-
formation (McCallum and Nigam 1998). A more accurate representation counts the number
of occurrences of each word. Speciﬁcally, let xibe a vector of counts for document i,s o
xij∈{0,1,...,N i},w h e r eNiis the number of terms in document i(so⎨summationtextD
j=1xij=Ni). For
the class conditional densities, we can use a multinomial distribution:
p(xi|yi=c,θ)=M u (xi|Ni,θc)=Ni!⎨producttextDj=1xij!D⎨productdisplay
j=1θxij
jc (3.78)
where we have implicitly assumed that the document length Niis independent of the class.
Hereθjcis the probability of generating word jin documents of class c; these parameters satisfy
the constraint that⎨summationtextDj=1θjc=1for each class c.3
Although the multinomial classiﬁer is easy to train and easy to use at test time, it does not
work particularly well for document classiﬁcation. One reason for this is that it does not take
into account the burstiness of word usage. This refers to the phenomenon that most words
never appear in any given document, but if they do appear once, they are likely to appear morethan once, i.e., words occur in bursts.
The multinomial model cannot capture the burstiness phenomenon. To see why, note that
Equation 3.78 has the form θNij
jc, and since θjc/lessmuch1for rare words, it becomes increasingly
unlikely to generate many of them. For more frequent words, the decay rate is not as fast. Tosee why intuitively, note that the most frequent words are function words which are not speciﬁcto the class, such as “and”, “the”, and “but”; the chance of the word “and” occuring is prettymuch the same no matter how many time it has previously occurred (modulo document length),so the independence assumption is more reasonable for common words. However, since rarewords are the ones that matter most for classiﬁcation purposes, these are the ones we want tomodel the most carefully.
Various ad hoc heuristics have been proposed to improve the performance of the multinomial
document classiﬁer (Rennie et al. 2003). We now present an alternative class conditional densitythat performs as well as these ad hoc methods, yet is probabilistically sound (Madsen et al.2005).
3. Since Equation 3.78 models each word independently, this model is often called a naive Bayes classiﬁer, although
technically the features xijare not independent, because of the constraint/summationtext
jxij=Ni.
3.5. Naive Bayes classiﬁers 89
Suppose we simply replace the multinomial class conditional density with the Dirichlet
Compound Multinomial orDCMdensity, deﬁned as follows:
p(xi|yi=c,α)=⎨integraldisplay
Mu(xi|Ni,θc)Dir(θ c|αc)dθc=Ni!⎨producttextD
j=1xij!B(xi+αc)
B(αc)(3.79)
(This equation is derived in Equation 5.24.) Surprisingly this simple change is all that is needed
to capture the burstiness phenomenon. The intuitive reason for this is as follows: After seeingone occurence of a word, say word j, the posterior counts on θ
jgets updated, making another
occurence of word jmore likely. By contrast, if θjis ﬁxed, then the occurences of each word are
independent. The multinomial model corresponds to drawing a ball from an urn with Kcolors
of ball, recording its color, and then replacing it. By contrast, the DCM model corresponds todrawing a ball, recording its color, and then replacing it with one additional copy; this is calledthePolya urn.
Using the DCM as the class conditional density gives much better results than using the
multinomial, and has performance comparable to state of the art methods, as described in(Madsen et al. 2005). The only disadvantage is that ﬁtting the DCM model is more complex; see(Minka 2000e; Elkan 2006) for the details.
Exercises
Exercise 3.1 MLE for the Bernoulli/ binomial model
Derive Equation 3.22 by optimizing the log of the likelihood in Equation 3.11.
Exercise 3.2 Marginal likelihood for the Beta-Bernoulli model
In Equation 5.23, we showed that the marginal likelihood is the ratio of the normalizing constants:
p(D)=Z(α1+N1,α0+N0)
Z(α1,α0)=Γ(α1+N1)Γ(α0+N0)
Γ(α1+α0+N)Γ(α1+α0)
Γ(α1)Γ(α0)(3.80)
We will now derive an alternative derivation of this fact. By the chain rule of probability,
p(x1:N)=p(x1)p(x2|x1)p(x3|x1:2)... (3.81)
In Section 3.3.4, we showed that the posterior predictive distribution is
p(X=k|D1:N)=Nk+αk/summationtext
iNi+αi/definesNk+αk
N+α(3.82)
wherek∈{0,1}andD1:Nis the data seen so far. Now suppose D=H,T,T,H,H orD=1,0,0,1,1.
Then
p(D)=α1
α·α0
α+1·α0+1
α+2·α1+1
α+3·α1+2
α+4(3.83)
=[α1(α1+1)(α1+2)][α0(α0+1)]
α(α+1)···(α+4)(3.84)
=[(α1)···(α1+N1−1)][(α 0)···(α0+N0−1)]
(α)···(α+N−1)(3.85)
Show how this reduces to Equation 3.80 by using the fact that, for integers, (α−1)! = Γ(α ).
90 Chapter 3. Generative models for discrete data
Exercise 3.3 Posterior predictive for Beta-Binomial model
Recall from Equation 3.32 that the posterior predictive for the Beta-Binomial is given by
p(x|n,D)=Bb (x|α/prime
0,α/prime
1,n) (3.86)
=B(x+α/prime
1,n−x+α/prime
0)
B(α/prime
1,α/prime
0)/parenleftbiggn
x/parenrightbigg
(3.87)
Prove that this reduces to
p(˜x=1|D)=α/prime
1
α/prime
0+α/prime
1(3.88)
whenn=1(and hence x∈{0,1}). i.e., show that
Bb(1|α/prime
1,α/prime
0,1) =α/prime
1
α/prime
1+α/prime
0(3.89)
Hint: use the fact that
Γ(α0+α1+1)=(α0+α1+1)Γ(α0+α1) (3.90)
Exercise 3.4 Beta updating from censored likelihood
(Source: Gelman.) Suppose we toss a coin n=5times. Let Xbe the number of heads. We observe that
there are fewer than 3 heads, but we don’t know exactly how many. Let the prior probability of heads be
p(θ)=B e t a ( θ|1,1). Compute the posterior p(θ|X<3)up to normalization constants, i.e., derive an
expression proportional to p(θ,X <3). Hint: the answer is a mixture distribution.
Exercise 3.5 Uninformative prior for log-odds ratio
Let
φ= logit(θ )=l o gθ
1−θ(3.91)
Show that if p(φ)∝1, thenp(θ)∝Beta(θ|0,0). Hint: use the change of variables formula.
Exercise 3.6 MLE for the Poisson distribution
The Poisson pmf is deﬁned as Poi(x|λ)=e−λλx
x!,f o rx∈{0,1,2,...}whereλ>0is the rate
parameter. Derive the MLE.
Exercise 3.7 Bayesian analysis of the Poisson distribution
In Exercise 3.6, we deﬁned the Poisson distribution with rate λand derived its MLE. Here we perform a
conjugate Bayesian analysis.
a. Derive the posterior p(λ|D)assuming a conjugate prior p(λ)=G a (λ|a,b)∝λa−1e−λb. Hint: the
posterior is also a Gamma distribution.
b. What does the posterior mean tend to as a→0andb→0? (Recall that the mean of a Ga(a,b)
distribution is a/b.)
Exercise 3.8 MLE for the uniform distribution
(Source: Kaelbling.) Consider a uniform distribution centered on 0 with width 2a. The density function is
given by
p(x)=1
2aI(x∈[−a,a]) (3.92)
3.5. Naive Bayes classiﬁers 91
a. Given a data set x1,...,x n, what is the maximum likelihood estimate of a(call itˆa)?
b. What probability would the model assign to a new data point xn+1usingˆa?
c. Do you see any problem with the above approach? Brieﬂy suggest (in words) a better approach.
Exercise 3.9 Bayesian analysis of the uniform distribution
Consider the uniform distribution Unif(0,θ). The maximum likelihood estimate is ˆθ=m a x (D),a sw e
saw in Exercise 3.8, but this is unsuitable for predicting future data since it puts zero probability mass
outside the training data. In this exercise, we will perform a Bayesian analysis of the uniform distribution(following (Minka 2001a)). The conjugate prior is the Pareto distribution, p(θ)=Pareto(θ|b,K), deﬁned in
Section 2.4.6. Given a Pareto prior, the joint distribution of θandD=(x
1,...,x N)is
p(D,θ)=KbK
θN+K+1I(θ≥max(D)) (3.93)
Letm=m a x (D). The evidence (the probability that all Nsamples came from the same uniform
distribution) is
p(D)=/integraldisplay∞
mKbK
θN+K+1dθ (3.94)
=/braceleftBiggK
(N+K)bNifm≤b
KbK
(N+K)mN+Kifm>b(3.95)
Derive the posterior p(θ|D), and show that if can be expressed as a Pareto distribution.
Exercise 3.10 Taxicab (tramcar) problem
Suppose you arrive in a new city and see a taxi numbered 100. How many taxis are there in this city? Letus assume taxis are numbered sequentially as integers starting from 0, up to some unknown upper boundθ. (We number taxis from 0 for simplicity; we can also count from 1 without changing the analysis.) Hence
the likelihood function is p(x)=U(0,θ), the uniform distribution. The goal is to estimate θ. We will use
the Bayesian analysis from Exercise 3.9.
a. Suppose we see one taxi numbered 100, so D={100},m= 100,N=1. Using an (improper)
non-informative prior on θof the form p(θ)=Pa(θ|0,0)∝1/θ, what is the posterior p(θ|D)?
b. Compute the posterior mean, mode and median number of taxis in the city, if such quantities exist.
c. Rather than trying to compute a point estimate of the number of taxis, we can compute the predictive
density over the next taxicab number using
p(D
/prime|D,α)=/integraldisplay
p(D/prime|θ)p(θ|D,α)dθ=p(D/prime|β) (3.96)
whereα=(b,K)are the hyper-parameters, β=(c,N+K)are the updated hyper-parameters. Now
consider the case D={m}, andD/prime={x}. Using Equation 3.95, write down an expression for
p(x|D,α) (3.97)
As above, use a non-informative prior b=K=0.
d. Use the predictive density formula to compute the probability that the next taxi you will see (say,
the next day) has number 100, 50 or 150, i.e., compute p(x= 100|D,α ),p(x=5 0|D,α),p(x=
150|D,α ).
e. Brieﬂy describe (1-2 sentences) some ways we might make the model more accurate at prediction.
92 Chapter 3. Generative models for discrete data
Exercise 3.11 Bayesian analysis of the exponential distribution
A lifetime Xof a machine is modeled by an exponential distribution with unknown parameter θ. The
likelihood is p(x|θ)=θe−θxforx≥0,θ>0.
a. Show that the MLE is ˆθ=1/x,w h e r ex=1
N/summationtextN
i=1xi.
b. Suppose we observe X1=5,X2=6,X3=4(the lifetimes (in years) of 3 different iid machines).
What is the MLE given this data?
c. Assume that an expert believes θshould have a prior distribution that is also exponential
p(θ) = Expon( θ|λ) (3.98)
Choose the prior parameter, call it ˆλ, such that E[θ]=1/3. Hint: recall that the Gamma distribution
has the form
Ga(θ|a,b)∝θa−1e−θb(3.99)
and its mean is a/b.
d. What is the posterior, p(θ|D,ˆλ)?
e. Is the exponential prior conjugate to the exponential likelihood?
f. What is the posterior mean, E/bracketleftBig
θ|D,ˆλ/bracketrightBig
?
g. Explain why the MLE and posterior mean differ. Which is more reasonable in this example?
Exercise 3.12 MAP estimation for the Bernoulli with non-conjugate priors
(Source: Jaakkola.) In the book, we discussed Bayesian inference of a Bernoulli rate parameter with the
priorp(θ)=B e t a ( θ|α,β). We know that, with this prior, the MAP estimate is given by
ˆθ=N1+α−1
N+α+β−2(3.100)
whereN1is the number of heads, N0is the number of tails, and N=N0+N1is the total number of
trials.
a. Now consider the following prior, that believes the coin is fair, or is slightly biased towards tails:
p(θ)=⎧
⎨
⎩0.5ifθ=0.5
0.5ifθ=0.4
0otherwise(3.101)
Derive the MAP estimate under this prior as a function of N1andN.
b. Suppose the true parameter is θ=0.41. Which prior leads to a better estimate when Nis small?
Which prior leads to a better estimate when Nis large?
Exercise 3.13 Posterior predictive distribution for a batch of data with the dirichlet-multinomial model
In Equation 3.51, we gave the the posterior predictive distribution for a single multinomial trial using a
dirichlet prior. Now consider predicting a batchof new data, ˜D=(X1,...,X m), consisting of msingle
multinomial trials (think of predicting the next mwords in a sentence, assuming they are drawn iid).
Derive an expression for
p(˜D|D,α) (3.102)
3.5. Naive Bayes classiﬁers 93
Your answer should be a function of α, and the old and new counts (sufficient statistics), deﬁned as
Nold
k=/summationdisplay
i∈DI(xi=k) (3.103)
Nnew
k=/summationdisplay
i∈˜DI(xi=k) (3.104)
Hint: recall that, for a vector of counts, N1:K, the marginal likelihood (evidence) is given by
p(D|α)=Γ(α)
Γ(N+α)/productdisplay
kΓ(Nk+αk)
Γ(αk)(3.105)
whereα=/summationtext
kαkandN=/summationtext
kNk.
Exercise 3.14 Posterior predictive for Dirichlet-multinomial
(Source: Koller.).
a. Suppose we compute the empirical distribution over letters of the Roman alphabet plus the space
character (a distribution over 27 values) from 2000 samples. Suppose we see the letter “e” 260 times.
What isp(x2001=e|D), if we assume θ∼Dir(α1,...,α 27),w h e r eα k=1 0for allk?
b. Suppose, in the 2000 samples, we saw “e” 260 times, “a” 100 times, and “p” 87 times. What is
p(x2001=p,x2002=a|D), if we assume θ∼Dir(α1,...,α 27),w h e r eαk=1 0for allk? Show
your work.
Exercise 3.15 Setting the beta hyper-parameters
Supposeθ∼β(α1,α2)and we believe that E[θ]=mandvar[θ]=v. Using Equation 2.62, solve for
α1andα2in terms of mandv. What values do you get if m=0.7andv=0.22?
Exercise 3.16 Setting the beta hyper-parameters II
(Source: Draper.) Suppose θ∼β(α1,α2)and we believe that E[θ]=mandp(/lscript<θ<u )=0.95.
Write a program that can solve for α1andα2in terms of m,/lscriptandu. Hint: write α2as a function of α1
andm, so the pdf only has one unknown; then write down the probability mass contained in the interval
as an integral, and minimize its squared discrepancy from 0.95. What values do you get if m=0.15,
/lscript=0.05andu=0.3? What is the equivalent sample size of this prior?
Exercise 3.17 Marginal likelihood for beta-binomial under uniform prior
Suppose we toss a coin Ntimes and observe N1heads. Let N1∼Bin(N,θ)andθ∼Beta(1,1). Show
that the marginal likelihood is p(N1|N)=1/(N+1). Hint:Γ(x+1)=x!ifxis an integer.
Exercise 3.18 Bayes factor for coin tossing
Suppose we toss a coin N=1 0times and observe N1=9heads. Let the null hypothesis be that the
coin is fair, and the alternative be that the coin can have any bias, so p(θ) = Unif(0, 1). Derive the
Bayes factor BF1,0in favor of the biased coin hypothesis. What if N= 100andN1=9 0? Hint: see
Exercise 3.17.
Exercise 3.19 Irrelevant features with naive Bayes
(Source: Jaakkola.) Let xiw=1if wordwoccurs in document iandxiw=0otherwise. Let θcwbe the
estimated probability that word woccurs in documents of class c. Then the log-likelihood that document
94 Chapter 3. Generative models for discrete data
xbelongs to class cis
logp(xi|c,θ)=l o gW/productdisplay
w=1θxiwcw(1−θcw)1−xiw(3.106)
=W/summationdisplay
w=1xiwlogθcw+(1−xiw)log(1−θcw) (3.107)
=W/summationdisplay
w=1xiwlogθcw
1−θcw+/summationdisplay
wlog(1−θcw) (3.108)
whereWis the number of words in the vocabulary. We can write this more succintly as
logp(xi|c,θ)=φ (xi)Tβc (3.109)
wherexi=(xi1,...,x iW)is a bit vector, φ(xi)=(xi,1), and
βc=( l o gθc1
1−θc1,...,logθcW
1−θcW,/summationdisplay
wlog(1−θcw))T(3.110)
We see that this is a linear classiﬁer, since the class-conditional density is a linear function (an inner
product) of the parameters βc.
a. Assuming p(C=1 )=p (C=2 )=0 .5, write down an expression for the log posterior odds ratio,
log2p(c=1| xi)
p(c=2| xi), in terms of the features φ(xi)and the parameters β1andβ2.
b. Intuitively, words that occur in both classes are not very “discriminative”, and therefore should not
affect our beliefs about the class label. Consider a particular word w. State the conditions on θ1,wand
θ2,w(or equivalently the conditions on β1,w,β2,w) under which the presence or absence of win a
test document will have no effect on the class posterior (such a word will be ignored by the classiﬁer).Hint: using your previous result, ﬁgure out when the posterior odds ratio is 0.5/0.5.
c. The posterior mean estimate of θ, using a Beta(1,1) prior, is given by
ˆθ
cw=1+/summationtext
i∈cxiw
2+nc(3.111)
where the sum is over the ncdocuments in class c. Consider a particular word w, and suppose it
always occurs in every document (regardless of class). Let there be n1documents of class 1 and n2be
the number of documents in class 2, where n1/negationslash=n2(since e.g., we get much more non-spam than
spam; this is an example of class imbalance). If we use the above estimate for θcw, will word wbe
ignored by our classiﬁer? Explain why or why not.
d. What other ways can you think of which encourage “irrelevant” words to be ignored?
Exercise 3.20 Class conditional densities for binary data
Consider a generative classiﬁer for Cclasses with class conditional density p(x|y)and uniform class prior
p(y). Suppose all the Dfeatures are binary, xj∈{0,1}. If we assume all the features are conditionally
independent (the naive Bayes assumption), we can write
p(x|y=c)=D/productdisplay
j=1Ber(xj|θjc) (3.112)
This requires DCparameters.
3.5. Naive Bayes classiﬁers 95
a. Now consider a different model, which we will call the “full” model, in which all the features are fully
dependent (i.e., we make no factorization assumptions). How might we represent p(x|y=c)in this
case? How many parameters are needed to represent p(x|y=c)?
b. Assume the number of features Dis ﬁxed. Let there be Ntraining cases. If the sample size Nis very
small, which model (naive Bayes or full) is likely to give lower test set error, and why?
c. If the sample size Nis very large, which model (naive Bayes or full) is likely to give lower test set error,
and why?
d. What is the computational complexity of ﬁtting the full and naive Bayes models as a function of N
andD? Use big-Oh notation. (Fitting the model here means computing the MLE or MAP parameter
estimates. You may assume you can convert a D-bit vector to an array index in O(D)time.)
e. What is the computational complexity of applying the full and naive Bayes models at test time to a
single test case?
f. Suppose the test case has missing data. Let xvbe the visible features of size v, andxhbe the hidden
(missing) features of size h,w h e r e v+h=D. What is the computational complexity of computing
p(y|xv,ˆθ)for the full and naive Bayes models, as a function of vandh?
Exercise 3.21 Mutual information for naive Bayes classiﬁers with binary features
Derive Equation 3.76.
Exercise 3.22 Fitting a naive bayes spam ﬁlter by hand
(Source: Daphne Koller.). Consider a Naive Bayes model (multivariate Bernoulli version) for spam classiﬁca-
tion with the vocabulary V="secret", "offer", "low", "price", "valued", "customer", "today", "dollar", "million","sports", "is", "for", "play", "healthy", "pizza". We have the following example spam messages "million dollaroffer", "secret offer today", "secret is secret" and normal messages, "low price for valued customer", "playsecret sports today", "sports is healthy", "low price pizza". Give the MLEs for the following parameters:θspam,θsecret|spam,θsecret|non-spam,θsports|non-spam,θdollar|spam.

4 Gaussian models
4.1 Introduction
In this chapter, we discuss the multivariate Gaussian ormultivariate normal (MVN), which
is the most widely used joint probability density function for continuous variables. It will form
the basis for many of the models we will encounter in later chapters.
Unfortunately, the level of mathematics in this chapter is higher than in many other chapters.
In particular, we rely heavily on linear algebra and matrix calculus. This is the price one mustpay in order to deal with high-dimensional data. Beginners may choose to skip sections markedwith a *. In addition, since there are so many equations in this chapter, we have put a boxaround those that are particularly important.
4.1.1 Notation
Let us brieﬂy say a few words about notation. We denote vectors by boldface lower case letters,such asx. We denote matrices by boldface upper case letters, such as X. We denote entries in
a matrix by non-bold upper case letters, such as X
ij.
All vectors are assumed to be column vectors unless noted otherwise. We use [x1,...,x D]to
denote a column vector created by stacking Dscalars. Similarly, if we write x=[x1,...,xD],
where the left hand side is a tall column vector, we mean to stack the xialong the rows; this is
usually written as x=(xT
1,...,xT
D)T, but that is rather ugly. If we write X=[x1,...,xD],
where the left hand side is a matrix, we mean to stack the xialong the columns, creating a
matrix.
4.1.2 Basics
Recall from Section 2.5.2 that the pdf for an MVN in Ddimensions is deﬁned by the following:
N(x|μ,Σ)/defines1
(2π)D/2|Σ|1/2exp⎨bracketleftbigg
−1
2(x−μ)TΣ−1(x−μ)⎨bracketrightbigg
(4.1)
98 Chapter 4. Gaussian models
μu1u2
λ11/2
λ21/2
x1x2
Figure 4.1 Visualization of a 2 dimensional Gaussian density. The major and minor axes of the ellipse
are deﬁned by the ﬁrst two eigenvectors of the covariance matrix, namely u1andu2. Based on Figure 2.7
of (Bishop 2006a).
The expression inside the exponent is the Mahalanobis distance between a data vector x
and the mean vector μ, We can gain a better understanding of this quantity by performing an
eigendecomposition ofΣ. That is, we write Σ=UΛUT,w h e r eU is an orthonormal matrix
of eigenvectors satsifying UTU=I, andΛis a diagonal matrix of eigenvalues.
Using the eigendecomposition, we have that
Σ−1=U−TΛ−1U−1=UΛ−1UT=D⎨summationdisplay
i=11
λiuiuT
i (4.2)
whereuiis thei’th column of U, containing the i’th eigenvector. Hence we can rewrite the
Mahalanobis distance as follows:
(x−μ)TΣ−1(x−μ)=(x−μ)T⎨parenleftBiggD⎨summationdisplay
i=11
λiuiuTi⎨parenrightBigg
(x−μ) (4.3)
=D⎨summationdisplay
i=11
λi(x−μ)TuiuTi(x−μ)=D⎨summationdisplay
i=1y2
i
λi(4.4)
whereyi/definesuT
i(x−μ). Recall that the equation for an ellipse in 2d is
y2
1
λ1+y2
2
λ2=1 (4.5)
Hence we see that the contours of equal probability density of a Gaussian lie along ellipses.
This is illustrated in Figure 4.1. The eigenvectors determine the orientation of the ellipse, andthe eigenvalues determine how elogonated it is.
In general, we see that the Mahalanobis distance corresponds to Euclidean distance in a
transformed coordinate system, where we shift by μand rotate by U.
4.1. Introduction 99
4.1.3 MLE for an MVN
We now describe one way to estimate the parameters of an MVN, using MLE. In later sections,
we will discuss Bayesian inference for the parameters, which can mitigate overﬁtting, and canprovide a measure of conﬁdence in our estimates.
Theorem 4.1.1 (MLE for a Gaussian). If we have Niid samples x
i∼N(μ,Σ), then the MLE for
the parameters is given by
ˆμmle=1
NN⎨summationdisplay
i=1xi/definesx (4.6)
ˆΣmle=1
NN⎨summationdisplay
i=1(xi−x)(xi−x)T=1
N(N⎨summationdisplay
i=1xixT
i)−xxT(4.7)
That is, the MLE is just the empirical mean and empirical covariance. In the univariate case, we
get the following familiar results:
ˆμ=1
N⎨summationdisplay
ixi=x (4.8)
ˆσ2=1
N⎨summationdisplay
i(xi−x)2=⎨parenleftBigg
1
N⎨summationdisplay
ix2
i⎨parenrightBigg
−(x)2(4.9)
4.1.3.1 Proof *
To prove this result, we will need several results from matrix algebra, which we summarize
below. In the equations, aandbare vectors, and AandBare matrices. Also, the notation
tr(A)refers to the traceof a matrix, which is the sum of its diagonals: tr(A)=⎨summationtext
iAii.
∂(bTa)
∂a=b
∂(aTAa)
∂a=(A+AT)a
∂
∂Atr(BA)=BT
∂
∂Alog|A|=A−T/defines(A−1)T
tr(ABC)=t r ( CAB)=t r (BCA)(4.10)
The last equation is called the cyclic permutation property of the trace operator. Using this,
we can derive the widely used trace trick, which reorders the scalar inner product xTAxas
follows
xTAx=t r (xTAx)=t r ( xxTA)=t r ( AxxT) (4.11)
100 Chapter 4. Gaussian models
Proof.We can now begin with the proof. The log-likelihood is
/lscript(μ,Σ)=l o g p(D|μ,Σ)=N
2log|Λ|−1
2N⎨summationdisplay
i=1(xi−μ)TΛ(xi−μ) (4.12)
whereΛ=Σ−1is the precision matrix.
Using the substitution yi=xi−μand the chain rule of calculus, we have
∂
∂μ(xi−μ)TΣ−1(xi−μ)=∂
∂yiyT
iΣ−1yi∂yi
∂μ(4.13)
=−1(Σ−1+Σ−T)yi (4.14)
Hence
∂
∂μ/lscript(μ,Σ)=−1
2N⎨summationdisplay
i=1−2Σ−1(xi−μ)=Σ−1N⎨summationdisplay
i=1(xi−μ)=0 (4.15)
ˆμ=1
NN⎨summationdisplay
i=1xi=x (4.16)
So the MLE of μis just the empirical mean.
Now we can use the trace-trick to rewrite the log-likelihood for Λas follows:
/lscript(Λ)=N
2log|Λ|−1
2⎨summationdisplay
itr[(xi−μ)(xi−μ)TΛ] (4.17)
=N
2log|Λ|−1
2tr[SμΛ] (4.18)
(4.19)
where
Sμ/definesN⎨summationdisplay
i=1(xi−μ)(xi−μ)T(4.20)
is the scatter matrix centered on μ. Taking derivatives of this expression with respect to Λ
yields
∂/lscript(Λ)
∂Λ=N
2Λ−T−1
2ST
μ=0 (4.21)
Λ−T=Λ−1=Σ=1
NSμ (4.22)
so
ˆΣ=1
NN⎨summationdisplay
i=1(xi−μ)(xi−μ)T(4.23)
which is just the empirical covariance matrix centered on μ. If we plug-in the MLE μ=x
(since both parameters must be simultaneously optimized), we get the standard equation for the
MLE of a covariance matrix.
4.2. Gaussian discriminant analysis 101
4.1.4 Maximum entropy derivation of the Gaussian *
In this section, we show that the multivariate Gaussian is the distribution with maximum entropy
subject to having a speciﬁed mean and covariance (see also Section 9.2.6). This is one reason theGaussian is so widely used: the ﬁrst two moments are usually all that we can reliably estimatefrom data, so we want a distribution that captures these properties, but otherwise makes as fewaddtional assumptions as possible.
To simplify notation, we will assume the mean is zero. The pdf has the form
p(x)=1
Zexp(−1
2xTΣ−1x) (4.24)
If we deﬁne fij(x)=xixjandλij=1
2(Σ−1)ij,f o ri,j∈{1,...,D}, we see that this is in
the same form as Equation 9.74. The (differential) entropy of this distribution (using log base e)
is given by
h(N(μ,Σ)) =1
2ln⎨bracketleftbig
(2πe)D|Σ|⎨bracketrightbig
(4.25)
We now show the MVN has maximum entropy amongst all distributions with a speciﬁed co-varianceΣ.
Theorem 4.1.2. Letq(x)be any density satisfying⎨integraltext
q(x)x
ixj=Σij. Letp=N(0,Σ). Then
h(q)≤h(p).
Proof.(From (Cover and Thomas 1991, p234).) We have
0≤KL(q||p)=⎨integraldisplay
q(x)logq(x)
p(x)dx (4.26)
=−h(q)−⎨integraldisplay
q(x)logp(x)dx (4.27)
=∗−h(q)−⎨integraldisplay
p(x)logp(x)dx (4.28)
=−h(q)+h(p) (4.29)
where the key step in Equation 4.28 (marked with a *) follows since qandpyield the same
moments for the quadratic form encoded by logp(x).
4.2 Gaussian discriminant analysis
One important application of MVNs is to deﬁne the the class conditional densities in a generativeclassiﬁer, i.e.,
p(x|y=c,θ)=N(x|μ
c,Σc) (4.30)
The resulting technique is called (Gaussian) discriminant analysis or GDA (even though it is a
generative, not discriminative, classiﬁer — see Section 8.6 for more on this distinction). If Σcis
diagonal, this is equivalent to naive Bayes.
102 Chapter 4. Gaussian models
55 60 65 70 75 8080100120140160180200220240260280
heightweightred = female, blue=male
(a)55 60 65 70 75 8080100120140160180200220240260280
heightweightred = female, blue=male
(b)
Figure 4.2 (a) Height/weight data. (b) Visualization of 2d Gaussians ﬁt to each class. 95% of the probability
mass is inside the ellipse. Figure generated by gaussHeightWeight .
We can classify a feature vector using the following decision rule, derived from Equation 2.13:
ˆy(x) = argmax
c[logp(y=c|π)+logp(x|θc)] (4.31)
When we compute the probability of xunder each class conditional density, we are measuring
the distance from xto the center of each class, μc, using Mahalanobis distance. This can be
thought of as a nearest centroids classiﬁer.
As an example, Figure 4.2 shows two Gaussian class-conditional densities in 2d, representing
the height and weight of men and women. We can see that the features are correlated, as is
to be expected (tall people tend to weigh more). The ellipses for each class contain 95% of theprobability mass. If we have a uniform prior over classes, we can classify a new test vector asfollows:
ˆy(x) = argmin
c(x−μc)TΣ−1
c(x−μc) (4.32)
4.2.1 Quadratic discriminant analysis (QDA)
The posterior over class labels is given by Equation 2.13. We can gain further insight into thismodel by plugging in the deﬁnition of the Gaussian density, as follows:
p(y=c|x,θ)=π
c|2πΣc|−1
2exp⎨bracketleftbig
−1
2(x−μc)TΣ−1
c(x−μc)⎨bracketrightbig
⎨summationtext
c/primeπc/prime|2πΣc/prime|−1
2exp⎨bracketleftbig
−1
2(x−μc/prime)TΣ−1
c/prime(x−μc/prime)⎨bracketrightbig (4.33)
Thresholding this results in a quadratic function of x. The result is known as quadratic
discriminant analysis (QDA). Figure 4.3 gives some examples of what the decision boundaries
look like in 2D.
4.2. Gaussian discriminant analysis 103
−2 0 2−202Parabolic Boundary
(a)−2 0 2 4 6−202468Some Linear, Some Quadratic
(b)
Figure 4.3 Quadratic decision boundaries in 2D for the 2 and 3 class case. Figure generated by
discrimAnalysisDboundariesDemo .
1 2 300.10.20.30.4T=100
1 2 300.51T=1
1 2 300.51T=0.1
1 2 300.51T=0.01
Figure 4.4 Softmax distribution S(η/T),w h e r eη=( 3,0,1), at different temperatures T. When the
temperature is high (left), the distribution is uniform, whereas when the temperature is low (right), the
distribution is “spiky”, with all its mass on the largest element. Figure generated by softmaxDemo2 .
4.2.2 Linear discriminant analysis (LDA)
We now consider a special case in which the covariance matrices are tiedorsharedacross
classes,Σc=Σ. In this case, we can simplify Equation 4.33 as follows:
p(y=c|x,θ)∝πcexp⎨bracketleftbigg
μT
cΣ−1x−1
2xTΣ−1x−1
2μTcΣ−1μc⎨bracketrightbigg
(4.34)
= exp⎨bracketleftbigg
μTcΣ−1x−1
2μTcΣ−1μc+logπc⎨bracketrightbigg
exp[−1
2xTΣ−1x](4.35)
Since the quadratic term xTΣ−1xis independent of c, it will cancel out in the numerator and
denominator. If we deﬁne
γc=−1
2μTcΣ−1μc+logπc (4.36)
βc=Σ−1μc (4.37)
104 Chapter 4. Gaussian models
then we can write
p(y=c|x,θ)=eβT
cx+γc
⎨summationtext
c/primeeβT
c/primex+γc/prime=S(η)c (4.38)
whereη=[βT
1x+γ1,...,βTCx+γC], andSis thesoftmax function, deﬁned as follows:
S(η)c=eηc
⎨summationtextC
c/prime=1eηc/prime(4.39)
The softmax function is so-called since it acts a bit like the max function. To see this, let us
divide each ηcby a constant Tcalled the temperature. Then as T→0,w eﬁ n d
S(η/T)c=⎨braceleftbigg1.0ifc=a r g m a xc/primeηc/prime
0.0otherwise(4.40)
In other words, at low temperatures, the distribution spends essentially all of its time in themost probable state, whereas at high temperatures, it visits all states uniformly. See Figure 4.4for an illustration. Note that this terminology comes from the area of statistical physics, whereit is common to use the Boltzmann distribution, which has the same form as the softmax
function.
An interesting property of Equation 4.38 is that, if we take logs, we end up with a linear
function of x. (The reason it is linear is because the x
TΣ−1xcancels from the numerator
and denominator.) Thus the decision boundary between any two classes, say candc/prime, will be
a straight line. Hence this technique is called linear discriminant analysis orLDA.1We can
derive the form of this line as follows:
p(y=c|x,θ)=p( y=c/prime|x,θ) (4.41)
βT
cx+γc=βTc/primex+γc/prime (4.42)
xT(βc/prime−β)=γ c/prime−γc (4.43)
See Figure 4.5 for some examples.
An alternative to ﬁtting an LDA model and then deriving the class posterior is to directly
ﬁtp(y|x,W)=C a t ( y|Wx)for some C×Dweight matrix W. This is called multi-class
logistic regression ,o rmultinomial logistic regression.2We will discuss this model in detail
in Section 8.2. The difference between the two approaches is explained in Section 8.6.
4.2.3 Two-class LDA
To gain further insight into the meaning of these equations, let us consider the binary case. In
this case, the posterior is given by
p(y=1|x,θ)=eβT
1x+γ1
eβT
1x+γ1+eβT0x+γ0(4.44)
=1
1+e(β0−β1)Tx+(γ 0−γ1)=s i g m⎨parenleftbig
(β1−β0)Tx+(γ1−γ0)⎨parenrightbig
(4.45)
1. The abbreviation “LDA”, could either stand for “linear discriminant analysis” or “latent Dirichlet allocation” (Sec-
tion 27.3). We hope the meaning is clear from text.
2. In the language modeling community, this model is called a maximum entropy model, for reasons explained in
Section 9.2.6.
4.2. Gaussian discriminant analysis 105
−2 0 2−202Linear Boundary
(a)−2 0 2 4 6−20246All Linear Boundaries 
(b)
Figure 4.5 Linear decision boundaries in 2D for the 2 and 3 class case. Figure generated by
discrimAnalysisDboundariesDemo .
Figure 4.6 Geometry of LDA in the 2 class case where Σ1=Σ2=I.
wheresigm(η)refers to the sigmoid function (Equation 1.10).
Now
γ1−γ0=−1
2μT
1Σ−1μ1+1
2μT
0Σ−1μ0+log(π1/π0) (4.46)
=−1
2(μ1−μ0)TΣ−1(μ1+μ0)+log(π1/π0) (4.47)
So if we deﬁne
w=β1−β0=Σ−1(μ1−μ0) (4.48)
x0=1
2(μ1+μ0)−(μ1−μ0)log(π1/π0)
(μ1−μ0)TΣ−1(μ1−μ0)(4.49)
106 Chapter 4. Gaussian models
then we have wTx0=−(γ1−γ0), and hence
p(y=1|x,θ) = sigm(wT(x−x0)) (4.50)
(This is closely related to logistic regression, which we will discuss in Section 8.2.) So the ﬁnal
decision rule is as follows: shift xbyx0, project onto the line w, and see if the result is positive
or negative.
IfΣ=σ2I, thenwis in the direction of μ1−μ0. So we classify the point based on whether
its projection is closer to μ0orμ1. This is illustrated in Figure 4.6. Furthemore, if π1=π0, then
x0=1
2(μ1+μ0), which is half way between the means. If we make π1>π0, thenx0gets
closer toμ0, so more of the line belongs to class 1 a priori. Conversely if π1<π0, the boundary
shifts right. Thus we see that the class prior, πc, just changes the decision threshold, and not
the overall geometry, as we claimed above. (A similar argument applies in the multi-class case.)
The magnitude of wdetermines the steepness of the logistic function, and depends on
how well-separated the means are, relative to the variance. In psychology and signal detectiontheory, it is common to deﬁne the discriminability of a signal from the background noise using
a quantity called d-prime:
d
/prime/definesμ1−μ0
σ(4.51)
whereμ1is the mean of the signal and μ0is the mean of the noise, and σis the standard
deviation of the noise. If d/primeis large, the signal will be easier to discriminate from the noise.
4.2.4 MLE for discriminant analysis
We now discuss how to ﬁt a discriminant analysis model. The simplest way is to use maximumlikelihood. The log-likelihood function is as follows:
logp(D|θ)=⎨bracketleftBigg
N⎨summationdisplay
i=1C⎨summationdisplay
c=1I(yi=c)logπc⎨bracketrightBigg
+C⎨summationdisplay
c=1⎡
⎣⎨summationdisplay
i:yi=clogN(x|μc,Σc)⎤⎦ (4.52)
We see that this factorizes into a term for π, andCterms for each μ
candΣc. Hence we
can estimate these parameters separately. For the class prior, we have ˆπc=Nc
N, as with naive
Bayes. For the class-conditional densities, we just partition the data based on its class label, and
compute the MLE for each Gaussian:
ˆμc=1
Nc⎨summationdisplay
i:yi=cxi,ˆΣc=1
Nc⎨summationdisplay
i:yi=c(xi−ˆμc)(xi−ˆμc)T(4.53)
SeediscrimAnalysisFit for a Matlab implementation. Once the model has been ﬁt, you can
make predictions using discrimAnalysisPredict , which uses a plug-in approximation.
4.2.5 Strategies for preventing overﬁtting
The speed and simplicity of the MLE method is one of its greatest appeals. However, the MLEcan badly overﬁt in high dimensions. In particular, the MLE for a full covariance matrix issingular if N
c<D. And even when Nc>D, the MLE can be ill-conditioned, meaning it is
close to singular. There are several possible solutions to this problem:
4.2. Gaussian discriminant analysis 107
• Use a diagonal covariance matrix for each class, which assumes the features are conditionally
independent; this is equivalent to using a naive Bayes classiﬁer (Section 3.5).
• Use a full covariance matrix, but force it to be the same for all classes, Σc=Σ. This is an
example of parameter tying orparameter sharing, and is equivalent to LDA (Section 4.2.2).
• Useadiagonalcovariancematrix andforcedittobeshared. Thisiscalleddiagonalcovariance
LDA, and is discussed in Section 4.2.7.
• Use a full covariance matrix, but impose a prior and then integrate it out. If we use a
conjugate prior, this can be done in closed form, using the results from Section 4.6.3; this
is analogous to the “Bayesian naive Bayes” method in Section 3.5.1.2. See (Minka 2000f) fordetails.
• Fit a full or diagonal covariance matrix by MAP estimation. We discuss two different kinds
of prior below.
• Project the data into a low dimensional subspace and ﬁt the Gaussians there. See Sec-
tion 8.6.3.3 for a way to ﬁnd the best (most discriminative) linear projection.
We discuss some of these options below.
4.2.6 Regularized LDA *
Suppose we tie the covariance matrices, so Σc=Σ, as in LDA, and furthermore we perform
MAP estimation of Σusing an inverse Wishart prior of the form IW(diag( ˆΣmle),ν0)(see
Section 4.5.1). Then we have
ˆΣ=λdiag(ˆΣmle)+(1−λ)ˆΣmle (4.54)
whereλcontrols the amount of regularization, which is related to the strength of the prior, ν0
(see Section 4.6.2.1 for details). This technique is known as regularized discriminant analysis
or RDA (Hastie et al. 2009, p656).
When we evaluate the class conditional densities, we need to compute ˆΣ−1, and hence ˆΣ−1
mle,
which is impossible to compute if D>N. However, we can use the SVD of X(Section 12.2.3)
to get around this, as we show below. (Note that this trick cannot be applied to QDA, which isa nonlinear function of x.)
LetX=UDV
Tbe the SVD of the design matrix, where VisD×N,Uis anN×N
orthogonal matrix, and Dis a diagonal matrix of size N. Furthermore, deﬁne the N×N
matrixZ=UD; this is like a design matrix in a lower dimensional space (since we assume
N<D). Also, deﬁne μz=VTμas the mean of the data in this reduced space; we can recover
the original mean using μ=Vμz, sinceVTV=VVT=I. With these deﬁnitions, we can
108 Chapter 4. Gaussian models
rewrite the MLE as follows:
ˆΣmle=1
NXTX−μμT(4.55)
=1
N(ZVT)T(ZVT)−(Vμz)(Vμz)T(4.56)
=1
NVZTZVT−VμzμT
zVT(4.57)
=V(1
NZTZ−μzμTz)VT(4.58)
=VˆΣzVT(4.59)
whereˆΣzis the empirical covariance of Z. Hence we can rewrite the MAP estimate as
ˆΣmap=V˜ΣzVT(4.60)
˜Σz=λdiag(ˆΣz)+(1−λ)ˆΣz (4.61)
Note, however, that we never need to actually compute the D×DmatrixˆΣmap. This is because
Equation 4.38 tells us that to classify using LDA, all we need to compute is p(y=c|x,θ)∝
exp(δc),w h e r e
δc=−xTβc+γc,βc=ˆΣ−1μc,γc−1
2μTcβc+logπc (4.62)
We can compute the crucial βcterm for RDA without inverting the D×Dmatrix as follows:
βc=ˆΣ−1
mapμc=(V˜ΣzVT)−1μc=V˜Σ−1
zVTμc=V˜Σ−1
zμz,c (4.63)
whereμz,c=VTμcis the mean of the Zmatrix for data belonging to class c. See rdaFitfor
the code.
4.2.7 Diagonal LDA
A simple alternative to RDA is to tie the covariance matrices, so Σc=Σas in LDA, and then to
use a diagonal covariance matrix for each class. This is called the diagonal LDA model, and is
equivalent to RDA with λ=1. The corresponding discriminant function is as follows (compare
to Equation 4.33):
δc(x)=l o gp(x,y=c|θ)=−D⎨summationdisplay
j=1(xj−μcj)2
2σ2
j+logπc (4.64)
Typically we set ˆμcj=xcjandˆσ2
j=s2
j, which is the pooled empirical variance of feature j
(pooled across classes) deﬁned by
s2
j=⎨summationtextC
c=1⎨summationtext
i:yi=c(xij−xcj)2
N−C(4.65)
In high dimensional settings, this model can work much better than LDA and RDA (Bickel and
Levina 2004).
4.2. Gaussian discriminant analysis 109
Number of Genes
2308 1355 352 106 36 12 5 0
1 2 3 4 5 6 7 800.10.20.30.40.50.60.70.80.91
λMisclassification Error
  
Test
Train
CV
Figure 4.7 Error versus amount of shrinkage for nearest shrunken centroid classiﬁer applied to the
SRBCT gene expression data. Based on Figure 18.4 of (Hastie et al. 2009). Figure generated by
shrunkenCentroidsSRBCTdemo .
4.2.8 Nearest shrunken centroids classiﬁer *
One drawback of diagonal LDA is that it depends on all of the features. In high dimensional
problems, we might prefer a method that only depends on a subset of the features, for reasonsof accuracy and interpretability. One approach is to use a screening method, perhaps basedon mutual information, as in Section 3.5.4. We now discuss another approach to this problemknown as the nearest shrunken centroids classiﬁer (Hastie et al. 2009, p652).
The basic idea is to perform MAP estimation for diagonal LDA with a sparsity-promoting
(Laplace) prior (see Section 13.3). More precisely, deﬁne the class-speciﬁc feature mean, μ
cj,i n
terms of the class-independent feature mean, mj, and a class-speciﬁc offset, Δcj. Thus we have
μcj=mj+Δcj (4.66)
We will then put a prior on the Δcjterms to encourage them to be strictly zero and compute
a MAP estimate. If, for feature j, we ﬁnd that Δcj=0for allc, then feature jwill play no role
in the classiﬁcation decision (since μcjwill be independent of c). Thus features that are not
discriminative are automatically ignored. The details can be found in (Hastie et al. 2009, p652)and (Greenshtein and Park 2009). See shrunkenCentroidsFit for some code.
Let us give an example of the method in action, based on (Hastie et al. 2009, p652). Consider
the problem of classifying a gene expression dataset, which 2308 genes, 4 classes, 63 trainingsamples and 20 test samples. Using a diagonal LDA classiﬁer produces 5 errors on the test set.Using the nearest shrunken centroids classiﬁer produced 0 errors on the test set, for a range ofλvalues: see Figure 4.7. More importantly, the model is sparse and hence more interpretable:
Figure 4.8 plots an unpenalized estimate of the difference, d
cj, in gray, as well as the shrunken
estimates Δcjin blue. (These estimates are computed using the value of λestimated by CV.)
We see that only 39 genes are used, out of the original 2308.
Now consider an even harder problem, with 16,603 genes, a training set of 144 patients, a
test set of 54 patients, and 14 different types of cancer (Ramaswamy et al. 2001). Hastie et al.(Hastie et al. 2009, p656) report that nearest shrunken centroids produced 17 errors on the test
110 Chapter 4. Gaussian models
0 500 1000 1500 2000 2500−6−4−20246Class 1
(a)0 500 1000 1500 2000 2500−8−6−4−202468Class 2
(b)
0 500 1000 1500 2000 2500−6−4−20246Class 3
(c)0 500 1000 1500 2000 2500−4−202468Class 4
(d)
Figure 4.8 Proﬁle of the shrunken centroids corresponding to λ=4.4(CV optimal in Fig-
ure 4.7). This selects 39 genes. Based on Figure 18.4 of (Hastie et al. 2009). Figure generated by
shrunkenCentroidsSRBCTdemo .
set, using 6,520 genes, and that RDA (Section 4.2.6) produced 12 errors on the test set, using
all 16,603 genes. The PMTK function cancerHighDimClassifDemo can be used to reproduce
these numbers.
4.3 Inference in jointly Gaussian distributions
Given a joint distribution, p(x1,x2), it is useful to be able to compute marginals p(x1)and
conditionals p(x1|x2). We discuss how to do this below, and then give some applications. These
operations take O(D3)time in the worst case. See Section 20.4.3 for faster methods.
4.3. Inference in jointly Gaussian distributions 111
4.3.1 Statement of the result
Theorem 4.3.1 (Marginals and conditionals of an MVN). Supposex=(x1,x2)is jointly Gaussian
with parameters
μ=⎨parenleftbigg
μ1
μ2⎨parenrightbigg
,Σ=⎨parenleftbigg
Σ11Σ12
Σ21Σ22⎨parenrightbigg
,Λ=Σ−1=⎨parenleftbigg
Λ11Λ12
Λ21Λ22⎨parenrightbigg
(4.67)
Then the marginals are given by
p(x1)=N (x1|μ1,Σ11)
p(x2)=N (x2|μ2,Σ22) (4.68)
and the posterior conditional is given by
p(x1|x2)=N(x1|μ1|2,Σ1|2)
μ1|2=μ1+Σ12Σ−1
22(x2−μ2)
=μ1−Λ−1
11Λ12(x2−μ2)
=Σ1|2(Λ11μ1−Λ12(x2−μ2))
Σ1|2=Σ11−Σ12Σ−1
22Σ21=Λ−1
11(4.69)
Equation 4.69 is of such crucial importance in this book that we have put a box around it, so
you can easily ﬁnd it. For the proof, see Section 4.3.4.
We see that both the marginal and conditional distributions are themselves Gaussian. For the
marginals, we just extract the rows and columns corresponding to x1orx2. For the conditional,
we have to do a bit more work. However, it is not that complicated: the conditional mean is
just a linear function of x2, and the conditional covariance is just a constant matrix that is
independent of x2. We give three different (but equivalent) expressions for the posterior mean,
and two different (but equivalent) expressions for the posterior covariance; each one is useful indifferent circumstances.
4.3.2 Examples
Below we give some examples of these equations in action, which will make them seem moreintuitive.
4.3.2.1 Marginals and conditionals of a 2d Gaussian
Let us consider a 2d example. The covariance matrix is
Σ=⎨parenleftbiggσ
2
1ρσ1σ2
ρσ1σ2σ2
2⎨parenrightbigg
(4.70)
The marginal p(x1)is a 1D Gaussian, obtained by projecting the joint distribution onto the x1
line:
p(x1)=N(x1|μ1,σ2
1) (4.71)
112 Chapter 4. Gaussian models
−5 −4 −3 −2 −1 0 1 2 3 4 5−3−2−10123
x1x2p(x1,x2)
(a)−5 −4 −3 −2 −1 0 1 2 3 4 500.010.020.030.040.050.060.070.08
x1x2p(x1)
(b)−5 −4 −3 −2 −1 0 1 2 3 4 501234567
x1x2p(x1|x2=1)
(c)
Figure 4.9 (a) A joint Gaussian distribution p(x1,x2)with a correlation coefficient of 0.8. We plot the
95% contour and the principal axes. (b) The unconditional marginal p(x1). (c) The conditional p(x1|x2)=
N(x1|0.8,0.36), obtained by slicing (a) at height x2=1. Figure generated by gaussCondition2Ddemo2 .
Suppose we observe X2=x2; the conditional p(x1|x2)is obtained by “slicing” the joint
distribution through the X2=x2line (see Figure 4.9):
p(x1|x2)=N⎨parenleftbigg
x1|μ1+ρσ1σ2
σ2
2(x2−μ2),σ2
1−(ρσ1σ2)2
σ2
2⎨parenrightbigg
(4.72)
Ifσ1=σ2=σ,w eg e t
p(x1|x2)=N⎨parenleftbig
x1|μ1+ρ(x2−μ2),σ2(1−ρ2)⎨parenrightbig
(4.73)
In Figure 4.9 we show an example where ρ=0.8,σ1=σ2=1,μ=0andx2=1.W e
see that E[x1|x2=1 ]=0 .8, which makes sense, since ρ=0.8means that we believe that if
x2increases by 1 (beyond its mean), then x1increases by 0.8. We also see var[x1|x2=1 ]=
1−0.82=0.36. This also makes sense: our uncertainty about x1has gone down, since we
have learned something about x1(indirectly) by observing x2.I fρ=0,w eg e tp(x1|x2)=
N⎨parenleftbig
x1|μ1,σ2
1⎨parenrightbig
, sincex2conveys no information about x1if they are uncorrelated (and hence
independent).
4.3.2.2 Interpolating noise-free data
Suppose we want to estimate a 1d function, deﬁned on the interval [0,T], such that yi=f(ti)
forNobserved points ti. We assume for now that the data is noise-free, so we want to
interpolate it, that is, ﬁt a function that goes exactly through the data. (See Section 4.4.2.3 for
the noisy data case.) The question is: how does the function behave in between the observed
data points? It is often reasonable to assume that the unknown function is smooth. In Chapter 15,we shall see how to encode priors over functions, and how to update such a prior with observed
values to get a posterior over functions. But in this section, we take a simpler approach, whichis adequate for MAP estimation of functions deﬁned on 1d inputs. We follow the presentationof (Calvetti and Somersalo 2007, p135).
We start by discretizing the problem. First we divide the support of the function into Dequal
subintervals. We then deﬁne
x
j=f(sj),sj=jh, h=T
D,1≤j≤D (4.74)
4.3. Inference in jointly Gaussian distributions 113
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1−5−4−3−2−1012345λ=30
(a)0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1−5−4−3−2−1012345λ=0p1
(b)
Figure 4.10 Interpolating noise-free data using a Gaussian with prior precision λ. (a)λ=3 0. (b)
λ=0.01. See also Figure 4.15. Based on Figure 7.1 of (Calvetti and Somersalo 2007). Figure generated by
gaussInterpDemo .
We can encode our smoothness prior by assuming that xjis an average of its neighbors, xj−1
andxj+1, plus some Gaussian noise:
xj=1
2(xj−1+xj+1)+/epsilon1j,2≤j≤D−2 (4.75)
where/epsilon1∼N(0,(1/λ)I). The precision term λcontrols how much we think the function will
vary: a large λcorresponds to a belief that the function is very smooth, a small λcorresponds
to a belief that the function is quite “wiggly”. In vector form, the above equation can be written
as follows:
Lx=/epsilon1 (4.76)
whereLis the(D−2)×Dsecond order ﬁnite difference matrix
L=1
2⎛
⎜⎜⎜⎝−12− 1
−12− 1
...
−12− 1⎞
⎟⎟⎟⎠(4.77)
The corresponding prior has the form
p(x)=N(x|0,(λ
2LTL)−1)∝exp⎨parenleftbigg
−λ2
2||Lx||2
2⎨parenrightbigg
(4.78)
We will henceforth assume we have scaled Lbyλso we can ignore the λterm, and just write
Λ=LTLfor the precision matrix.
Note that although xisD-dimensional, the precision matrix Λonly has rank D−2. Thus
this is an improper prior, known as an intrinsic Gaussian random ﬁeld (see Section 19.4.4 for
114 Chapter 4. Gaussian models
more information). However, providing we observe N≥2data points, the posterior will be
proper.
Now letx2be theNnoise-free observations of the function, and x1be theD−Nunknown
function values. Without loss of generality, assume that the unknown variables are ordered ﬁrst,
then the known variables. Then we can partition the Lmatrix as follows:
L=[L1,L2],L1∈R(D−2)×(D−N),L2∈R(D−2)×(N)(4.79)
We can also partition the precision matrix of the joint distribution:
Λ=LTL=⎨parenleftbiggΛ11Λ12
Λ21Λ22⎨parenrightbigg
=⎨parenleftbiggLT
1L1LT1L2
LT2L1LT2L2⎨parenrightbigg
(4.80)
Using Equation 4.69, we can write the conditional distribution as follows:
p(x1|x2)=N (μ1|2,Σ1|2) (4.81)
μ1|2=−Λ−1
11Λ12x2=−LT
1L2x2 (4.82)
Σ1|2=Λ−1
11 (4.83)
Note that we can compute the mean by solving the following system of linear equations:
L1μ1|2=−L2x2 (4.84)
This is efficient since L1is tridiagonal. Figure 4.10 gives an illustration of these equations. We
see that the posterior mean μ1|2equals the observed data at the speciﬁed points, and smoothly
interpolates in between, as desired.
It is also interesting to plot the 95% pointwise marginal credibility intervals, μj±
2⎨radicalbigΣ1|2,jj, shown in grey. We see that the variance goes up as we move away from the
data. We also see that the variance goes up as we decrease the precision of the prior, λ. In-
terestingly, λhas no effect on the posterior mean, since it cancels out when multiplying Λ11
andΛ12. By contrast, when we consider noisy data in Section 4.4.2.3, we will see that the prior
precision affects the smoothness of posterior mean estimate.
The marginal credibility intervals do not capture the fact that neighboring locations are
correlated. We can represent that by drawing complete functions (i.e., vectors x)f r o mt h e
posterior, and plotting them. These are shown by the thin lines in Figure 4.10. These are not
quite as smooth as the posterior mean itself. This is because the prior only penalizes ﬁrst-orderdifferences. See Section 4.4.2.3 for further discussion of this point.
4.3.2.3 Data imputation
Suppose we are missing some entries in a design matrix. If the columns are correlated, we canuse the observed entries to predict the missing entries. Figure 4.11 shows a simple example. Wesampled some data from a 20 dimensional Gaussian, and then deliberately “hid” 50% of the datain each row. We then inferred the missing entries given the observed entries, using the true(generating) model. More precisely, for each row i, we compute p(x
hi|xvi,θ),w h e r ehiandvi
are the indices of the hidden and visible entries in case i. From this, we compute the marginal
distribution of each missing variable, p(xhij|xvi,θ). We then plot the mean of this distribution,
ˆxij=E[xj|xvi,θ]; this represents our “best guess” about the true value of that entry, in the
4.3. Inference in jointly Gaussian distributions 115
0 5 10 15 20−10−50510observed
0 5 10 15 20−10−50510imputed
0 5 10 15 20−10−50510truth
Figure 4.11 Illustration of data imputation. Left column: visualization of three rows of the data matrix
with missing entries. Middle column: mean of the posterior predictive, based on partially observed
data in that row, but the true model parameters. Right column: true values. Figure generated bygaussImputationDemo .
sense that it minimizes our expected squared error (see Section 5.7 for details). Figure 4.11 shows
that the estimates are quite close to the truth. (Of course, if j∈vi, the expected value is equal
to the observed value, ˆxij=xij.)
We can use var⎨bracketleftbig
xhij|xvi,θ⎨bracketrightbig
as a measure of conﬁdence in this guess, although this is not
shown. Alternatively, we could draw multiple samples from p(xhi|xvi,θ); this is called multiple
imputation.
In addition to imputing the missing entries, we may be interested in computing the like-
lihood of each partially observed row in the table, p(xvi|θ), which can be computed using
Equation 4.68. This is useful for detecting outliers (atypical observations).
4.3.3 Information form
Supposex∼N(μ,Σ). One can show that E[x]=μis the mean vector, and cov[x]=Σis
the covariance matrix. These are called the moment parameters of the distribution. However,
it is sometimes useful to use the canonical parameters ornatural parameters, deﬁned as
Λ/definesΣ−1,ξ/definesΣ−1μ (4.85)
We can convert back to the moment parameters using
μ=Λ−1ξ,Σ=Λ−1(4.86)
Using the canonical parameters, we can write the MVN in information form (i.e., in exponential
family form, deﬁned in Section 9.2):
Nc(x|ξ,Λ)=( 2 π)−D/2|Λ|1
2exp⎨bracketleftbigg
−1
2(xTΛx+ξTΛ−1ξ−2xTξ)⎨bracketrightbigg
(4.87)
where we use the notation Nc()to distinguish from the moment parameterization N().
It is also possible to derive the marginalization and conditioning formulas in information
form. We ﬁnd
p(x2)=N c(x2|ξ2−Λ21Λ−1
11ξ1,Λ22−Λ21Λ−1
11Λ12) (4.88)
p(x1|x2)=N c(x1|ξ1−Λ12x2,Λ11) (4.89)
116 Chapter 4. Gaussian models
Thus we see that marginalization is easier in moment form, and conditioning is easier in
information form.
Another operation that is signiﬁcantly easier in information form is multiplying two Gaussians.
One can show that
Nc(ξf,λf)Nc(ξg,λg)=N c(ξf+ξg,λf+λg) (4.90)
However, in moment form, things are much messier:
N(μf,σ2
f)N(μg,σ2
g)=N⎨parenleftBigg
μfσ2
g+μgσ2
f
σ2g+σ2g,σ2
fσ2
g
σ2g+σ2g⎨parenrightBigg
(4.91)
4.3.4 Proof of the result *
We now prove Theorem 4.3.1. Readers who are intimidated by heavy matrix algebra can safelyskip this section. We ﬁrst derive some results that we will need here and elsewhere in the book.We will return to the proof at the end.
4.3.4.1 Inverse of a partitioned matrix using Schur complements
The key tool we need is a way to invert a partitioned matrix. This can be done using thefollowing result.
Theorem 4.3.2 (Inverse of a partitioned matrix). Consider a general partitioned matrix
M=⎨parenleftbiggEF
GH⎨parenrightbigg
(4.92)
where we assume EandHare invertible. We have
M
−1=⎨parenleftbigg(M/H)−1−(M/H)−1FH−1
−H−1G(M/H)−1H−1+H−1G(M/H)−1FH−1⎨parenrightbigg
(4.93)
=⎨parenleftbiggE−1+E−1F(M/E)−1GE−1−E−1F(M/E)−1
−(M/E)−1GE−1(M/E)−1⎨parenrightbigg
(4.94)
where
M/H/definesE−FH−1G (4.95)
M/E/definesH−GE−1F (4.96)
We say that M/His theSchur complement ofMwrtH. Equation 4.93 is called the partitioned
inverse formula.Proof.If we could block diagonalize M, it would be easier to invert. To zero out the top right
block ofMwe can pre-multiply as follows
⎨parenleftbiggI−FH
−1
0I⎨parenrightbigg⎨parenleftbiggEF
GH⎨parenrightbigg
=⎨parenleftbiggE−FH−1G0
GH⎨parenrightbigg
(4.97)
4.3. Inference in jointly Gaussian distributions 117
Similarly, to zero out the bottom left we can post-multiply as follows
⎨parenleftbigg
E−FH−1G0
GH⎨parenrightbigg⎨parenleftbigg
I0
−H−1GI⎨parenrightbigg
=⎨parenleftbigg
E−FH−1G0
0H⎨parenrightbigg
(4.98)
Putting it all together we get
⎨parenleftbigg
I−FH−1
0I⎨parenrightbigg
⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
X⎨parenleftbigg
EF
GH⎨parenrightbigg
⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
M⎨parenleftbigg
I0
−H−1GI⎨parenrightbigg
⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
Z=⎨parenleftbigg
E−FH−1G0
0H⎨parenrightbigg
⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
W(4.99)
Taking the inverse of both sides yields
Z−1M−1X−1=W−1(4.100)
and hence
M−1=ZW−1X (4.101)
Substituting in the deﬁnitions we get
⎨parenleftbiggEF
GH⎨parenrightbigg−1
=⎨parenleftbiggI0
−H−1GI⎨parenrightbigg⎨parenleftbigg(M/H)−10
0H−1⎨parenrightbigg⎨parenleftbiggI−FH−1
0I⎨parenrightbigg
(4.102)
=⎨parenleftbigg(M/H)−10
−H−1G(M/H)−1H−1⎨parenrightbigg⎨parenleftbiggI−FH−1
0I⎨parenrightbigg
(4.103)
=⎨parenleftbigg(M/H)−1−(M/H)−1FH−1
−H−1G(M/H)−1H−1+H−1G(M/H)−1FH−1⎨parenrightbigg
(4.104)
Alternatively, we could have decomposed the matrix Min terms of EandM/E=(H−
GE−1F), yielding
⎨parenleftbiggEF
GH⎨parenrightbigg−1
=⎨parenleftbiggE−1+E−1F(M/E)−1GE−1−E−1F(M/E)−1
−(M/E)−1GE−1(M/E)−1⎨parenrightbigg
(4.105)
4.3.4.2 The matrix inversion lemma
We now derive some useful corollaries of the above result.
Corollary 4.3.1 (Matrix inversion lemma). Consider a general partitioned matrix M=⎨parenleftbiggEF
GH⎨parenrightbigg
,
where we assume EandHare invertible. We have
(E−FH−1G)−1=E−1+E−1F(H−GE−1F)−1GE−1(4.106)
(E−FH−1G)−1FH−1=E−1F(H−GE−1F)−1(4.107)
|E−FH−1G|=|H−GE−1F||H−1||E| (4.108)
118 Chapter 4. Gaussian models
The ﬁrst two equations are s known as the matrix inversion lemma or theSherman-
Morrison-Woodbury formula. The third equation is known as the matrix determinant
lemma. A typical application in machine learning/ statistics is the following. Let E=Σ
be aN×Ndiagonal matrix, let F=GT=Xof sizeN×D,w h e r eN/greatermuchD, and let
H−1=−I. Then we have
(Σ+XXT)−1=Σ−1−Σ−1X(I+XTΣ−1X)−1XTΣ−1(4.109)
The LHS takes O(N3)time to compute, the RHS takes time O(D3)to compute.
Another application concerns computing a rank one update of an inverse matrix. Let
H=−1(a scalar), F=u(a column vector), and G=vT(a row vector). Then we have
(E+uvT)−1=E−1+E−1u(−1−vTE−1u)−1vTE−1(4.110)
=E−1−E−1uvTE−1
1+vTE−1u(4.111)
This is useful when we incrementally add a data vector to a design matrix, and want to update
our sufficient statistics. (One can derive an analogous formula for removing a data vector.)
Proof.To prove Equation 4.106, we simply equate the top left block of Equation 4.93 and Equa-
tion 4.94. To prove Equation 4.107, we simple equate the top right blocks of Equations 4.93 and
4.94. The proof of Equation 4.108 is left as an exercise.
4.3.4.3 Proof of Gaussian conditioning formulas
We can now return to our original goal, which is to derive Equation 4.69. Let us factor the jointp(x
1,x2)asp(x2)p(x1|x2)as follows:
E=e x p⎨braceleftBigg
−1
2⎨parenleftbiggx1−μ1
x2−μ2⎨parenrightbiggT⎨parenleftbiggΣ11Σ12
Σ21Σ22⎨parenrightbigg−1⎨parenleftbiggx1−μ1
x2−μ2⎨parenrightbigg⎨bracerightBigg
(4.112)
Using Equation 4.102 the above exponent becomes
E=e x p⎨braceleftBigg
−1
2⎨parenleftbiggx1−μ1
x2−μ2⎨parenrightbiggT⎨parenleftbiggI0
−Σ−1
22Σ21I⎨parenrightbigg⎨parenleftbigg(Σ/Σ22)−10
0Σ−1
22⎨parenrightbigg
(4.113)
×⎨parenleftbigg
I−Σ12Σ−1
22
0I⎨parenrightbigg⎨parenleftbiggx1−μ1
x2−μ2⎨parenrightbigg⎨bracerightbigg
(4.114)
=e x p⎨braceleftbigg
−1
2(x1−μ1−Σ12Σ−1
22(x2−μ2))T(Σ/Σ22)−1(4.115)
(x1−μ1−Σ12Σ−1
22(x2−μ2))⎨bracerightbig
×exp⎨braceleftbigg
−1
2(x2−μ2)TΣ−1
22(x2−μ2)⎨bracerightbigg
(4.116)
This is of the form
exp(quadratic form in x1,x2)×exp(quadratic form in x2) (4.117)
4.4. Linear Gaussian systems 119
Hence we have successfully factorized the joint as
p(x1,x2)=p( x1|x2)p(x2) (4.118)
=N(x1|μ1|2,Σ1|2)N(x2|μ2,Σ22) (4.119)
where the parameters of the conditional distribution can be read off from the above equations
using
μ1|2=μ1+Σ12Σ−1
22(x2−μ2) (4.120)
Σ1|2=Σ/Σ22=Σ11−Σ12Σ−1
22Σ21 (4.121)
We can also use the fact that |M|=|M/H||H|to check the normalization constants are
correct:
(2π)(d1+d2)/2|Σ|1
2=( 2π)(d1+d2)/2(|Σ/Σ22||Σ22|)1
2 (4.122)
=( 2π)d1/2|Σ/Σ22|1
2(2π)d2/2|Σ22|1
2 (4.123)
whered1=d i m (x1)andd2=d i m (x2).
We leave the proof of the other forms of the result in Equation 4.69 as an exercise.
4.4 Linear Gaussian systems
Suppose we have two variables, xandy.L e tx∈RDxbe a hidden variable, and y∈RDybe
a noisy observation of x. Let us assume we have the following prior and likelihood:
p(x)=N(x|μx,Σx)
p(y|x)=N(y|Ax+b,Σy)(4.124)
whereAis a matrix of size Dy×Dx. This is an example of a linear Gaussian system.W e
can represent this schematically as x→y, meaning xgenerates y. In this section, we show
how to “invert the arrow”, that is, how to infer xfromy. We state the result below, then give
several examples, and ﬁnally we derive the result. We will see many more applications of theseresults in later chapters.
4.4.1 Statement of the result
Theorem 4.4.1 (Bayes rule for linear Gaussian systems). Given a linear Gaussian system, as in
Equation 4.124, the posterior p(x|y)is given by the following:
p(x|y)=N(x|μx|y,Σx|y)
Σ−1
x|y=Σ−1
x+ATΣ−1
yA
μx|y=Σx|y[ATΣ−1
y(y−b)+Σ−1
xμx](4.125)
120 Chapter 4. Gaussian models
In addition, the normalization constant p(y)is given by
p(y)=N(y|Aμx+b,Σy+AΣxAT) (4.126)
For the proof, see Section 4.4.3.
4.4.2 Examples
In this section, we give some example applications of the above result.
4.4.2.1 Inferring an unknown scalar from noisy measurements
Suppose we make Nnoisy measurements yiof some underlying quantity x; let us assume the
measurement noise has ﬁxed precision λy=1/σ2, so the likelihood is
p(yi|x)=N (yi|x,λ−1
y) (4.127)
Now let us use a Gaussian prior for the value of the unknown source:
p(x)=N (x|μ0,λ−1
0) (4.128)
We want to compute p(x|y1,...,y N,σ2). We can convert this to a form that lets us apply
Bayes rule for Gaussians by deﬁning y=(y1,...,y N),A=1T
N(an1×Nrow vector of 1’s),
andΣ−1
y=d i a g (λyI). Then we get
p(x|y)=N (x|μN,λ−1
N) (4.129)
λN=λ0+Nλy (4.130)
μN=Nλyy+λ0μ0
λN=Nλy
Nλy+λ0y+λ0
Nλy+λ0μ0 (4.131)
These equations are quite intuitive: the posterior precision λNis the prior precision λ0plusN
units of measurement precision λy. Also, the posterior mean μNis a convex combination of
the MLEyand the prior mean μ0. This makes it clear that the posterior mean is a compromise
between the MLE and the prior. If the prior is weak relative to the signal strength (λ 0is
small relative to λy), we put more weight on the MLE. If the prior is strong relative to the
signal strength (λ 0is large relative to λy), we put more weight on the prior. This is illustrated
in Figure 4.12, which is very similar to the analogous results for the beta-binomial model in
Figure 3.6.
Note that the posterior mean is written in terms of Nλyy, so having Nmeasurements each
of precision λyis like having one measurement with value yand precision Nλy.
We can rewrite the results in terms of the posterior variance, rather than posterior precision,
4.4. Linear Gaussian systems 121
−5 0 500.10.20.30.40.50.6prior variance = 1.00
  
prior
lik
post
−5 0 500.10.20.30.40.50.6prior variance = 5.00
  
prior
lik
post
Figure 4.12 Inference about xgiven a noisy observation y=3. (a) Strong prior N(0,1). The posterior
mean is “shrunk” towards the prior mean, which is 0. (a) Weak prior N(0,5). The posterior mean is
similar to the MLE. Figure generated by gaussInferParamsMean1d .
as follows:
p(x|D,σ2)=N (x|μN,τ2
N) (4.132)
τ2
N=1
N
σ2+1
τ2
0=σ2τ2
0
Nτ2
0+σ2(4.133)
μN=τ2
N⎨parenleftbiggμ0
τ2
0+Ny
σ2⎨parenrightbigg
=σ2
Nτ2
0+σ2μ0+Nτ2
0
Nτ2
0+σ2y (4.134)
whereτ2
0=1/λ0is the prior variance and τ2
N=1/λNis the posterior variance.
We can also compute the posterior sequentially, by updating after each observation. If
N=1, we can rewrite the posterior after seeing a single observation as follows (where we
deﬁneΣy=σ2,Σ0=τ2
0andΣ1=τ2
1to be the variances of the likelihood, prior and
posterior):
p(x|y)=N (x|μ1,Σ1) (4.135)
Σ1=⎨parenleftbigg1
Σ0+1
Σy⎨parenrightbigg−1
=ΣyΣ0
Σ0+Σy(4.136)
μ1=Σ1⎨parenleftbiggμ0
Σ0+y
Σy⎨parenrightbigg
(4.137)
We can rewrite the posterior mean in 3 different ways:
μ1=Σy
Σy+Σ0μ0+Σ0
Σy+Σ0y (4.138)
=μ0+(y−μ0)Σ0
Σy+Σ0(4.139)
=y−(y−μ0)Σy
Σy+Σ0(4.140)
122 Chapter 4. Gaussian models
The ﬁrst equation is a convex combination of the prior and the data. The second equation is the
prior mean adjusted towards the data. The third equation is the data adjusted towards the priormean; this is called shrinkage. These are all equivalent ways of expressing the tradeoff between
likelihood and prior. If Σ
0is small relative to ΣY, corresponding to a strong prior, the amount
of shrinkage is large (see Figure 4.12(a)), whereas if Σ0is large relative to Σy, corresponding to
a weak prior, the amount of shrinkage is small (see Figure 4.12(b)).
Another way to quantify the amount of shrinkage is in terms of the signal-to-noise ratio,
which is deﬁned as follows:
SNR/definesE⎨bracketleftbig
X2⎨bracketrightbig
E[/epsilon12]=Σ0+μ2
0
Σy(4.141)
wherex∼N(μ0,Σ0)is the true signal, y=x+/epsilon1is the observed signal, and /epsilon1∼N(0,Σy)
is the noise term.
4.4.2.2 Inferring an unknown vector from noisy measurements
Now consider Nvector-valued observations, yi∼N(x,Σy), and a Gaussian prior, x∼
N(μ0,Σ0). Setting A=I,b=0, and using yfor the effective observation with precision
NΣ−1
y,w eh a v e
p(x|y1,...,yN)=N (x|μN,ΣN) (4.142)
Σ−1
N=Σ−1
0+NΣ−1
y (4.143)
μN=ΣN(Σ−1
y(Ny)+Σ−1
0μ0) (4.144)
See Figure 4.13 for a 2d example. We can think of xas representing the true, but unknown,
location of an object in 2d space, such as a missile or airplane, and the yias being noisy
observations, such as radar “blips”. As we receive more blips, we are better able to localize the
source. In Section 18.3.1, we will see how to extend this example to track moving objects usingthe famous Kalman ﬁlter algorithm.
Now suppose we have multiple measuring devices, and we want to combine them together;
this is known as sensor fusion. If we have multiple observations with different covariances (cor-
responding to sensors with different reliabilities), the posterior will be an appropriate weightedaverage of the data. Consider the example in Figure 4.14. We use an uninformative prior on x,
namelyp(x)=N(μ
0,Σ0)=N(0,1010I2). We get 2 noisy observations, y1∼N(x,Σy,1)
andy2∼N(x,Σy,2). We then compute p(x|y1,y2).
In Figure 4.14(a), we set Σy,1=Σy,2=0.01I2, so both sensors are equally reliable. In this
case, the posterior mean is half way between the two observations, y1andy2. In Figure 4.14(b),
we setΣy,1=0.05I2andΣy,2=0.01I2, so sensor 2 is more reliable than sensor 1. In this
case, the posterior mean is closer to y2. In Figure 4.14(c), we set
Σy,1=0.01⎨parenleftbigg10 1
11⎨parenrightbigg
,Σy,2=0.01⎨parenleftbigg1111 0⎨parenrightbigg
(4.145)
so sensor 1 is more reliable in the y
2component (vertical direction), and sensor 2 is more
reliable in the y1component (horizontal direction). In this case, the posterior mean uses y1’s
vertical component and y2’s horizontal component.
4.4. Linear Gaussian systems 123
−1 0 1−1−0.500.51data prior
−1 0 1−1−0.500.51post after 10 obs
−1 0 1−1−0.500.51
Figure 4.13 Illustration of Bayesian inference for the mean of a 2d Gaussian. (a) The data is generated
fromyi∼N(x,Σy),w h e r ex=[ 0.5,0.5]TandΣy=0.1[2,1;1,1]). We assume the sensor noise
covariance Σyis known but xis unknown. The black cross represents x. (b) The prior is p(x)=
N(x|0,0.1I2). (c) We show the posterior after 10 data points have been observed. Figure generated by
gaussInferParamsMean2d .
−0.4 −0.2 0 0.2 0.4 0.6 0.8 1 1.2 1.4−1.4−1.2−1−0.8−0.6−0.4−0.200.20.4
(a)−0.6−0.4 −0.2 0 0.2 0.4 0.6 0.8 1 1.2 1.4−1.6−1.4−1.2−1−0.8−0.6−0.4−0.200.20.4
(b)−1 −0.5 0 0.5 1 1.5−1.5−1−0.500.51
(c)
Figure 4.14 We observe y1=( 0,−1)(red cross) and y2=( 1,0)(green cross) and infer E(μ|y1,y2,θ)
(black cross). (a) Equally reliable sensors, so the posterior mean estimate is in between the two circles.
(b) Sensor 2 is more reliable, so the estimate shifts more towards the green circle. (c) Sensor 1 is morereliable in the vertical direction, Sensor 2 is more reliable in the horizontal direction. The estimate is anappropriate combination of the two measurements. Figure generated by sensorFusion2d .
Note that this technique crucially relies on modeling our uncertainty of each sensor; comput-
ing an unweighted average would give the wrong result. However, we have assumed the sensor
precisions are known. When they are not, we should model out uncertainty about Σ1andΣ2
as well. See Section 4.6.4 for details.
4.4.2.3 Interpolating noisy data
We now revisit the example of Section 4.3.2.2. This time we no longer assume noise-freeobservations. Instead, let us assume that we obtain Nnoisy observations y
i; without loss
of generality, assume these correspond to x1,...,x N. We can model this setup as a linear
124 Chapter 4. Gaussian models
Gaussian system:
y=Ax+/epsilon1 (4.146)
where/epsilon1∼N(0,Σy),Σy=σ2I,σ2is the observation noise, and Ais aN×Dprojection
matrix that selects out the observed elements. For example, if N=2andD=4we have
A=⎨parenleftbigg
1000
0100⎨parenrightbigg
(4.147)
Using the same improper prior as before, Σx=(LTL)−1, we can easily compute the posterior
mean and variance. In Figure 4.15, we plot the posterior mean, posterior variance, and someposterior samples. Now we see that the prior precision λeffects the posterior mean as well as
the posterior variance. In particular, for a strong prior (large λ), the estimate is very smooth, and
the uncertainty is low. but for a weak prior (small λ), the estimate is wiggly, and the uncertainty
(away from the data) is high.
The posterior mean can also be computed by solving the following optimization problem:
min
x1
2σ2N⎨summationdisplay
i=1(xi−yi)2+λ
2D⎨summationdisplay
j=1⎨bracketleftBig
(xj−xj−1)2+(xj−xj+1)2⎨bracketrightBig
(4.148)
where we have deﬁned x0=x1andxD+1=xDfor notational simplicity. We recognize this
as a discrete approximation to the following problem:
min
f1
2σ2⎨integraldisplay
(f(t)−y(t))2dt+λ
2⎨integraldisplay
[f/prime(t)]2dt (4.149)
wheref/prime(t)is the ﬁrst derivative of f. The ﬁrst term measures ﬁt to the data, and the second
term penalizes functions that are “too wiggly”. This is an example of Tikhonov regularization,
which is a popular approach to functional data analysis. See Chapter 15 for more sophisticated
approaches, which enforce higher order smoothness (so the resulting samples look less “jagged”).
4.4.3 Proof of the result *
We now derive Equation 4.125. The basic idea is to derive the joint distribution, p(x,y)=
p(x)p(y|x), and then to use the results from Section 4.3.1 for computing p(x|y).
In more detail, we proceed as follows. The log of the joint distribution is as follows (dropping
irrelevant constants):
logp(x,y)=−1
2(x−μx)TΣ−1
x(x−μx)−1
2(y−Ax−b)TΣ−1
y(y−Ax−b)(4.150)
This is clearly a joint Gaussian distribution, since it is the exponential of a quadratic form.
Expanding out the quadratic terms involving xandy, and ignoring linear and constant terms,
we have
Q=−1
2xTΣ−1
xx−1
2yTΣ−1
yy−1
2(Ax)TΣ−1
y(Ax)+yTΣ−1
yAx (4.151)
=−1
2⎨parenleftbiggx
y⎨parenrightbiggT⎨parenleftbiggΣ−1
x+ATΣ−1
yA−ATΣ−1
y
−Σ−1
yAΣ−1
y⎨parenrightbigg⎨parenleftbiggx
y⎨parenrightbigg
(4.152)
=−1
2⎨parenleftbigg
x
y⎨parenrightbiggT
Σ−1⎨parenleftbigg
x
y⎨parenrightbigg
(4.153)
4.5. Digression: The Wishart distribution * 125
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1−5−4−3−2−1012345λ=30
(a)0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1−5−4−3−2−1012345λ=0p1
(b)
Figure 4.15 Interpolating noisy data (noise variance σ2=1) using a Gaussian with prior precision λ. (a)
λ=3 0. (b)λ=0.01. See also Figure 4.10. Based on Figure 7.1 of (Calvetti and Somersalo 2007). Figure
generated by gaussInterpNoisyDemo . See also splineBasisDemo .
where the precision matrix of the joint is deﬁned as
Σ−1=⎨parenleftbiggΣ−1
x+ATΣ−1
yA−ATΣ−1
y
−Σ−1
yAΣ−1
y⎨parenrightbigg
/definesΛ=⎨parenleftbiggΛxxΛxy
ΛyxΛyy⎨parenrightbigg
(4.154)
From Equation 4.69, and using the fact that μy=Aμx+b,w eh a v e
p(x|y)=N (μx|y,Σx|y) (4.155)
Σx|y=Λ−1
xx=(Σ−1
x+ATΣ−1
yA)−1(4.156)
μx|y=Σx|y⎨parenleftbig
Λxxμx−Λxy(y−μy)⎨parenrightbig
(4.157)
=Σx|y⎨parenleftbig
Σ−1
xμ+ATΣ−1
y(y−b)⎨parenrightbig
(4.158)
4.5 Digression: The Wishart distribution *
TheWishartdistribution is the generalization of the Gamma distribution to positive deﬁnite
matrices. Press (Press 2005, p107) has said “The Wishart distribution ranks next to the (multi-
variate) normal distribution in order of importance and usefuleness in multivariate statistics”.We will mostly use it to model our uncertainty in covariance matrices, Σ, or their inverses,
Λ=Σ
−1.
The pdf of the Wishart is deﬁned as follows:
Wi(Λ|S,ν)=1
ZWi|Λ|(ν−D−1)/2exp⎨parenleftbigg
−1
2tr(ΛS−1)⎨parenrightbigg
(4.159)
Hereνis called the “degrees of freedom” and Sis the “scale matrix”. (We shall get more
intuition for these parameters shortly.) The normalization constant for this distribution (which
126 Chapter 4. Gaussian models
requires integrating over all symmetric pd matrices) is the following formidable expression
ZWi=2νD/2ΓD(ν/2)|S|ν/2(4.160)
whereΓD(a)is themultivariate gamma function:
ΓD(x)=πD(D−1)/4D⎨productdisplay
i=1Γ(x+(1−i)/2) (4.161)
HenceΓ1(a)=Γ (a)and
ΓD(ν0/2) =D⎨productdisplay
i=1Γ(ν0+1−i
2) (4.162)
The normalization constant only exists (and hence the pdf is only well deﬁned) if ν>D−1.
There is a connection between the Wishart distribution and the Gaussian. In particular,
letxi∼N(0,Σ). Then the scatter matrix S=⎨summationtextN
i=1xixT
ihas a Wishart distribution:
S∼Wi(Σ,1). Hence E[S]=NΣ. More generally, one can show that the mean and mode of
Wi(S,ν)are given by
mean=νS,mode=(ν−D−1)S (4.163)
where the mode only exists if ν>D+1.
IfD=1, the Wishart reduces to the Gamma distribution:
Wi(λ|s−1,ν)=G a (λ|ν
2,s
2) (4.164)
4.5.1 Inverse Wishart distribution
Recall that we showed (Exercise 2.10) that if λ∼Ga(a,b), then that1
λ∼IG(a,b). Similarly,
ifΣ−1∼Wi(S,ν)thenΣ∼IW(S−1,ν+D+1 ),w h e r eIWis theinverse Wishart, the
multidimensional generalization of the inverse Gamma. It is deﬁned as follows, for ν>D−1
andS/follows0:
IW(Σ|S,ν)=1
ZIW|Σ|−(ν+D+1)/2exp⎨parenleftbigg
−1
2tr(S−1Σ−1)⎨parenrightbigg
(4.165)
ZIW=|S|−ν/22νD/2ΓD(ν/2) (4.166)
One can show that the distribution has these properties
mean=S−1
ν−D−1,mode=S−1
ν+D+1(4.167)
IfD=1, this reduces to the inverse Gamma:
IW(σ2|S−1,ν)=I G (σ2|ν/2,S/2) (4.168)
4.6. Inferring the parameters of an MVN 127
−4−2 024−202
−5 0 5−505
−10 0 10−505
−5 0 5−4−2024
−5 0 5−505
−4−2 024−202
−2 02−202
−4−2 024−202Wi(dof=3.0, S), E=[9.5, −0.1; −0.1, 1.9], ρ=−0.0
−10 0 10−505
(a)0 5 10 15 2000.020.040.060.08σ2
1
0 1 2 3 400.10.20.30.4σ22−2 −1 0 1 200.20.40.60.8ρ(1,2)
(b)
Figure 4.16 Visualization of the Wishart distribution. Left: Some samples from the Wishart distribution,
Σ∼Wi(S,ν),w h e r eS=[ 3.1653,−0.0262;−0.0262,0.6477]andν=3. Right: Plots of the marginals
(which are Gamma), and the approximate (sample-based) marginal on the correlation coefficient. If ν=3
there is a lot of uncertainty about the value of the correlation coefficient ρ(see the almost uniform
distribution on [−1,1]). The sampled matrices are highly variable, and some are nearly singular. As ν
increases, the sampled matrices are more concentrated on the prior S. Figure generated by wiPlotDemo .
4.5.2 Visualizing the Wishart distribution *
Since the Wishart is a distribution over matrices, it is hard to plot as a density function. However,
we can easily sample from it, and in the 2d case, we can use the eigenvectors of the resultingmatrix to deﬁne an ellipse, as explained in Section 4.1.2. See Figure 4.16 for some examples.
For higher dimensional matrices, we can plot marginals of the distribution. The diagonals of
a Wishart distributed matrix have Gamma distributions, so are easy to plot. It is hard in generalto work out the distribution of the off-diagonal elements, but we can sample matrices fromthe distribution, and then compute the distribution empirically. In particular, we can converteach sampled matrix to a correlation matrix, and thus compute a Monte Carlo approximation(Section 2.7) to the expected correlation coefficients:
E[R
ij]≈1
SS⎨summationdisplay
s=1R(Σ(s))ij (4.169)
whereΣ(s)∼Wi(Σ,ν)andR(Σ)converts matrix Σinto a correlation matrix:
Rij=Σij⎨radicalbig
ΣiiΣjj(4.170)
We can then use kernel density estimation (Section 14.7.2) to produce a smooth approximationto the univariate density E[R
ij]for plotting purposes. See Figure 4.16 for some examples.
4.6 Inferring the parameters of an MVN
So far, we have discussed inference in a Gaussian assuming the parameters θ=(μ,Σ)are
known. We now discuss how to infer the parameters themselves. We will assume the data has
128 Chapter 4. Gaussian models
the form xi∼N(μ,Σ)fori=1:N and is fully observed, so we have no missing data (see
Section 11.6.1 for how to estimate parameters of an MVN in the presence of missing values). To
simplify the presentation, we derive the posterior in three parts: ﬁrst we compute p(μ|D,Σ);
then we compute p(Σ|D,μ); ﬁnally we compute the joint p(μ,Σ|D).
4.6.1 Posterior distribution of μ
We have discussed how to compute the MLE for μ; we now discuss how to compute its posterior,
which is useful for modeling our uncertainty about its value.
The likelihood has the form
p(D|μ)=N(x|μ,1
NΣ) (4.171)
For simplicity, we will use a conjugate prior, which in this case is a Gaussian. In particular, ifp(μ)=N(μ|m
0,V0)then we can derive a Gaussian posterior for μbased on the results in
Section 4.4.2.2. We get
p(μ|D,Σ)=N (μ|mN,VN) (4.172)
V−1
N=V−1
0+NΣ−1(4.173)
mN=VN(Σ−1(Nx)+V−1
0m0) (4.174)
This is exactly the same process as inferring the location of an object based on noisy radar“blips”, except now we are inferring the mean of a distribution based on noisy samples. (To aBayesian, there is no difference between uncertainty about parameters and uncertainty aboutanything else.)
We can model an uninformative prior by setting V
0=∞I. In this case we have p(μ|D,Σ)=
N(x,1
NΣ), so the posterior mean is equal to the MLE. We also see that the posterior variance
goes down as 1/N, which is a standard result from frequentist statistics.
4.6.2 Posterior distribution of Σ*
We now discuss how to compute p(Σ|D,μ). The likelihood has the form
p(D|μ,Σ)∝|Σ|−N
2exp⎨parenleftbigg
−1
2tr(SμΣ−1)⎨parenrightbigg
(4.175)
The corresponding conjugate prior is known as the inverse Wishart distribution (Section 4.5.1).Recall that this has the following pdf:
IW(Σ|S
−1
0,ν0)∝|Σ|−(ν0+D+1)/2exp⎨parenleftbigg
−1
2tr(S0Σ−1)⎨parenrightbigg
(4.176)
Hereν0>D−1is the degrees of freedom (dof), and S0is a symmetric pd matrix. We see
thatS−1
0plays the role of the prior scatter matrix, and N0/definesν0+D+1controls the strength
of the prior, and hence plays a role analogous to the sample size N.
4.6. Inferring the parameters of an MVN 129
0 5 10 15 20 2500.511.5eigenvalueN=100, D=50
  
true, k=10.00
MLE, k=  71
MAP, k=8.62
0 5 10 15 20 2500.511.5eigenvalueN=50, D=50
  
true, k=10.00
MLE, k=1.7e+17
MAP, k=8.85
0 5 10 15 20 2500.511.5eigenvalueN=25, D=50
  
true, k=10.00
MLE, k=2.2e+18
MAP, k=21.09
Figure 4.17 Estimating a covariance matrix in D=5 0dimensions using N∈{100,50,25}samples.
We plot the eigenvalues in descending order for the true covariance matrix (solid black), the MLE (dotted
blue) and the MAP estimate (dashed red), using Equation 4.184 with λ=0.9. We also list the condition
number of each matrix in the legend. Based on Figure 1 of (Schaefer and Strimmer 2005). Figure generatedbyshrinkcovDemo .
Multiplying the likelihood and prior we ﬁnd that the posterior is also inverse Wishart:
p(Σ|D,μ)∝|Σ|−N
2exp⎨parenleftbigg
−1
2tr(Σ−1Sμ)⎨parenrightbigg
|Σ|−(ν0+D+1)/2
exp⎨parenleftbigg
−1
2tr(Σ−1S0)⎨parenrightbigg
(4.177)
=|Σ|−N+(ν0+D+1)
2exp⎨parenleftbigg
−1
2tr⎨bracketleftbig
Σ−1(Sμ+S0)⎨bracketrightbig⎨parenrightbigg
(4.178)
=I W (Σ|SN,νN) (4.179)
νN=ν0+N (4.180)
S−1
N=S0+Sμ (4.181)
In words, this says that the posterior strength νNis the prior strength ν0plus the number of
observations N, and the posterior scatter matrix SNis the prior scatter matrix S0plus the data
scatter matrix Sμ.
4.6.2.1 MAP estimation
We see from Equation 4.7 that ˆΣmleis a rank min(N,D )matrix. If N<D, this is not
full rank, and hence will be uninvertible. And even if N>D, it may be the case that ˆΣis
ill-conditioned (meaning it is nearly singular).
To solve these problems, we can use the posterior mode (or mean). One can show (using
techniques analogous to the derivation of the MLE) that the MAP estimate is given by
ˆΣmap=SN
νN+D+1=S0+Sμ
N0+N(4.182)
If we use an improper uniform prior, corresponding to N0=0andS0=0, we recover the
MLE.
130 Chapter 4. Gaussian models
Let us now consider the use of a proper informative prior, which is necessary whenever D/N
is large (say bigger than 0.1). Let μ=x,s oSμ=Sx. Then we can rewrite the MAP estimate
as a convex combination of the prior mode and the MLE. To see this, let Σ0/definesS0
N0be the prior
mode. Then the posterior mode can be rewritten as
ˆΣmap=S0+Sx
N0+N=N0
N0+NS0
N0+N
N0+NS
N=λΣ0+(1−λ)ˆΣmle (4.183)
whereλ=N0
N0+N, controls the amount of shrinkage towards the prior.
This begs the question: where do the parameters of the prior come from? It is common to
setλby cross validation. Alternatively, we can use the closed-form formula provided in (Ledoit
and Wolf 2004b,a; Schaefer and Strimmer 2005), which is the optimal frequentist estimate if we
use squared loss. This is arguably not the most natural loss function for covariance matrices(because it ignores the postive deﬁnite constraint), but it results in a simple estimator, whichis implemented in the PMTK function shrinkcov . We discuss Bayesian ways of estimating λ
later.
As for the prior covariance matrix, S
0, it is common to use the following (data dependent)
prior:S0=d i a g (ˆΣmle). In this case, the MAP estimate is given by
ˆΣmap(i,j)=⎨braceleftbiggˆΣmle(i,j) ifi=j
(1−λ)ˆΣmle(i,j)otherwise(4.184)
Thus we see that the diagonal entries are equal to their ML estimates, and the off diago-nal elements are “shrunk” somewhat towards 0. This technique is therefore called shrinkage
estimation,o rregularized estimation.
The beneﬁts of MAP estimation are illustrated in Figure 4.17. We consider ﬁtting a 50 dimen-
sional Gaussian to N= 100,N=5 0andN=2 5data points. We see that the MAP estimate
is always well-conditioned, unlike the MLE. In particular, we see that the eigenvalue spectrum
of the MAP estimate is much closer to that of the true matrix than the MLE’s. The eigenvectors,however, are unaffected.
The importance of regularizing the estimate of Σwill become apparent in later chapters,
when we consider ﬁtting covariance matrices to high dimensional data.
4.6.2.2 Univariate posterior
In the 1d case, the likelihood has the form
p(D|σ
2)∝(σ2)−N/2exp⎨parenleftBigg
−1
2σ2N⎨summationdisplay
i=1(xi−μ)2⎨parenrightBigg
(4.185)
The standard conjugate prior is the inverse Gamma distribution, which is just the scalar versionof the inverse Wishart:
IG(σ
2|a0,b0)∝(σ2)−(a0+1)exp(−b0
σ2) (4.186)
4.6. Inferring the parameters of an MVN 131
0 5 10 1500.050.10.150.20.250.30.35
σ2prior = IW( ν=0.001, S=0.001), true σ2=10.000
  N=2
N=5
N=50
N=100
Figure 4.18 Sequential updating of the posterior for σ2starting from an uninformative prior. The data
was generated from a Gaussian with known mean μ=5and unknown variance σ2=1 0. Figure generated
bygaussSeqUpdateSigma1D .
Multiplying the likelihood and the prior, we see that the posterior is also IG:
p(σ2|D)=I G ( σ2|aN,bN) (4.187)
aN=a0+N/2 (4.188)
bN=b0+1
2N⎨summationdisplay
i=1(xi−μ)2(4.189)
See Figure 4.18 for an illustration.
The form of the posterior is not quite as pretty as the multivariate case, because of the
factors of1
2. This arises because IW(σ2|s0,ν0)=I G (σ2|s0
2,ν0
2). Another problem with using
theIG(a0,b0)distribution is that the strength of the prior is encoded in both a0andb0.
To avoid both of these problems, it is common (in the statistics literature) to use an alternative
parameterization of the IG distribution, known as the (scaled) inverse chi-squared distribution.
This is deﬁned as follows:
χ−2(σ2|ν0,σ2
0)=I G (σ2|ν0
2,ν0σ2
0
2)∝(σ2)−ν0/2−1exp(−ν0σ2
0
2σ2) (4.190)
Hereν0controls the strength of the prior, and σ2
0encodes the value of the prior. With this
prior, the posterior becomes
p(σ2|D,μ)=χ−2(σ2|νN,σ2
N) (4.191)
νN=ν0+N (4.192)
σ2
N=ν0σ2
0+⎨summationtextN
i=1(xi−μ)2
νN(4.193)
We see that the posterior dof νNis the prior dof ν0plusN, and the posterior sum of squares
νNσ2
Nis the prior sum of squares ν0σ2
0plus the data sum of squares.
We can emulate an uninformative prior, p(σ2)∝σ−2, by setting ν0=0, which makes
intuitive sense (since it corresponds to a zero virtual sample size).
132 Chapter 4. Gaussian models
4.6.3 Posterior distribution of μandΣ*
We now discuss how to compute p(μ,Σ|D). These results are a bit complex, but will prove
useful later on in this book. Feel free to skip this section on a ﬁrst reading.
4.6.3.1 Likelihood
The likelihood is given by
p(D|μ,Σ)=( 2 π)−ND/2|Σ|−N
2exp⎨parenleftBigg
−1
2N⎨summationdisplay
i=1(xi−μ)TΣ−1(xi−μ)⎨parenrightBigg
(4.194)
Now one can show that
N⎨summationdisplay
i=1(xi−μ)TΣ−1(xi−μ)=t r ( Σ−1Sx)+N(x−μ)TΣ−1(x−μ) (4.195)
Hence we can rewrite the likelihood as follows:
p(D|μ,Σ)=( 2 π)−ND/2|Σ|−N
2exp⎨parenleftbigg
−N
2(μ−x)TΣ−1(μ−x)⎨parenrightbigg
(4.196)
exp⎨parenleftbigg
−N
2tr(Σ−1Sx)⎨parenrightbigg
(4.197)
We will use this form below.
4.6.3.2 Prior
The obvious prior to use is the following
p(μ,Σ)=N(μ|m0,V0)IW(Σ|S0,ν0) (4.198)
Unfortunately, this is not conjugate to the likelihood. To see why, note that μandΣappear
together in a non-factorized way in the likelihood; hence they will also be coupled together in
the posterior.
The above prior is sometimes called semi-conjugate orconditionally conjugate, since both
conditionals, p(μ|Σ)andp(Σ|μ), are individually conjugate. To create a full conjugate prior,
we need to use a prior where μandΣare dependent on each other. We will use a joint
distribution of the form
p(μ,Σ)=p(Σ)p(μ|Σ) (4.199)
Looking at the form of the likelihood equation, Equation 4.197, we see that a natural conjugate
4.6. Inferring the parameters of an MVN 133
prior has the form of a Normal-inverse-wishart orNIWdistribution, deﬁned as follows:
NIW(μ,Σ|m0,κ0,ν0,S0)/defines (4.200)
N(μ|m0,1
κ0Σ)×IW(Σ|S0,ν0) (4.201)
=1
ZNIW|Σ|−1
2exp⎨parenleftBig
−κ0
2(μ−m0)TΣ−1(μ−m0)⎨parenrightBig
(4.202)
×|Σ|−ν0+D+1
2exp⎨parenleftbigg
−1
2tr(Σ−1S0)⎨parenrightbigg
(4.203)
=1
ZNIW|Σ|−ν0+D+2
2 (4.204)
×exp⎨parenleftbigg
−κ0
2(μ−m0)TΣ−1(μ−m0)−1
2tr(Σ−1S0)⎨parenrightbigg
(4.205)
ZNIW=2v0D/2ΓD(ν0/2)(2π/κ0)D/2|S0|−ν0/2(4.206)
whereΓD(a)is the multivariate Gamma function.
The parameters of the NIW can be interpreted as follows: m0is our prior mean for μ, and
κ0is how strongly we believe this prior; and S0is (proportional to) our prior mean for Σ, and
ν0is how strongly we believe this prior.3
One can show (Minka 2000f) that the (improper) uninformative prior has the form
lim
k→0N(μ|m0,Σ/k)IW(Σ|S0,k)∝|2πΣ|−1
2|Σ|−(D+1)/2(4.207)
∝|Σ|−(D
2+1)∝NIW(μ,Σ|0,0,0,0I) (4.208)
In practice, it is often better to use a weakly informative data-dependent prior. A common
choice (see e.g., (Chipman et al. 2001, p81), (Fraley and Raftery 2007, p6)) is to use S0=
diag(S x)/N, andν0=D+2, to ensure E[Σ]=S0, and to set μ0=xandκ0to some small
number, such as 0.01.
3. Although this prior has four parameters, there are really only three free parameters, since our uncertainty in the
mean is proportional to the variance. In particular, if we believe that the variance is large, then our uncertainty in μ
must be large too. This makes sense intuitively, since if the data has large spread, it may be hard to pin down its mean.
See also Exercise 9.1, where we will see the three free parameters more explicitly. If we want separate “control” over our
conﬁdence in μandΣ, we must use a semi-conjugate prior.
134 Chapter 4. Gaussian models
4.6.3.3 Posterior
The posterior can be shown (Exercise 4.11) to be NIW with updated parameters:
p(μ,Σ|D)=N I W ( μ,Σ|mN,κN,νN,SN) (4.209)
mN=κ0m0+Nx
κN=κ0
κ0+Nm0+N
κ0+Nx (4.210)
κN=κ0+N (4.211)
νN=ν0+N (4.212)
SN=S0+Sx+κ0N
κ0+N(x−m0)(x−m0)T(4.213)
=S0+S+κ0m0mT
0−κNmNmTN(4.214)
where we have deﬁned S/defines⎨summationtextN
i=1xixT
ias the uncentered sum-of-squares matrix (this is easier
to update incrementally than the centered version).
This result is actually quite intuitive: the posterior mean is a convex combination of the prior
mean and the MLE, with “strength” κ0+N; and the posterior scatter matrix SNis the prior
scatter matrix S0plus the empirical scatter matrix Sxplus an extra term due to the uncertainty
in the mean (which creates its own virtual scatter matrix).
4.6.3.4 Posterior mode
The mode of the joint distribution has the following form:
argmaxp(μ,Σ|D)=(mN,SN
νN+D+2) (4.215)
If we setκ0=0, this reduces to
argmaxp(μ,Σ|D)=(x,S0+Sx
ν0+N+D+2) (4.216)
The corresponding estimate ˆΣis almost the same as Equation 4.183, but differs by 1 in the
denominator, because this is the mode of the joint, not the mode of the marginal.
4.6.3.5 Posterior marginals
The posterior marginal for Σis simply
p(Σ|D)=⎨integraldisplay
p(μ,Σ|D)dμ=I W (Σ|SN,νN) (4.217)
The mode and mean of this marginal are given by
ˆΣmap=SN
νN+D+1,E[Σ]=SN
νN−D−1(4.218)
One can show that the posterior marginal for μhas a multivariate Student T distribution:
p(μ|D)=⎨integraldisplay
p(μ,Σ|D)dΣ=T(μ|mN,1
κN(νN−D+1)SN,νN−D+1)(4.219)
This follows from the fact that the Student distribution can be represented as a scaled mixture
of Gaussians (see Equation 11.61).
4.6. Inferring the parameters of an MVN 135
Figure 4.19 TheNIχ2(m0,κ0,ν0,σ2
0)distribution. m0is the prior mean and κ0is how strongly we
believe this; σ2
0is the prior variance and ν0is how strongly we believe this. (a) m0=0,κ0=1,ν0=
1,σ2
0=1. Notice that the contour plot (underneath the surface) is shaped like a “squashed egg”. (b) We
increase the strength of our belief in the mean, so it gets narrower: m0=0,κ0=5,ν0=1,σ2
0=1. (c)
We increase the strength of our belief in the variance, so it gets narrower: m0=0,κ0=1,ν0=5,σ2
0=
1. Figure generated by NIXdemo2 .
4.6.3.6 Posterior predictive
The posterior predictive is given by
p(x|D)=p(x,D)
p(D)(4.220)
so it can be easily evaluated in terms of a ratio of marginal likelihoods.
It turns out that this ratio has the form of a multivariate Student-T distribution:
p(x|D)=⎨integraldisplay⎨integraldisplay
N(x|μ,Σ)NIW(μ,Σ|mN,κN,νN,SN)dμdΣ (4.221)
=T(x|mN,κN+1
κN(νN−D+1)SN,νN−D+1) (4.222)
The Student-T has wider tails than a Gaussian, which takes into account the fact that Σis
unknown. However, this rapidly becomes Gaussian-like.
4.6.3.7 Posterior for scalar data
We now specialise the above results to the case where xiis 1d. These results are widely used
in the statistics literature. As in Section 4.6.2.2, it is conventional not to use the normal inverse
136 Chapter 4. Gaussian models
Wishart, but to use the normal inverse chi-squared orNIXdistribution, deﬁned by
NIχ2(μ,σ2|m0,κ0,ν0,σ2
0)/definesN(μ|m0,σ2/κ0)χ−2(σ2|ν0,σ2
0) (4.223)
∝(1
σ2)(ν0+3)/2exp⎨parenleftbigg
−ν0σ2
0+κ0(μ−m0)2
2σ2⎨parenrightbigg
(4.224)
See Figure 4.19 for some plots. Along the μaxis, the distribution is shaped like a Gaussian, and
along the σ2axis, the distribution is shaped like a χ−2; the contours of the joint density have
a “squashed egg” appearance. Interestingly, we see that the contours for μare more peaked
for small values of σ2, which makes sense, since if the data is low variance, we will be able to
estimate its mean more reliably.
One can show that the posterior is given by
p(μ,σ2|D)=NIχ2(μ,σ2|mN,κN,νN,σ2
N) (4.225)
mN=κ0m0+Nx
κN(4.226)
κN=κ0+N (4.227)
νN=ν0+N (4.228)
νNσ2
N=ν0σ2
0+N⎨summationdisplay
i=1(xi−x)2+Nκ0
κ0+N(m0−x)2(4.229)
The posterior marginal for σ2is just
p(σ2|D)=⎨integraldisplay
p(μ,σ2|D)dμ=χ−2(σ2|νN,σ2
N) (4.230)
with the posterior mean given by E⎨bracketleftbig
σ2|D⎨bracketrightbig
=νN
νN−2σ2
N.
The posterior marginal for μhas a Student T distribution, which follows from the scale
mixture representation of the student:
p(μ|D)=⎨integraldisplay
p(μ,σ2|D)dσ2=T(μ|mN,σ2
N/κN,νN) (4.231)
with the posterior mean given by E[μ|D]=mN.
Let us see how these results look if we use the following uninformative prior:
p(μ,σ2)∝p(μ)p(σ2)∝σ−2∝NIχ2(μ,σ2|μ0=0,κ0=0,ν0=−1,σ2
0=0 ) (4.232)
With this prior, the posterior has the form
p(μ,σ2|D)=NIχ2(μ,σ2|mN=x,κN=N,νN=N−1,σ2
N=s2) (4.233)
where
s2/defines1
N−1N⎨summationdisplay
i=1(xi−x)2=N
N−1ˆσ2
mle (4.234)
is the the sample standard deviation. (In Section 6.4.2, we show that this is an unbiased
estimate of the variance.) Hence the marginal posterior for the mean is given by
p(μ|D)=T(μ|x,s2
N,N−1) (4.235)
4.6. Inferring the parameters of an MVN 137
and the posterior variance of μis
var[μ|D]=νN
νN−2σ2
N=N−1
N−3s2
N→s2
N(4.236)
The square root of this is called the standard error of the mean:
⎨radicalbig
var[μ|D]≈s√
N(4.237)
Thus an approximate 95% posterior credible interval for the mean is
I.95(μ|D)=x±2s√
N(4.238)
(Bayesian credible intervals are discussed in more detail in Section 5.2.2; they are contrasted
with frequentist conﬁdence intervals in Section 6.6.1.)
4.6.3.8 Bayesian t-test
Suppose we want to test the hypothesis that μ/negationslash=μ0for some known value μ0(often 0), given
valuesxi∼N(μ,σ2). This is called a two-sided, one-sample t-test. A simple way to perform
such a test is just to check if μ0∈I0.95(μ|D). If it is not, then we can be 95% sure that
μ/negationslash=μ0.4A more common scenario is when we want to test if two paired samples have
the same mean. More precisely, suppose yi∼N(μ1,σ2)andzi∼N(μ2,σ2). We want to
determine if μ=μ1−μ2>0, usingxi=yi−zias our data. We can evaluate this quantity
as follows:
p(μ>μ0|D)=⎨integraldisplay∞
μ0p(μ|D)dμ (4.239)
This is called a one-sided, paired t-test. (For a similar approach to unpaired tests, comparing
the difference in binomial proportions, see Section 5.2.3.)
To calculate the posterior, we must specify a prior. Suppose we use an uninformative prior.
As we showed above, we ﬁnd that the posterior marginal on μhas the form
p(μ|D)=T(μ|x,s2
N,N−1) (4.240)
Now let us deﬁne the following t statistic:
t/definesx−μ0
s/√
N(4.241)
where the denominator is the standard error of the mean. We see that
p(μ|D)=1−FN−1(t) (4.242)
whereFν(t)is the cdf of the standard Student t distribution T(0,1,ν).
4. A more complex approach is to perform Bayesian model comparison. That is, we compute the Bayes factor (described
in Section 5.3.3) p(D|H0)/p(D|H1),w h e r eH0is the point null hypothesis that μ=μ0, andH1is the alternative
hypothesis that μ/negationslash=μ0. See (Gonen et al. 2005; Rouder et al. 2009) for details.
138 Chapter 4. Gaussian models
4.6.3.9 Connection with frequentist statistics *
If we use an uninformative prior, it turns out that the above Bayesian analysis gives the same
result as derived using frequentist methods. (We discuss frequentist statistics in Chapter 6.)Speciﬁcally, from the above results, we see that
μ−
x⎨radicalbig
s/N|D ∼tN−1 (4.243)
This has the same form as the sampling distribution of the MLE:
μ−X⎨radicalbig
s/N|μ∼tN−1 (4.244)
ThereasonisthattheStudentdistributionissymmetricinitsﬁrsttwoarguments, so T(x|μ,σ2,ν)=
T(μ|x,σ2,ν); hence statements about the posterior for μhave the same form as statements
about the sampling distribution of x. Consequently, the (one-sided) p-value (deﬁned in Sec-
tion 6.6.2) returned by a frequentist test is the same as p(μ>μ0|D)returned by the Bayesian
method. See bayesTtestDemo for an example.
Despite the superﬁcial similarity, these two results have a different interpretation: in the
Bayesian approach, μis unknown and xis ﬁxed, whereas in the frequentist approach, X
is unknown and μis ﬁxed. More equivalences between frequentist and Bayesian inference
in simple models using uninformative priors can be found in (Box and Tiao 1973). See alsoSection 7.6.3.3.
4.6.4 Sensor fusion with unknown precisions *
In this section, we apply the results in Section 4.6.3 to the problem of sensor fusion in thecase where the precision of each measurement device is unknown. This generalizes the resultsof Section 4.4.2.2, where the measurement model was assumed to be Gaussian with knownprecision. The unknown precision case turns out to give qualitatively different results, yieldinga potentially multi-modal posterior as we will see. Our presentation is based on (Minka 2001e).
Suppose we want to pool data from multiple sources to estimate some quantity μ∈R, but the
reliability of the sources is unknown. Speciﬁcally, suppose we have two different measurementdevices,xandy, with different precisions: x
i|μ∼N(μ,λ−1
x)andyi|μ∼N(μ,λ−1
y).W e
make two independent measurements with each device, which turn out to be
x1=1.1,x2=1.9,y1=2.9,y2=4.1 (4.245)
We will use a non-informative prior for μ,p(μ)∝1, which we can emulate using an inﬁnitely
broad Gaussian, p(μ)=N(μ|m0=0,λ−1
0=∞). If theλxandλyterms were known, then
the posterior would be Gaussian:
p(μ|D,λx,λy)=N (μ|mN,λ−1
N) (4.246)
λN=λ0+Nxλx+Nyλy (4.247)
mN=λxNxx+λyNyy
Nxλx+Nyλy(4.248)
4.6. Inferring the parameters of an MVN 139
whereNx=2is the number of xmeasurements, Ny=2is the number of y measurements,
x=1
Nx⎨summationtextNx
i=1xi=1.5andy=1
Ny⎨summationtextNy
i=1yi=3.5. This result follows because the posterior
precision is the sum of the measurement precisions, and the posterior mean is a weighted sum
of the prior mean (which is 0) and the data means.
However, the measurement precisions are not known. Initially we will estimate them by
maximum likelihood. The log-likelihood is given by
/lscript(μ,λx,λy)=l o g λx−λx
2⎨summationdisplay
i(xi−μ)2+logλy−λy
2⎨summationdisplay
i(yi−μ)2(4.249)
The MLE is obtained by solving the following simultaneous equations:
∂/lscript
∂μ=λxNx(x−μ)+λyNy(y−μ)=0 (4.250)
∂/lscript
∂λx=1
λx−1
NxNx⎨summationdisplay
i=1(xi−μ)2=0 (4.251)
∂/lscript
∂λy=1
λy−1
NyNy⎨summationdisplay
i=1(yi−μ)2=0 (4.252)
This gives
ˆμ=Nxˆλxx+Nyˆλyy
Nxˆλx+Nyˆλy(4.253)
1/ˆλx=1
Nx⎨summationdisplay
i(xi−ˆμ)2(4.254)
1/ˆλy=1
Ny⎨summationdisplay
i(yi−ˆμ)2(4.255)
We notice that the MLE for μhas the same form as the posterior mean, mN.
Wecansolvetheseequationsbyﬁxedpointiteration. Letusinitializebyestimating λx=1/s2
x
andλy=1/s2y,w h e r es2x=1
Nx⎨summationtextNx
i=1(xi−x)2=0.16ands2y=1
Ny⎨summationtextNy
i=1(yi−y)2=0.36.
Using this, we get ˆμ=2.1154,s o p(μ|D,ˆλx,ˆλy)=N(μ|2.1154,0.0554).I fw en o wi t e r a t e ,
we converge to ˆλx=1/0.1662,ˆλy=1/4.0509,p(μ|D,ˆλx,ˆλy)=N(μ|1.5788,0.0798).
The plug-in approximation to the posterior is plotted in Figure 4.20(a). This weights each
sensor according to its estimated precision. Since sensor ywas estimated to be much less
reliable than sensor x,w eh a v eE⎨bracketleftBig
μ|D,ˆλx,ˆλy⎨bracketrightBig
≈x, so we effectively ignore the ysensor.
Now we will adopt a Bayesian approach and integrate out the unknown precisions, rather
than trying to estimate them. That is, we compute
p(μ|D)∝p(μ)⎨bracketleftbigg⎨integraldisplay
p(Dx|μ,λx)p(λx|μ)dλx⎨bracketrightbigg⎨bracketleftbigg⎨integraldisplay
p(Dy|μ,λy)p(λy|μ)dλy⎨bracketrightbigg
(4.256)
We will use uninformative Jeffrey’s priors, p(μ)∝1,p(λx|μ)∝1/λxandp(λy|μ)∝1/λy.
140 Chapter 4. Gaussian models
Since the xandyterms are symmetric, we will just focus on one of them. The key integral is
I=⎨integraldisplay
p(Dx|μ,λx)p(λx|μ)dλx∝⎨integraldisplay
λ−1
x(Nxλx)Nx/2(4.257)
exp⎨parenleftbigg
−Nx
2λx(x−μ)2−Nx
2s2
xλx⎨parenrightbigg
dλx(4.258)
Exploiting the fact that Nx=2this simpliﬁes to
I=⎨integraldisplay
λ−1
xλ1xexp(−λx[(x−μ)2+s2x])dλx (4.259)
We recognize this as proportional to the integral of an unnormalized Gamma density
Ga(λ|a,b)∝λa−1e−λb(4.260)
wherea=1andb=(x−μ)2+s2
x. Hence the integral is proportional to the normalizing
constant of the Gamma distribution, Γ(a)b−a,s ow eg e t
I∝⎨integraldisplay
p(Dx|μ,λx)p(λx|μ)dλx∝⎨parenleftbig
x−μ)2+s2
x⎨parenrightbig−1(4.261)
and the posterior becomes
p(μ|D)∝1
(x−μ)2+s2x1
(y−μ)2+s2y(4.262)
The exact posterior is plotted in Figure 4.20(b). We see that it has two modes, one near
x=1.5and one near y=3.5. These correspond to the beliefs that the xsensor is more
reliable than the yone, and vice versa. The weight of the ﬁrst mode is larger, since the data
from the xsensor agree more with each other, so it seems slightly more likely that the xsensor
is the reliable one. (They obviously cannot both be reliable, since they disagree on the values
that they are reporting.) However, the Bayesian solution keeps open the possibility that the y
sensor is the more reliable one; from two measurements, we cannot tell, and choosing just thexsensor, as the plug-in approximation does, results in over conﬁdence (a posterior that is too
narrow).
Exercises
Exercise 4.1 Uncorrelated does not imply independent
LetX∼U(−1,1)andY=X2. Clearly Yis dependent on X(in fact,Yis uniquely determined
byX). However, show that ρ(X,Y)=0. Hint: if X∼U(a,b)thenE[X]=(a+b)/2and
var[X]=(b−a)2/12.
Exercise 4.2 Uncorrelated and Gaussian does not imply independent unless jointlyGaussian
LetX∼N(0,1)andY=WX,w h e r ep(W=−1) =p(W=1 )=0 .5. It is clear that XandYare
not independent, since Yis a function of X.
a. ShowY∼N(0,1).
4.6. Inferring the parameters of an MVN 141
−2 −1 0 1 2 3 4 5 600.10.20.30.40.50.60.70.8
(a)−2 −1 0 1 2 3 4 5 600.511.5
(b)
Figure 4.20 Posterior for μ. (a) Plug-in approximation. (b) Exact posterior. Figure generated by
sensorFusionUnknownPrec .
b. Showcov[X,Y ]=0. ThusXandYare uncorrelated but dependent, even though they are Gaussian.
Hint: use the deﬁnition of covariance
cov[X,Y ]=E[XY]−E[X]E[Y] (4.263)
and therule of iterated expectation
E[XY]=E[E[XY|W]] (4.264)
Exercise 4.3 Correlation coefficient is between -1 and +1
Prove that −1≤ρ(X,Y)≤1
Exercise 4.4 Correlation coefficient for linearly related variables is ±1
Show that, if Y=aX+bfor some parameters a>0andb, thenρ(X,Y)=1. Similarly show that if
a<0, thenρ(X,Y)=−1.
Exercise 4.5 Normalization constant for a multidimensional Gaussian
Prove that the normalization constant for a d-dimensional Gaussian is given by
(2π)d/2|Σ|1
2=/integraldisplay
exp(−1
2(x−μ)TΣ−1(x−μ))dx (4.265)
Hint: diagonalize Σand use the fact that |Σ|=/producttext
iλito write the joint pdf as a product of done-
dimensional Gaussians in a transformed coordinate system. (You will need the change of variables formula.)
Finally, use the normalization constant for univariate Gaussians.
Exercise 4.6 Bivariate Gaussian
Letx∼N(μ,Σ)wherex∈R2and
Σ=/parenleftbiggσ2
1ρσ1σ2
ρσ1σ2σ2
2/parenrightbigg
(4.266)
whereρis the correlation coefficient. Show that the pdf is given by
p(x1,x2)=1
2πσ1σ2/radicalbig
1−ρ2(4.267)
exp/parenleftbigg
−1
2(1−ρ2)/parenleftbigg(x1−μ1)2
σ2
1+(x2−μ2)2
σ2
2−2ρ(x1−μ1)
σ1(x2−μ2)
σ2/parenrightbigg/parenrightbigg
(4.268)
142 Chapter 4. Gaussian models
60 65 70 75 8080100120140160180200220240260280
12
34
56
789
1011
1213
141516
17
181920
2122
23
2425
26
27
28
293031
32333435
36
37
383940
41424344
45
46474849
5051
52
53
5455
5657
58
5960
61 62636465
6667
68
69 70
717273raw
−3 −2 −1 0 1 2 3−3−2−101234
12
34
56
789
1011
1213
141516
17
181920
2122
23
2425
26
27
28
293031
32333435
3637
383940
41424344
45
46474849
5051
52
535455
5657
58
596061 62636465
6667
68
69 70717273standarized
−3 −2 −1 0 1 2 3−3−2−101234
12
34
56
789
1011
1213
141516
17
181920
2122
23
2425
2627
28
293031
32333435
3637
383940
41424344
45
464748 49
5051
52
535455
5657
58
596061 6263 6465
666768
69 70717273whitened
Figure 4.21 (a) Height/weight data for the men. (b) Standardized. (c) Whitened.
Exercise 4.7 Conditioning a bivariate Gaussian
Consider a bivariate Gaussian distribution p(x1,x2)=N(x|μ,Σ)where
Σ=/parenleftbiggσ2
1σ12
σ21σ2
2/parenrightbigg
=σ1σ2/parenleftbiggσ1
σ2ρ
ρσ2
σ1/parenrightbigg
(4.269)
where the correlation coefficient is given by
ρ/definesσ12
σ1σ2(4.270)
a. What is P(X2|x1)? Simplify your answer by expressing it in terms of ρ,σ2,σ1,μ1,μ2andx1.
b. Assume σ1=σ2=1. What is P(X2|x1)now?
Exercise 4.8 Whitening vs standardizing
a. Load the height/weight data using rawdata = dlmread(’heightWeightData.txt’) . The ﬁrst col-
umn is the class label (1=male, 2=female), the second column is height, the third weight. Extract the
height/weight data corresponding to the males. Fit a 2d Gaussian to the male data, using the empiricalmean and covariance. Plot your Gaussian as an ellipse (use gaussPlot2d ), superimposing on your
scatter plot. It should look like Figure 4.21(a), where have labeled each datapoint by its index. Turn inyour ﬁgure and code.
b.Standardizing the data means ensuring the empirical variance along each dimension is 1. This can be
done by computing
xij−xj
σj,w h e r eσjis the empirical std of dimension j. Standardize the data and
replot. It should look like Figure 4.21(b). (Use axis(’equal’) .) Turn in your ﬁgure and code.
c.Whitening orsphereing the data means ensuring its empirical covariance matrix is proportional to
I, so the data is uncorrelated and of equal variance along each dimension. This can be done by
computing Λ−1
2UTxfor each data vector x,w h e r e Uare the eigenvectors and Λthe eigenvalues of
X. Whiten the data and replot. It should look like Figure 4.21(c). Note that whitening rotates the data,
so people move to counter-intuitive locations in the new coordinate system (see e.g., person 2, who
moves from the right hand side to the left).
Exercise 4.9 Sensor fusion with known variances in 1d
Suppose we have two sensors with known (and different) variances v1andv2, but unknown (and the same)
meanμ. Suppose we observe n1observations y(1)
i∼N(μ,v1)from the ﬁrst sensor and n2observations
4.6. Inferring the parameters of an MVN 143
y(2)
i∼N(μ,v2)from the second sensor. (For example, suppose μis the true temperature outside,
and sensor 1 is a precise (low variance) digital thermosensing device, and sensor 2 is an imprecise (high
variance) mercury thermometer.) Let Drepresent all the data from both sensors. What is the posterior
p(μ|D), assuming a non-informative prior for μ(which we can simulate using a Gaussian with a precision
of 0)? Give an explicit expression for the posterior mean and variance.
Exercise 4.10 Derivation of information form formulae for marginalizing and conditioning
Derive the information form results of Section 4.3.1.Exercise 4.11 Derivation of the NIW posterior
Derive Equation 4.209. Hint: one can show that
N(
x−μ)(x−μ)T+κ0(μ−m0)(μ−m0)T(4.271)
=κN(μ−mN)(μ−mN)T+κ0N
κN(x−m0)(x−m0)T(4.272)
This is a matrix generalization of an operation called completing the square.5
Derive the corresponding result for the normal-Wishart model.Exercise 4.12 BIC for Gaussians
(Source: Jaakkola.)
The Bayesian information criterion (BIC) is a penalized log-likelihood function that can be used for model
selection (see Section 5.3.2.4). It is deﬁned as
BIC=l o gp(D|ˆθ
ML)−d
2log(N) (4.273)
wheredis the number of free parameters in the model and Nis the number of samples. In this question,
we will see how to use this to choose between a full covariance Gaussian and a Gaussian with a diagonalcovariance. Obviously a full covariance Gaussian has higher likelihood, but it may not be “worth” the extraparameters if the improvement over a diagonal covariance matrix is too small. So we use the BIC score tochoose the model.
Following Section 4.1.3, we can write
logp(D|ˆΣ,ˆμ)=−N
2tr/parenleftBig
ˆΣ−1ˆS/parenrightBig
−N
2log(ˆ|Σ|) (4.274)
ˆS=1
NN/summationdisplay
i=1(xi−x)(xi−x)T(4.275)
whereˆSis the scatter matrix (empirical covariance), the trace of a matrix is the sum of its diagonals, and
we have used the trace trick.
a. Derive the BIC score for a Gaussian in Ddimensions with full covariance matrix. Simplify your answer
as much as possible, exploiting the form of the MLE. Be sure to specify the number of free parameters
d.
b. Derive the BIC score for a Gaussian in Ddimensions with a diagonal covariance matrix. Be sure to
specify the number of free parameters d. Hint: for the digaonal case, the ML estimate of Σis the same
asˆΣMLexcept the off-diagonal terms are zero:
ˆΣdiag=d i a g (ˆΣML(1,1),...,ˆΣML(D,D)) (4.276)
5. In the scalar case, completing the square means rewriting c2x2+c1x+c0as−a(x−b)2+wwherea=−c2,
b=c1
2c2andw=c2
1
4c2+c0.
144 Chapter 4. Gaussian models
Exercise 4.13 Gaussian posterior credible interval
(Source: DeGroot.)
LetX∼N(μ,σ2=4 )whereμis unknown but has prior μ∼N(μ0,σ2
0=9 ). The posterior after
seeingnsamples is μ∼N(μn,σ2
n). (This is called a credible interval, and is the Bayesian analog of a
conﬁdence interval.) How big does nhave to be to ensure
p(/lscript≤μn≤u|D)≥0.95 (4.277)
where(/lscript,u)is an interval (centered on μn) of width 1 and Dis the data. Hint: recall that 95% of the
probability mass of a Gaussian is within ±1.96σof the mean.
Exercise 4.14 MAP estimation for 1D Gaussians
(Source: Jaakkola.)Consider samples x
1,...,x nfrom a Gaussian random variable with known variance σ2and unknown
meanμ. We further assume a prior distribution (also Gaussian) over the mean, μ∼N(m,s2), with ﬁxed
meanmand ﬁxed variance s2. Thus the only unknown is μ.
a. Calculate the MAP estimate ˆμMAP. You can state the result without proof. Alternatively, with a lot
more work, you can compute derivatives of the log posterior, set to zero and solve.
b. Show that as the number of samples nincrease, the MAP estimate converges to the maximum likelihood
estimate.
c. Suppose nis small and ﬁxed. What does the MAP estimator converge to if we increase the prior
variances2?
d. Suppose nis small and ﬁxed. What does the MAP estimator converge to if we decrease the prior
variances2?
Exercise 4.15 Sequential (recursive) updating of ˆΣ
(Source: (Duda et al. 2001, Q3.35,3.36).)The unbiased estimates for the covariance of a d-dimensional Gaussian based on nsamples is given by
ˆΣ=C
n=1
n−1n/summationdisplay
i=1(xi−mn)(xi−mn)T(4.278)
It is clear that it takes O(nd2)time to compute Cn. If the data points arrive one at a time, it is more
efficient to incrementally update these estimates than to recompute from scratch.
a. Show that the covariance can be sequentially udpated as follows
Cn+1=n−1
nCn+1
n+1(xn+1−mn)(xn+1−mn)T(4.279)
b. How much time does it take per sequential update? (Use big-O notation.)
c. Show that we can sequentially update the precision matrix using
C−1
n+1=n
n−1/bracketleftBigg
C−1
n−C−1
n(xn+1−mn)(xn+1−mn)TC−1
n
n2−1
n+(xn+1−mn)TC−1
n(xn+1−mn)/bracketrightBigg
(4.280)
Hint: notice that the update to Cn+1consists of adding a rank-one matrix, namely uuT,w h e r e
u=xn+1−mn. Use the matrix inversion lemma for rank-one updates (Equation 4.111), which we
repeat here for convenience:
(E+uvT)−1=E−1−E−1uvTE−1
1+vTE−1u(4.281)
4.6. Inferring the parameters of an MVN 145
d. What is the time complexity per update?
Exercise 4.16 Likelihood ratio for Gaussians
Source: Source: Alpaydin p103 ex 4. Consider a binary classiﬁer where the Kclass conditional densities
are MVN p(x|y=j)=N(x|μj,Σj). By Bayes rule, we have
logp(y=1|x)
p(y=0|x)=l o gp(x|y=1 )
p(x|y=0 )+logp(y=1 )
p(y=0 )(4.282)
In other words, the log posterior ratio is the log likelihood ratio plus the log prior ratio. For each of the 4
cases in the table below, derive an expression for the log likelihood ratio logp(x|y=1)
p(x|y=0), simplifying as much
as possible.
Form ofΣj Cov Num parameters
Arbitrary Σj Kd(d+1)/2
Shared Σj=Σ d(d+1)/2
Shared, axis-aligned Σj=ΣwithΣij=0fori/negationslash=jd
Shared, spherical Σj=σ2I 1
Exercise 4.17 LDA/QDA on height/weight data
The function discrimAnalysisHeightWeightDemo ﬁts an LDA and QDA model to the height/weight
data. Compute the misclassiﬁcation rate of both of these models on the training set. Turn in your numbers
and code.
Exercise 4.18 Naive Bayes with mixed features
Consider a 3 class naive Bayes classiﬁer with one binary feature and one Gaussian feature:
y∼Mu(y|π,1),x1|y=c∼Ber(x1|θc),x2|y=c∼N(x2|μc,σ2
c) (4.283)
Let the parameter vectors be as follows:
π=( 0.5,0.25,0.25),θ=( 0.5,0.5,0.5),μ=(−1,0,1),σ2=( 1,1,1) (4.284)
a. Compute p(y|x1=0,x2=0 )(the result should be a vector of 3 numbers that sums to 1).
b. Compute p(y|x1=0 ).
c. Compute p(y|x2=0 ).
d. Explain any interesting patterns you see in your results. Hint: look at the parameter vector θ.
Exercise 4.19 Decision boundary for LDA with semi tied covariances
Consider a generative classiﬁer with class conditional densities of the form N(x|μc,Σc). I nL D A ,w e
assumeΣc=Σ, and in QDA, each Σcis arbitrary. Here we consider the 2 class case in which
Σ1=kΣ0,f o rk>1. That is, the Gaussian ellipsoids have the same “shape”, but the one for class 1
is “wider”. Derive an expression for p(y=1|x,θ), simplifying as much as possible. Give a geometric
interpretation of your result, if possible.Exercise 4.20 Logistic regression vs LDA/QDA
(Source: Jaakkola.) Suppose we train the following binary classiﬁers via maximum likelihood.
a. GaussI: A generative classiﬁer, where the class conditional densities are Gaussian, with both covariance
matrices set to I(identity matrix), i.e., p(x|y=c)=N(x|μ
c,I). We assume p(y)is uniform.
b. GaussX: as for GaussI, but the covariance matrices are unconstrained, i.e., p(x|y=c)=N(x|μc,Σc).
146 Chapter 4. Gaussian models
c. LinLog: A logistic regression model with linear features.
d. QuadLog: A logistic regression model, using linear and quadratic features (i.e., polynomial basis function
expansion of degree 2).
After training we compute the performance of each model Mon the training set as follows:
L(M)=1
nn/summationdisplay
i=1logp(yi|xi,ˆθ,M) (4.285)
(Note that this is the conditional log-likelihood p(y|x,ˆθ)and not the joint log-likelihood p(y,x|ˆθ).) We
now want to compare the performance of each model. We will write L(M)≤L(M/prime)if modelMmust
have lower (or equal) log likelihood (on the training set) than M/prime, for any training set (in other words, Mis
worse than M/prime, at least as far as training set logprob is concerned). For each of the following model pairs,
state whether L(M)≤L(M/prime),L(M)≥L(M/prime), or whether no such statement can be made (i.e., M
might sometimes be better than M/primeand sometimes worse); also, for each question, brieﬂy (1-2 sentences)
explain why.
a. GaussI, LinLog.
b. GaussX, QuadLog.
c. LinLog, QuadLog.
d. GaussI, QuadLog.
e. Now suppose we measure performance in terms of the average misclassiﬁcation rate on the training
set:
R(M)=1
nn/summationdisplay
i=1I(yi/negationslash=ˆy(xi)) (4.286)
Is it true in general that L(M)>L(M/prime)implies that R(M)<R(M/prime)? Explain why or why not.
Exercise 4.21 Gaussian decision boundaries
(Source: (Duda et al. 2001, Q3.7).) Let p(x|y=j)=N(x|μj,σj)wherej=1,2andμ1=0,σ2
1=
1,μ2=1,σ2
2=1 06. Let the class priors be equal, p(y=1 )=p (y=2 )=0 .5.
a. Find the decision region
R1={x:p(x|μ1,σ1)≥p(x|μ2,σ2)} (4.287)
Sketch the result. Hint: draw the curves and ﬁnd where they intersect. Find bothsolutions of the
equation
p(x|μ1,σ1)=p(x|μ2,σ2) (4.288)
Hint: recall that to solve a quadratic equation ax2+bx+c=0,w eu s e
x=−b±√
b2−4ac
2a(4.289)
b. Now suppose σ2=1(and all other parameters remain the same). What is R1in this case?
4.6. Inferring the parameters of an MVN 147
Exercise 4.22 QDA with 3 classes
Consider a three category classiﬁcation problem. Let the prior probabilites:
P(Y=1 )=P (Y=2 )=P (Y=3 )=1 /3 (4.290)
The class-conditional densities are multivariate normal densities with parameters:
μ1=[ 0,0]T,μ2=[ 1,1]T,μ3=[−1,1]T(4.291)
Σ1=/bracketleftbigg0.70
00.7/bracketrightbigg
,Σ2=/bracketleftbigg0.80.2
0.20.8/bracketrightbigg
,Σ3=/bracketleftbigg0.80.2
0.20.8/bracketrightbigg
(4.292)
Classify the following points:
a.x=[−0.5,0.5]
b.x=[ 0.5,0.5]
Exercise 4.23 Scalar QDA
[Note: you can solve this exercise by hand or using a computer (matlab, R, whatever). In either case, show
your work.] Consider the following training set of heights x(in inches) and gender y(male/female) of some
US college students: x=( 6 7,79,71,68,67,60),y=(m,m,m,f,f,f ).
a. Fit a Bayes classiﬁer to this data, using maximum likelihood estimation, i.e., estimate the parameters of
the class conditional likelihoods
p(x|y=c)=N(x;μc,σc) (4.293)
and the class prior
p(y=c)=πc (4.294)
What are your values of μc,σc,πcforc=m,f? Show your work (so you can get partial credit if you
make an arithmetic error).
b. Compute p(y=m|x,ˆθ),w h e r ex=7 2, andˆθare the MLE parameters. (This is called a plug-in
prediction.)
c. What would be a simple way to extend this technique if you had multiple attributes per person, such
as height and weight? Write down your proposed model as an equation.

5 Bayesian statistics
5.1 Introduction
We have now seen a variety of different probability models, and we have discussed how to
ﬁt them to data, i.e., we have discussed how to compute MAP parameter estimates ˆθ=
argmaxp(θ|D), using a variety of different priors. We have also discussed how to compute
the full posterior p(θ|D), as well as the posterior predictive density, p(x|D), for certain special
cases (and in later chapters, we will discuss algorithms for the general case).
Using the posterior distribution to summarize everything we know about a set of unknown
variables is at the core of Bayesian statistics. In this chapter, we discuss this approach to
statistics in more detail. In Chapter 6, we discuss an alternative approach to statistics known asfrequentist or classical statistics.
5.2 Summarizing posterior distributions
The posterior p(θ|D)summarizes everything we know about the unknown quantities θ. In this
section, we discuss some simple quantities that can be derived from a probability distribution,such as a posterior. These summary statistics are often easier to understand and visualize thanthe full joint.
5.2.1 MAP estimation
We can easily compute a point estimate of an unknown quantity by computing the posterior
mean, median or mode. In Section 5.7, we discuss how to use decision theory to choose betweenthese methods. Typically the posterior mean or median is the most appropriate choice for a real-valued quantity, and the vector of posterior marginals is the best choice for a discrete quantity.However, the posterior mode, aka the MAP estimate, is the most popular choice because itreduces to an optimization problem, for which efficient algorithms often exist. Futhermore, MAPestimation can be interpreted in non-Bayesian terms, by thinking of the log prior as a regularizer(see Section 6.5 for more details).
Although this approach is computationally appealing, it is important to point out that there
are various drawbacks to MAP estimation, which we brieﬂy discuss below. This will providemotivation for the more thoroughly Bayesian approach which we will study later in this chapter(and elsewhere in this book).
150 Chapter 5. Bayesian statistics
−2 −1 0 1 2 3 400.511.522.533.544.5
(a)1 2 3 4 5 6 70.10.20.30.40.50.60.70.80.9
(b)
Figure 5.1 (a) A bimodal distribution in which the mode is very untypical of the distribution. The thin
blue vertical line is the mean, which is arguably a better summary of the distribution, since it is near the
majority of the probability mass. Figure generated by bimodalDemo . (b) A skewed distribution in which
the mode is quite different from the mean. Figure generated by gammaPlotDemo .
5.2.1.1 No measure of uncertainty
The most obvious drawback of MAP estimation, and indeed of any other point estimate such
as the posterior mean or median, is that it does not provide any measure of uncertainty. In
many applications, it is important to know how much one can trust a given estimate. We canderive such conﬁdence measures from the posterior, as we discuss in Section 5.2.2.
5.2.1.2 Plugging in the MAP estimate can result in overﬁtting
In machine learning, we often care more about predictive accuracy than in interpreting theparameters of our models. However, if we don’t model the uncertainty in our parameters, thenour predictive distribution will be overconﬁdent. We saw several examples of this in Chapter 3,and we will see more examples later. Overconﬁdence in predictions is particularly problematicin situations where we may be risk averse; see Section 5.7 for details.
5.2.1.3 The mode is an untypical point
Choosing the mode as a summary of a posterior distribution is often a very poor choice, sincethe mode is usually quite untypical of the distribution, unlike the mean or median. This isillustrated in Figure 5.1(a) for a 1d continuous space. The basic problem is that the mode is apoint of measure zero, whereas the mean and median take the volume of the space into account.Another example is shown in Figure 5.1(b): here the mode is 0, but the mean is non-zero. Suchskewed distributions often arise when inferring variance parameters, especially in hierarchicalmodels. In such cases the MAP estimate (and hence the MLE) is obviously a very bad estimate.
How should we summarize a posterior if the mode is not a good choice? The answer is to
use decision theory, which we discuss in Section 5.7. The basic idea is to specify a loss function,whereL(θ,ˆθ)is the loss you incur if the truth is θand your estimate is ˆθ. If we use 0-1 loss,
L(θ,ˆθ)=I(θ/negationslash=ˆθ), then the optimal estimate is the posterior mode. 0-1 loss means you only
get “points” if you make no errors, otherwise you get nothing: there is no “partial credit” under
5.2. Summarizing posterior distributions 151
0 2 4 6 8 10 1200.10.20.30.40.50.60.70.80.91
pXpYg
Figure 5.2 Example of the transformation of a density under a nonlinear transform. Note how the mode
of the transformed distribution is not the transform of the original mode. Based on Exercise 1.4 of (Bishop
2006b). Figure generated by bayesChangeOfVar .
this loss function! For continuous-valued quantities, we often prefer to use squared error loss,
L(θ,ˆθ)=(θ−ˆθ)2; the corresponding optimal estimator is then the posterior mean, as we show
in Section 5.7. Or we can use a more robust loss function, L(θ,ˆθ)=|θ−ˆθ|, which gives rise to
the posterior median.
5.2.1.4 MAP estimation is not invariant to reparameterization *
A more subtle problem with MAP estimation is that the result we get depends on how we pa-rameterize the probability distribution. Changing from one representation to another equivalentrepresentation changes the result, which is not very desirable, since the units of measurementare arbitrary (e.g., when measuring distance, we can use centimetres or inches).
To understand the problem, suppose we compute the posterior for x. If we deﬁne y=f(x),
the distribution for yis given by Equation 2.87, which we repeat here for convenience:
p
y(y)=px(x)⎨vextendsingle⎨vextendsingledx
dy⎨vextendsingle⎨vextendsingle (5.1)
The|dx
dy|term is called the Jacobian, and it measures the change in size of a unit volume passed
throughf.L e tˆx= argmaxxpx(x)be the MAP estimate for x. In general it is not the case
thatˆy= argmaxypy(y)is given by f(ˆx). For example, let x∼N(6,1)andy=f(x),w h e r e
f(x)=1
1+exp(−x+5)(5.2)
We can derive the distribution of yusing Monte Carlo simulation (see Section 2.7.1). The result
is shown in Figure 5.2. We see that the original Gaussian has become “squashed” by the sigmoid
nonlinearity. In particular, we see that the mode of the transformed distribution is not equal tothe transform of the original mode.
152 Chapter 5. Bayesian statistics
To see how this problem arises in the context of MAP estimation, consider the following
example, due to Michael Jordan. The Bernoulli distribution is typically parameterized by its
meanμ,s op(y=1|μ)=μ,w h e r ey∈{0,1}. Suppose we have a uniform prior on the
unit interval: pμ(μ)=1I(0≤μ≤1). If there is no data, the MAP estimate is just the
mode of the prior, which can be anywhere between 0 and 1. We will now show that differentparameterizations can pick different points in this interval arbitrarily.
First letθ=√
μsoμ=θ2. The new prior is
pθ(θ)=pμ(μ)⎨vextendsingle⎨vextendsingledμ
dθ⎨vextendsingle⎨vextendsingle=2θ (5.3)
forθ∈[0,1]so the new mode is
ˆθ
MAP=a r gm a x
θ∈[0,1]2θ=1 (5.4)
Now letφ=1−√1−μ. The new prior is
pφ(φ)=pμ(μ)⎨vextendsingle⎨vextendsingledμ
dφ⎨vextendsingle⎨vextendsingle=2 ( 1−φ) (5.5)
forφ∈[0,1], so the new mode is
ˆφ
MAP=a r gm a x
φ∈[0,1]2−2φ=0 (5.6)
Thus the MAP estimate depends on the parameterization. The MLE does not suffer from this
since the likelihood is a function, not a probability density. Bayesian inference does not sufferfrom this problem either, since the change of measure is taken into account when integratingover the parameter space.
One solution to the problem is to optimize the following objective function:
ˆθ=a r g m a x
θp(D|θ)p(θ)|I(θ)|−1
2 (5.7)
HereI(θ)is the Fisher information matrix associated with p(x|θ)(see Section 6.2.2). This
estimate is parameterization independent, for reasons explained in (Jermyn 2005; Druilhet andMarin 2007). Unfortunately, optimizing Equation 5.7 is often difficult, which minimizes theappeal of the whole approach.
5.2.2 Credible intervals
In addition to point estimates, we often want a measure of conﬁdence. A standard measure ofconﬁdence in some (scalar) quantity θis the “width” of its posterior distribution. This can be
measured using a 100(1−α)%credible interval, which is a (contiguous) region C=(/lscript,u)
(standing for lower and upper) which contains 1−αof the posterior probability mass, i.e.,
C
α(D)=(/lscript,u):P(/lscript≤θ≤u|D)=1−α (5.8)
There may be many such intervals, so we choose one such that there is (1−α)/2mass in each
tail; this is called a central interval.
5.2. Summarizing posterior distributions 153
0 0.2 0.4 0.6 0.8 100.511.522.533.5
(a)0 0.2 0.4 0.6 0.8 100.511.522.533.5
(b)
Figure 5.3 (a) Central interval and (b) HPD region for a Beta(3,9) posterior. The CI is (0.06, 0.52) and the
HPD is (0.04, 0.48). Based on Figure 3.6 of (Hoff 2009). Figure generated by betaHPD.
If the posterior has a known functional form, we can compute the posterior central interval
using/lscript=F−1(α/2)andu=F−1(1−α/2),w h e r eFis the cdf of the posterior. For example, if
the posterior is Gaussian, p(θ|D)=N(0,1), andα=0.05, then we have /lscript=Φ (α/2) =−1.96,
andu=Φ ( 1−α/2) = 1.96,w h e r e Φdenotes the cdf of the Gaussian. This is illustrated in
Figure 2.3(c). This justiﬁes the common practice of quoting a credible interval in the form of
μ±2σ,w h e r eμrepresents the posterior mean, σrepresents the posterior standard deviation,
and 2 is a good approximation to 1.96.
Of course, the posterior is not always Gaussian. For example, in our coin example, if we
use a uniform prior and we observe N1=4 7heads out of N= 100trials, then the posterior
is a beta distribution, p(θ|D) = Beta(48, 54). We ﬁnd the 95% posterior credible interval is
(0.3749,0.5673)(seebetaCredibleInt for the one line of Matlab code we used to compute
this).
If we don’t know the functional form, but we can draw samples from the posterior, then we
can use a Monte Carlo approximation to the posterior quantiles: we simply sort the Ssamples,
and ﬁnd the one that occurs at location α/Salong the sorted list. As S→∞, this converges
to the true quantile. See mcQuantileDemo for a demo.
People often confuse Bayesian credible intervals with frequentist conﬁdence intervals. How-
ever, they are not the same thing, as we discuss in Section 6.6.1. In general, credible intervals areusually what people want to compute, but conﬁdence intervals are usually what they actuallycompute, because most people are taught frequentist statistics but not Bayesian statistics. Fortu-nately, the mechanics of computing a credible interval is just as easy as computing a conﬁdenceinterval (see e.g., betaCredibleInt for how to do it in Matlab).
5.2.2.1 Highest posterior density regions *
A problem with central intervals is that there might be points outside the CI which have higherprobability density. This is illustrated in Figure 5.3(a), where we see that points outside theleft-most CI boundary have higher density than those just inside the right-most CI boundary.
This motivates an alternative quantity known as the highest posterior density orHPDregion.
This is deﬁned as the (set of) most probable points that in total constitute 100(1−α)% of the
154 Chapter 5. Bayesian statistics
α/2 α/2
(a)pMIN
(b)
Figure 5.4 (a) Central interval and (b) HPD region for a hypothetical multimodal posterior. Based on
Figure 2.2 of (Gelman et al. 2004). Figure generated by postDensityIntervals .
probability mass. More formally, we ﬁnd the threshold p∗on the pdf such that
1−α=⎨integraldisplay
θ:p(θ|D)>p∗p(θ|D)dθ (5.9)
and then deﬁne the HPD as
Cα(D)={θ:p(θ|D)≥p∗} (5.10)
In 1d, the HPD region is sometimes called a highest density interval orHDI. For example,
Figure 5.3(b) shows the 95% HDI of a Beta(3,9)distribution, which is (0.04,0.48). We see that
this is narrower than the CI, even though it still contains 95% of the mass; furthermore, every
point inside of it has higher density than every point outside of it.
For a unimodal distribution, the HDI will be the narrowest interval around the mode contain-
ing 95% of the mass. To see this, imagine “water ﬁlling” in reverse, where we lower the leveluntil 95% of the mass is revealed, and only 5% is submerged. This gives a simple algorithm forcomputing HDIs in the 1d case: simply search over points such that the interval contains 95%of the mass and has minimal width. This can be done by 1d numerical optimization if we knowthe inverse CDF of the distribution, or by search over the sorted data points if we have a bag ofsamples (see betaHPD for a demo).
If the posterior is multimodal, the HDI may not even be a connected region: see Figure 5.4(b)
for an example. However, summarizing multimodal posteriors is always difficult.
5.2.3 Inference for a difference in proportions
Sometimes we have multiple parameters, and we are interested in computing the posteriordistribution of some function of these parameters. For example, suppose you are about to buysomething from Amazon.com, and there are two sellers offering it for the same price. Seller 1has 90 positive reviews and 10 negative reviews. Seller 2 has 2 positive reviews and 0 negativereviews. Who should you buy from?
1
1. This example is from www.johndcook .com/blog/2011/09/27/bayesian-amazon . See also lingpipe-blog .c
om/2009/10/13/bayesian-counterpart-to-fisher-exact-test-on-contingency-tables .
5.3. Bayesian model selection 155
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 102468101214
  
p(θ1|data)
p(θ2|data)
(a)−0.4 −0.2 0 0.2 0.4 0.6 0.8 100.511.522.5
δpdf
(b)
Figure 5.5 (a) Exact posteriors p(θi|Di). (b) Monte Carlo approximation to p(δ|D). We use kernel density
estimation to get a smooth plot. The vertical lines enclose the 95% central interval. Figure generated by
amazonSellerDemo ,
On the face of it, you should pick seller 2, but we cannot be very conﬁdent that seller 2 is
better since it has had so few reviews. In this section, we sketch a Bayesian analysis of this
problem. Similar methodology can be used to compare rates or proportions across groups for avariety of other settings.
Letθ
1andθ2be the unknown reliabilities of the two sellers. Since we don’t know much
about them, we’ll endow them both with uniform priors, θi∼Beta(1,1). The posteriors are
p(θ1|D1) = Beta(91, 11)andp(θ2|D2) = Beta(3 ,1).
We want to compute p(θ1>θ2|D). For convenience, let us deﬁne δ=θ1−θ2as the
difference in the rates. (Alternatively we might want to work in terms of the log-odds ratio.) Wecan compute the desired quantity using numerical integration:
p(δ>0|D)=⎨integraldisplay
1
0⎨integraldisplay1
0I(θ1>θ2)Beta(θ1|y1+1,N1−y1+1)
Beta(θ2|y2+1,N2−y2+1)dθ1dθ2 (5.11)
We ﬁnd p(δ>0|D)=0.710, which means you are better off buying from seller 1! See
amazonSellerDemo for the code. (It is also possible to solve the integral analytically (Cook
2005).)
A simpler way to solve the problem is to approximate the posterior p(δ|D)by Monte Carlo
sampling. This is easy, since θ1andθ2are independent in the posterior, and both have beta
distributions, which can be sampled from using standard methods. The distributions p(θi|Di)
are shown in Figure 5.5(a), and a MC approximation to p(δ|D), together with a 95% HPD, is
shown Figure 5.5(b). An MC approximation to p(δ>0|D)is obtained by counting the fraction
of samples where θ1>θ2; this turns out to be 0.718, which is very close to the exact value. (See
amazonSellerDemo for the code.)
5.3 Bayesian model selection
In Figure 1.18, we saw that using too high a degree polynomial results in overﬁtting, and usingtoo low a degree results in underﬁtting. Similarly, in Figure 7.8(a), we saw that using too small
156 Chapter 5. Bayesian statistics
a regularization parameter results in overﬁtting, and too large a value results in underﬁtting. In
general, when faced with a set of models (i.e., families of parametric distributions) of differentcomplexity, how should we choose the best one? This is called the model selection problem.
One approach is to use cross-validation to estimate the generalization error of all the candiate
models, and then to pick the model that seems the best. However, this requires ﬁtting eachmodelKtimes, where Kis the number of CV folds. A more efficient approach is to compute
the posterior over models,
p(m|D)=p(D|m)p(m)
⎨summationtext
m∈Mp(m,D)(5.12)
From this, we can easily compute the MAP model, ˆm=a r g m a x p(m|D). This is called
Bayesian model selection.
If we use a uniform prior over models, p(m)∝1, this amounts to picking the model which
maximizes
p(D|m)=⎨integraldisplay
p(D|θ)p(θ|m)dθ (5.13)
This quantity is called the marginal likelihood, the integrated likelihood, or the evidence for
modelm. The details on how to perform this integral will be discussed in Section 5.3.2. But
ﬁrst we give an intuitive interpretation of what this quantity means.
5.3.1 Bayesian Occam’s razor
One might think that using p(D|m)to select models would always favor the model with the
most parameters. This is true if we use p(D|ˆθm)to select models, where ˆθmis the MLE or
MAP estimate of the parameters for model m, because models with more parameters will ﬁt the
data better, and hence achieve higher likelihood. However, if we integrate out the parameters,rather than maximizing them, we are automatically protected from overﬁtting: models withmore parameters do not necessarily have higher marginal likelihood. This is called the Bayesian
Occam’s razor effect (MacKay 1995b; Murray and Ghahramani 2005), named after the principle
known as Occam’s razor, which says one should pick the simplest model that adequately
explains the data.
One way to understand the Bayesian Occam’s razor is to notice that the marginal likelihood
can be rewritten as follows, based on the chain rule of probability (Equation 2.5):
p(D)=p(y
1)p(y2|y1)p(y3|y1:2)...p(yN|y1:N−1) (5.14)
where we have dropped the conditioning on xfor brevity. This is similar to a leave-one-out
cross-validation estimate (Section 1.4.8) of the likelihood, since we predict each future point givenall the previous ones. (Of course, the order of the data does not matter in the above expression.)If a model is too complex, it will overﬁt the “early” examples and will then predict the remainingones poorly.
Another way to understand the Bayesian Occam’s razor effect is to note that probabilities must
sum to one. Hence⎨summationtext
D/primep(D/prime|m)=1, where the sum is over all possible data sets. Complex
models, which can predict many things, must spread their probability mass thinly, and hencewill not obtain as large a probability for any given data set as simpler models. This is sometimes
5.3. Bayesian model selection 157
Figure 5.6 A schematic illustration of the Bayesian Occam’s razor. The broad (green) curve corresponds
to a complex model, the narrow (blue) curve to a simple model, and the middle (red) curve is just right.
Based on Figure 3.13 of (Bishop 2006a). See also (Murray and Ghahramani 2005, Figure 2) for a similar plot
produced on real data.
called the conservation of probability mass principle, and is illustrated in Figure 5.6. On the
horizontal axis we plot all possible data sets in order of increasing complexity (measured in
some abstract sense). On the vertical axis we plot the predictions of 3 possible models: a simple
one,M1; a medium one, M2; and a complex one, M3. We also indicate the actually observed
dataD0by a vertical line. Model 1 is too simple and assigns low probability to D0. Model 3
also assigns D0relatively low probability, because it can predict many data sets, and hence it
spreads its probability quite widely and thinly. Model 2 is “just right”: it predicts the observed
data with a reasonable degree of conﬁdence, but does not predict too many other things. Hence
model 2 is the most probable model.
As a concrete example of the Bayesian Occam’s razor, consider the data in Figure 5.7. We plot
polynomials of degrees 1, 2 and 3 ﬁt to N=5data points. It also shows the posterior over
models, where we use a Gaussian prior (see Section 7.6 for details). There is not enough data
to justify a complex model, so the MAP model is d=1. Figure 5.8 shows what happens when
N=3 0. Now it is clear that d=2is the right model (the data was in fact generated from a
quadratic).
As another example, Figure 7.8(c) plots logp(D|λ)vslog(λ), for the polynomial ridge regres-
sion model, where λranges over the same set of values used in the CV experiment. We see
that the maximum evidence occurs at roughly the same point as the minimum of the test MSE,
which also corresponds to the point chosen by CV.
When using the Bayesian approach, we are not restricted to evaluating the evidence at a
ﬁnite grid of values. Instead, we can use numerical optimization to ﬁnd λ∗=a r g m a xλp(D|λ).
This technique is called empirical Bayes ortype II maximum likelihood (see Section 5.6 for
details). An example is shown in Figure 7.8(b): we see that the curve has a similar shape to the
CV estimate, but it can be computed more efficiently.
158 Chapter 5. Bayesian statistics
−2 0 2 4 6 8 10 12−20−10010203040506070d=1, logev=−18.593, EB
(a)−2 0 2 4 6 8 10 12−80−60−40−20020406080d=2, logev=−20.218, EB
(b)
−2 0 2 4 6 8 10 12−200−150−100−50050100150200250300d=3, logev=−21.718, EB
(c)1 2 300.20.40.60.81
MP(M|D)N=5, method=EB
(d)
Figure 5.7 (a-c) We plot polynomials of degrees 1, 2 and 3 ﬁt to N=5data points using empirical
Bayes. The solid green curve is the true function, the dashed red curve is the prediction (dotted blue lines
represent ±σaround the mean). (d) We plot the posterior over models, p(d|D), assuming a uniform prior
p(d)∝1. Based on a ﬁgure by Zoubin Ghahramani. Figure generated by linregEbModelSelVsN .
5.3.2 Computing the marginal likelihood (evidence)
When discussing parameter inference for a ﬁxed model, we often wrote
p(θ|D,m)∝p(θ|m)p(D|θ,m) (5.15)
thus ignoring the normalization constant p(D|m). This is valid since p(D|m)is constant wrt θ.
However, when comparing models, we need to know how to compute the marginal likelihood,
p(D|m). In general, this can be quite hard, since we have to integrate over all possible parameter
values, but when we have a conjugate prior, it is easy to compute, as we now show.
Letp(θ)=q(θ)/Z0be our prior, where q(θ)is an unnormalized distribution, and Z0is
the normalization constant of the prior. Let p(D|θ)=q(D|θ)/Z/lscriptbe the likelihood, where Z/lscript
contains any constant factors in the likelihood. Finally let p(θ|D)=q(θ|D)/ZNbe our poste-
5.3. Bayesian model selection 159
−2 0 2 4 6 8 10 12−10010203040506070d=1, logev=−106.110, EB
(a)−2 0 2 4 6 8 10 12−1001020304050607080d=2, logev=−103.025, EB
(b)
−2 0 2 4 6 8 10 12−20020406080100d=3, logev=−107.410, EB
(c)1 2 300.20.40.60.81
MP(M|D)N=30, method=EB
(d)
Figure 5.8 Same as Figure 5.7 except now N=3 0. Figure generated by linregEbModelSelVsN .
rior, where q(θ|D)=q(D|θ)q(θ)is the unnormalized posterior, and ZNis the normalization
constant of the posterior. We have
p(θ|D)=p(D|θ)p(θ)
p(D)(5.16)
q(θ|D)
ZN=q(D|θ)q(θ)
Z/lscriptZ0p(D)(5.17)
p(D)=ZN
Z0Z/lscript(5.18)
So assuming the relevant normalization constants are tractable, we have an easy way to compute
the marginal likelihood. We give some examples below.
160 Chapter 5. Bayesian statistics
5.3.2.1 Beta-binomial model
LetusapplytheaboveresulttotheBeta-binomialmodel. Sinceweknow p(θ|D)=B e t a ( θ|a/prime,b/prime),
wherea/prime=a+N1andb/prime=b+N0, we know the normalization constant of the posterior is
B(a/prime,b/prime). Hence
p(θ|D)=p(D|θ)p(θ)
p(D)(5.19)
=1
p(D)⎨bracketleftbigg1
B(a,b)θa−1(1−θ)b−1⎨bracketrightbigg⎨bracketleftbigg⎨parenleftbiggN
N1⎨parenrightbigg
θN1(1−θ)N0⎨bracketrightbigg
(5.20)
=⎨parenleftbiggN
N1⎨parenrightbigg1
p(D)1
B(a,b)⎨bracketleftbig
θa+N 1−1(1−θ)b+N 0−1⎨bracketrightbig
(5.21)
So
1
B(a+N1,b+N0)=⎨parenleftbiggN
N1⎨parenrightbigg1
p(D)1
B(a,b)(5.22)
p(D)=⎨parenleftbiggN
N1⎨parenrightbiggB(a+N1,b+N0)
B(a,b)(5.23)
The marginal likelihood for the Beta-Bernoulli model is the same as above, except it is missing
the⎨parenleftbigN
N1⎨parenrightbig
term.
5.3.2.2 Dirichlet-multinoulli model
By the same reasoning as the Beta-Bernoulli case, one can show that the marginal likelihood forthe Dirichlet-multinoulli model is given by
p(D)=B(N+α)
B(α)(5.24)
where
B(α)=⎨producttextK
k=1Γ(αk)
Γ(⎨summationtext
kαk)(5.25)
Hence we can rewrite the above result in the following form, which is what is usually presented
in the literature:
p(D)=Γ(⎨summationtext
kαk)
Γ(N+⎨summationtext
kαk)⎨productdisplay
kΓ(Nk+αk)
Γ(αk)(5.26)
We will see many applications of this equation later.
5.3.2.3 Gaussian-Gaussian-Wishart model
Consider the case of an MVN with a conjugate NIW prior. Let Z0be the normalizer for the
prior,ZNbe normalizer for the posterior, and let Zl=( 2π)ND/2be the normalizer for the
5.3. Bayesian model selection 161
likelihood. Then it is easy to see that
p(D)=ZN
Z0Zl(5.27)
=1
πND/21
2ND/2⎨parenleftBig
2π
κN⎨parenrightBigD/2
|SN|−νN/22(ν0+N)D/2ΓD(νN/2)
⎨parenleftBig
2π
κ0⎨parenrightBigD/2
|S0|−ν0/22ν0D/2ΓD(ν0/2)(5.28)
=1
πND/2⎨parenleftbiggκ0
κN⎨parenrightbiggD/2|S0|ν0/2
|SN|νN/2ΓD(νN/2)
ΓD(ν0/2)(5.29)
This equation will prove useful later.
5.3.2.4 BIC approximation to log marginal likelihood
In general, computing the integral in Equation 5.13 can be quite difficult. One simple but popular
approximation is known as the Bayesian information criterion orBIC, which has the following
form (Schwarz 1978):
BIC/defineslogp(D|ˆθ)−dof(ˆθ)
2logN≈logp(D) (5.30)
wheredof(ˆθ)is the number of degrees of freedom in the model, and ˆθis the MLE for the
model.2We see that this has the form of a penalized log likelihood, where the penalty term
depends on the model’s complexity. See Section 8.4.2 for the derivation of the BIC score.
As an example, consider linear regression. As we show in Section 7.3, the MLE is given by ˆw=
(XTX)−1XTyandˆσ2=R S S/N,w h e r eRSS =⎨summationtextN
i=1(yi−ˆwT
mlexi)2. The corresponding
log likelihood is given by
logp(D|ˆθ)=−N
2log(2πˆσ2)−N
2(5.31)
Hence the BIC score is as follows (dropping constant terms)
BIC=−N
2log(ˆσ2)−D
2log(N) (5.32)
whereDis the number of variables in the model. In the statistics literature, it is common to
use an alternative deﬁnition of BIC, which we call the BIC cost(since we want to minimize it):
BIC-cost /defines−2logp(D|ˆθ)+dof(ˆθ)logN≈−2logp(D) (5.33)
In the context of linear regression, this becomes
BIC-cost=Nlog(ˆσ2)+Dlog(N) (5.34)
2. Traditionally the BIC score is deﬁned using the ML estimate ˆθ, so it is independent of the prior. However, for models
such as mixtures of Gaussians, the ML estimate can be poorly behaved, so it is better to evaluate the BIC score using
the MAP estimate, as in (Fraley and Raftery 2007).
162 Chapter 5. Bayesian statistics
The BIC method is very closely related to the minimum description length orMDLprinciple,
which characterizes the score for a model in terms of how well it ﬁts the data, minus how
complex the model is to deﬁne. See (Hansen and Yu 2001) for details.
There is a very similar expression to BIC/ MDL called the Akaike information criterion or
AIC, deﬁned as
AIC(m,D)/defineslogp(D|ˆθMLE)−dof(m) (5.35)
This is derived from a frequentist framework, and cannot be interpreted as an approximationto the marginal likelihood. Nevertheless, the form of this expression is very similar to BIC. Wesee that the penalty for AIC is less than for BIC. This causes AIC to pick more complex models.However, this can result in better predictive accuracy. See e.g., (Clarke et al. 2009, sec 10.2) forfurther discussion on such information criteria.
5.3.2.5 Effect of the prior
Sometimes it is not clear how to set the prior. When we are performing posterior inference, thedetails of the prior may not matter too much, since the likelihood often overwhelms the prioranyway. But when computing the marginal likelihood, the prior plays a much more importantrole, since we are averaging the likelihood over all possible parameter settings, as weighted bythe prior.
In Figures 5.7 and 5.8, where we demonstrated model selection for linear regression, we used
a prior of the form p(w)=N(0,α
−1I).H e r eαis a tuning parameter that controls how strong
the prior is. This parameter can have a large effect, as we discuss in Section 7.5. Intuitively, ifαis large, the weights are “forced” to be small, so we need to use a complex model with many
small parameters (e.g., a high degree polynomial) to ﬁt the data. Conversely, if αis small, we
will favor simpler models, since each parameter is “allowed” to vary in magnitude by a lot.
If the prior is unknown, the correct Bayesian procedure is to put a prior on the prior. That is,
we should put a prior on the hyper-parameter αas well as the parametrs w. To compute the
marginal likelihood, we should integrate out all unknowns, i.e., we should compute
p(D|m)=⎨integraldisplay⎨integraldisplay
p(D|w)p(w|α,m)p(α|m)dwdα (5.36)
Of course, this requires specifying the hyper-prior. Fortunately, the higher up we go in theBayesian hierarchy, the less sensitive are the results to the prior settings. So we can usuallymake the hyper-prior uninformative.
A computational shortcut is to optimize αrather than integrating it out. That is, we use
p(D|m)≈⎨integraldisplay
p(D|w)p(w|ˆα,m)dw (5.37)
where
ˆα=a r g m a x
αp(D|α,m) = argmax
α⎨integraldisplay
p(D|w)p(w|α,m)dw (5.38)
This approach is called empirical Bayes (EB), and is discussed in more detail in Section 5.6. Thisis the method used in Figures 5.7 and 5.8.
5.3. Bayesian model selection 163
Bayes factor BF(1,0) Interpretation
BF <1
100Decisive evidence for M0
BF <1
10Strong evidence for M0
1
10<BF<1
3Moderate evidence for M0
1
3<BF<1 Weak evidence for M0
1<BF<3 Weak evidence for M1
3<BF<10 Moderate evidence for M1
BF >10 Strong evidence for M1
BF >100 Decisive evidence for M1
Table 5.1 Jeffreys’ scale of evidence for interpreting Bayes factors.
5.3.3 Bayes factors
Suppose our prior on models is uniform, p(m)∝1. Then model selection is equivalent to
picking the model with the highest marginal likelihood. Now suppose we just have two models
we are considering, call them the null hypothesis, M0, and the alternative hypothesis, M1.
Deﬁne the Bayes factor as the ratio of marginal likelihoods:
BF1,0/definesp(D|M1)
p(D|M0)=p(M1|D)
p(M0|D)/p(M1)
p(M0)(5.39)
(This is like a likelihood ratio, except we integrate out the parameters, which allows us to
compare models of different complexity.) If BF1,0>1then we prefer model 1, otherwise we
prefer model 0.
Of course, it might be that BF1,0is only slightly greater than 1. In that case, we are not
very conﬁdent that model 1 is better. Jeffreys (1961) proposed a scale of evidence for interpretingthe magnitude of a Bayes factor, which is shown in Table 5.1. This is a Bayesian alternative tothe frequentist concept of a p-value.
3Alternatively, we can just convert the Bayes factor to a
posterior over models. If p(M1)=p(M0)=0.5,w eh a v e
p(M0|D)=BF0,1
1+BF0,1=1
BF1,0+1(5.40)
5.3.3.1 Example: Testing if a coin is fair
Suppose we observe some coin tosses, and want to decide if the data was generated by a faircoin,θ=0.5, or a potentially biased coin, where θcould be any value in [0,1]. Let us denote
the ﬁrst model by M
0and the second model by M1. The marginal likelihood under M0is
simply
p(D|M0)=⎨parenleftbigg1
2⎨parenrightbiggN
(5.41)
3. Ap-value, is deﬁned as the probability (under the null hypothesis) of observing some test statistic f(D)(such as the
chi-squared statistic) that is as large or largerthan that actually observed, i.e., pvalue(D)/definesP(f(˜D)≥f(D)|˜D∼
H0). Note that has almost nothing to do with what we really want to know, which is p(H0|D).
164 Chapter 5. Bayesian statistics
01111122222222223333333333444445−1.8−1.6−1.4−1.2−1−0.8−0.6−0.4log10 p(D|M1)
(a)01111122222222223333333333444445−2.5−2.45−2.4−2.35−2.3−2.25−2.2−2.15−2.1−2.05−2BIC approximation to log10 p(D|M1)
(b)
Figure 5.9 (a) Log marginal likelihood for the coins example. (b) BIC approximation. Figure generated by
coinsModelSelDemo .
whereNis the number of coin tosses. The marginal likelihood under M1, using a Beta prior, is
p(D|M1)=⎨integraldisplay
p(D|θ)p(θ)dθ=B(α1+N1,α0+N0)
B(α1,α0)(5.42)
We plotlogp(D|M1)vs the number of heads N1in Figure 5.9(a), assuming N=5and
α1=α0=1. (The shape of the curve is not very sensitive to α1andα0, as long as α0=α1.)
If we observe 2 or 3 heads, the unbiased coin hypothesis M0is more likely than M1, sinceM0
is a simpler model (it has no free parameters) — it would be a suspicious coincidence if the
coin were biased but happened to produce almost exactly 50/50 heads/tails. However, as thecounts become more extreme, we favor the biased coin hypothesis. Note that, if we plot the logBayes factor, logBF
1,0, it will have exactly the same shape, since logp(D|M0)is a constant.
See also Exercise 3.18.
In Figure 5.9(b) shows the BIC approximation to logp(D|M1)for our biased coin example
from Section 5.3.3.1. We see that the curve has approximately the same shape as the exact logmarginal likelihood, which is all that matters for model selection purposes, since the absolutescale is irrelevant. In particular, it favors the simpler model unless the data is overwhelminglyin support of the more complex model.
5.3.4 Jeffreys-Lindley paradox *
Problems can arise when we use improper priors (i.e., priors that do not integrate to 1) for modelselection/ hypothesis testing, even though such priors may be acceptable for other purposes. Forexample, consider testing the hypotheses M
0:θ∈Θ0vsM1:θ∈Θ1. To deﬁne the marginal
density on θ, we use the following mixture model
p(θ)=p( θ|M0)p(M0)+p(θ|M1)p(M1) (5.43)
5.4. Priors 165
This is only meaningful if p(θ|M0)andp(θ|M1)are proper (normalized) density functions. In
this case, the posterior is given by
p(M0|D)=p(M0)p(D|M0)
p(M0)p(D|M0)+p(M1)p(D|M1)(5.44)
=p(M0)⎨integraltext
Θ0p(D|θ)p(θ|M0)dθ
p(M0)⎨integraltext
Θ0p(D|θ)p(θ|M0)dθ+p(M1)⎨integraltext
Θ1p(D|θ)p(θ|M1)dθ(5.45)
Now suppose we use improper priors, p(θ|M0)∝c0andp(θ|M1)∝c1. Then
p(M0|D)=p(M0)c0⎨integraltext
Θ0p(D|θ)dθ
p(M0)c0⎨integraltext
Θ0p(D|θ)dθ+p(M1)c1⎨integraltext
Θ1p(D|θ)dθ(5.46)
=p(M0)c0/lscript0
p(M0)c0/lscript0+p(M1)c1/lscript1(5.47)
where/lscripti=⎨integraltext
Θip(D|θ)dθis the integrated or marginal likelihood for model i. Now let p(M0)=
p(M1)=1
2. Hence
p(M0|D)=c0/lscript0
c0/lscript0+c1/lscript1=/lscript0
/lscript0+(c1/c0)/lscript1(5.48)
Thus we can change the posterior arbitrarily by choosing c1andc0as we please. Note that
using proper, but very vague, priors can cause similar problems. In particular, the Bayes factor
will always favor the simpler model, since the probability of the observed data under a complexmodel with a very diffuse prior will be very small. This is called the Jeffreys-Lindley paradox.
Thus it is important to use proper priors when performing model selection. Note, however,
that, ifM
0andM1share the same prior over a subset of the parameters, this part of the prior
can be improper, since the corresponding normalization constant will cancel out.
5.4 Priors
The most controversial aspect of Bayesian statistics is its reliance on priors. Bayesians arguethis is unavoidable, since nobody is a tabula rasa orblank slate: all inference must be done
conditional on certain assumptions about the world. Nevertheless, one might be interested inminimizing the impact of one’s prior assumptions. We brieﬂy discuss some ways to do thisbelow.
5.4.1 Uninformative priors
If we don’t have strong beliefs about what θshould be, it is common to use an uninformative
ornon-informative prior, and to “let the data speak for itself”.
The issue of designing uninformative priors is actually somewhat tricky. As an example
of the difficulty, consider a Bernoulli parameter, θ∈[0,1]. One might think that the most
uninformative prior would be the uniform distribution, Beta(1,1). But the posterior mean in
this case is E[θ|D]=N1+1
N1+N 0+2, whereas the MLE isN1
N1+N 0. Hence one could argue that the
prior wasn’t completely uninformative after all.
166 Chapter 5. Bayesian statistics
Clearly by decreasing the magnitude of the pseudo counts, we can lessen the impact of the
prior. By the above argument, the most non-informative prior is
lim
c→0Beta(c,c) = Beta(0 ,0) (5.49)
which is a mixture of two equal point masses at 0 and 1 (see (Zhu and Lu 2004)). This is also
called the Haldane prior. Note that the Haldane prior is an improper prior, meaning it does not
integrate to 1. However, as long as we see at least one head and at least one tail, the posteriorwill be proper.
In Section 5.4.2.1 we will argue that the “right” uninformative prior is in fact Beta(
1
2,1
2).
Clearly the difference in practice between these three priors is very likely negligible. In general,it is advisable to perform some kind of sensitivity analysis, in which one checks how much
one’s conclusions or predictions change in response to change in the modeling assumptions,which includes the choice of prior, but also the choice of likelihood and any kind of data pre-processing. If the conclusions are relatively insensitive to the modeling assumptions, one canhave more conﬁdence in the results.
5.4.2 Jeffreys priors *
Harold Jeffreys4designed a general purpose technique for creating non-informative priors. The
result is known as the Jeffreys prior. The key observation is that if p(φ)is non-informative,
then any re-parameterization of the prior, such as θ=h(φ)for some function h, should also
be non-informative. Now, by the change of variables formula,
pθ(θ)=pφ(φ)⎨vextendsingle⎨vextendsingledφ
dθ⎨vextendsingle⎨vextendsingle (5.50)
so the prior will in general change. However, let us pick
p
φ(φ)∝(I(φ))1
2 (5.51)
whereI(φ)is theFisher information:
I(φ)/defines−E⎨bracketleftbigg⎨parenleftbiggdlogp(X|φ)
dφ⎨parenrightbigg
2⎨bracketrightbigg
(5.52)
This is a measure of curvature of the expected negative log likelihood and hence a measure of
stability of the MLE (see Section 6.2.2). Now
dlogp(x|θ)
dθ=dlogp(x|φ)
dφdφ
dθ(5.53)
Squaring and taking expectations over x,w eh a v e
I(θ)=−E⎨bracketleftBigg⎨parenleftbiggdlogp(X|θ)
dθ⎨parenrightbigg2⎨bracketrightBigg
=I(φ)⎨parenleftbiggdφ
dθ⎨parenrightbigg2
(5.54)
I(θ)1
2=I(φ)1
2⎨vextendsingle⎨vextendsingledφ
dθ⎨vextendsingle⎨vextendsingle (5.55)
4. Harold Jeffreys, 1891 – 1989, was an English mathematician, statistician, geophysicist, and astronomer.
5.4. Priors 167
so we ﬁnd the transformed prior is
pθ(θ)=p φ(φ)⎨vextendsingle⎨vextendsingledφ
dθ⎨vextendsingle⎨vextendsingle∝(I(φ))1
2⎨vextendsingle⎨vextendsingledφ
dθ⎨vextendsingle⎨vextendsingle=I(θ)1
2 (5.56)
Sopθ(θ)andpφ(φ)are the same.
Some examples will make this clearer.
5.4.2.1 Example: Jeffreys prior for the Bernoulli and multinoulli
SupposeX∼Ber(θ). The log likelihood for a single sample is
logp(X|θ)=Xlogθ+(1−X)log(1−θ) (5.57)
Thescore function is just the gradient of the log-likelihood:
s(θ)/definesd
dθlogp(X|θ)=X
θ−1−X
1−θ(5.58)
Theobserved information is the second derivative of the log-likelihood:
J(θ)=−d2
dθ2logp(X|θ)=−s/prime(θ|X)=X
θ2+1−X
(1−θ)2(5.59)
The Fisher information is the expected information:
I(θ)=E [J(θ|X)|X∼θ]=θ
θ2+1−θ
(1−θ)2=1
θ(1−θ)(5.60)
Hence Jeffreys’ prior is
p(θ)∝θ−1
2(1−θ)−1
2=1⎨radicalbig
θ(1−θ)∝Beta(1
2,1
2) (5.61)
Now consider a multinoulli random variable with Kstates. One can show that the Jeffreys’
prior is given by
p(θ)∝Dir(1
2,...,1
2) (5.62)
Note that this is different from the more obvious choices of Dir(1
K,...,1
K)orDir(1,...,1).
5.4.2.2 Example: Jeffreys prior for location and scale parameters
One can show that the Jeffreys prior for a location parameter, such as the Gaussian mean, is
p(μ)∝1. Thus is an example of a translation invariant prior, which satisﬁes the property
that the probability mass assigned to any interval, [A,B]is the same as that assigned to any
other shifted interval of the same width, such as [A−c,B−c]. That is,
⎨integraldisplayB−c
A−cp(μ)dμ=(A−c)−(B−c)=(A−B)=⎨integraldisplayB
Ap(μ)dμ (5.63)
168 Chapter 5. Bayesian statistics
This can be achieved using p(μ)∝1, which we can approximate by using a Gaussian with
inﬁnite variance, p(μ)=N(μ|0,∞). Note that this is an improper prior, since it does not
integrate to 1. Using improper priors is ﬁne as long as the posterior is proper, which will be the
case provided we have seen N≥1data points, since we can “nail down” the location as soon
as we have seen a single data point.
Similarly, one can show that the Jeffreys prior for a scale parameter, such as the Gaussian
variance, is p(σ2)∝1/σ2. This is an example of a scale invariant prior, which satisﬁes the
property that the probability mass assigned to any interval [A,B]is the same as that assigned
to any other interval [A/c,B/c] which is scaled in size by some constant factor c>0.( F o r
example, if we change units from meters to feet we do not want that to affect our inferences.)This can be achieved by using
p(s)∝1/s (5.64)
To see this, note that
⎨integraldisplay
B/c
A/cp(s)ds= [logs]B/c
A/c= log(B/c )−log(A/c) (5.65)
= log(B )−log(A)=⎨integraldisplayB
Ap(s)ds (5.66)
WecanapproximatethisusingadegenerateGammadistribution(Section2.4.4), p(s)=G a (s|0,0).
The prior p(s)∝1/sis also improper, but the posterior is proper as soon as we have seen
N≥2data points (since we need at least two data points to estimate a variance).
5.4.3 Robust priors
In many cases, we are not very conﬁdent in our prior, so we want to make sure it does not have
an undue inﬂuence on the result. This can be done by using robust priors (Insua and Ruggeri
2000), which typically have heavy tails, which avoids forcing things to be too close to the priormean.
Let us consider an example from (Berger 1985, p7). Suppose x∼N(θ,1). We observe that
x=5and we want to estimate θ. The MLE is of course ˆθ=5, which seems reasonable. The
posterior mean under a uniform prior is also
θ=5. But now suppose we know that the prior
median is 0, and the prior quantiles are at -1 and 1, so p(θ≤−1) =p(−1<θ≤0) =p(0<
θ≤1) =p(1<θ)=0.25. Let us also assume the prior is smooth and unimodal.
It is easy to show that a Gaussian prior of the form N(θ|0,2.192)satisﬁes these prior
constraints. But in this case the posterior mean is given by 3.43, which doesn’t seem verysatisfactory.
Now suppose we use as a Cauchy prior T(θ|0,1,1). This also satisﬁes the prior constraints of
our example. But this time we ﬁnd (using numerical method integration: see robustPriorDemo
for the code) that the posterior mean is about 4.6, which seems much more reasonable.
5.4.4 Mixtures of conjugate priors
Robust priors are useful, but can be computationally expensive to use. Conjugate priors simplifythe computation, but are often not robust, and not ﬂexible enough to encode our prior knowl-
5.4. Priors 169
edge. However, it turns out that a mixture of conjugate priors is also conjugate (Exercise 5.1),
and can approximate any kind of prior (Dallal and Hall 1983; Diaconis and Ylvisaker 1985). Thus
such priors provide a good compromise between computational convenience and ﬂexibility.
For example, suppose we are modeling coin tosses, and we think the coin is either fair, or
is biased towards heads. This cannot be represented by a beta distribution. However, we canmodel it using a mixture of two beta distributions. For example, we might use
p(θ)=0.5B e t a (θ|20,20)+0.5B e t a (θ|30,10) (5.67)
Ifθcomes from the ﬁrst distribution, the coin is fair, but if it comes from the second, it is
biased towards heads.
We can represent a mixture by introducing a latent indicator variable z,w h e r ez=kmeans
thatθcomes from mixture component k. The prior has the form
p(θ)=⎨summationdisplay
kp(z=k)p(θ|z=k) (5.68)
where each p(θ|z=k)is conjugate, and p(z=k)are called the (prior) mixing weights. One can
show (Exercise 5.1) that the posterior can also be written as a mixture of conjugate distributionsas follows:
p(θ|D)=⎨summationdisplay
kp(z=k|D)p(θ|D,z=k) (5.69)
wherep(Z=k|D)are the posterior mixing weights given by
p(Z=k|D)=p(Z=k)p(D|Z=k)⎨summationtext
k/primep(Z=k/prime)p(D|Z=k/prime)(5.70)
Here the quantity p(D|Z=k)is the marginal likelihood for mixture component k(see Sec-
tion 5.3.2.1).
5.4.4.1 Example
Suppose we use the mixture prior
p(θ)=0.5Beta(θ|a1,b1)+0.5Beta(θ|a2,b2) (5.71)
wherea1=b1=2 0anda2=b2=1 0. and we observe N1heads and N0tails. The posterior
becomes
p(θ|D)=p(Z=1|D)Beta(θ|a1+N1,b1+N0)+p(Z=2|D)Beta(θ|a2+N1,b2+N0)(5.72)
IfN1=2 0heads and N0=1 0tails, then, using Equation 5.23, the posterior becomes
p(θ|D)=0.346 Beta(θ |40,30)+0.654 Beta(θ |50,20) (5.73)
See Figure 5.10 for an illustration.
170 Chapter 5. Bayesian statistics
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 100.511.522.533.544.55mixture of Beta distributions
  
prior
posterior
Figure 5.10 A mixture of two Beta distributions. Figure generated by mixBetaDemo .
5.4.4.2 Application: Finding conserved regions in DNA and protein sequences
We mentioned that Dirichlet-multinomial models are widely used in biosequence analysis. Let
us give a simple example to illustrate some of the machinery that has developed. Speciﬁcally,consider the sequence logo discussed in Section 2.3.2.1. Now suppose we want to ﬁnd locationswhich represent coding regions of the genome. Such locations often have the same letter acrossall sequences, because of evolutionary pressure. So we need to ﬁnd columns which are “pure”,or nearly so, in the sense that they are mostly all As, mostly all Ts, mostly all Cs, or mostly allGs. One approach is to look for low-entropy columns; these will be ones whose distribution isnearly deterministic (pure).
But suppose we want to associate a conﬁdence measure with our estimates of purity. This
can be useful if we believe adjacent locations are conserved together. In this case, we can letZ
1=1if location tis conserved, and let Zt=0otherwise. We can then add a dependence
between adjacent Ztvariables using a Markov chain; see Chapter 17 for details.
In any case, we need to deﬁne a likelihood model, p(Nt|Zt),w h e r eNtis the vector of
(A,C,G,T) counts for column t. It is natural to make this be a multinomial distribution with
parameter θt. Since each column has a different distribution, we will want to integrate out θt
and thus compute the marginal likelihood
p(Nt|Zt)=⎨integraldisplay
p(Nt|θt)p(θt|Zt)dθt (5.74)
But what prior should we use for θt? WhenZt=0we can use a uniform prior, p(θ|Zt=0 )=
Dir(1,1,1,1), but what should we use if Zt=1? After all, if the column is conserved, it could
be a (nearly) pure column of As, Cs, Gs, or Ts. A natural approach is to use a mixture of Dirichletpriors, each one of which is “tilted” towards the appropriate corner of the 4-dimensional simplex,e.g.,
p(θ|Z
t=1 )=1
4Dir(θ|(10,1,1,1))+···+1
4Dir(θ|(1,1,1,10)) (5.75)
Since this is conjugate, we can easily compute p(Nt|Zt). See (Brown et al. 1993) for an
5.5. Hierarchical Bayes 171
application of these ideas to a real bio-sequence problem.
5.5 Hierarchical Bayes
A key requirement for computing the posterior p(θ|D)is the speciﬁcation of a prior p(θ|η),
whereηare the hyper-parameters. What if we don’t know how to set η? In some cases, we can
use uninformative priors, we we discussed above. A more Bayesian approach is to put a prior on
our priors! In terms of graphical models (Chapter 10), we can represent the situation as follows:
η→θ→D (5.76)
This is an example of a hierarchical Bayesian model, also called a multi-level model, since
there are multiple levels of unknown quantities. We give a simple example below, and we willsee many others later in the book.
5.5.1 Example: modeling related cancer rates
Consider the problem of predicting cancer rates in various cities (this example is from (Johnsonand Albert 1999, p24)). In particular, suppose we measure the number of people in variouscities,N
i, and the number of people who died of cancer in these cities, xi. We assume
xi∼Bin(N i,θi), and we want to estimate the cancer rates θi. One approach is to estimate
them all separately, but this will suffer from the sparse data problem (underestimation of therate of cancer due to small N
i). Another approach is to assume all the θiare the same; this is
calledparameter tying. The resulting pooled MLE is just ˆθ=/summationtext
ixi/summationtext
iNi. But the assumption that
all the cities have the same rate is a rather strong one. A compromise approach is to assumethat theθ
iare similar, but that there may be city-speciﬁc variations. This can be modeled by
assuming the θiare drawn from some common distribution, say θi∼Beta(a,b). The full joint
distribution can be written as
p(D,θ,η|N)=p( η)N⎨productdisplay
i=1Bin(xi|Ni,θi)Beta(θi|η) (5.77)
whereη=(a,b).
Note that it is crucial that we infer η=(a,b)from the data; if we just clamp it to a constant,
theθiwill be conditionally independent, and there will be no information ﬂow between them.
By contrast, by treating ηas an unknown (hidden variable), we allow the data-poor cities to
borrow statistical strength from data-rich ones.
Suppose we compute the joint posterior p(η,θ|D). From this we can get the posterior
marginals p(θi|D). In Figure 5.11(a), we plot the posterior means, E[θi|D], as blue bars, as well
as the population level mean, E[a/(a+b)|D], shown as a red line (this represents the average
of theθi’s). We see that the posterior mean is shrunk towards the pooled estimate more strongly
for cities with small sample sizes Ni. For example, city 1 and city 20 both have a 0 observed
cancer incidence rate, but city 20 has a smaller population, so its rate is shrunk more towardsthe population-level estimate (i.e., it is closer to the horizontal red line) than city 1.
Figure 5.11(b) shows the 95% posterior credible intervals for θ
i. We see that city 15, which has
a very large population (53,637 people), has small posterior uncertainty. Consequently this city
172 Chapter 5. Bayesian statistics
0 5 10 15 20 2505number of people with cancer (truncated at 5)
0 5 10 15 20 25010002000pop of city (truncated at 2000)
0 5 10 15 20 250510MLE*1000 (red line=pooled MLE)
0 5 10 15 20 25024posterior mean*1000 (red line=pop mean)
(a)0 1 2 3 4 5 6 7 8
x 10−30246810121416182095% credible interval on theta, *=median
(b)
Figure 5.11 (a) Results of ﬁtting the model using the data from (Johnson and Albert 1999, p24). First
row: Number of cancer incidents xiin 20 cities in Missouri. Second row: population size Ni. The largest
city (number 15) has a population of N15= 53637 andx15=5 4incidents, but we truncate the vertical
axes of the ﬁrst two rows so that the differences between the other cities are visible. Third row: MLE ˆθi.
The red line is the pooled MLE. Fourth row: posterior mean E[θi|D]. The red line is E[a/(a+b)|D],
the population-level mean. (b) Posterior 95% credible intervals on the cancer rates. Figure generated by
cancerRatesEb
has the largest impact on the posterior estimate of η, which in turn will impact the estimate of
the cancer rates for other cities. Cities 10 and 19, which have the highest MLE, also have the
highest posterior uncertainty, reﬂecting the fact that such a high estimate is in conﬂict with theprior (which is estimated from all the other cities).
In the above example, we have one parameter per city, modeling the probability the response
is on. By making the Bernoulli rate parameter be a function of covariates, θ
i=s i g m (wT
ix),w e
can model multiple correlated logistic regression tasks. This is called multi-task learning, and
will be discussed in more detail in Section 9.5.
5.6 Empirical Bayes
In hierarchical Bayesian models, we need to compute the posterior on multiple levels of latentvariables. For example, in a two-level model, we need to compute
p(η,θ|D)∝p(D|θ)p(θ|η)p(η) (5.78)
In some cases, we can analytically marginalize out θ; this leaves is with the simpler problem of
just computing p(η|D).
As a computational shortcut, we can approximate the posterior on the hyper-parameters with
a point-estimate, p(η|D)≈δ
ˆη(η),w h e r eˆη=a r g m a x p(η|D). Sinceηis typically much
smaller than θin dimensionality, it is less prone to overﬁtting, so we can safely use a uniform
prior onη. Then the estimate becomes
ˆη=a r g m a x p(D|η) = argmax⎨bracketleftbigg⎨integraldisplay
p(D|θ)p(θ|η)dθ⎨bracketrightbigg
(5.79)
5.6. Empirical Bayes 173
where the quantity inside the brackets is the marginal or integrated likelihood, sometimes called
the evidence. This overall approach is called empirical Bayes (EB)o rtype-II maximum
likelihood. In machine learning, it is sometimes called the evidence procedure.
Empirical Bayes violates the principle that the prior should be chosen independently of the
data. However, we can just view it as a computationally cheap approximation to inference in ahierarchical Bayesian model, just as we viewed MAP estimation as an approximation to inferencein the one level model θ→D. In fact, we can construct a hierarchy in which the more integrals
one performs, the “more Bayesian” one becomes:
Method Deﬁnition
Maximum likelihood ˆθ=a r g m a xθp(D|θ)
MAP estimation ˆθ=a r g m a xθp(D|θ)p(θ|η)
ML-II (Empirical Bayes) ˆη=a r g m a xη⎨integraltext
p(D|θ)p(θ|η)dθ=a r g m a xηp(D|η)
MAP-II ˆη=a r g m a xη⎨integraltext
p(D|θ)p(θ|η)p(η)dθ=a r g m a xηp(D|η)p(η)
Full Bayes p(θ,η|D)∝p(D|θ)p(θ|η)p(η)
Note that EB can be shown to have good frequentist properties (see e.g., (Carlin and Louis
1996; Efron 2010)), so it is widely used by non-Bayesians. For example, the popular James-Steinestimator, discussed in Section 6.3.3.2, can be derived using EB.
5.6.1 Example: beta-binomial model
Let us return to the cancer rates model. We can analytically integrate out the θi’s, and write
down the marginal likelihood directly, as follows:
p(D|a,b)=⎨productdisplay
i⎨integraldisplay
Bin(xi|Ni,θi)Beta(θi|a,b)dθi (5.80)
=⎨productdisplay
iB(a+xi,b+Ni−xi)
B(a,b)(5.81)
Various ways of maximizing this wrt aandbare discussed in (Minka 2000e).
Having estimated aandb, we can plug in the hyper-parameters to compute the posterior
p(θi|ˆa,ˆb,D)in the usual way, using conjugate analysis. The net result is that the posterior
mean of each θiis a weighted average of its local MLE and the prior means, which depends on
η=(a,b); but since ηis estimated based on all the data, each θiis inﬂuenced by all the data.
5.6.2 Example: Gaussian-Gaussian model
We now study another example that is analogous to the cancer rates example, except the data isreal-valued. We will use a Gaussian likelihood and a Gaussian prior. This will allow us to writedown the solution analytically.
In particular, suppose we have data from multiple related groups. For example, x
ijcould be
the test score for student iin school j,f o rj=1:D andi=1:N j. We want to estimate
the mean score for each school, θj. However, since the sample size, Nj, may be small for
174 Chapter 5. Bayesian statistics
some schools, we can regularize the problem by using a hierarchical Bayesian model, where we
assumeθjcome from a common prior, N(μ,τ2).
The joint distribution has the following form:
p(θ,D|η,σ2)=D⎨productdisplay
j=1N(θj|μ,τ2)Nj⎨productdisplay
i=1N(xij|θj,σ2) (5.82)
where we assume σ2is known for simplicity. (We relax this assumption in Exercise 24.4.) We
explain how to estimate ηbelow. Once we have estimated η=(μ,τ), we can compute the
posteriors over the θj’s. To do that, it simpliﬁes matters to rewrite the joint distribution in the
following form, exploiting the fact that NjGaussian measurements with values xijand variance
σ2are equivalent to one measurement of value xj/defines1
Nj⎨summationtextNj
i=1xijwith variance σ2
j/definesσ2/Nj.
This yields
p(θ,D|ˆη,σ2)=D⎨productdisplay
j=1N(θj|ˆμ,ˆτ2)N(xj|θj,σ2
j) (5.83)
From this, it follows from the results of Section 4.4.1 that the posteriors are given by
p(θj|D,ˆμ,ˆτ2)=N (θj|ˆBjˆμ+(1−ˆBj)xj,(1−ˆBj)σ2
j) (5.84)
ˆBj/definesσ2
j
σ2
j+ˆτ2(5.85)
whereˆμ=xandˆτ2will be deﬁned below.
The quantity 0≤ˆBj≤1controls the degree of shrinkage towards the overall mean, μ.I f
the data is reliable for group j(e.g., because the sample size Njis large), then σ2
jwill be small
relative to τ2; henceˆBjwill be small, and we will put more weight on xjwhen we estimate θj.
However, groups with small sample sizes will get regularized (shrunk towards the overall meanμ) more heavily. We will see an example of this below.
Ifσ
j=σfor all groups j, the posterior mean becomes
ˆθj=ˆBx+(1−ˆB)xj=x+(1−ˆB)(xj−x) (5.86)
This has exactly the same form as the James Stein estimator discussed in Section 6.3.3.2.
5.6.2.1 Example: predicting baseball scores
We now give an example of shrinkage applied to baseball batting averages, from (Efron andMorris 1975). We observe the number of hits for D=1 8players during the ﬁrst T=4 5games.
Call the number of hits b
i. We assume bj∼Bin(T,θ j),w h e r eθjis the “true” batting average
for player j. The goal is to estimate the θj. The MLE is of course ˆθj=xj,w h e r exj=bj/Tis
the empirical batting average. However, we can use an EB approach to do better.
To apply the Gaussian shrinkage approach described above, we require that the likelihood be
Gaussian, xj∼N(θj,σ2)for known σ2. (We drop the isubscript since we assume Nj=1,
5.6. Empirical Bayes 175
0.2 0.25 0.3 0.35 0.400.20.40.60.81MLE (top) and shrinkage estimates (bottom)
(a)1 2 3 4 500.050.10.150.20.250.30.350.4
player numberMSEMSE MLE = 0.0042, MSE shrunk = 0.0013
true
shrunk
MLE
(b)
Figure 5.12 (a) MLE parameters (top) and corresponding shrunken estimates (bottom). (b) We plot the
true parameters (blue), the posterior mean estimate (green), and the MLEs (red) for 5 of the players. Figure
generated by shrinkageDemoBaseball .
sincexjalready represents the average for player j.) However, in this example we have a
binomial likelihood. While this has the right mean, E[xj]=θj, the variance is not constant:
var[xj]=1
T2var[bj]=Tθj(1−θj)
T2(5.87)
So let us apply a variance stabilizing transform5toxjto better match the Gaussian assump-
tion:
yj=f(yj)=√
Tarcsin(2y j−1) (5.88)
Now we have approximately yj∼N(f(θj),1) =N(μj,1). We use Gaussian shrinkage to
estimate the μjusing Equation 5.86 with σ2=1, and we then transform back to get
ˆθj=0.5(sin(ˆμj/√
T)+1) (5.89)
The results are shown in Figure 5.12(a-b). In (a), we plot the MLE ˆθjand the posterior mean θj.
We see that all the estimates have shrunk towards the global mean, 0.265. In (b), we plot the
true value θj, the MLE ˆθjand the posterior mean θj. (The “true” values of θjare estimated
from a large number of independent games.) We see that, on average, the shrunken estimate
is much closer to the true parameters than the MLE is. Speciﬁcally, the mean squared error,
deﬁned by MSE =1
N⎨summationtextD
j=1(θj−θj)2, is over three times smaller using the shrinkage estimates
θjthan using the MLEs ˆθj.
5.6.2.2 Estimating the hyper-parameters
In this section, we give an algorithm for estimating η. Suppose initially that σ2
j=σ2is the
same for all groups. In this case, we can derive the EB estimate in closed form, as we now show.
From Equation 4.126, we have
p(xj|μ,τ2,σ2)=⎨integraldisplay
N(xj|θj,σ2)N(θj|μ,τ2)dθj=N(xj|μ,τ2+σ2) (5.90)
5. Suppose E[X]=μandvar[X]=σ2(μ).L e t Y=f(X). Then a Taylor series expansions gives Y≈
f(μ)+(X−μ)f/prime(μ). Hence var[Y]≈f/prime(μ)2var[X−μ]=f/prime(μ)2σ2(μ). A variance stabilizing transformation
is a function fsuch that f/prime(μ)2σ2(μ)is independent of μ.
176 Chapter 5. Bayesian statistics
Hence the marginal likelihood is
p(D|μ,τ2,σ2)=D⎨productdisplay
j=1N(xj|μ,τ2+σ2) (5.91)
Thus we can estimate the hyper-parameters using the usual MLEs for a Gaussian. For μ,w e
have
ˆμ=1
DD⎨summationdisplay
j=1xj=x (5.92)
which is the overall mean.
For the variance, we can use moment matching (which is equivalent to the MLE for a
Gaussian): we simply equate the model variance to the empirical variance:
ˆτ2+σ2=1
DD⎨summationdisplay
j=1(xj−x)2/definess2(5.93)
soˆτ2=s2−σ2. Since we know τ2must be positive, it is common to use the following revised
estimate:
ˆτ2=m a x{0,s2−σ2}=(s2−σ2)+ (5.94)
Hence the shrinkage factor is
ˆB=σ2
σ2+ˆτ2=σ2
σ2+(s2−σ2)+(5.95)
In the case where the σ2
j’s are different, we can no longer derive a solution in closed form.
Exercise 11.13 discusses how to use the EM algorithm to derive an EB estimate, and Exercise 24.4
discusses how to perform full Bayesian inference in this hierarchical model.
5.7 Bayesian decision theory
We have seen how probability theory can be used to represent and updates our beliefs aboutthe state of the world. However, ultimately our goal is to convert our beliefs into actions. In thissection, we discuss the optimal way to do this.
We can formalize any given statistical decision problem as a game against nature (as opposed
to a game against other strategic players, which is the topic of game theory, see e.g., (Shohamand Leyton-Brown 2009) for details). In this game, nature picks a state or parameter or label,y∈Y, unknown to us, and then generates an observation, x∈X, which we get to see. We
then have to make a decision, that is, we have to choose an action afrom some action space
A. Finally we incur some loss,L(y,a), which measures how compatible our action ais with
nature’s hidden state y. For example, we might use misclassiﬁcation loss, L(y,a)=I(y/negationslash=a),
or squared loss, L(y,a)=(y−a)
2. We will see some other examples below.
5.7. Bayesian decision theory 177
Our goal is to devise a decision procedure orpolicy,δ:X→A, which speciﬁes the
optimal action for each possible input. By optimal, we mean the action that minimizes the
expected loss:
δ(x) = argmin
a∈AE[L(y,a)] (5.96)
In economics, it is more common to talk of a utility function; this is just negative loss,
U(y,a)=−L(y,a). Thus the above rule becomes
δ(x) = argmax
a∈AE[U(y,a)] (5.97)
This is called the maximum expected utility principle, and is the essence of what we mean
byrational behavior.
Note that there are two different interpretations of what we mean by “expected”. In the
Bayesian version, which we discuss below, we mean the expected value of ygiven the data we
have seen so far. In the frequentist version, which we discuss in Section 6.3, we mean theexpected value of yandxthat we expect to see in the future.
In the Bayesian approach to decision theory, the optimal action, having observed x, is deﬁned
as the action athat minimizes the posterior expected loss:
ρ(a|x)/definesE
p(y|x)[L(y,a)] =⎨summationdisplay
yL(y,a)p(y|x) (5.98)
(Ifyis continuous (e.g., when we want to estimate a parameter vector), we should replace the
sum with an integral.) Hence the Bayes estimator, also called the Bayes decision rule, is given
by
δ(x)=a r gm i n
a∈Aρ(a|x) (5.99)
5.7.1 Bayes estimators for common loss functions
In this section we show how to construct Bayes estimators for the loss functions most commonlyarising in machine learning.
5.7.1.1 MAP estimate minimizes 0-1 loss
The0-1 lossis deﬁned by
L(y,a)=I(y/negationslash=a)=⎨braceleftbigg0ifa=y
1ifa/negationslash=y(5.100)
This is commonly used in classiﬁcation problems where yis the true class label and a=ˆyis
the estimate.
For example, in the two class case, we can write the loss matrix as follows:
ˆy=1 ˆy=0
y=101
y=0 10
178 Chapter 5. Bayesian statistics
/g2/g3/g4
/g4/g3/g4/g1/g2/g3/g4/g5/g2/g6/g7/g8
/g9/g5/g6/g7/g8/g2/g1 /g9/g1/g10/g11 /g5/g6/g7/g1/g8/g1/g12/g1/g9/g1/g10/g11
/g13/g14/g15/g14/g16/g17 /g1
/g13/g14/g18/g19/g20/g21
Figure 5.13 For some regions of input space, where the class posteriors are uncertain, we may prefer not
to choose class 1 or 2; instead we may prefer the reject option. Based on Figure 1.26 of (Bishop 2006a).
(In Section 5.7.2, we generalize this loss function so it penalizes the two kinds of errors on
the off-diagonal differently.)
The posterior expected loss is
ρ(a|x)=p(a/negationslash=y|x)=1−p(y|x) (5.101)
Hence the action that minimizes the expected loss is the posterior mode or MAP estimate
y∗(x) = argmax
y∈Yp(y|x) (5.102)
5.7.1.2 Reject option
In classiﬁcation problems where p(y|x)is very uncertain, we may prefer to choose a reject
action, in which we refuse to classify the example as any of the speciﬁed classes, and instead
say “don’t know”. Such ambiguous cases can be handled by e.g., a human expert. See Figure 5.13for an illustration. This is useful in risk averse domains such as medicine and ﬁnance.
We can formalize the reject option as follows. Let choosing a=C+1correspond to
picking the reject action, and choosing a∈{1,...,C}correspond to picking one of the classes.
Suppose we deﬁne the loss function as
L(y=j,a=i)=⎧
⎨
⎩0ifi=jandi,j∈{1,...,C}
λ
r ifi=C+1
λs otherwise(5.103)
whereλris the cost of the reject action, and λsis the cost of a substitution error. In Exercise 5.3,
you will show that the optimal action is to pick the reject action if the most probable class has
a probability below 1−λr
λs; otherwise you should just pick the most probable class.
5.7. Bayesian decision theory 179
−2 −1 0 1 2012|x|0.2
(a)−2 −1 0 1 2012|x|1.0
(b)−2 −1 0 1 2012|x|2.0
(c)
Figure 5.14 (a-c). Plots of the L(y,a)=|y−a|qvs|y−a|forq=0.2,q=1andq=2. Figure
generated by lossFunctionFig .
5.7.1.3 Posterior mean minimizes /lscript2(quadratic) loss
For continuous parameters, a more appropriate loss function is squared error, /lscript2loss,o r
quadratic loss, deﬁned as
L(y,a)=(y−a)2(5.104)
The posterior expected loss is given by
ρ(a|x)=E⎨bracketleftbig
(y−a)2|x⎨bracketrightbig
=E⎨bracketleftbig
y2|x⎨bracketrightbig
−2aE[y|x]+a2(5.105)
Hence the optimal estimate is the posterior mean:
∂
∂aρ(a|x)=−2E[y|x]+2a=0⇒ˆy=E[y|x]=⎨integraldisplay
yp(y|x)dy (5.106)
This is often called the minimum mean squared error estimate or MMSEestimate.
In a linear regression problem, we have
p(y|x,θ)=N(y|xTw,σ2) (5.107)
In this case, the optimal estimate given some training data Dis given by
E[y|x,D]=xTE[w|D] (5.108)
That is, we just plug-in the posterior mean parameter estimate. Note that this is the optimal
thing to do no matter what prior we use for w.
5.7.1.4 Posterior median minimizes /lscript1(absolute) loss
The/lscript2loss penalizes deviations from the truth quadratically, and thus is sensitive to outliers. A
more robust alternative is the absolute or /lscript1loss,L(y,a)=|y−a|(see Figure 5.14). The optimal
estimate is the posterior median, i.e., a value asuch that P(y<a|x)=P(y≥a|x)=0.5.
See Exercise 5.9 for a proof.
5.7.1.5 Supervised learning
Consider a prediction function δ:X→Y, and suppose we have some cost function /lscript(y,y/prime)
which gives the cost of predicting y/primewhen the truth is y. We can deﬁne the loss incurred by
180 Chapter 5. Bayesian statistics
taking action δ(i.e., using this predictor) when the unknown state of nature is θ(the parameters
of the data generating mechanism) as follows:
L(θ,δ)/definesE(x,y)∼p(x,y|θ)[/lscript(y,δ(x)] =⎨summationdisplay
x⎨summationdisplay
yL(y,δ(x))p(x,y|θ) (5.109)
This is known as the generalization error. Our goal is to minimize the posterior expected loss,
given by
ρ(δ|D)=⎨integraldisplay
p(θ|D)L(θ,δ)dθ (5.110)
This should be contrasted with the frequentist risk which is deﬁned in Equation 6.47.
5.7.2 The false positive vs false negative tradeoff
In this section, we focus on binary decision problems, such as hypothesis testing, two-class
classiﬁcation, object/ event detection, etc. There are two types of error we can make: a false
positive(akafalse alarm), which arises when we estimate ˆy=1but the truth is y=0;o ra
false negative (akamissed detection), which arises when we estimate ˆy=0but the truth is
y=1. The 0-1 loss treats these two kinds of errors equivalently. However, we can consider the
following more general loss matrix:
ˆy=1 ˆy=0
y=10LFN
y=0LFP0
whereLFNis the cost of a false negative, and LFPis the cost of a false positive. The
posterior expected loss for the two possible actions is given by
ρ(ˆy=0|x)=L FNp(y=1|x) (5.111)
ρ(ˆy=1|x)=L FPp(y=0|x) (5.112)
Hence we should pick class ˆy=1iff
ρ(ˆy=0|x)>ρ(ˆy=1|x) (5.113)
p(y=1|x)
p(y=0|x)>LFP
LFN(5.114)
IfLFN=cLFP, it is easy to show (Exercise 5.10) that we should pick ˆy=1iffp(y=
1|x)/p(y=0|x)>τ,w h e r eτ=c/(1 +c)(see also (Muller et al. 2004)). For example, if a
false negative costs twice as much as false positive, so c=2, then we use a decision threshold
of2/3before declaring a positive.
Below we discuss ROC curves, which provide a way to study the FP-FN tradeoff without having
to choose a speciﬁc threshold.
5.7.2.1 ROC curves and all that
Suppose we are solving a binary decision problem, such as classiﬁcation, hypothesis testing,object detection, etc. Also, assume we have a labeled data set, D={(x
i,yi)}.L e tδ(x)=
5.7. Bayesian decision theory 181
Truth
10 Σ
Estimate1 TP FP ˆN+=TP+FP
0 FN TN ˆN−=FN+TN
ΣN+=TP+FN N −=FP+TNN=TP+FP+FN+TN
Table 5.2 Quantities derivable from a confusion matrix. N+is the true number of positives, ˆN+is the
“called” number of positives, N−is the true number of negatives, ˆN−is the “called” number of negatives.
y=1 y=0
ˆy=1TP/N +=TPR=sensitivity=recall FP/N −=FPR=type I
ˆy=0FN/N +=FNR=miss rate=type II TN/N −=TNR=speciﬁty
Table 5.3 Estimating p(ˆy|y)from a confusion matrix. Abbreviations: FNR = false negative rate, FPR =
false positive rate, TNR = true negative rate, TPR = true positive rate.
I(f(x)>τ)be our decision rule, where f(x)is a measure of conﬁdence that y=1(this
should be monotonically related to p(y=1|x), but does not need to be a probability), and τis
some threshold parameter. For each given value of τ, we can apply our decision rule and count
the number of true positives, false positives, true negatives, and false negatives that occur, as
shown in Table 5.2. This table of errors is called a confusion matrix.
From this table, we can compute the true positive rate (TPR), also known as the sensitivity,
recallorhit rate, by using TPR=TP/N +≈p(ˆy=1|y=1 ). We can also compute the
false positive rate (FPR), also called the false alarm rate, or the type I error rate, by using
FPR=FP/N −≈p(ˆy=1|y=0 ). These and other deﬁnitions are summarized in Tables 5.3
and 5.4. We can combine these errors in any way we choose to compute a loss function.
However, rather than than computing the TPR and FPR for a ﬁxed threshold τ, we can run
our detector for a set of thresholds, and then plot the TPR vs FPR as an implicit function ofτ. This is called a receiver operating characteristic orROCcurve. See Figure 5.15(a) for an
example. Any system can achieve the point on the bottom left, (FPR=0,TPR=0 ),b y
settingτ=1and thus classifying everything as negative; similarly any system can achieve the
point on the top right, (FPR=1,TPR=1 ), by setting τ=0and thus classifying everything
as positive. If a system is performing at chance level, then we can achieve any point on thediagonal line TPR=FPRby choosing an appropriate threshold. A system that perfectly
separates the positives from negatives has a threshold that can achieve the top left corner,(FPR=0,TPR=1 ); by varying the threshold such a system will “hug” the left axis and
then the top axis, as shown in Figure 5.15(a).
The quality of a ROC curve is often summarized as a single number using the area under the
curveorAUC. Higher AUC scores are better; the maximum is obviously 1. Another summary
statistic that is used is the equal error rate orEER, also called the cross over rate, deﬁned
as the value which satisﬁes FPR=FNR. SinceFNR=1−TPR, we can compute the
EER by drawing a line from the top left to the bottom right and seeing where it intersects theROC curve (see points A and B in Figure 5.15(a)). Lower EER scores are better; the minimum isobviously 0.
182 Chapter 5. Bayesian statistics
0 101
fprtprA
B
(a)0 101
recallprecisionA B
(b)
Figure 5.15 (a) ROC curves for two hypothetical classiﬁcation systems. A is better than B. We plot the
true positive rate (TPR) vs the false positive rate (FPR) as we vary the threshold τ. We also indicate the
equal error rate (EER) with the red and blue dots, and the area under the curve (AUC) for classiﬁer B. (b)
A precision-recall curve for two hypothetical classiﬁcation systems. A is better than B. Figure generated byPRhand.
y=1 y=0
ˆy=1TP/ˆN+=precision=PPV FP/ˆN+=FDP
ˆy=0 FN/ˆN− TN/ˆN−=NPV
Table 5.4 Estimating p(y|ˆy)from a confusion matrix. Abbreviations: FDP = false discovery probability,
NPV = negative predictive value, PPV = positive predictive value,
5.7.2.2 Precision recall curves
When trying to detect a rare event (such as retrieving a relevant document or ﬁnding a face
in an image), the number of negatives is very large. Hence comparing TPR=TP/N +to
FPR=FP/N −is not very informative, since the FPR will be very small. Hence all the
“action” in the ROC curve will occur on the extreme left. In such cases, it is common to plotthe TPR versus the number of false positives, rather than vs the false positive rate.
However, in some cases, the very notion of “negative” is not well-deﬁned. For example, when
detecting objects in images (see Section 1.2.1.3), if the detector works by classifying patches, thenthe number of patches examined — and hence the number of true negatives — is a parameterof the algorithm, not part of the problem deﬁnition. So we would like to use a measure thatonly talks about positives.
Theprecision is deﬁned as TP/ˆN
+=p(y=1|ˆy=1 )and therecallis deﬁned as
TP/N +=p(ˆy=1|y=1 ). Precision measures what fraction of our detections are actually
positive, and recall measures what fraction of the positives we actually detected. If ˆyi∈{0,1}
is the predicted label, and yi∈{0,1}is the true label, we can estimate precision and recall
using
P=⎨summationtext
iyiˆyi⎨summationtext
iˆyi,R=⎨summationtext
iyiˆyi⎨summationtext
iyi(5.115)
Aprecision recall curve is a plot of precision vs recall as we vary the threshold τ. See
Figure 5.15(b). Hugging the top right is the best one can do.
This curve can be summarized as a single number using the mean precision (averaging over
5.7. Bayesian decision theory 183
Class 1
y=1y=0
ˆy=110 10
ˆy=010 970Class 2
y=1y=0
ˆy=190 10
ˆy=0 10 890Pooled
y=1y=0
ˆy=1100 20
ˆy=020 1860
Table 5.5 Illustration of the difference between macro- and micro-averaging. yis the true label, and ˆy
is the called label. In this example, the macro-averaged precision is [10/(10+10)+90/ (10+90)]/ 2=
(0.5+0.9)/2=0.7. The micro-averaged precision is 100/(100 + 20) ≈0.83. Based on Table 13.7 of
(Manning et al. 2008).
recall values), which approximates the area under the curve. Alternatively, one can quote the
precision for a ﬁxed recall level, such as the precision of the ﬁrst K=1 0entities recalled.
This is called the average precision at K score. This measure is widely used when evaluating
information retrieval systems.
5.7.2.3 F-scores *
For a ﬁxed threshold, one can compute a single precision and recall value. These are oftencombined into a single statistic called the Fs c o r e,o rF1 score, which is the harmonic mean of
precision and recall:
F
1/defines2
1/P+1/R=2PR
R+P(5.116)
Using Equation 5.115, we can write this as
F1=2⎨summationtextN
i=1yiˆyi⎨summationtextNi=1yi+⎨summationtextNi=1ˆyi(5.117)
This is a widely used measure in information retrieval systems.
To understand why we use the harmonic mean instead of the arithmetic mean, (P+R)/2,
consider the following scenario. Suppose we recall all entries, so R=1. The precision will be
given by the prevalence, p(y=1 ). Suppose the prevalence is low, say p(y=1 )=1 0−4. The
arithmetic mean of PandRis given by (P+R)/2=( 1 0−4+1)/2≈50%. By contrast, the
harmonic mean of this strategy is only2×10−4×1
1+10−4≈0.2%.
In the multi-class case (e.g., for document classiﬁcation problems), there are two ways to
generalize F1scores. The ﬁrst is called macro-averaged F1, and is deﬁned as⎨summationtextCc=1F1(c)/C,
whereF1(c)is theF1score obtained on the task of distinguishing class cfrom all the others.
The other is called micro-averaged F1, and is deﬁned as the F1score where we pool all the
counts from each class’s contingency table.
Table 5.5 gives a worked example that illustrates the difference. We see that the precision of
class 1 is 0.5, and of class 2 is 0.9. The macro-averaged precision is therefore 0.7, whereas the
micro-averaged precision is 0.83. The latter is much closer to the precision of class 2 than tothe precision of class 1, since class 2 is ﬁve times larger than class 1. To give equal weight toeach class, use macro-averaging.
184 Chapter 5. Bayesian statistics
5.7.2.4 False discovery rates *
Suppose we are trying to discover a rare phenomenon using some kind of high throughput
measurement device, such as a gene expression micro array, or a radio telescope. We will needto make many binary decisions of the form p(y
i=1|D)>τ,w h e r eD ={xi}N
i=1andNmay
be large. This is called multiple hypothesis testing. Note that the difference from standard
binary classiﬁcation is that we are classifying yibased on all the data, not just based on xi.S o
this is a simultaneous classiﬁcation problem, where we might hope to do better than a series of
individual classiﬁcation problems.
How should we set the threshold τ? A natural approach is to try to minimize the expected
number of false positives. In the Bayesian approach, this can be computed as follows:
FD(τ,D)/defines⎨summationdisplay
i(1−pi)⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
pr. errorI(pi>τ)⎨bracehtipupleft⎨bracehtipdownright⎨bracehtipdownleft⎨bracehtipupright
discovery(5.118)
wherepi/definesp(yi=1|D)is your belief that this object exhibits the phenomenon in question.
We then deﬁne the posterior expected false discovery rate as follows:
FDR(τ,D)/definesFD(τ,D)/N(τ,D) (5.119)
whereN(τ,D)=⎨summationtext
iI(pi>τ)is the number of discovered items. Given a desired FDR
tolerance, say α=0.05, one can then adapt τto achieve this; this is called the direct posterior
probability approach to controlling the FDR (Newton et al. 2004; Muller et al. 2004).
In order to control the FDR it is very helpful to estimate the pi’s jointly (e.g., using a hierar-
chical Bayesian model, as in Section 5.5), rather than independently. This allows the pooling ofstatistical strength, and thus lower FDR. See e.g., (Berry and Hochberg 1999) for more information.
5.7.3 Other topics *
In this section, we brieﬂy mention a few other topics related to Bayesian decision theory. We donot have space to go into detail, but we include pointers to the relevant literature.
5.7.3.1 Contextual bandits
Aone-armed bandit is a colloquial term for a slot machine, found in casinos around the world.
The game is this: you insert some money, pull an arm, and wait for the machine to stop; ifyou’re lucky, you win some money. Now imagine there is a bank of Ksuch machines to choose
from. Which one should you use? This is called a multi-armed bandit, and can be modeled
using Bayesian decision theory: there are Kpossible actions, and each action has an unknown
reward (payoff function) r
k. By maintaining a belief state, p(r1:K|D)=⎨producttext
kp(rk|D), one can
devise an optimal policy; this can be compiled into a series of Gittins Indices (Gittins 1989).
This optimally solves the exploration-exploitation tradeoff, which speciﬁes how many times
one should try each action before deciding to go with the winner.
Now consider an extension where each arm, and the player, has an associated feature vector;
call all these features x. This is called a contextual bandit (see e.g., (Sarkar 1991; Scott 2010;
Li et al. 2011)). For example, the “arms” could represent ads or news articles which we wantto show to the user, and the features could represent properties of these ads or articles, such
5.7. Bayesian decision theory 185
as a bag of words, as well as properties of the user, such as demographics. If we assume a
linear model for reward, rk=θT
kx, we can maintain a distribution over the parameters of each
arm,p(θk|D),w h e r eDis a series of tuples of the form (a,x,r), which speciﬁes which arm
was pulled, what its features were, and what the resulting outcome was (e.g., r=1if the user
clicked on the ad, and r=0otherwise). We discuss ways to compute p(θk|D)from linear and
logistic regression models in later chapters.
Given the posterior, we must decide what action to take. One common heuristic, known as
UCB(which stands for “upper conﬁdence bound”) is to take the action which maximizes
k∗=Kargmax
k=1μk+λσk (5.120)
whereμk=E[rk|D],σ2
k= var[r k|D]andλis a tuning parameter that trades off exploration
and exploitation. The intuition is that we should pick actions about which we believe are good
(μkis large), and/ or actions about which we are uncertain (σ kis large).
An even simpler method, known as Thompson sampling, is as follows. At each step, we pick
actionkwith a probability that is equal to its probability of being the optimal action:
pk=⎨integraldisplay
I(E[r|a,x,θ]=m a x
a/primeE[r|a/prime,x,θ])p(θ|D)dθ (5.121)
We can approximate this by drawing a single sample from the posterior, θt∼p(θ|D), and then
choosing k∗=a r g m a xkE⎨bracketleftbig
r|x,k,θt⎨bracketrightbig
. Despite its simplicity, this has been shown to work quite
well (Chapelle and Li 2011).
5.7.3.2 Utility theory
Suppose we are a doctor trying to decide whether to operate on a patient or not. We imaginethere are 3 states of nature: the patient has no cancer, the patient has lung cancer, or thepatient has breast cancer. Since the action and state space is discrete, we can represent the lossfunctionL(θ,a)as aloss matrix, such as the following:
Surgery No surgery
No cancer 20 0
Lung cancer 10 50
Breast cancer 10 60
These numbers reﬂects the fact that not performing surgery when the patient has cancer is
very bad (loss of 50 or 60, depending on the type of cancer), since the patient might die; notperforming surgery when the patient does not have cancer incurs no loss (0); performing surgerywhen the patient does not have cancer is wasteful (loss of 20); and performing surgery whenthe patient does have cancer is painful but necessary (10).
It is natural to ask where these numbers come from. Ultimately they represent the personal
preferences or values of a ﬁctitious doctor, and are somewhat arbitrary: just as some people
prefer chocolate ice cream and others prefer vanilla, there is no such thing as the “right” loss/utility function. However, it can be shown (see e.g., (DeGroot 1970)) that any set of consistentpreferences can be converted to a scalar loss/ utility function. Note that utility can be measuredon an arbitrary scale, such as dollars, since it is only relative values that matter.
6
6. People are often squeamish about talking about human lives in monetary terms, but all decision making requires
186 Chapter 5. Bayesian statistics
5.7.3.3 Sequential decision theory
So far, we have concentrated on one-shot decision problems, where we only have to make
one decision and then the game ends. In Setion 10.6, we will generalize this to multi-stage or
sequential decision problems. Such problems frequently arise in many business and engineeringsettings. This is closely related to the problem of reinforcement learning. However, furtherdiscussion of this point is beyond the scope of this book.
Exercises
Exercise 5.1 Proof that a mixture of conjugate priors is indeed conjugate
Derive Equation 5.69.
Exercise 5.2 Optimal threshold on classiﬁcation probability
Consider a case where we have learned a conditional probability distribution P(y|x). Suppose there are
only two classes, and let p0=P(Y=0|x)andp1=P(Y=1|x). Consider the loss matrix below:
predicted true label y
labelˆy 01
0 0λ01
1 λ100
a. Show that the decision ˆythat minimizes the expected loss is equivalent to setting a probability threshold
θand predicting ˆy=0ifp1<θandˆy=1ifp1≥θ. What is θas a function of λ01andλ10? (Show
your work.)
b. Show a loss matrix where the threshold is 0.1. (Show your work.)
Exercise 5.3 Reject option in classiﬁers
(Source: (Duda et al. 2001, Q2.13).)
In many classiﬁcation problems one has the option either of assigning xto classjor, if you are too
uncertain, of choosing the reject option. If the cost for rejects is less than the cost of falsely classifying
the object, it may be the optimal action. Let αimean you choose action i,f o ri=1:C+1,w h e r eC
is the number of classes and C+1is the reject action. Let Y=jbe the true (but unknown) state of
nature. Deﬁne the loss function as follows
λ(αi|Y=j)=⎧
⎨
⎩0ifi=jandi,j∈{1,...,C}
λr ifi=C+1
λs otherwise(5.122)
In otherwords, you incur 0 loss if you correctly classify, you incur λrloss (cost) if you choose the reject
option, and you incur λsloss (cost) if you make a substitution error (misclassiﬁcation).
tradeoffs, and one needs to use some kind of “currency” to compare different courses of action. Insurance companies
do this all the time. Ross Schachter, a decision theorist at Stanford University, likes to tell a story of a school board who
rejected a study on absestos removal from schools because it performed a cost-beneﬁt analysis, which was considered
“inhumane” because they put a dollar value on children’s health; the result of rejecting the report was that the absestoswas not removed, which is surely more “inhumane”. In medical domains, one often measures utility in terms of QALY,o r
quality-adjusted life-years, instead of dollars, but it’s the same idea. Of course, even if you do not explicitly specify howmuch you value different people’s lives, your behaviorwill reveal your implicit values/ preferences, and these preferences
can then be converted to a real-valued scale, such as dollars or QALY. Inferring a utility function from behavior is calledinverse reinforcement learning.
5.7. Bayesian decision theory 187
Decision true label y
ˆy 01
predict 0 010
predict 1 100
reject 33
a. Show that the minimum risk is obtained if we decide Y=jifp(Y=j|x)≥p(Y=k|x)for allk
(i.e.,jis the most probable class) andifp(Y=j|x)≥1−λr
λs; otherwise we decide to reject.
b. Describe qualitatively what happens as λr/λsis increased from 0 to 1 (i.e., the relative cost of rejection
increases).
Exercise 5.4 More reject options
In many applications, the classiﬁer is allowed to “reject” a test example rather than classifying it into one
of the classes. Consider, for example, a case in which the cost of a misclassiﬁcation is $10 but the cost ofhaving a human manually make the decison is only $3. We can formulate this as the following loss matrix:
a. Suppose P(y=1|x)is predicted to be 0.2. Which decision minimizes the expected loss?
b. Now suppose P(y=1|x)=0.4. Now which decision minimizes the expected loss?
c. Show that in general, for this loss matrix, but for any posterior distribution, there will be two thresholds
θ
0andθ1such that the optimal decisionn is to predict 0 if p1<θ0, reject if θ0≤p1≤θ1, and
predict 1 if p1>θ1(wherep1=p(y=1|x)). What are these thresholds?
Exercise 5.5 Newsvendor problem
Consider the following classic problem in decision theory/ economics. Suppose you are trying to decidehow much quantity Qof some product (e.g., newspapers) to buy to maximize your proﬁts. The optimal
amount will depend on how much demand Dyou think there is for your product, as well as its cost
to youCand its selling price P. Suppose Dis unknown but has pdf f(D)and cdfF(D). We can
evaluate the expected proﬁt by considering two cases: if D>Q, then we sell all Qitems, and make proﬁt
π=(P−C)Q; but ifD<Q, we only sell Ditems, at proﬁt (P−C)D, but have wasted C(Q−D)
on the unsold items. So the expected proﬁt if we buy quantity Qis
Eπ(Q)=/integraldisplay
∞
Q(P−C)Qf(D)dD+/integraldisplayQ
0(P−C)Df(D)−/integraldisplayQ
0C(Q−D)f(D)dD (5.123)
Simplify this expression, and then take derivatives wrt Qto show that the optimal quantity Q∗(which
maximizes the expected proﬁt) satisﬁes
F(Q∗)=P−C
P(5.124)
Exercise 5.6 Bayes factors and ROC curves
LetB=p(D|H1)/p(D|H0)be the bayes factor in favor of model 1. Suppose we plot two ROC curves,
one computed by thresholding B, and the other computed by thresholding p(H1|D). Will they be the
same or different? Explain why.
Exercise 5.7 Bayes model averaging helps predictive accuracy
LetΔbe a quantity that we want to predict, let Dbe the observed data and Mbe a ﬁnite set of models.
Suppose our action is to provide a probabilistic prediction p(), and the loss function is L(Δ,p()) =
188 Chapter 5. Bayesian statistics
−logp(Δ). We can either perform Bayes model averaging and predict using
pBMA(Δ) =/summationdisplay
m∈Mp(Δ|m,D)p(m|D) (5.125)
or we could predict using any single model (a plugin approximation)
pm(Δ) =p(Δ|m,D) (5.126)
Show that, for all models m∈M, the posterior expected loss using BMA is lower, i.e.,
E/bracketleftBig
L(Δ,pBMA)/bracketrightBig
≤E[L(Δ,pm)] (5.127)
where the expectation over Δis with respect to
p(Δ|D)=/summationdisplay
m∈Mp(Δ|m,D)p(m|D) (5.128)
Hint: use the non-negativity of the KL divergence.
Exercise 5.8 MLE and model selection for a 2d discrete distribution
(Source: Jaakkola.)
Letx∈{0,1}denote the result of a coin toss (x =0for tails,x=1for heads). The coin is potentially
biased, so that heads occurs with probability θ1. Suppose that someone else observes the coin ﬂip and
reports to you the outcome, y. But this person is unreliable and only reports the result correctly with
probability θ2; i.e.,p(y|x,θ2)is given by
y=0y=1
x=0θ21−θ2
x=11−θ2θ2
Assume that θ2is independent of xandθ1.
a. Write down the joint probability distribution p(x,y|θ)as a2×2table, in terms of θ=(θ1,θ2).
b. Suppose have the following dataset: x=( 1,1,0,1,1,0,0),y=( 1,0,0,0,1,0,1). What are the
MLEs for θ1andθ2? Justify your answer. Hint: note that the likelihood function factorizes,
p(x,y|θ)=p(y|x,θ2)p(x|θ1) (5.129)
What isp(D|ˆθ,M2)whereM2denotes this 2-parameter model? (You may leave your answer in
fractional form if you wish.)
c. Now consider a model with 4 parameters, θ=(θ0,0,θ0,1,θ1,0,θ1,1), representing p(x,y|θ)=θx,y.
(Only 3 of these parameters are free to vary, since they must sum to one.) What is the MLE of θ? What
isp(D|ˆθ,M4)whereM4denotes this 4-parameter model?
d. Suppose we are not sure which model is correct. We compute the leave-one-out cross validated log
likelihood of the 2-parameter model and the 4-parameter model as follows:
L(m)=n/summationdisplay
i=1logp(xi,yi|m,ˆθ(D−i)) (5.130)
andˆθ(D−i))denotes the MLE computed on Dexcluding row i. Which model will CV pick and why?
Hint: notice how the table of counts changes when you omit each training case one at a time.
5.7. Bayesian decision theory 189
e. Recall that an alternative to CV is to use the BIC score, deﬁned as
BIC(M,D)/defineslogp(D|ˆθMLE)−dof(M)
2logN (5.131)
wheredof(M)is the number of free parameters in the model, Compute the BIC scores for both models
(use log base e). Which model does BIC prefer?
Exercise 5.9 Posterior median is optimal estimate under L1 loss
Prove that the posterior median is optimal estimate under L1 loss.
Exercise 5.10 Decision rule for trading off FPs and FNs
IfLFN=cLFP, show that we should pick ˆy=1iffp(y=1|x)/p(y=0|x)>τ,w h e r eτ=c/(1+c)

6 Frequentist statistics
6.1 Introduction
The approach to statistical inference that we described in Chapter 5 is known as Bayesian
statistics. Perhaps surprisingly, this is considered controversial by some people, whereas the ap-plication of Bayes rule to non-statistical problems — such as medical diagnosis (Section 2.2.3.1),spam ﬁltering (Section 3.4.4.1), or airplane tracking (Section 18.2.1) — is not controversial. Thereason for the objection has to do with a misguided distinction between parameters of a statis-tical model and other kinds of unknown quantities.
1
Attempts have been made to devise approaches to statistical inference that avoid treating
parameters like random variables, and which thus avoid the use of priors and Bayes rule. Suchapproaches are known as frequentist statistics, classical statistics ororthodox statistics.
Instead of being based on the posterior distribution, they are based on the concept of a samplingdistribution. This is the distribution that an estimator has when applied to multiple data setssampled from the true but unknown distribution; see Section 6.2 for details. It is this notionof variation across repeated trials that forms the basis for modeling uncertainty used by thefrequentist approach.
By contrast, in the Bayesian approach, we only ever condition on the actually observed data;
there is no notion of repeated trials. This allows the Bayesian to compute the probability ofone-off events, as we discussed in Section 2.1. Perhaps more importantly, the Bayesian approachavoids certain paradoxes that plague the frequentist approach (see Section 6.6). Nevertheless, itis important to be familiar with frequentist statistics (especially Section 6.5), since it is widelyused in machine learning.
6.2 Sampling distribution of an estimator
In frequentist statistics, a parameter estimate ˆθis computed by applying an estimator δto
some data D,s oˆθ=δ(D). The parameter is viewed as ﬁxed and the data as random, which
is the exact opposite of the Bayesian approach. The uncertainty in the parameter estimate canbe measured by computing the sampling distribution of the estimator. To understand this
1. Parameters are sometimes considered to represent true (but unknown) physical quantities, which are therefore not
random. However, we have seen that it is perfectly reasonable to use a probability distribution to represent one’s
uncertainty about an unknown constant.
192 Chapter 6. Frequentist statistics
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 105001000150020002500300035004000Boot: true = 0.70, n=10, mle = 0.90, se = 0.001
(a)0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 10500100015002000250030003500Boot: true = 0.70, n=100, mle = 0.70, se = 0.000
(b)
Figure 6.1 A bootstrap approximation to the sampling distribution of ˆθfor a Bernoulli distribution. We
useB=1 0,000bootstrap samples. The Ndatacases were generated from Ber(θ=0.7). (a) MLE with
N=1 0. (b) MLE with N= 100. Figure generated by bootstrapDemoBer .
concept, imagine sampling many different data sets D(s)from some true model, p(·|θ∗), i.e., let
D(s)={x(s)
i}N
i=1,w h e r exsi∼p(·|θ∗), andθ∗is the true parameter. Here s=1:Sindexes
the sampled data set, and Nis the size of each such dataset. Now apply the estimator ˆθ(·)
to eachD(s)to get a set of estimates, {ˆθ(D(s))}.A sw el e t S→∞, the distribution induced
onˆθ(·)is the sampling distribution of the estimator. We will discuss various ways to use the
sampling distribution in later sections. But ﬁrst we sketch two approaches for computing the
sampling distribution itself.
6.2.1 Bootstrap
Thebootstrap is a simple Monte Carlo technique to approximate the sampling distribution. This
is particularly useful in cases where the estimator is a complex function of the true parameters.
The idea is simple. If we knew the true parameters θ∗, we could generate many (say S) fake
datasets, each of size N, from the true distribution, xs
i∼p(·|θ∗),f o rs=1:S,i=1:N.
We could then compute our estimator from each sample, ˆθs=f(xs
1:N)and use the empirical
distribution of the resulting samples as our estimate of the sampling distribution. Since θis
unknown, the idea of the parametric bootstrap is to generate the samples using ˆθ(D)instead.
An alternative, called the non-parametric bootstrap, is to sample the xs
i(with replacement)
from the original data D, and then compute the induced distribution as before. Some methods
for speeding up the bootstrap when applied to massive data sets are discussed in (Kleiner et al.
2011).
Figure 6.1 shows an example where we compute the sampling distribution of the MLE for
a Bernoulli using the parametric bootstrap. (Results using the non-parametric bootstrap areessentially the same.) We see that the sampling distribution is asymmetric, and therefore quitefar from Gaussian, when N=1 0; whenN= 100, the distribution looks more Gaussian, as
theory suggests (see below).
A natural question is: what is the connection between the parameter estimates ˆθ
s=ˆθ(xs
1:N)
computed by the bootstrap and parameter values sampled from the posterior, θs∼p(·|D)?
6.2. Sampling distribution of an estimator 193
Conceptually they are quite different. But in the common case that that the prior is not very
strong, they can be quite similar. For example, Figure 6.1(c-d) shows an example where wecompute the posterior using a uniform Beta(1,1) prior, and then sample from it. We see thatthe posterior and the sampling distribution are quite similar. So one can think of the bootstrapdistribution as a “poor man’s” posterior; see (Hastie et al. 2001, p235) for details.
However, perhaps surprisingly, bootstrap can be slower than posterior sampling. The reason
is that the bootstrap has to ﬁt the model Stimes, whereas in posterior sampling, we usually
only ﬁt the model once (to ﬁnd a local mode), and then perform local exploration around themode. Such local exploration is usually much faster than ﬁtting a model from scratch.
6.2.2 Large sample theory for the MLE *
In some cases, the sampling distribution for some estimators can be computed analytically. Inparticular, it can be shown that, under certain conditions, as the sample size tends to inﬁnity,the sampling distribution of the MLE becomes Gaussian. Informally, the requirement for thisresult to hold is that each parameter in the model gets to “see” an inﬁnite amount of data, andthat the model be identiﬁable. Unfortunately this excludes many of the models of interest tomachine learning. Nevertheless, let us assume we are in a simple setting where the theoremholds.
The center of the Gaussian will be the MLE ˆθ. But what about the variance of this Gaussian?
Intuitively the variance of the estimator will be (inversely) related to the amount of curvature ofthe likelihood surface at its peak. If the curvature is large, the peak will be “sharp”, and thevariance low; in this case, the estimate is “well determined”. By contrast, if the curvature issmall, the peak will be nearly “ﬂat”, so the variance is high.
Let us now formalize this intuition. Deﬁne the score function as the gradient of the log
likelihood evaluated at some point ˆθ:
s(ˆθ)/defines∇logp(D|θ)|
ˆθ(6.1)
Deﬁne the observed information matrix as the gradient of the negative score function, or
equivalently, the Hessian of the NLL:
J(ˆθ(D))/defines−∇s(ˆθ)=−∇2
θlogp(D|θ)|ˆθ(6.2)
In 1D, this becomes
J(ˆθ(D)) =−d
dθ2logp(D|θ)|ˆθ(6.3)
This is just a measure of curvature of the log-likelihood function at ˆθ.
Since we are studying the sampling distribution, D=(x1,...,xN)is a set of random
variables. The Fisher information matrix is deﬁned to be the expected value of the observed
information matrix:2
IN(ˆθ|θ∗)/definesEθ∗⎨bracketleftBig
J(ˆθ|D)⎨bracketrightBig
(6.4)
2. This is not the usual deﬁnition, but is equivalent to it under standard assumptions. More precisely, the standard
deﬁnition is as follows (we just give the scalar case to simplify notation): I(ˆθ|θ∗)/definesvarθ∗/bracketleftBig
d
dθlogp(X|θ)|ˆθ/bracketrightBig
, that
is, the variance of the score function. If ˆθis the MLE, it is easy to see that Eθ∗/bracketleftBig
d
dθlogp(X|θ)|ˆθ/bracketrightBig
=0(since
194 Chapter 6. Frequentist statistics
where Eθ∗[f(D)]/defines1
N⎨summationtextN
i=1f(xi)p(xi|θ∗)is the expected value of the function fwhen
applied to data sampled from θ∗.O f t e nθ∗, representing the “true parameter” that generated
the data, is assumed known, so we just write IN(ˆθ)/definesIN(ˆθ|θ∗)for short. Furthermore, it is
easy to see that IN(ˆθ)=NI1(ˆθ), because the log-likelihood for a sample of size Nis justN
times “steeper” than the log-likelihood for a sample of size 1. So we can drop the 1subscript
and just write I(ˆθ)/definesI1(ˆθ). This is the notation that is usually used.
Now letˆθ/definesˆθmle(D)be the MLE, where D∼θ∗. It can be shown that
ˆθ→N(θ∗,IN(θ∗)−1) (6.5)
asN→∞(see e.g., (Rice 1995, p265) for a proof). We say that the sampling distribution of the
MLE isasymptotically normal.
What about the variance of the MLE, which can be used as some measure of conﬁdence
in the MLE? Unfortunately, θ∗is unknown, so we can’t evaluate the variance of the sampling
distribution. However, we can approximate the sampling distribution by replacing θ∗withˆθ.
Consequently, the approximate standard errors ofˆθkare given by
ˆsek/definesIN(ˆθ)−1
2
kk(6.6)
For example, from Equation 5.60 we know that the Fisher information for a binomial sampling
model is
I(θ)=1
θ(1−θ)(6.7)
So the approximate standard error of the MLE is
ˆse=1⎨radicalBig
IN(ˆθ)=1⎨radicalBig
NI(ˆθ)=⎨parenleftBiggˆθ(1−ˆθ)
N⎨parenrightBigg1
2
(6.8)
whereˆθ=1
N⎨summationtext
iXi. Compare this to Equation 3.27, which is the posterior standard deviation
under a uniform prior.
6.3 Frequentist decision theory
In frequentist or classical decision theory, there is a loss function and a likelihood, but there is
no prior and hence no posterior or posterior expected loss. Thus there is no automatic way ofderiving an optimal estimator, unlike the Bayesian case. Instead, in the frequentist approach, weare free to choose any estimator or decision procedure δ:X→Awe want.
3
the gradient must be zero at a maximum), so the variance reduces to the expected square of the score function:
I(ˆθ|θ∗)=E θ∗/bracketleftBig
(d
dθlogp(X|θ))2/bracketrightBig
. It can be shown (e.g., (Rice 1995, p263)) that Eθ∗/bracketleftBig
(d
dθlogp(X|θ))2/bracketrightBig
=
−Eθ∗/bracketleftBig
d2
dθ2logp(X|θ)/bracketrightBig
, so now the Fisher information reduces to the expected second derivative of the NLL, which
is a much more intuitive quantity than the variance of the score.
3. In practice, the frequentist approach is usually only applied to one-shot statistical decision problems — such as
classiﬁcation, regression and parameter estimation — since its non-constructive nature makes it difficult to apply to
sequential decision problems, which adapt to data online.
6.3. Frequentist decision theory 195
Having chosen an estimator, we deﬁne its expected loss or riskas follows:
R(θ∗,δ)/definesEp(˜D|θ∗)⎨bracketleftBig
L(θ∗,δ(˜D))⎨bracketrightBig
=⎨integraldisplay
L(θ∗,δ(˜D))p(˜D|θ∗)d˜D (6.9)
where˜Dis data sampled from “nature’s distribution”, which is represented by parameter θ∗.I n
other words, the expectation is wrt the sampling distribution of the estimator. Compare this to
the Bayesian posterior expected loss:
ρ(a|D,π)/definesEp(θ|D,π)[L(θ,a)] =⎨integraldisplay
ΘL(θ,a)p(θ|D,π)dθ (6.10)
We see that the Bayesian approach averages over θ(which is unknown) and conditions on D
(which is known), whereas the frequentist approach averages over ˜D(thus ignoring the observed
data), and conditions on θ∗(which is unknown).
Not only is the frequentist deﬁnition unnatural, it cannot even be computed, because θ∗is
unknown. Consequently, we cannot compare different estimators in terms of their frequentistrisk. We discuss various solutions to this below.
6.3.1 Bayes risk
How do we choose amongst estimators? We need some way to convert R(θ∗,δ)into a single
measure of quality, R(δ), which does not depend on knowing θ∗. One approach is to put a
prior onθ∗, and then to deﬁne Bayes risk orintegrated risk of an estimator as follows:
RB(δ)/definesEp(θ∗)[R(θ∗,δ)] =⎨integraldisplay
R(θ∗,δ)p(θ∗)dθ∗(6.11)
ABayes estimator orBayes decision rule is one which minimizes the expected risk:
δB/definesargmin
δRB(δ) (6.12)
Note that the integrated risk is also called the preposterior risk, since it is before we have seen
the data. Minimizing this can be useful for experiment design.
We will now prove a very important theorem, that connects the Bayesian and frequentist
approaches to decision theory.
Theorem 6.3.1. A Bayes estimator can be obtained by minimizing the posterior expected loss for
eachx.
Proof.By switching the order of integration, we have
RB(δ)=⎨integraldisplay⎨bracketleftBigg⎨summationdisplay
x⎨summationdisplay
yL(y,δ(x))p(x,y|θ∗)⎨bracketrightBigg
p(θ∗)dθ∗(6.13)
=⎨summationdisplay
x⎨summationdisplay
y⎨integraldisplay
ΘL(y,δ(x))p(x,y,θ∗)dθ∗(6.14)
=⎨summationdisplay
x⎨bracketleftBigg⎨summationdisplay
yL(y,δ(x))p(y|x)dy⎨bracketrightBigg
p(x) (6.15)
=⎨summationdisplay
xρ(δ(x)|x)p(x) (6.16)
196 Chapter 6. Frequentist statistics
R(θ,δ2)R(θ,δ1)
θR
Figure 6.2 Risk functions for two decision procedures, δ1andδ2. Sinceδ1has lower worst case risk, it
is the minimax estimator, even though δ2has lower risk for most values of θ. Thus minimax estimators
are overly conservative.
To minimize the overall expectation, we just minimize the term inside for each x, so our decision
rule is to pick
δB(x) = argmin
a∈Aρ(a|x) (6.17)
Hence we see that the picking the optimal action on a case-by-case basis (as in the Bayesian
approach) is optimal on average (as in the frequentist approach). In other words, the Bayesian
approach provides a good way of achieving frequentist goals. In fact, one can go further andprove the following.
Theorem 6.3.2 (Wald, 1950). Every admissable decision rule is a Bayes decision rule with respect
to some, possibly improper, prior distribution.
This theorem shows that the best way to minimize frequentist risk is to be Bayesian! See
(Bernardo and Smith 1994, p448) for further discussion of this point.
6.3.2 Minimax risk
Obviously some frequentists dislike using Bayes risk since it requires the choice of a prior (al-
though this is only in the evaluation of the estimator, not necessarily as part of its construction).An alternative approach is as follows. Deﬁne the maximum risk of an estimator as
R
max(δ)/definesmax
θ∗R(θ∗,δ) (6.18)
Aminimax rule is one which minimizes the maximum risk:
δMM/definesargmin
δRmax(δ) (6.19)
6.3. Frequentist decision theory 197
For example, in Figure 6.2, we see that δ1has lower worst-case risk than δ2, ranging over all
possible values of θ∗, so it is the minimax estimator (see Section 6.3.3.1 for an explanation of
how to compute a risk function for an actual model).
Minimax estimators have a certain appeal. However, computing them can be hard. And
furthermore, they are very pessimistic. In fact, one can show that all minimax estimators
are equivalent to Bayes estimators under a least favorable prior. In most statistical situations
(excluding game theoretic ones), assuming nature is an adversary is not a reasonable assumption.
6.3.3 Admissible estimators
The basic problem with frequentist decision theory is that it relies on knowing the true distri-butionp(·|θ
∗)in order to evaluate the risk. However, It might be the case that some estimators
are worse than others regardless of the value of θ∗. In particular, if R(θ,δ 1)≤R(θ,δ 2)for all
θ∈Θ, then we say that δ1dominates δ2. The domination is said to be strict if the inequality
is strict for some θ. An estimator is said to be admissible if it is not strictly dominated by any
other estimator.
6.3.3.1 Example
Let us give an example, based on (Bernardo and Smith 1994). Consider the problem of estimatingthe mean of a Gaussian. We assume the data is sampled from x
i∼N(θ∗,σ2=1 )and use
quadratic loss, L(θ,ˆθ)=(θ−ˆθ)2. The corresponding risk function is the MSE. Some possible
decision rules or estimators ˆθ(x)=δ(x)are as follows:
•δ1(x)=x, the sample mean
•δ2(x)=˜x, the sample median
•δ3(x)=θ0, a ﬁxed value
•δκ(x), the posterior mean under a N(θ|θ0,σ2/κ)prior:
δκ(x)=N
N+κx+κ
N+κθ0=wx+(1−w)θ0 (6.20)
Forδκ, we consider a weak prior, κ=1, and a stronger prior, κ=5. The prior mean is θ0,
some ﬁxed value. We assume σ2is known. (Thus δ3(x)is the same as δκ(x)with an inﬁnitely
strong prior, κ=∞.)
Let us now derive the risk functions analytically. (We can do this since in this toy example,
we know the true parameter θ∗.) In Section 6.4.4, we show that the MSE can be decomposed
into squared bias plus variance:
MSE(ˆθ(·)|θ∗)=v a r⎨bracketleftBig
ˆθ⎨bracketrightBig
+bias2(ˆθ) (6.21)
The sample mean is unbiased, so its risk is
MSE(δ1|θ∗)=v a r[x]=σ2
N(6.22)
198 Chapter 6. Frequentist statistics
−2 −1.5 −1 −0.5 0 0.5 1 1.5 200.050.10.150.20.250.30.350.40.450.5
θ*R(θ*,δ)risk functions for n=5
  
mle
median
fixed
postmean1
postmean5
(a)−2 −1.5 −1 −0.5 0 0.5 1 1.5 200.020.040.060.080.10.120.140.160.18
θ*R(θ*,δ)risk functions for n=20
  
mle
median
fixed
postmean1
postmean5
(b)
Figure 6.3 Risk functions for estimating the mean of a Gaussian using data sampled N(θ∗,σ2=1 ).
The solid dark blue horizontal line is the MLE, the solid light blue curved line is the posterior mean when
κ=5. Left:N=5samples. Right: N=2 0samples. Based on Figure B.1 of (Bernardo and Smith 1994).
Figure generated by riskFnGauss .
The sample median is also unbiased. One can show that the variance is approximately π/(2N),
so
MSE(δ2|θ∗)=π
2N(6.23)
Forδ3(x)=θ0, the variance is zero, so
MSE(δ3|θ∗)=(θ∗−θ0)2(6.24)
Finally, for the posterior mean, we have
MSE(δκ|θ∗)=E⎨bracketleftBig
(wx+(1−w)θ0−θ∗)2⎨bracketrightBig
(6.25)
=E⎨bracketleftBig
(w(x−θ∗)+(1−w)(θ0−θ∗))2⎨bracketrightBig
(6.26)
=w2σ2
N+(1−w)2(θ0−θ∗)2(6.27)
=1
(N+κ)2⎨parenleftbig
Nσ2+κ2(θ0−θ∗)2⎨parenrightbig
(6.28)
These functions are plotted in Figure 6.3 for N∈{5,20}. We see that in general, the best
estimator depends on the value of θ∗, which is unknown. If θ∗is very close to θ0, thenδ3
(which just predicts θ0) is best. If θ∗is within some reasonable range around θ0, then the
posterior mean, which combines the prior guess of θ0with the actual data, is best. If θ∗is far
fromθ0, the MLE is best. None of this should be suprising: a small amount of shrinkage (using
the posterior mean with a weak prior) is usually desirable, assuming our prior mean is sensible.
What is more surprising is that the risk of decision rule δ2(sample median) is always higher
than that of δ1(sample mean) for every value of θ∗. Consequently the sample median is an
6.3. Frequentist decision theory 199
inadmissible estimator for this particular problem (where the data is assumed to come from a
Gaussian).
In practice, the sample median is often better than the sample mean, because it is more
robust to outliers. One can show (Minka 2000d) that the median is the Bayes estimator (undersquared loss) if we assume the data comes from a Laplace distribution, which has heavier tailsthan a Gaussian. More generally, we can construct robust estimators by using ﬂexible modelsof our data, such as mixture models or non-parametric density estimators (Section 14.7.2), andthen computing the posterior mean or median.
6.3.3.2 Stein’s paradox *
Suppose we have Niid random variables X
i∼N(θi,1), and we want to estimate the θi. The
obvious estimator is the MLE, which in this case sets ˆθi=xi. It turns out that this is an
inadmissible estimator under quadratic loss, when N≥4.
To show this, it suffices to construct an estimator that is better. The James-Stein estimator is
one such estimator, and is deﬁned as follows:
ˆθi=ˆBx+(1−ˆB)xi=x+(1−ˆB)(xi−x) (6.29)
wherex=1
N⎨summationtextN
i=1xiand0<B<1 is some tuning constant. This estimate “shrinks” the
θitowards the overall mean. (We derive this estimator using an empirical Bayes approach in
Section 5.6.2.)
It can be shown that this shrinkage estimator has lower frequentist risk (MSE) than the MLE
(sample mean) for N≥4. This is known as Stein’s paradox. The reason it is called a paradox
is illustrated by the following example. Suppose θiis the “true” IQ of student iandXiis his
test score. Why should my estimate of θidepend on the global mean x, and hence on some
other student’s scores? One can create even more paradoxical examples by making the different
dimensions be qualitatively different, e.g., θ1is my IQ, θ2is the average rainfall in Vancouver,
etc.
The solution to the paradox is the following. If your goal is to estimate just θi, you cannot do
better than using xi, but if the goal is to estimate the whole vector θ, and you use squared error
as your loss function, then shrinkage helps. To see this, suppose we want to estimate ||θ||2
2from
a single sample x∼N(θ,I). A simple estimate is ||x||22, but this will overestimate the result,
since
E⎨bracketleftbig
/bardblx/bardbl2
2⎨bracketrightbig
=E⎨bracketleftBigg⎨summationdisplay
ix2i⎨bracketrightBigg
=N⎨summationdisplay
i=1⎨parenleftbig
1+θ2
i⎨parenrightbig
=N+||θ||22(6.30)
Consequently we can reduce our risk by pooling information, even from unrelated sources, and
shrinking towards the overall mean. In Section 5.6.2, we give a Bayesian explanation for this.See also (Efron and Morris 1975).
6.3.3.3 Admissibility is not enough
It seems clear that we can restrict our search for good estimators to the class of admissibleestimators. But in fact it is easy to construct admissible estimators, as we show in the followingexample.
200 Chapter 6. Frequentist statistics
Theorem 6.3.3. LetX∼N(θ,1), and consider estimating θunder squared loss. Let δ1(x)=θ 0,
a constant independent of the data. This is an admissible estimator.
Proof.Suppose not. Then there is some other estimator δ2with smaller risk, so R(θ∗,δ2)≤
R(θ∗,δ1), where the inequality must be strict for some θ∗. Suppose the true parameter is
θ∗=θ0. ThenR(θ∗,δ1)=0, and
R(θ∗,δ2)=⎨integraldisplay
(δ2(x)−θ0)2p(x|θ0)dx (6.31)
Since0≤R(θ∗,δ2)≤R(θ∗,δ1)for allθ∗, andR(θ0,δ1)=0,w eh a v e R(θ0,δ2)=0and
henceδ2(x)=θ 0=δ1(x). Thus the only way δ2can avoid having higher risk than δ1at some
speciﬁc point θ0is by being equal to δ1. Hence there is no other estimator δ2with strictly lower
risk, soδ2is admissible.
6.4 Desirable properties of estimators
Sincefrequentistdecisiontheorydoesnotprovideanautomaticwaytochoosethebestestimator,
we need to come up with other heuristics for choosing amongst them. In this section, we discusssome properties we would like estimators to have. Unfortunately, we will see that we cannotachieve all of these properties at the same time.
6.4.1 Consistent estimators
An estimator is said to be consistent if it eventually recovers the true parameters that generated
the data as the sample size goes to inﬁnity, i.e., ˆθ(D)→θ∗as|D| → ∞ (where the arrow
denotes convergence in probability). Of course, this concept only makes sense if the data actuallycomes from the speciﬁed model with parameters θ
∗, which is not usually the case with real
data. Nevertheless, it can be a useful theoretical property.
It can be shown that the MLE is a consistent estimator. The intuitive reason is that maxi-
mizing likelihood is equivalent to minimizing KL⎨parenleftBig
p(·|θ∗)||p(·|ˆθ)⎨parenrightBig
,w h e r ep(·|θ∗)is the true
distribution and p(·|ˆθ)is our estimate. We can achieve 0 KL divergence iff ˆθ=θ∗.4
6.4.2 Unbiased estimators
Thebiasof an estimator is deﬁned as
bias(ˆθ(·)) = Ep(D|θ∗)⎨bracketleftBig
ˆθ(D)−θ∗⎨bracketrightBig
(6.32)
whereθ∗is the true parameter value. If the bias is zero, the estimator is called unbiased. This
means the sampling distribution is centered on the true parameter. For example, the MLE for aGaussian mean is unbiased:
bias(ˆμ)=E[
x]−μ=E⎨bracketleftBigg
1
NN⎨summationdisplay
i=1xi⎨bracketrightBigg
−μ=Nμ
N−μ=0 (6.33)
4. If the model is unidentiﬁable, the MLE may select a set of parameters that is different from the true parameters
but for which the induced distribution, p(·|ˆθ), is the same as the exact distribution. Such parameters are said to be
likelihood equivalent.
6.4. Desirable properties of estimators 201
However, the MLE for a Gaussian variance, ˆσ2, is not an unbiased estimator of σ2. In fact, one
can show (Exercise 6.3) that
E⎨bracketleftbig
ˆσ2⎨bracketrightbig
=N−1
Nσ2(6.34)
However, the following estimator
ˆσ2
N−1=N
N−1ˆσ2=1
N−1N⎨summationdisplay
i=1(xi−x)2(6.35)
isan unbiased estimator, which we can easily prove as follows:
E⎨bracketleftbig
ˆσ2
N−1⎨bracketrightbig
=E⎨bracketleftbiggN
N−1ˆσ2⎨bracketrightbigg
=N
N−1N−1
Nσ2=σ2(6.36)
In Matlab, var(X)returnsˆσ2
N−1, whereas var(X,1) returnsˆσ2(the MLE). For large enough
N, the difference will be negligible.
Although the MLE may sometimes be a biased estimator, one can show that asymptotically, it
is always unbiased. (This is necessary for the MLE to be a consistent estimator.)
Although being unbiased sounds like a desirable property, this is not always true. See Sec-
tion 6.4.4 and (Lindley 1972) for discussion of this point.
6.4.3 Minimum variance estimators
It seems intuitively reasonable that we want our estimator to be unbiased (although we shall
give some arguments against this claim below). However, being unbiased is not enough. Forexample, suppose we want to estimate the mean of a Gaussian from D={x
1,...,x N}. The
estimator that just looks at the ﬁrst data point, ˆθ(D)=x 1, is an unbiased estimator, but will
generally be further from θ∗than the empirical mean x(which is also unbiased). So the variance
of an estimator is also important.
A natural question is: how long can the variance go? A famous result, called the Cramer-
Rao lower bound, provides a lower bound on the variance of any unbiased estimator. Moreprecisely,
Theorem 6.4.1 (Cramer-Rao inequality). LetX
1,...,X n∼p(X|θ0)andˆθ=ˆθ(x1,...,x n)be
an unbiased estimator of θ0. Then, under various smoothness assumptions on p(X|θ0),w eh a v e
var⎨bracketleftBig
ˆθ⎨bracketrightBig
≥1
nI(θ0)(6.37)
whereI(θ0)is the Fisher information matrix (see Section 6.2.2).
A proof can be found e.g., in (Rice 1995, p275).
It can be shown that the MLE achieves the Cramer Rao lower bound, and hence has the
smallest asymptotic variance of any unbiased estimator. Thus MLE is said to be asymptotically
optimal.
202 Chapter 6. Frequentist statistics
6.4.4 The bias-variance tradeoff
Although using an unbiased estimator seems like a good idea, this is not always the case. To see
why, suppose we use quadratic loss. As we showed above, the corresponding risk is the MSE.We now derive a very useful decomposition of the MSE. (All expectations and variances are wrtthe true distribution p(D|θ
∗), but we drop the explicit conditioning for notational brevity.) Let
ˆθ=ˆθ(D)denote the estimate, and θ=E/bracketleftBig
ˆθ/bracketrightBig
denote the expected value of the estimate (as we
varyD). Then we have
E/bracketleftBig
(ˆθ−θ∗)2/bracketrightBig
=E/bracketleftbigg/bracketleftBig
(ˆθ−θ)+(θ−θ∗)/bracketrightBig2/bracketrightbigg
(6.38)
=E/bracketleftbigg/parenleftBig
ˆθ−θ/parenrightBig2/bracketrightbigg
+2(θ−θ∗)E/bracketleftBig
ˆθ−θ/bracketrightBig
+(θ−θ∗)2(6.39)
=E/bracketleftbigg/parenleftBig
ˆθ−θ/parenrightBig2/bracketrightbigg
+(θ−θ∗)2(6.40)
=v a r/bracketleftBig
ˆθ/bracketrightBig
+bias2(ˆθ) (6.41)
In words,
MSE = variance + bias2(6.42)
This is called the bias-variance tradeoff (see e.g., (Geman et al. 1992)). What it means is that
it might be wise to use a biased estimator, so long as it reduces our variance, assuming our goalis to minimize squared error.
6.4.4.1 Example: estimating a Gaussian mean
Let us give an example, based on (Hoff 2009, p79). Suppose we want to estimate the mean of aGaussian from x=(x
1,...,x N). We assume the data is sampled from xi∼N(θ∗=1,σ2).
An obvious estimate is the MLE. This has a bias of 0 and a variance of
var[x|θ∗]=σ2
N(6.43)
But we could also use a MAP estimate. In Section 4.6.1, we show that the MAP estimate undera Gaussian prior of the form N(θ
0,σ2/κ0)is given by
˜x/definesN
N+κ0x+κ0
N+κ0θ0=wx+(1−w)θ0 (6.44)
where0≤w≤1controls how much we trust the MLE compared to our prior. (This is also the
posterior mean, since the mean and mode of a Gaussian are the same.) The bias and varianceare given by
E[˜x]−θ
∗=wθ0+(1−w)θ0−θ∗=( 1−w)(θ0−θ∗) (6.45)
var[˜x]=w2σ2
N(6.46)
6.4. Desirable properties of estimators 203
−1 −0.5 0 0.5 1 1.5 2 2.500.511.5sampling distribution, truth = 1.0, prior = 0.0, n = 5
  
postMean0
postMean1
postMean2
postMean3
(a)0 10 20 30 40 500.50.60.70.80.911.11.21.3
sample sizerelative MSEMSE of postmean / MSE of MLE
  
postMean0
postMean1
postMean2
postMean3
(b)
Figure 6.4 Left: Sampling distribution of the MAP estimate with different prior strengths κ0. (The MLE
corresponds to κ0=0.) Right: MSE relative to that of the MLE versus sample size. Based on Figure 5.6 of
(Hoff 2009). Figure generated by samplingDistGaussShrinkage .
So although the MAP estimate is biased (assuming w<1), it has lower variance.
Let us assume that our prior is slightly misspeciﬁed, so we use θ0=0, whereas the truth is
θ∗=1. In Figure 6.4(a), we see that the sampling distribution of the MAP estimate for κ0>0
is biased away from the truth, but has lower variance (is narrower) than that of the MLE.
In Figure 6.4(b), we plot mse(˜x)/mse(x)vsN. We see that the MAP estimate has lower MSE
than the MLE, especially for small sample size, for κ0∈{1,2}. The case κ0=0corresponds to
the MLE, and the case κ0=3corresponds to a strong prior, which hurts performance because
the prior mean is wrong. It is clearly important to “tune” the strength of the prior, a topic we
discuss later.
6.4.4.2 Example: ridge regression
Another important example of the bias variance tradeoff arises in ridge regression, which wediscuss in Section 7.5. In brief, this corresponds to MAP estimation for linear regression undera Gaussian prior, p(w)=N(w|0,λ
−1I)The zero-mean prior encourages the weights to be
small, which reduces overﬁtting; the precision term, λ, controls the strength of this prior. Setting
λ=0results in the MLE; using λ>0results in a biased estimate. To illustrate the effect on
the variance, consider a simple example. Figure 6.5 on the left plots each individual ﬁtted curve,and on the right plots the average ﬁtted curve. We see that as we increase the strength of theregularizer, the variance decreases, but the bias increases.
6.4.4.3 Bias-variance tradeoff for classiﬁcation
If we use 0-1 loss instead of squared error, the above analysis breaks down, since the frequentistrisk is no longer expressible as squared bias plus variance. In fact, one can show (Exercise 7.2of (Hastie et al. 2009)) that the bias and variance combine multiplicatively. If the estimate is on
204 Chapter 6. Frequentist statistics
0 0.2 0.4 0.6 0.8 1−1.5−1−0.500.511.5ln(λ) = 5
0 0.2 0.4 0.6 0.8 1−1−0.500.51ln(λ) = 5
0 0.2 0.4 0.6 0.8 1−1.5−1−0.500.511.5ln(λ) = −5
0 0.2 0.4 0.6 0.8 1−1−0.500.51ln(λ) = −5
Figure 6.5 Illustration of bias-variance tradeoff for ridge regression. We generate 100 data sets from the
true function, shown in solid green. Left: we plot the regularized ﬁt for 20 different data sets. We use
linear regression with a Gaussian RBF expansion, with 25 centers evenly spread over the [0,1]interval.
Right: we plot the average of the ﬁts, averaged over all 100 datasets. Top row: strongly regularized: we seethat the individual ﬁts are similar to each other (low variance), but the average is far from the truth (highbias). Bottom row: lightly regularized: we see that the individual ﬁts are quite different from each other(high variance), but the average is close to the truth (low bias). Based on (Bishop 2006a) Figure 3.5. Figuregenerated by biasVarModelComplexity3 .
the correct side of the decision boundary, then the bias is negative, and decreasing the variance
will decrease the misclassiﬁcation rate. But if the estimate is on the wrong side of the decisionboundary, then the bias is positive, so it pays to increasethe variance (Friedman 1997a). This
little known fact illustrates that the bias-variance tradeoff is not very useful for classiﬁcation.It is better to focus on expected loss (see below), not directly on bias and variance. We canapproximate the expected loss using cross validatinon, as we discuss in Section 6.5.3.
6.5 Empirical risk minimization
Frequentist decision theory suffers from the fundamental problem that one cannot actuallycompute the risk function, since it relies on knowing the true data distribution. (By contrast,the Bayesian posterior expected loss can always be computed, since it conditions on the thedata rather than conditioning on θ
∗.) However, there is one setting which avoids this problem,
and that is where the task is to predict observable quantities, as opposed to estimating hiddenvariables or parameters. That is, instead of looking at loss functions of the form L(θ,δ(D)),
whereθis the true but unknown parameter, and δ(D)is our estimator, let us look at loss
6.5. Empirical risk minimization 205
functions of the form L(y,δ(x)),w h e r e yis the true but unknown response, and δ(x)is our
prediction given the input x. In this case, the frequentist risk becomes
R(p∗,δ)/definesE(x,y)∼p∗[L(y,δ(x)] =/summationdisplay
x/summationdisplay
yL(y,δ(x))p∗(x,y) (6.47)
wherep∗represents “nature’s distribution”. Of course, this distribution is unknown, but a simple
approach is to use the empirical distribution, derived from some training data, to approximate
p∗, i.e.,
p∗(x,y)≈pemp(x,y)/defines1
NN/summationdisplay
i=1δxi(x)δyi(y) (6.48)
We then deﬁne the empirical risk as follows:
Remp(D,D)/definesR(pemp,δ)=1
NN/summationdisplay
i=1L(yi,δ(xi)) (6.49)
In the case of 0-1 loss, L(y,δ(x)) =I(y/negationslash=δ(x)), this becomes the misclassiﬁcation rate.I n
the case of squared error loss, L(y,δ(x)) = (y−δ(x))2, this becomes the mean squared error.
We deﬁne the task of empirical risk minimization orERMas ﬁnding a decision procedure
(typically a classiﬁcation rule) to minimize the empirical risk:
δERM(D) = argmin
δRemp(D,δ) (6.50)
In the unsupervised case, we eliminate all references to y, and replace L(y,δ(x))with
L(x,δ(x)), where, for example, L(x,δ(x)) =||x−δ(x)||2
2, which measures the reconstruc-
tion error. We can deﬁne the decision rule using δ(x)=decode( encode(x)), as in vector
quantization (Section 11.4.2.6) or PCA (section 12.2). Finally, we deﬁne the empirical risk as
Remp(D,δ)=1
NN/summationdisplay
i=1L(xi,δ(xi)) (6.51)
Of course, we can always trivially minimize this risk by setting δ(x)=x, so it is critical that
the encoder-decoder go via some kind of bottleneck.
6.5.1 Regularized risk minimization
Note that the empirical risk is equal to the Bayes risk if our prior about “nature’s distribution” is
that it is exactly equal to the empirical distribution (Minka 2001b):
E[R(p∗,δ)|p∗=pemp]=Remp(D,δ) (6.52)
Therefore minimizing the empirical risk will typically result in overﬁtting. It is therefore oftennecessary to add a complexity penalty to the objective function:
R
/prime(D,δ)=Remp(D,δ)+λC(δ) (6.53)
206 Chapter 6. Frequentist statistics
whereC(δ)measures the complexity of the prediction function δ(x)andλcontrols the strength
of the complexity penalty. This approach is known as regularized risk minimization (RRM).
Note that if the loss function is negative log likelihood, and the regularizer is a negative log
prior, this is equivalent to MAP estimation.
The two key issues in RRM are: how do we measure complexity, and how do we pick λ.F o r
a linear model, we can deﬁne the complexity of in terms of its degrees of freedom, discussed inSection 7.5.3. For more general models, we can use the VC dimension, discussed in Section 6.5.4.To pickλ, we can use the methods discussed in Section 6.5.2.
6.5.2 Structural risk minimization
The regularized risk minimization principle says that we should ﬁt the model, for a givencomplexity penalty, by using
ˆδ
λ=a r g m i n
δ[Remp(D,δ)+λC(δ)] (6.54)
But how should we pick λ? We cannot using the training set, since this will underestimate the
true risk, a problem known as optimism of the training error. As an alternative, we can use
the following rule, known as the structural risk minimization principle: (Vapnik 1998):
ˆλ=a r g m i n
λˆR(ˆδλ) (6.55)
whereˆR(δ)is an estimate of the risk. There are two widely used estimates: cross validation
and theoretical upper bounds on the risk. We discuss both of these below.
6.5.3 Estimating the risk using cross validation
We can estimate the risk of some estimator using a validation set. If we don’t have a separatevalidation set, we can use cross validation (CV), as we brieﬂy discussed in Section 1.4.8. More
precisely, CV is deﬁned as follows. Let there be N=|D|data cases in the training set. Denote
the data in the k’th test fold by D
kand all the other data by D−k. (Instratiﬁed CV, these folds
are chosen so the class proportions (if discrete labels are present) are roughly equal in eachfold.) Let Fbe a learning algorithm or ﬁtting function that takes a dataset and a model index
m(this could a discrete index, such as the degree of a polynomial, or a continuous index, such
as the strength of a regularizer) and returns a parameter vector:
ˆθ
m=F(D,m) (6.56)
Finally, let Pbe a prediction function that takes an input and a parameter vector and returns a
prediction:
ˆy=P(x,ˆθ)=f(x,ˆθ) (6.57)
Thus the combined ﬁt-predict cycle is denoted as
fm(x,D)=P(x,F(D,m)) (6.58)
6.5. Empirical risk minimization 207
TheK-fold CV estimate of the risk of fmis deﬁned by
R(m,D,K)/defines1
NK/summationdisplay
k=1/summationdisplay
i∈DkL(yi,P(xi,F(D−k,m))) (6.59)
Note that we can call the ﬁtting algorithm once per fold. Let fk
m(x)=P(x,F(D−k,m))be
the function that was trained on all the data except for the test data in fold k. Then we can
rewrite the CV estimate as
R(m,D,K)=1
NK/summationdisplay
k=1/summationdisplay
i∈DkL/parenleftbig
yi,fk
m(xi)/parenrightbig
=1
NN/summationdisplay
i=1L/parenleftBig
yi,fk(i)
m(xi)/parenrightBig
(6.60)
wherek(i)is the fold in which iis used as test data. In other words, we predict yiusing a
model that was trained on data that does not contain xi.
OfK=N, the method is known as leave one out cross validation or LOOCV. In this case,
n the estimated risk becomes
R(m,D,N)=1
NN/summationdisplay
i=1L/parenleftbig
yi,f−i
m(xi)/parenrightbig
(6.61)
wherefi
m(x)=P(x,F(D−i,m)). This requires ﬁtting the model Ntimes, where for f−i
mwe
omit thei’th training case. Fortunately, for some model classes and loss functions (namely linear
models and quadratic loss), we can ﬁt the model once, and analytically “remove” the effect of
thei’th training case. This is known as generalized cross validation or GCV.
6.5.3.1 Example: using CV to pick λfor ridge regression
As a concrete example, consider picking the strength of the /lscript2regularizer in penalized linear
regression. We use the following rule:
ˆλ=a r g m i n
λ∈[λmin,λmax]R(λ,Dtrain,K) (6.62)
where[λmin,λmax]is a ﬁnite range of λvalues that we search over, and R(λ,Dtrain,K)is the
K-fold CV estimate of the risk of using λ, given by
R(λ,Dtrain,K)=1
|Dtrain|K/summationdisplay
k=1/summationdisplay
i∈DkL(yi,fk
λ(xi)) (6.63)
wherefk
λ(x)=xTˆwλ(D−k)is the prediction function trained on data excluding fold k, and
ˆwλ(D)=a r gm i n wNLL(w,D)+λ||w||2
2is the MAP estimate. Figure 6.6(b) gives an example
of a CV estimate of the risk vs log(λ), where the loss function is squared error.
When performing classiﬁcation, we usually use 0-1 loss. In this case, we optimize a convex
upper bound on the empirical risk to estimate wλm but we optimize (the CV estimate of) the
risk itself to estimate λ. We can handle the non-smooth 0-1 loss function when estimating λ
because we are using brute-force search over the entire (one-dimensional) space.
When we have more than one or two tuning parameters, this approach becomes infeasible.
In such cases, one can use empirical Bayes, which allows one to optimize large numbers of
hyper-parameters using gradient-based optimizers instead of brute-force search. See Section 5.6for details.
208 Chapter 6. Frequentist statistics
−25 −20 −15 −10 −5 0 502468101214
log lambdamean squared error
  
train mse
test mse
(a)−15 −10 −5 0 502468101214161820
log lambdamse5−fold cross validation, ntrain = 50
(b)
Figure 6.6 (a) Mean squared error for /lscript2penalized degree 14 polynomial regression vs log regularizer.
Same as in Figures 7.8, except now we have N=5 0training points instead of 21. The stars correspond
to the values used to plot the functions in Figure 7.7. (b) CV estimate. The vertical scale is truncated for
clarity. The blue line corresponds to the value chosen by the one standard error rule. Figure generated bylinregPolyVsRegDemo .
6.5.3.2 The one standard error rule
The above procedure estimates the risk, but does not give any measure of uncertainty. A
standard frequentist measure of uncertainty of an estimate is the standard error of the mean,deﬁned by
se=ˆσ
√
N=/radicalbigg
ˆσ2
N(6.64)
whereˆσ2is an estimate of the variance of the loss:
ˆσ2=1
NN/summationdisplay
i=1(Li−L)2,Li=L(yi,fk(i)
m(xi))L=1
NN/summationdisplay
i=1Li (6.65)
Note that σmeasures the intrinsic variability of Liacross samples, whereas semeasures our
uncertainty about the mean L.
Suppose we apply CV to a set of models and compute the mean and se of their estimated
risks. A common heuristic for picking a model from these noisy estimates is to pick the valuewhich corresponds to the simplest model whose risk is no more than one standard error abovethe risk of the best model; this is called the one-standard error rule (Hastie et al. 2001, p216).
For example, in Figure 6.6, we see that this heuristic does not choose the lowest point on thecurve, but one that is slightly to its right, since that corresponds to a more heavily regularizedmodel with essentially the same empirical performance.
6.5. Empirical risk minimization 209
6.5.3.3 CV for model selection in non-probabilistic unsupervised learning
If we are performing unsupervised learning, we must use a loss function such as L(x,δ(x)) =
||x−δ(x)||2, which measures reconstruction error. Here δ(x)is some encode-decode scheme.
However, as we discussed in Section 11.5.2, we cannot use CV to determine the complexity of δ,
since we will always get lower loss with a more complex model, even if evaluated on the test set.
This is because more complex models will compress the data less, and induce less distortion.Consequently, we must either use probabilistic models, or invent other heuristics.
6.5.4 Upper bounding the risk using statistical learning theory *
The principle problem with cross validation is that it is slow, since we have to ﬁt the modelmultiple times. This motivates the desire to compute analytic approximations or bounds tothe generalization error. This is the studied in the ﬁeld of statistical learning theory (SLT).
More precisely, SLT tries to bound the risk R(p
∗,h)for any data distribution p∗and hypothesis
h∈Hin terms of the empirical risk Remp(D,h), the sample size N=|D|, and the size of the
hypothesis space H.
Let us initially consider the case where the hypothesis space is ﬁnite, with size dim(H)=|H|.
In other words, we are selecting a model/ hypothesis from a ﬁnite list, rather than optimizingreal-valued parameters, Then we can prove the following.
Theorem 6.5.1. For any data distribution p
∗, and any dataset Dof sizeNdrawn from p∗, the
probability that our estimate of the error rate will be more than /epsilon1wrong, in the worst case, is upper
bounded as follows:
P/parenleftbigg
max
h∈H|Remp(D,h)−R(p∗,h)|>/epsilon1/parenrightbigg
≤2dim(H)e−2N/epsilon12(6.66)
Proof.To prove this, we need two useful results. First, Hoeffding’s inequality, which states that
ifX1,...,X N∼Ber(θ), then, for any /epsilon1>0,
P(|x−θ|>/epsilon1)≤2e−2N/epsilon12(6.67)
wherex=1
N/summationtextN
i=1xi. Second, the union bound, which says that if A1,...,A dare a set of
events, then P(∪d
i=1Ai)≤/summationtextd
i=1P(Ai).
Finally, fornotationalbrevity, let R(h)=R(h,p∗)bethetruerisk, and ˆRN(h)=Remp(D,h)
be the empirical risk.
Using these results we have
P/parenleftbigg
max
h∈H|ˆRN(h)−R(h)|>/epsilon1/parenrightbigg
=P/parenleftBigg/uniondisplay
h∈H|ˆRN(h)−R(h)|>/epsilon1/parenrightBigg
(6.68)
≤/summationdisplay
h∈HP/parenleftBig
|ˆRN(h)−R(h)|>/epsilon1/parenrightBig
(6.69)
≤/summationdisplay
h∈H2e−2N/epsilon12=2d i m ( H)e−2N/epsilon12(6.70)
210 Chapter 6. Frequentist statistics
Ths bound tells us that the optimism of the training error increases with dim(H)but de-
creases with N=|D|, as is to be expected.
If the hypothesis space His inﬁnite (e.g., we have real-valued parameters), we cannot use
dim(H)=|H|. Instead, we can use a quantity called the Vapnik-Chervonenkis orVCdimen-
sion of the hypothesis class. See (Vapnik 1998) for details.
Stepping back from all the theory, the key intuition behind statistical learning theory is quite
simple. Suppose we ﬁnd a model with low empirical risk. If the hypothesis space His very
big, relative to the data size, then it is quite likely that we just got “lucky” and were given a
data set that is well-modeled by our chosen function by chance. However, this does not meanthat such a function will have low generalization error. But if the hypothesis class is sufficientlyconstrained in size, and/or the training set is sufficiently large, then we are unlikely to get luckyin this way, so a low empirical risk is evidence of a low true risk.
Note that optimism of the training error does not necessarily increase with model complexity,
but it does increase with the number of different models that are being searched over.
The advantage of statistical learning theory compared to CV is that the bounds on the risk
are quicker to compute than using CV. The disadvantage is that it is hard to compute the VCdimension for many interesting models, and the upper bounds are usually very loose (althoughsee (Kaariainen and Langford 2005)).
One can extend statistical learning theory by taking computational complexity of the learner
into account. This ﬁeld is called computational learning theory orCOLT. Most of this work
focuses on the case where his a binary classiﬁer, and the loss function is 0-1 loss. If we observe
a low empirical risk, and the hypothesis space is suitably “small”, then we can say that ourestimated function is probably approximately correct orPAC. A hypothesis space is said to be
efficiently PAC-learnable if there is a polynomial time algorithm that can identify a function
that is PAC. See (Kearns and Vazirani 1994) for details.
6.5.5 Surrogate loss functions
Minimizing the loss in the ERM/ RRM framework is not always easy. For example, we mightwant to optimize the AUC or F1 scores. Or more simply, we might just want to minimize the 0-1loss, as is common in classiﬁcation. Unfortunately, the 0-1 risk is a very non-smooth objectiveand hence is hard to optimize. One alternative is to use maximum likelihood estimation instead,since log-likelihood is a smooth convex upper bound on the 0-1 risk, as we show below.
To see this, consider binary logistic regression, and let y
i∈{ −1,+1}. Suppose our decision
function computes the log-odds ratio,
f(xi)=l o gp(y=1|xi,w)
p(y=−1|xi,w)=wTxi=ηi (6.71)
Then the corresponding probability distribution on the output label is
p(yi|xi,w) = sigm(y iηi) (6.72)
Let us deﬁne the log-lossas as
Lnll(y,η)=−logp(y|x,w)=l o g ( 1+ e−yη) (6.73)
6.6. Pathologies of frequentist statistics * 211
−2 −1.5 −1 −0.5 0 0.5 1 1.5 200.511.522.53
ηloss
  
0−1
hinge
logloss
Figure 6.7 Illustration of various loss functions for binary classiﬁcation. The horizontal axis is the margin
yη, the vertical axis is the loss. The log loss uses log base 2. Figure generated by hingeLossPlot .
It is clear that minimizing the average log-loss is equivalent to maximizing the likelihood.
Now consider computing the most probable label, which is equivalent to using ˆy=−1if
ηi<0andˆy=+ 1ifηi≥0. The 0-1 loss of our function becomes
L01(y,η)= I(y/negationslash=ˆy)=I(yη <0) (6.74)
Figure 6.7 plots these two loss functions. We see that the NLL is indeed an upper bound on the
0-1 loss.
Log-loss is an example of a surrogate loss function. Another example is the hinge loss:
Lhinge(y,η)=m a x ( 0 ,1−yη) (6.75)
See Figure 6.7 for a plot. We see that the function looks like a door hinge, hence its name.This loss function forms the basis of a popular classiﬁcation method known as support vectormachines (SVM), which we will discuss in Section 14.5.
The surrogate is usually chosen to be a convex upper bound, since convex functions are easy
to minimize. See e.g., (Bartlett et al. 2006) for more information.
6.6 Pathologies of frequentist statistics *
I believe that it would be very difficult to persuade an intelligent person that current[frequentist] statistical practice was sensible, but that there would be much less difficultywith an approach via likelihood and Bayes’ theorem. — George Box, 1962.
Frequentist statistics exhibits various forms of weird and undesirable behaviors, known aspathologies. We give a few examples below, in order to caution the reader; these and otherexamples are explained in more detail in (Lindley 1972; Lindley and Phillips 1976; Lindley 1982;Berger 1985; Jaynes 2003; Minka 1999).
212 Chapter 6. Frequentist statistics
6.6.1 Counter-intuitive behavior of conﬁdence intervals
Aconﬁdence interval is an interval derived from the sampling distribution of an estimator
(whereas a Bayesian credible interval is derived from the posterior of a parameter, as we dis-
cussed in Section 5.2.2). More precisely, a frequentist conﬁdence interval for some parameter θ
is deﬁned by the following (rather un-natural) expression:
C/prime
α(θ)=(/lscript,u):P(/lscript(˜D)≤θ≤u(˜D)|˜D∼θ)=1−α (6.76)
That is, if we sample hypothetical future data ˜Dfromθ, then(/lscript(˜D),u(˜D)), is a conﬁdence
interval if the parameter θlies inside this interval 1−αpercent of the time.
Let us step back for a moment and think about what is going on. In Bayesian statistics,
we condition on what is known — namely the observed data, D— and average over what
is not known, namely the parameter θ. In frequentist statistics, we do exactly the opposite:
we condition on what is unknown — namely the true parameter value θ— and average over
hypothetical future data sets ˜D.
This counter-intuitive deﬁnition of conﬁdence intervals can lead to bizarre results. Consider
the following example from (Berger 1985, p11). Suppose we draw two integers D=(x1,x2)from
p(x|θ)=⎧
⎨
⎩0.5ifx=θ
0.5ifx=θ+1
0otherwise(6.77)
Ifθ=3 9, we would expect the following outcomes each with probability 0.25:
(39,39),(39,40),(40,39),(40,40) (6.78)
Letm=m i n (x1,x2)and deﬁne the following conﬁdence interval:
[/lscript(D),u(D) ]=[m,m] (6.79)
For the above samples this yields
[39,39],[39,39],[39,39],[40,40] (6.80)
Hence Equation 6.79 is clearly a 75% CI, since 39is contained in 3/4 of these intervals. However,
ifD=( 3 9,40)thenp(θ=3 9|D)=1.0, so we know that θmust be 39, yet we only have 75%
“conﬁdence” in this fact.
Another, less contrived example, is as follows. Suppose we want to estimate the parameter θ
of a Bernoulli distribution. Let x=1
N/summationtextN
i=1xibe the sample mean. The MLE is ˆθ=x.A n
approximate 95% conﬁdence interval for a Bernoulli parameter is x±1.96/radicalbig
x(1−x)/N(this is
called aWald interval and is based on a Gaussian approximation to the Binomial distribution;
compare to Equation 3.27). Now consider a single trial, where N=1andx1=0. The MLE
is 0, which overﬁts, as we saw in Section 3.3.4.1. But our 95% conﬁdence interval is also (0,0),
which seems even worse. It can be argued that the above ﬂaw is because we approximated
the true sampling distribution with a Gaussian, or because the sample size was to small, or theparameter “too extreme”. However, the Wald interval can behave badly even for large N, and
non-extreme parameters (Brown et al. 2001).
6.6. Pathologies of frequentist statistics * 213
6.6.2 p-values considered harmful
Suppose we want to decide whether to accept or reject some baseline model, which we will
call thenull hypothesis. We need to deﬁne some decision rule. In frequentist statistics, it
is standard to ﬁrst compute a quantity called the p-value, which is deﬁned as the probability
(under the null) of observing some test statistic f(D)(such as the chi-squared statistic) that is
as large or largerthan that actually observed:5
pvalue(D )/definesP(f(˜D)≥f(D)|˜D∼H0) (6.81)
This quantity relies on computing a tail area probability of the sampling distribution; we give
an example of how to do this below.
Given the p-value, we deﬁne our decision rule as follows: we reject the null hypothesis iff the
p-value is less than some threshold, such as α=0.05. If we do reject it, we say the difference
between the observed test statistic and the expected test statistic is statistically signiﬁcant at
levelα. This approach is known as null hypothesis signiﬁcance testing,o rNHST.
This procedure guarantees that our expected type I (false positive) error rate is at most α.
This is sometimes interpreted as saying that frequentist hypothesis testing is very conservative,since it is unlikely to accidently reject the null hypothesis. But in fact the opposite is the case:because this method only worries about trying to reject the null, it can never gather evidencein favor of the null, no matter how large the sample size. Because of this, p-values tend tooverstate the evidence against the null, and are thus very “trigger happy”.
In general there can be huge differences between p-values and the quantity that we really
care about, which is the posterior probability of the null hypothesis given the data, p(H
0|D).
In particular, Sellke et al. (2001) show that even if the p-value is as slow as 0.05, the posteriorprobability of H
0is at least 30%, and often much higher. So frequentists often claim to have
“signiﬁcant” evidence of an effect that cannot be explained by the null hypothesis, whereasBayesians are usually more conservative in their claims. For example, p-values have been usedto “prove” that ESP (extra-sensory perception) is real (Wagenmakers et al. 2011), even though ESPis clearly very improbable. For this reason, p-values have been banned from certain medicaljournals (Matthews 1998).
Another problem with p-values is that their computation depends on decisions you make
about when to stop collecting data, even if these decisions don’t change the data you actuallyobserved. For example, suppose I toss a coin n=1 2times and observe s=9successes (heads)
andf=3failures (tails), so n=s+f. In this case, nis ﬁxed and s(and hence f) is random.
The relevant sampling model is the binomial
Bin(s|n,θ)=/parenleftbiggn
s/parenrightbigg
θ
s(1−θ)n−s(6.82)
Let the null hypothesis be that the coin is fair, θ=0.5,w h e r e θis the probability of success
(heads). The one-sided p-value, using test statistic t(s)=s,i s
p1=P(S≥9|H0)=12/summationdisplay
s=9Bin(s|12,0.5) =12/summationdisplay
s=9/parenleftbigg12
s/parenrightbigg
0.512=0.073 (6.83)
5. The reason we cannot just compute the probability of the observed value of the test statistic is that this will have
probability zero under a pdf. The p-value is deﬁned in terms of the cdf, so is always a number between 0 and 1.
214 Chapter 6. Frequentist statistics
The two-sided p-value is
p2=12/summationdisplay
s=9Bin(s|12,0.5)+3/summationdisplay
s=0Bin(s|12,0.5) = 0.073+0.073 = 0.146 (6.84)
In either case, the p-value is larger than the magical 5% threshold, so a frequentist would not
reject the null hypothesis.
Now suppose I told you that I actually kept tossing the coin until I observed f=3tails. In
this case, fis ﬁxed and n(and hence s=n−f) is random. The probability model becomes
thenegative binomial distribution, given by
NegBinom(s |f,θ)=/parenleftbiggs+f−1
f−1/parenrightbigg
θs(1−θ)f(6.85)
wheref=n−s.
Note that the term which depends on θis the same in Equations 6.82 and 6.85, so the
posterior over θwould be the same in both cases. However, these two interpretations of the
same data give different p-values. In particular, under the negative binomial model we get
p3=P(S≥9|H0)=∞/summationdisplay
s=9/parenleftbigg3+s−1
2/parenrightbigg
(1/2)s(1/2)3=0.0327 (6.86)
So the p-value is 3%, and suddenly there seems to be signiﬁcant evidence of bias in the coin!Obviously this is ridiculous: the data is the same, so our inferences about the coin should bethe same. After all, I could have chosen the experimental protocol at random. It is the outcomeof the experiment that matters, not the details of how I decided which one to run.
Although this might seem like just a mathematical curiosity, this also has signiﬁcant practical
implications. In particular, the fact that the stopping rule affects the computation of the p-
value means that frequentists often do not terminate experiments early, even when it is obviouswhat the conclusions are, lest it adversely affect their statistical analysis. If the experiments arecostly or harmful to people, this is obviously a bad idea. Perhaps it is not surprising, then, thatthe US Food and Drug Administration (FDA), which regulates clinical trials of new drugs, hasrecently become supportive of Bayesian methods
6, since Bayesian methods are not affected by
the stopping rule.
6.6.3 The likelihood principle
The fundamental reason for many of these pathologies is that frequentist inference violatesthelikelihood principle, which says that inference should be based on the likelihood of the
observed data, not based on hypothetical future data that you have not observed. Bayes obviouslysatisﬁes the likelihood principle, and consequently does not suffer from these pathologies.
A compelling argument in favor of the likelihood principle was presented in (Birnbaum 1962),
who showed that it followed automatically from two simpler principles. The ﬁrst of these is thesufficiency principle, which says that a sufficient statistic contains all the relevant information
6. See http://yamlb .wordpress .com/2006/06/19/the-us-fda-is-becoming-progressively-more-bayes
ian/.
6.6. Pathologies of frequentist statistics * 215
about an unknown parameter (arguably this is true by deﬁnition). The second principle is
known as weak conditionality, which says that inferences should be based on the events that
happened, not which might have happened. To motivate this, consider an example from (Berger1985). Suppose we need to analyse a substance, and can send it either to a laboratory in NewYork or in California. The two labs seem equally good, so a fair coin is used to decide betweenthem. The coin comes up heads, so the California lab is chosen. When the results come back,should it be taken into account that the coin could have come up tails and thus the New Yorklab could have been used? Most people would argue that the New York lab is irrelevant, sincethe tails event didn’t happen. This is an example of weak conditionality. Given this principle,one can show that all inferences should only be based on what was observed, which is incontrast to standard frequentist procedures. See (Berger and Wolpert 1988) for further details onthe likelihood principle.
6.6.4 Why isn’t everyone a Bayesian?
Given these fundamental ﬂaws of frequentist statistics, and the fact that Bayesian methodsdo not have such ﬂaws, an obvious question to ask is: “Why isn’t everyone a Bayesian?” The(frequentist) statistician Bradley Efron wrote a paper with exactly this title (Efron 1986). His shortpaper is well worth reading for anyone interested in this topic. Below we quote his openingsection:
The title is a reasonable question to ask on at least two counts. First of all, everone usedto be a Bayesian. Laplace wholeheatedly endorsed Bayes’s formulation of the inferenceproblem, and most 19th-century scientists followed suit. This included Gauss, whosestatistical work is usually presented in frequentist terms.
A second and more important point is the cogency of the Bayesian argument. Modern
statisticians, following the lead of Savage and de Finetti, have advanced powerful theoret-ical arguments for preferring Bayesian inference. A byproduct of this work is a disturbingcatalogue of inconsistencies in the frequentist point of view.
Nevertheless, everyone is not a Bayesian. The current era (1986) is the ﬁrst century in
which statistics has been widely used for scientiﬁc reporting, and in fact, 20th-centurystatistics is mainly non-Bayesian. However, Lindley (1975) predicts a change for the 21stcentury.
Time will tell whether Lindley was right....
Exercises
Exercise 6.1 Pessimism of LOOCV
(Source: Witten05, p152.). Suppose we have a completely random labeled dataset (i.e., the features xtell us
nothing about the class labels y) withN1examples of class 1, and N2examples of class 2, where N1=N2.
What is the best misclassiﬁcation rate any method can achieve? What is the estimated misclassiﬁcation
rate of the same method using LOOCV?
Exercise 6.2 James Stein estimator for Gaussian means
Consider the 2 stage model Yi|θi∼N(θi,σ2)andθi|μ∼N(m0,τ2
0). Suppose σ2= 500is known and
we observe the following 6 data points, i=1:6:
216 Chapter 6. Frequentist statistics
1505, 1528, 1564, 1498, 1600, 1470
a. Find the ML-II estimates of m0andτ2
0.
b. Find the posterior estimates E[θi|yi,m0,τ0]andvar[θi|yi,m0,τ0]fori=1. (The other terms,
i=2:6, are computed similarly.)
c. Give a 95% credible interval for p(θi|yi,m0,τ0)fori=1. Do you trust this interval (assuming the
Gaussian assumption is reasonable)? i.e. is it likely to be too large or too small, or just right?
d. What do you expect would happen to your estimates if σ2were much smaller (say σ2=1)? You do
not need to compute the numerical answer; just brieﬂy explain what would happen qualitatively, and
why.
Exercise 6.3 ˆσ2
MLEis biased
Show that ˆσ2
MLE=1
N/summationtextN
n=1(xn−ˆμ)2is a biased estimator of σ2, i.e., show
EX1,...,X n∼N(μ,σ)[ˆσ2(X1,...,X n)/negationslash=σ2
Hint: note that X1,...,X Nare independent, and use the fact that the expectation of a product of
independent random variables is the product of the expectations.
Exercise 6.4 Estimation of σ2whenμis known
Suppose we sample x1,...,x N∼N(μ,σ2)whereμis aknownconstant. Derive an expression for the
MLE forσ2in this case. Is it unbiased?
7 Linear regression
7.1 Introduction
Linear regression is the “work horse” of statistics and (supervised) machine learning. When
augmented with kernels or other forms of basis function expansion, it can model also non-linear relationships. And when the Gaussian output is replaced with a Bernoulli or multinoullidistribution, it can be used for classiﬁcation, as we will see below. So it pays to study this modelin detail.
7.2 Model speciﬁcation
As we discussed in Section 1.4.5, linear regression is a model of the form
p(y|x,θ)=N(y|wTx,σ2) (7.1)
Linear regression can be made to model non-linear relationships by replacing xwith some
non-linear function of the inputs, φ(x). That is, we use
p(y|x,θ)=N(y|wTφ(x),σ2) (7.2)
This is known as basis function expansion. (Note that the model is still linear in the parameters
w, so it is still called linear regression; the importance of this will become clear below.) A simple
example are polynomial basis functions, where the model has the form
φ(x)=[ 1,x,x2,...,xd] (7.3)
Figure 1.18 illustrates the effect of changing d: increasing the degree dallows us to create
increasingly complex functions.
We can also apply linear regression to more than 1 input. For example, consider modeling
temperature as a function of location. Figure 7.1(a) plots E[y|x]=w0+w1x1+w2x2, and
Figure 7.1(b) plots E[y|x]=w0+w1x1+w2x2+w3x2
1+w4x22.
7.3 Maximum likelihood estimation (least squares)
A common way to esitmate the parameters of a statistical model is to compute the MLE, which
is deﬁned as
ˆθ/definesargmax
θlogp(D|θ) (7.4)
218 Chapter 7. Linear regression
010203040
05101520253015.51616.51717.518
(a)010203040
01020301515.51616.51717.518
(b)
Figure 7.1 Linear regression applied to 2d data. Vertical axis is temperature, horizontal axes are location
within a room. Data was collected by some remote sensing motes at Intel’s lab in Berkeley, CA (data
courtesy of Romain Thibaux). (a) The ﬁtted plane has the form ˆf(x)=w 0+w1x1+w2x2. (b)
Temperature data is ﬁtted with a quadratic of the form ˆf(x)=w 0+w1x1+w2x2+w3x2
1+w4x22.
Produced by surfaceFitDemo .
It is common to assume the training examples are independent and identically distributed,
commonly abbreviated to iid. This means we can write the log-likelihood as follows:
/lscript(θ)/defineslogp(D|θ)=N/summationdisplay
i=1logp(yi|xi,θ) (7.5)
Instead of maximizing the log-likelihood, we can equivalently minimize the negative log likeli-
hoodorNLL:
NLL(θ)/defines−N/summationdisplay
i=1logp(yi|xi,θ) (7.6)
The NLL formulation is sometimes more convenient, since many optimization software packagesare designed to ﬁnd the minima of functions, rather than maxima.
Now let us apply the method of MLE to the linear regression setting. Inserting the deﬁnition
of the Gaussian into the above, we ﬁnd that the log likelihood is given by
/lscript(θ)= N/summationdisplay
i=1log/bracketleftBigg/parenleftbigg1
2πσ2/parenrightbigg1
2
exp/parenleftbigg
−1
2σ2(yi−wTxi)2/parenrightbigg/bracketrightBigg
(7.7)
=−1
2σ2RSS(w)−N
2log(2πσ2) (7.8)
RSS stands for residual sum of squares and is deﬁned by
RSS(w)/definesN/summationdisplay
i=1(yi−wTxi)2(7.9)
The RSS is also called the sum of squared errors, or SSE, and SSE/N is called the mean
squared error orMSE. It can also be written as the square of the /lscript2normof the vector of
7.3. Maximum likelihood estimation (least squares) 219
−4 −3 −2 −1 0 1 2 3 4−3−2−1012345
prediction
truth
(a)Sum of squares error contours for linear regression
w0w1
−1 0 1 2 3−1−0.500.511.522.53
(b)
Figure 7.2 (a) In linear least squares, we try to minimize the sum of squared distances from each training
point (denoted by a red circle) to its approximation (denoted by a blue cross), that is, we minimize the
sum of the lengths of the little vertical blue lines. The red diagonal line represents ˆy(x)=w 0+w1x,
which is the least squares regression line. Note that these residual lines are not perpendicular to the leastsquares line, in contrast to Figure 12.5. Figure generated by residualsDemo . (b) Contours of the RSS error
surface for the same example. The red cross represents the MLE, w=( 1.45,0.93). Figure generated by
contoursSSEdemo .
residual errors:
RSS(w)=||/epsilon1||2
2=N/summationdisplay
i=1/epsilon12i(7.10)
where/epsilon1i=(yi−wTxi).
We see that the MLE for wis the one that minimizes the RSS, so this method is known
asleast squares. This method is illustrated in Figure 7.2(a). The training data (xi,yi)are
shown as red circles, the estimated values (xi,ˆyi)are shown as blue crosses, and the residuals
/epsilon1i=yi−ˆyiare shown as vertical blue lines. The goal is to ﬁnd the setting of the parameters
(the slope w1and intercept w0) such that the resulting red line minimizes the sum of squared
residuals (the lengths of the vertical blue lines).
In Figure 7.2(b), we plot the NLL surface for our linear regression example. We see that it is a
quadratic “bowl” with a unique minimum, which we now derive. (Importantly, this is true even
if we use basis function expansion, such as polynomials, because the NLL is still linear in the
parameters w, even if it is not linear in the inputs x.)
7.3.1 Derivation of the MLE
First, we rewrite the objective in a form that is more amenable to differentiation:
NLL(w)=1
2(y−Xw)T(y−Xw)=1
2wT(XTX)w−wT(XTy) (7.11)
220 Chapter 7. Linear regression
where
XTX=N/summationdisplay
i=1xixT
i=N/summationdisplay
i=1⎛
⎜⎝x2
i,1···xi,1xi,D
...
xi,Dxi,1···x2
i,D⎞
⎟⎠ (7.12)
is thesum of squares matrix and
XTy=N/summationdisplay
i=1xiyi. (7.13)
Using results from Equation 4.10, we see that the gradient of this is given by
g(w)=[XTXw−XTy]=N/summationdisplay
i=1xi(wTxi−yi) (7.14)
Equating to zero we get
XTXw=XTy (7.15)
This is known as the normal equation. The corresponding solution ˆwto this linear system of
equations is called the ordinary least squares orOLSsolution, which is given by
ˆwOLS=(XTX)−1XTy (7.16)
7.3.2 Geometric interpretation
This equation has an elegant geometrical intrepretation, as we now explain. We assume N>D,
so we have more examples than features. The columns of Xdeﬁne a linear subspace of
dimensionality Dwhich is embedded in Ndimensions. Let the j’th column be ˜ xj, which is
a vector in RN. (This should not be confused with xi∈RD, which represents the i’th data
case.) Similarly, yis a vector in RN. For example, suppose we have N=3examples in D=2
dimensions:
X=⎛
⎝12
1−2
12⎞
⎠,y=⎛⎝8.8957
0.6130
1.7761⎞⎠ (7.17)
These vectors are illustrated in Figure 7.3.
We seek a vector ˆy∈R
Nthat lies in this linear subspace and is as close as possible to y,
i.e., we want to ﬁnd
argmin
ˆy∈span({˜ x1,...,˜ xD})/bardbly−ˆy/bardbl2. (7.18)
Sinceˆy∈span(X), there exists some weight vector wsuch that
ˆy=w1˜ x1+···+wD˜ xD=Xw (7.19)
7.3. Maximum likelihood estimation (least squares) 221
00.20.40.60.81
−1−0.500.5100.20.40.60.81
y
x1x2ˆy
x1
(0,0,0)
x2x3
Figure 7.3 Graphical interpretation of least squares for N=3examples and D=2features. ˜ x1and
˜ x2are vectors in R3; together they deﬁne a 2D plane. yis also a vector in R3but does not lie on this
2D plane. The orthogonal projection of yonto this plane is denoted ˆy. The red line from ytoˆyis
the residual, whose norm we want to minimize. For visual clarity, all vectors have been converted to unit
norm. Figure generated by leastSquaresProjection .
To minimize the norm of the residual, y−ˆy, we want the residual vector to be orthogonal to
every column of X,s o˜ xT
j(y−ˆy)=0forj=1:D. Hence
˜ xT
j(y−ˆy)=0⇒XT(y−Xw)=0⇒w=(XTX)−1XTy (7.20)
Hence our projected value of yis given by
ˆy=Xˆw=X(XTX)−1XTy (7.21)
This corresponds to an orthogonal projection ofyonto the column space of X. The projection
matrixP/definesX(XTX)−1XTis called the hat matrix, since it “puts the hat on y”.
7.3.3 Convexity
When discussing least squares, we noted that the NLL had a bowl shape with a unique minimum.
The technical term for functions like this is convex. Convex functions play a very important
role in machine learning.
Let us deﬁne this concept more precisely. We say a setSisconvexif for any θ,θ/prime∈S,w e
have
λθ+(1−λ)θ/prime∈S,∀λ∈[0,1] (7.22)
222 Chapter 7. Linear regression
(a)
 (b)
Figure 7.4 (a) Illustration of a convex set. (b) Illustration of a nonconvex set.
x yλ1 − λ
(a)A B
(b)
Figure 7.5 (a) Illustration of a convex function. We see that the chord joining (x,f(x))to(y,f(y))lies
above the function. (b) A function that is neither convex nor concave. Ais a local minimum, Bis a global
minimum. Figure generated by convexFnHand .
That is, if we draw a line from θtoθ/prime, all points on the line lie inside the set. See Figure 7.4(a)
for an illustration of a convex set, and Figure 7.4(b) for an illustration of a non-convex set.
Afunctionf(θ)is called convex if its epigraph (the set of points above the function) deﬁnes
a convex set. Equivalently, a function f(θ)is called convex if it is deﬁned on a convex set and
if, for any θ,θ/prime∈S, and for any 0≤λ≤1,w eh a v e
f(λθ+(1−λ)θ/prime)≤λf(θ)+(1−λ)f(θ/prime) (7.23)
See Figure 7.5 for a 1d example. A function is called strictly convex if the inequality is strict. A
functionf(θ)isconcaveif−f(θ)is convex. Examples of scalar convex functions include θ2,
eθ, andθlogθ(forθ>0). Examples of scalar concave functions include log(θ)and√
θ.
Intuitively, a (strictly) convex function has a “bowl shape”, and hence has a unique global
minimum θ∗corresponding to the bottom of the bowl. Hence its second derivative must be
positive everywhere,d
dθf(θ)>0. A twice-continuously differentiable, multivariate function fis
convex iff its Hessian is positive deﬁnite for all θ.1In the machine learning context, the function
foften corresponds to the NLL.
1. Recall that the Hessian is the matrix of second partial derivatives, deﬁned by Hjk=∂f2(θ)
∂θj∂θk.Also, recall that a
matrixHispositive deﬁnite iffvTHv>0for any non-zero vector v.
7.4. Robust linear regression * 223
0 0.2 0.4 0.6 0.8 1−6−5−4−3−2−101234Linear data with noise and outliers
  
least squares
laplace
(a)−3 −2 −1 0 1 2 3−0.500.511.522.533.544.55
  
L2
L1
huber
(b)
Figure 7.6 (a) Illustration of robust linear regression. Figure generated by linregRobustDemoCombined .
(b) Illustration of /lscript2,/lscript1, and Huber loss functions. Figure generated by huberLossDemo .
Models where the NLL is convex are desirable, since this means we can always ﬁnd the
globally optimal MLE. We will see many examples of this later in the book. However, many
models of interest will not have concave likelihoods. In such cases, we will discuss ways toderive locally optimal parameter estimates.
7.4 Robust linear regression *
It is very common to model the noise in regression models using a Gaussian distributionwith zero mean and constant variance, /epsilon1
i∼N(0,σ2),w h e r e/epsilon1i=yi−wTxi. In this case,
maximizing likelihood is equivalent to minimizing the sum of squared residuals, as we haveseen. However, if we have outliersin our data, this can result in a poor ﬁt, as illustrated in
Figure 7.6(a). (The outliers are the points on the bottom of the ﬁgure.) This is because squarederror penalizes deviations quadratically, so points far from the line have more affect on the ﬁtthan points near to the line.
One way to achieve robustness to outliers is to replace the Gaussian distribution for the
response variable with a distribution that has heavy tails. Such a distribution will assign higher
likelihood to outliers, without having to perturb the straight line to “explain” them.
One possibility is to use the Laplace distribution, introduced in Section 2.4.3. If we use this
as our observation model for regression, we get the following likelihood:
p(y|x,w,b) = Lap(y |w
Tx,b)∝exp(−1
b|y−wTx|) (7.24)
The robustness arises from the use of |y−wTx|instead of (y−wTx)2. For simplicity, we will
assumebis ﬁxed. Let ri/definesyi−wTxibe thei’th residual. The NLL has the form
/lscript(w)=/summationdisplay
i|ri(w)| (7.25)
224 Chapter 7. Linear regression
Likelihood Prior Name Section
Gaussian Uniform Least squares 7.3
Gaussian Gaussian Ridge 7.5Gaussian Laplace Lasso 13.3Laplace Uniform Robust regression 7.4Student Uniform Robust regression Exercise 11.12
Table 7.1 Summary of various likelihoods and priors used for linear regression. The likelihood refers to
the distributional form of p(y|x,w,σ2), and the prior refers to the distributional form of p(w). MAP
estimation with a uniform distribution corresponds to MLE.
Unfortunately, this is a non-linear objective function, which is hard to optimize. Fortunately, wecan convert the NLL to a linear objective, subject to linear constraints, using the following split
variable trick. First we deﬁne
r
i/definesr+
i−r−
i (7.26)
and then we impose the linear inequality constraints that r+
i≥0andr−
i≥0. Now the
constrained objective becomes
min
w,r+,r−/summationdisplay
i(r+
i−r−
i)s.t.r+
i≥0,r−
i≥0,wTxi+r+
i+r−
i=yi (7.27)
This is an example of a linear program withD+2Nunknowns and 3Nconstraints.
Since this is a convex optimization problem, it has a unique solution. To solve an LP, we must
ﬁrst write it in standard form, which as follows:
min
θfTθs.t.Aθ≤b,Aeqθ=beq,l≤θ≤u (7.28)
In our current example, θ=(w,r+,r−),f=[0,1,1],A=[ ],b=[ ],Aeq=[X,I,−I],
beq=y,l=[−∞1,0,0],u=[ ]. This can be solved by any LP solver (see e.g., (Boyd and
Vandenberghe 2004)). See Figure 7.6(a) for an example of the method in action.
An alternative to using NLL under a Laplace likelihood is to minimize the Huber loss function
(Huber 1964), deﬁned as follows:
LH(r,δ)=/braceleftbiggr2/2if|r|≤δ
δ|r|−δ2/2if|r|>δ(7.29)
This is equivalent to /lscript2for errors that are smaller than δ, and is equivalent to /lscript1for larger errors.
See Figure 7.6(b). The advantage of this loss function is that it is everywhere differentiable,using the fact that
d
dr|r|=sign(r)ifr/negationslash=0. We can also check that the function is C1
continuous, since the gradients of the two parts of the function match at r=±δ, namely
d
drLH(r,δ)|r=δ=δ. Consequently optimizing the Huber loss is much faster than using the
Laplace likelihood, since we can use standard smooth optimization methods (such as quasi-Newton) instead of linear programming.
Figure 7.6(a) gives an illustration of the Huber loss function. The results are qualitatively
similiar to the probabilistic methods. (In fact, it turns out that the Huber method also has aprobabilistic interpretation, although it is rather unnatural (Pontil et al. 1998).)
7.5. Ridge regression 225
0 5 10 15 20−10−505101520ln lambda −20.135
(a)0 5 10 15 20−15−10−505101520ln lambda −8.571
(b)
Figure 7.7 Degree 14 Polynomial ﬁt to N=2 1data points with increasing amounts of /lscript2regularization.
Data was generated from noise with variance σ2=4. The error bars, representing the noise variance σ2,
get wider as the ﬁt gets smoother, since we are ascribing more of the data variation to the noise. Figure
generated by linregPolyVsRegDemo .
7.5 Ridge regression
One problem with ML estimation is that it can result in overﬁtting. In this section, we discuss a
way to ameliorate this problem by using MAP estimation with a Gaussian prior. For simplicity,we assume a Gaussian likelihood, rather than a robust likelihood.
7.5.1 Basic idea
The reason that the MLE can overﬁt is that it is picking the parameter values that are thebest for modeling the training data; but if the data is noisy, such parameters often result incomplex functions. As a simple example, suppose we ﬁt a degree 14 polynomial to N=2 1data
points using least squares. The resulting curve is very “wiggly”, as shown in Figure 7.7(a). Thecorresponding least squares coefficients (excluding w
0) are as follows:
6.560, -36.934, -109.255, 543.452, 1022.561, -3046.224, -3768.013,8524.540, 6607.897, -12640.058, -5530.188, 9479.730, 1774.639, -2821.526
We see that there are many large positive and negative numbers. These balance out exactly
to make the curve “wiggle” in just the right way so that it almost perfectly interpolates the data.But this situation is unstable: if we changed the data a little, the coefficients would change a lot.
We can encourage the parameters to be small, thus resulting in a smoother curve, by using a
zero-mean Gaussian prior:
p(w)=/productdisplay
jN(wj|0,τ2) (7.30)
where1/τ2controls the strength of the prior. The corresponding MAP estimation problem
becomes
argmax
wN/summationdisplay
i=1logN(yi|w0+wTxi,σ2)+D/summationdisplay
j=1logN(wj|0,τ2) (7.31)
226 Chapter 7. Linear regression
−25 −20 −15 −10 −5 0 50510152025
log lambdamean squared error
  
train mse
test mse
(a)−20 −15 −10 −5 0 50.10.20.30.40.50.60.70.80.9
log lambda  
negative log marg. likelihood
CV estimate of MSE
(b)
Figure 7.8 (a) Training error (dotted blue) and test error (solid red) for a degree 14 polynomial ﬁt by
ridge regression, plotted vs log(λ). Data was generated from noise with variance σ2=4(training set
has sizeN=2 1). Note: Models are ordered from complex (small regularizer) on the left to simple (large
regularizer) on the right. The stars correspond to the values used to plot the functions in Figure 7.7. (b)
Estimate of performance using training set. Dotted blue: 5-fold cross-validation estimate of future MSE.Solid black: negative log marginal likelihood, −logp(D|λ). Both curves have been vertically rescaled to
[0,1] to make them comparable. Figure generated by linregPolyVsRegDemo .
It is a simple exercise to show that this is equivalent to minimizing the following:
J(w)=1
NN/summationdisplay
i=1(yi−(w0+wTxi))2+λ||w||2
2 (7.32)
whereλ/definesσ2/τ2and||w||2
2=/summationtext
jw2
j=wTwis the squared two-norm. Here the ﬁrst term is
the MSE/ NLL as usual, and the second term, λ≥0, is a complexity penalty. The corresponding
solution is given by
ˆwridge=(λID+XTX)−1XTy (7.33)
This technique is known as ridge regression,o r penalized least squares. In general, adding
a Gaussian prior to the parameters of a model to encourage them to be small is called /lscript2
regularization orweight decay. Note that the offset term w0is not regularized, since this just
affects the height of the function, not its complexity. By penalizing the sum of the magnitudes
of the weights, we ensure the function is simple (since w=0corresponds to a straight line,
which is the simplest possible function, corresponding to a constant.)
We illustrate this idea in Figure 7.7, where we see that increasing λresults in smoother
functions. The resulting coefficients also become smaller. For example, using λ=1 0−3,w e
have
7.5. Ridge regression 227
2.128, 0.807, 16.457, 3.704, -24.948, -10.472, -2.625, 4.360, 13.711,
10.063, 8.716, 3.966, -9.349, -9.232
In Figure 7.8(a), we plot the MSE on the training and test sets vs log(λ). We see that, as we
increaseλ(so the model becomes more constrained), the error on the training set increases.
For the test set, we see the characteristic U-shaped curve, where the model overﬁts and thenunderﬁts. It is common to use cross validation to pick λ, as shown in Figure 7.8(b). In
Section 1.4.8, we will discuss a more probabilistic approach.
We will consider a variety of different priors in this book. Each of these corresponds to a
different form of regularization. This technique is very widely used to prevent overﬁtting.
7.5.2 Numerically stable computation *
Interestingly, ridge regression, which works better statistically, is also easier to ﬁt numerically,since(λI
D+XTX)is much better conditioned (and hence more likely to be invertible) than
XTX, at least for suitable largy λ.
Nevertheless, inverting matrices is still best avoided, for reasons of numerical stability. (Indeed,
if you write w=inv(X’ * X)*X’*y in Matlab, it will give you a warning.) We now describe
a useful trick for ﬁtting ridge regression models (and hence by extension, computing vanillaOLS estimates) that is more numerically robust. We assume the prior has the form p(w)=
N(0,Λ
−1),w h e r eΛis the precision matrix. In the case of ridge regression, Λ=( 1/τ2)I.T o
avoid penalizing the w0term, we should center the data ﬁrst, as explained in Exercise 7.5.
First let us augment the original data with some “virtual data” coming from the prior:
˜X=/parenleftbiggX/σ√
Λ/parenrightbigg
,˜y=/parenleftbiggy/σ
0D×1/parenrightbigg
(7.34)
whereΛ=√
Λ√
ΛTis aCholesky decomposition ofΛ. We see that ˜Xis(N+D)×D,
where the extra rows represent pseudo-data from the prior.
We now show that the NLL on this expanded data is equivalent to penalized NLL on the
original data:
f(w)=(˜y−˜Xw)T(˜y−˜Xw) (7.35)
=/parenleftbigg/parenleftbiggy/σ
0/parenrightbigg
−/parenleftbiggX/σ√
Λ/parenrightbigg
w/parenrightbiggT/parenleftbigg/parenleftbiggy/σ
0/parenrightbigg
−/parenleftbiggX/σ√
Λ/parenrightbigg
w/parenrightbigg
(7.36)
=/parenleftbigg1
σ(y−Xw)
−√
Λw/parenrightbiggT/parenleftbigg1
σ(y−Xw)
−√
Λw/parenrightbigg
(7.37)
=1
σ2(y−Xw)T(y−Xw)+(√
Λw)T(√
Λw) (7.38)
=1
σ2(y−Xw)T(y−Xw)+wTΛw (7.39)
Hence the MAP estimate is given by
ˆwridge=(˜XT˜X)−1˜XT˜y (7.40)
as we claimed.
228 Chapter 7. Linear regression
Now let
˜X=QR (7.41)
be theQR decomposition ofX,w h e r eQis orthonormal (meaning QTQ=QQT=I), and
Ris upper triangular. Then
(˜XT˜X)−1=(RTQTQR)−1=(RTR)−1=R−1R−T(7.42)
Hence
ˆwridge=R−1R−TRTQT˜y=R−1Q˜y (7.43)
Note that Ris easy to invert since it is upper triangular. This gives us a way to compute the
ridge estimate while avoiding having to invert (Λ+XTX).
We can use this technique to ﬁnd the MLE, by simply computing the QR decomposition of
the unaugmented matrix X, and using the original y. This is the method of choice for solving
least squares problems. (In fact, it is so sommon that it can be implemented in one line of
Matlab, using the backslash operator: w=X\y.) Note that computing the QR decomposition of
anN×Dmatrix takes O(ND2)time, and is numerically very stable.
IfD/greatermuchN, we should ﬁrst perform an SVD decomposition. In particular, let X=USVTbe
the SVD of X,w h e r eVTV=IN,UUT=UTU=IN, andSis a diagonal N×Nmatrix.
Now letZ=UDbe anN×Nmatrix. Then we can rewrite the ridge estimate thus:
ˆwridge=V(ZTZ+λIN)−1ZTy (7.44)
In other words, we can replace the D-dimensional vectors xiwith theN-dimensional vectors
ziand perform our penalized ﬁt as before. We then transform the N-dimensional solution
to theD-dimensional solution by multiplying by V. Geometrically, we are rotating to a new
coordinate system in which all but the ﬁrst Ncoordinates are zero. This does not affect the
solution since the spherical Gaussian prior is rotationally invariant. The overall time is nowO(DN
2)operations.
7.5.3 Connection with PCA *
In this section, we discuss an interesting connection between ridge regression and PCA (Sec-tion 12.2), which gives further insight into why ridge regression works well. Our discussion isbased on (Hastie et al. 2009, p66).
LetX=USV
Tbe the SVD of X. From Equation 7.44, we have
ˆwridge=V(S2+λI)−1SUTy (7.45)
Hence the ridge predictions on the training set are given by
ˆy=Xˆwridge=USVTV(S2+λI)−1SUTy (7.46)
=U˜SUTy=D/summationdisplay
j=1uj˜SjjuT
jy (7.47)
7.5. Ridge regression 229
prior meanMAP EstimateML Estimateu1u2
Figure 7.9 Geometry of ridge regression. The likelihood is shown as an ellipse, and the prior is shown
as a circle centered on the origin. Based on Figure 3.15 of (Bishop 2006b). Figure generated by geomRidge
where
˜Sjj/defines[S(S2+λI)−1S]jj=σ2
j
σ2
j+λ(7.48)
andσjare the singular values of X. Hence
ˆy=Xˆwridge=D/summationdisplay
j=1ujσ2
j
σ2
j+λuT
jy (7.49)
In contrast, the least squares prediction is
ˆy=Xˆwls=(USVT)(VS−1UTy)=UUTy=D/summationdisplay
j=1ujuTjy (7.50)
Ifσ2
jis small compared to λ, then direction ujwill not have much effect on the prediction. In
view of this, we deﬁnethe effective number of degrees of freedom of the model as follows:
dof(λ)=D/summationdisplay
j=1σ2
j
σ2
j+λ(7.51)
Whenλ=0,dof(λ)=D , and asλ→∞,dof(λ)→0.
Let us try to understand why this behavior is desirable. In Section 7.6, we show that
cov[w|D]=σ2(XTX)−1, if we use a uniform prior for w. Thus the directions in which
we are most uncertain about ware determined by the eigenvectors of this matrix with the
smallest eigenvalues, as shown in Figure 4.1. Furthermore, in Section 12.2.3, we show that the
squared singular values σ2
jare equal to the eigenvalues of XTX. Hence small singular values σj
correspond to directions with high posterior variance. It is these directions which ridge shrinksthe most.
230 Chapter 7. Linear regression
This process is illustrated in Figure 7.9. The horizontal w1parameter is not-well determined
by the data (has high posterior variance), but the vertical w2parameter is well-determined.
Hencewmap
2is close to ˆwmle
2, butwmap
1is shifted strongly towards the prior mean, which is 0.
(Compare to Figure 4.14(c), which illustrated sensor fusion with sensors of different reliabilities.)
In this way, ill-determined parameters are reduced in size towards 0. This is called shrinkage.
There is a related, but different, technique called principal components regression. The idea
is this: ﬁrst use PCA to reduce the dimensionality to Kdimensions, and then use these low
dimensional features as input to regression. However, this technique does not work as well asridge in terms of predictive accuracy (Hastie et al. 2001, p70). The reason is that in PC regression,only the ﬁrst K(derived) dimensions are retained, and the remaining D−Kdimensions are
entirely ignored. By contrast, ridge regression uses a “soft” weighting of all the dimensions.
7.5.4 Regularization effects of big data
Regularization is the most common way to avoid overﬁtting. However, another effective approach— which is not always available — is to use lots of data. It should be intuitively obvious thatthe more training data we have, the better we will be able to learn.
2So we expect the test set
error to decrease to some plateau as Nincreases.
This is illustrated in Figure 7.10, where we plot the mean squared error incurred on the test set
achieved by polynomial regression models of different degrees vs N(a plot of error vs training
set size is known as a learning curve). The level of the plateau for the test error consists of
two terms: an irreducible component that all models incur, due to the intrinsic variability ofthe generating process (this is called the noise ﬂoor); and a component that depends on the
discrepancy between the generating process (the “truth”) and the model: this is called structural
error.
In Figure 7.10, the truth is a degree 2 polynomial, and we try ﬁtting polynomials of degrees 1,
2 and 25 to this data. Call the 3 models M
1,M2andM25. We see that the structural error
for models M2andM25is zero, since both are able to capture the true generating process.
However, the structural error for M1is substantial, which is evident from the fact that the
plateau occurs high above the noise ﬂoor.
For any model that is expressive enough to capture the truth (i.e., one with small structural
error), the test error will go to the noise ﬂoor as N→∞. However, it will typically go to
zero faster for simpler models, since there are fewer parameters to estimate. In particular, forﬁnite training sets, there will be some discrepancy between the parameters that we estimateand the best parameters that we could estimate given the particular model class. This is calledapproximation error, and goes to zero as N→∞, but it goes to zero faster for simpler
models. This is illustrated in Figure 7.10. See also Exercise 7.1.
In domains with lots of data, simple methods can work surprisingly well (Halevy et al. 2009).
However, there are still reasons to study more sophisticated learning methods, because therewill always be problems for which we have little data. For example, even in such a data-richdomain as web search, as soon as we want to start personalizing the results, the amount of dataavailable for any given user starts to look small again (relative to the complexity of the problem).
2. This assumes the training data is randomly sampled, and we don’t just get repetitions of the same examples. Having
informatively sampled data can help even more; this is the motivation for an approach known as active learning, where
you get to choose your training data.
7.6. Bayesian linear regression 231
0 20 40 60 80 100 120 140 160 180 2000246810121416182022
size of training setmsetruth=degree 2, model = degree 1
  
train
test
(a)0 20 40 60 80 100 120 140 160 180 2000246810121416182022
size of training setmsetruth=degree 2, model = degree 2
  
train
test
(b)
0 20 40 60 80 100 120 140 160 180 2000246810121416182022
size of training setmsetruth=degree 2, model = degree 10
  
train
test
(c)0 20 40 60 80 100 120 140 160 180 2000246810121416182022
size of training setmsetruth=degree 2, model = degree 25
  
train
test
(d)
Figure 7.10 MSE on training and test sets vs size of training set, for data generated from a degree 2
polynomial with Gaussian noise of variance σ2=4. We ﬁt polynomial models of varying degree to this
data. (a) Degree 1. (b) Degree 2. (c) Degree 10. (d) Degree 25. Note that for small training set sizes, the test
error of the degree 25 polynomial is higher than that of the degree 2 polynomial, due to overﬁtting, butthis difference vanishes once we have enough data. Note also that the degree 1 polynomial is too simpleand has high test error even given large amounts of training data. Figure generated by linregPolyVsN .
In such cases, we may want to learn multiple related models at the same time, which is known
as multi-task learning. This will allow us to “borrow statistical strength” from tasks with lots ofdata and to share it with tasks with little data. We will discuss ways to do later in the book.
7.6 Bayesian linear regression
Although ridge regression is a useful way to compute a point estimate, sometimes we want tocompute the full posterior over wandσ
2. For simplicity, we will initially assume the noise
varianceσ2is known, so we focus on computing p(w|D,σ2). Then in Section 7.6.3 we consider
232 Chapter 7. Linear regression
the general case, where we compute p(w,σ2|D). We assume throughout a Gaussian likelihood
model. Performing Bayesian inference with a robust likelihood is also possible, but requires more
advanced techniques (see Exercise 24.5).
7.6.1 Computing the posterior
In linear regression, the likelihood is given by
p(y|X,w,μ,σ2)=N (y|μ+Xw,σ2IN) (7.52)
∝exp/parenleftbigg
−1
2σ2(y−μ1N−Xw)T(y−μ1N−Xw)/parenrightbigg
(7.53)
whereμis an offset term. If the inputs are centered, so/summationtext
ixij=0for eachj, the mean of the
output is equally likely to be positive or negative. So let us put an improper prior on μof the
formp(μ)∝1, and then integrate it out to get
p(y|X,w,σ2)∝exp/parenleftbigg
−1
2σ2||y−y1N−Xw||2
2/parenrightbigg
(7.54)
wherey=1
N/summationtextN
i=1yiis the empirical mean of the output. For notational simplicity, we shall
assume the output has been centered, and write yfory−y1N.
The conjugate prior to the above Gaussian likelihood is also a Gaussian, which we will denote
byp(w)=N(w|w0,V0). Using Bayes rule for Gaussians, Equation 4.125, the posterior is given
by
p(w|X,y,σ2)∝N(w|w0,V0)N(y|Xw,σ2IN)=N(w|wN,VN) (7.55)
wN=VNV−1
0w0+1
σ2VNXTy (7.56)
V−1
N=V−1
0+1
σ2XTX (7.57)
VN=σ2(σ2V−1
0+XTX)−1(7.58)
Ifw0=0andV0=τ2I, then the posterior mean reduces to the ridge estimate, if we deﬁne
λ=σ2
τ2. This is because the mean and mode of a Gaussian are the same.
To gain insight into the posterior distribution (and not just its mode), let us consider a 1D
example:
y(x,w)=w0+w1x+/epsilon1 (7.59)
where the “true” parameters are w0=−0.3andw1=0.5. In Figure 7.11 we plot the prior,
the likelihood, the posterior, and some samples from the posterior predictive. In particular,
the right hand column plots the function y(x,w(s))wherexranges over [−1,1], andw(s)∼
N(w|wN,VN)is a sample from the parameter posterior. Initially, when we sample from the
prior (ﬁrst row), our predictions are “all over the place”, since our prior is uniform. After we seeone data point (second row), our posterior becomes constrained by the corresponding likelihood,and our predictions pass close to the observed data. However, we see that the posterior hasa ridge-like shape, reﬂecting the fact that there are many possible solutions, with different
7.6. Bayesian linear regression 233
 W0  W1 prior/posterior
−1 0 1−101
−1 0 1−101
 x  y data space
 W0  W1 
−1 0 1−101
 W0  W1 
−1 0 1−101
−1 0 1−101
 x  y 
 W0  W1 
−1 0 1−101
 W0  W1 
−1 0 1−101
−1 0 1−101
 x  y 
 W0  W1 
−1 0 1−101
 W0  W1 
−1 0 1−101
−1 0 1−101
 x  y likelihood
Figure 7.11 Sequential Bayesian updating of a linear regression model p(y|x)=N(y|w0x0+w1x1,σ2).
Row 0 represents the prior, row 1 represents the ﬁrst data point (x1,y1), row 2 represents the second
data point (x2,y2), row 3 represents the 20th data point (x20,y20). Left column: likelihood function for
current data point. Middle column: posterior given data so far, p(w|x1:n,y1:n)(so the ﬁrst line is the
prior). Right column: samples from the current prior/posterior predictive distribution. The white cross in
columns 1 and 2 represents the true parameter value; we see that the mode of the posterior rapidly (after20 samples) converges to this point. The blue circles in column 3 are the observed data points. Based onFigure 3.7 of (Bishop 2006a). Figure generated by bayesLinRegDemo2d .
slopes/intercepts. This makes sense since we cannot uniquely infer two parameters from one
observation. After we see two data points (third row), the posterior becomes much narrower,and our predictions all have similar slopes and intercepts. After we observe 20 data points (lastrow), the posterior is essentially a delta function centered on the true value, indicated by a whitecross. (The estimate converges to the truth since the data was generated from this model, andbecause Bayes is a consistent estimator; see Section 6.4.1 for discussion of this point.)
7.6.2 Computing the posterior predictive
It’s tough to make predictions, especially about the future. — Yogi Berra
234 Chapter 7. Linear regression
In machine learning, we often care more about predictions than about interpreting the parame-
ters. Using Equation 4.126, we can easily show that the posterior predictive distribution at a testpointxis also Gaussian:
p(y|x,D,σ
2)=/integraldisplay
N(y|xTw,σ2)N(w|wN,VN)dw (7.60)
=N(y|wT
Nx,σ2
N(x)) (7.61)
σ2
N(x)=σ2+xTVNx (7.62)
The variance in this prediction, σ2
N(x), depends on two terms: the variance of the observation
noise,σ2, and the variance in the parameters, VN. The latter translates into variance about
observations in a way which depends on how close xis to the training data D. This is illustrated
in Figure 7.12, where we see that the error bars get larger as we move away from the trainingpoints, representing increased uncertainty. This is important for applications such as activelearning, where we want to model what we don’t know as well as what we do. By contrast, theplugin approximation has constant sized error bars, since
p(y|x,D,σ
2)≈/integraldisplay
N(y|xTw,σ2)δˆw(w)dw=p(y|x,ˆw,σ2) (7.63)
See Figure 7.12(a).
7.6.3 Bayesian inference when σ2is unknown *
In this section, we apply the results in Section 4.6.3 to the problem of computing p(w,σ2|D)
for a linear regression model. This generalizes the results from Section 7.6.1 where we assumedσ
2was known. In the case where we use an uninformative prior, we will see some interesting
connections to frequentist statistics.
7.6.3.1 Conjugate prior
As usual, the likelihood has the form
p(y|X,w,σ2)=N(y|Xw,σ2IN) (7.64)
By analogy to Section 4.6.3, one can show that the natural conjugate prior has the followingform:
p(w,σ
2)=N I G ( w,σ2|w0,V0,a0,b0) (7.65)
/definesN(w|w0,σ2V0)IG(σ2|a0,b0) (7.66)
=ba0
0
(2π)D/2|V0|1
2Γ(a0)(σ2)−(a0+(D/2)+1)(7.67)
×exp/bracketleftbigg
−(w−w0)TV−1
0(w−w0)+2b0
2σ2/bracketrightbigg
(7.68)
7.6. Bayesian linear regression 235
−8 −6 −4 −2 0 2 4 6 80102030405060plugin approximation (MLE)
  
prediction
training data
(a)−8 −6 −4 −2 0 2 4 6 8−1001020304050607080Posterior predictive (known variance)
  
prediction
training data
(b)
−8 −6 −4 −2 0 2 4 6 805101520253035404550functions sampled from plugin approximation to posterior
(c)−8 −6 −4 −2 0 2 4 6 8−20020406080100functions sampled from posterior
(d)
Figure 7.12 (a) Plug-in approximation to predictive density (we plug in the MLE of the parameters). (b)
Posterior predictive density, obtained by integrating out the parameters. Black curve is posterior mean,
error bars are 2 standard deviations of the posterior predictive density. (c) 10 samples from the pluginapproximation to posterior predictive. (d) 10 samples from the posterior predictive. Figure generated bylinregPostPredDemo .
With this prior and likelihood, one can show that the posterior has the following form:
p(w,σ2|D) = NIG(w ,σ2|wN,VN,aN,bN) (7.69)
wN=VN(V−1
0w0+XTy) (7.70)
VN=(V−1
0+XTX)−1(7.71)
aN=a0+n/2 (7.72)
bN=b0+1
2/parenleftbig
wT
0V−1
0w0+yTy−wT
NV−1
NwN/parenrightbig
(7.73)
The expressions for wNandVNare similar to the case where σ2is known. The expression for
aNis also intuitive, since it just updates the counts. The expression for bNcan be interpreted
236 Chapter 7. Linear regression
as follows: it is the prior sum of squares, b0, plus the empirical sum of squares, yTy, plus a
term due to the error in the prior on w.
The posterior marginals are as follows:
p(σ2|D)=I G ( aN,bN) (7.74)
p(w|D)=T (wN,bN
aNVN,2aN) (7.75)
We give a worked example of using these equations in Section 7.6.3.3.
By analogy to Section 4.6.3.6, the posterior predictive distribution is a Student T distribution.
In particular, given mnew test inputs ˜X,w eh a v e
p(˜y|˜X,D)=T (˜y|˜XwN,bN
aN(Im+˜XVN˜XT),2aN) (7.76)
The predictive variance has two components: (bN/aN)Imdue to the measurement noise, and
(bN/aN)˜XVN˜XTdue to the uncertainty in w. This latter terms varies depending on how
close the test inputs are to the training data.
It is common to set a0=b0=0, corresponding to an uninformative prior for σ2, and to set
w0=0andV0=g(XTX)−1for any positive value g. This is called Zellner’s g-prior(Zellner
1986). Here gplays a role analogous to 1/λin ridge regression. However, the prior covariance is
proportional to (XTX)−1rather than I. This ensures that the posterior is invariant to scaling
of the inputs (Minka 2000b). See also Exercise 7.10.
We will see below that if we use an uninformative prior, the posterior precision given N
measurements is V−1
N=XTX. Theunit information prior is deﬁned to contain as much
information as one sample (Kass and Wasserman 1995). To create a unit information prior for
linear regression, we need to use V−1
0=1
NXTX, which is equivalent to the g-prior with
g=N.
7.6.3.2 Uninformative prior
An uninformative prior can be obtained by considering the uninformative limit of the conjugateg-prior, which corresponds to setting g=∞. This is equivalent to an improper NIG prior with
w
0=0,V0=∞I,a0=0andb0=0, which gives p(w,σ2)∝σ−(D+2).
Alternatively, we can start with the semi-conjugate prior p(w,σ2)=p(w)p(σ2), and take
each term to its uninformative limit individually, which gives p(w,σ2)∝σ−2. This is equivalent
to an improper NIG prior with w0=0,V=∞I,a0=−D/2andb0=0. The corresponding
posterior is given by
p(w,σ2|D)=N I G ( w,σ2|wN,VN,aN,bN) (7.77)
wN=ˆwmle=(XTX)−1XTy (7.78)
VN=(XTX)−1(7.79)
aN=N−D
2(7.80)
bN=s2
2(7.81)
s2/defines(y−Xˆwmle)T(y−Xˆwmle (7.82)
7.6. Bayesian linear regression 237
wjE[wj|D]/radicalbig
var[wj|D]95% CI sig
w0 10.998 3.06027 [4.652, 17.345] *
w1 -0.004 0.00156 [-0.008, -0.001] *w2 -0.054 0.02190 [-0.099, -0.008] *w3 0.068 0.09947 [-0.138, 0.274]w4 -1.294 0.56381 [-2.463, -0.124] *w5 0.232 0.10438 [0.015, 0.448] *w6 -0.357 1.56646 [-3.605, 2.892]w7 -0.237 1.00601 [-2.324, 1.849]w8 0.181 0.23672 [-0.310, 0.672]w9 -1.285 0.86485 [-3.079, 0.508]w10 -0.433 0.73487 [-1.957, 1.091]
Table 7.2 Posterior mean, standard deviation and credible intervals for a linear regression model with an
uninformative prior ﬁt to the caterpillar data. Produced by linregBayesCaterpillar .
The marginal distribution of the weights is given by
p(w|D)=T(w|ˆw,s2
N−DC,N−D) (7.83)
whereC=(XTX)−1andˆwis the MLE. We discuss the implications of these equations below.
7.6.3.3 An example where Bayesian and frequentist inference coincide *
The use of a (semi-conjugate) uninformative prior is interesting because the resulting posteriorturns out to be equivalent to the results from frequentist statistics (see also Section 4.6.3.9). Inparticular, from Equation 7.83 we have
p(w
j|D)=T(wj|ˆwj,Cjjs2
N−D,N−D) (7.84)
This is equivalent to the sampling distribution of the MLE which is given by the following (seee.g., (Rice 1995, p542), (Casella and Berger 2002, p554)):
w
j−ˆwj
sj∼tN−D (7.85)
where
sj=/radicalbigg
s2Cjj
N−D(7.86)
is the standard error of the estimated parameter. (See Section 6.2 for a discussion of samplingdistributions.) Consequently, the frequentist conﬁdence interval and the Bayesian marginalcredible interval for the parameters are the same in this case.
As a worked example of this, consider the caterpillar dataset from (Marin and Robert 2007).
(The details of what the data mean don’t matter for our present purposes.) We can compute
238 Chapter 7. Linear regression
the posterior mean and standard deviation, and the 95% credible intervals (CI) for the regression
coefficients using Equation 7.84. The results are shown in Table 7.2. It is easy to check that these95% credible intervals are identical to the 95% conﬁdence intervals computed using standardfrequentist methods (see linregBayesCaterpillar for the code).
We can also use these marginal posteriors to compute if the coefficients are “signiﬁcantly”
different from 0. An informal way to do this (without using decision theory) is to check if its 95%CI excludes 0. From Table 7.2, we see that the CIs for coefficients 0, 1, 2, 4, 5 are all signiﬁcantby this measure, so we put a little star by them. It is easy to check that these results are thesame as those produced by standard frequentist software packages which compute p-values atthe 5% level.
Although the correspondence between the Bayesian and frequentist results might seem ap-
pealing to some readers, recall from Section 6.6 that frequentist inference is riddled with patholo-gies. Also, note that the MLE does not even exist when N<D, so standard frequentist inference
theory breaks down in this setting. Bayesian inference theory still works, although it requiresthe use of proper priors. (See (Maruyama and George 2008) for one extension of the g-prior tothe case where D>N.)
7.6.4 EB for linear regression (evidence procedure)
So far, we have assumed the prior is known. In this section, we describe an empirical Bayesprocedure for picking the hyper-parameters. More precisely, we choose η=(α,λ)to maximize
the marignal likelihood, where λ=1/σ
2be the precision of the observation noise and αis
the precision of the prior, p(w)=N(w|0,α−1I). This is known as the evidence procedure
(MacKay 1995b).3See Section 13.7.4 for the algorithmic details.
The evidence procedure provides an alternative to using cross validation. For example, in
Figure 7.13(b), we plot the log marginal likelihood for different values of α, as well as the
maximum value found by the optimizer. We see that, in this example, we get the same resultas 5-CV, shown in Figure 7.13(a). (We kept λ=1/σ
2ﬁxed in both methods, to make them
comparable.)
The principle practical advantage of the evidence procedure over CV will become apparent
in Section 13.7, where we generalize the prior by allowing a different αjfor every feature. This
can be used to perform feature selection, using a technique known as automatic relevancydetermination or ARD. By contrast, it would not be possible to use CV to tune Ddifferent
hyper-parameters.
The evidence procedure is also useful when comparing different kinds of models, since it
provides a good approximation to the evidence:
p(D|m)=/integraldisplay/integraldisplay
p(D|w,m)p(w|m,η)p(η|m)dwdη (7.87)
≈max
η/integraldisplay
p(D|w,m)p(w|m,η)p(η|m)dw (7.88)
It is important to (at least approximately) integrate over ηrather than setting it arbitrarily, for
reasons discussed in Section 5.3.2.5. Indeed, this is the method we used to evaluate the marginal
3. Alternatively, we could integrate out λanalytically, as shown in Section 7.6.3, and just optimize α(Buntine and
Weigend 1991). However, it turns out that this is less accurate than optimizing both αandλ(MacKay 1999).
7.6. Bayesian linear regression 239
−25 −20 −15 −10 −5 0 5100101102103104105106107
log lambdamse5−fold cross validation, ntrain = 21
(a)−25 −20 −15 −10 −5 0 5−150−140−130−120−110−100−90−80−70−60−50
log alphalog evidence
(b)
Figure 7.13 (a) Estimate of test MSE produced by 5-fold cross-validation vs log(λ). The smallest value is
indicated by the vertical line. Note the vertical scale is in log units. (c) Log marginal likelihood vs log(α).
The largest value is indicated by the vertical line. Figure generated by linregPolyVsRegDemo .
likelihood for the polynomial regression models in Figures 5.7 and 5.8. For a “more Bayesian”
approach, in which we model our uncertainty about ηrather than computing point estimates,
see Section 21.5.2.
Exercises
Exercise 7.1 Behavior of training set error with increasing sample size
The error on the test will always decrease as we get more training data, since the model will be better
estimated. However, as shown in Figure 7.10, for sufficiently complex models, the error on the training setcan increase we we get more training data, until we reach some plateau. Explain why.
Exercise 7.2 Multi-output linear regression
(Source: Jaakkola.)
When we have multiple independent outputs in linear regression, the model becomes
p(y|x,W)=M/productdisplay
j=1N(yj|wT
jxi,σ2
j) (7.89)
Since the likelihood factorizes across dimensions, so does the MLE. Thus
ˆW=[ˆw1,...,ˆwM] (7.90)
whereˆwj=(XTX)−1Y:,j.
In this exercise we apply this result to a model with 2 dimensional response vector yi∈R2. Suppose we
have some binary input data, xi∈{0,1}. The training data is as follows:
240 Chapter 7. Linear regression
xy
0(−1,−1)T
0(−1,−2)T
0(−2,−1)T
1(1,1)T
1(1,2)T
1(2,1)T
Let us embed each xiinto 2d using the following basis function:
φ(0) = (1, 0)T,φ(1) = (0, 1)T(7.91)
The model becomes
ˆy=WTφ(x) (7.92)
whereWis a2×2matrix. Compute the MLE for Wfrom the above data.
Exercise 7.3 Centering and ridge regression
Assume that x=0, so the input data has been centered. Show that the optimizer of
J(w,w0)=( y−Xw−w01)T(y−Xw−w01)+λwTw (7.93)
is
ˆw0=y (7.94)
w=(XTX+λI)−1XTy (7.95)
Exercise 7.4 MLE forσ2for linear regression
Show that the MLE for the error variance in linear regression is given by
ˆσ2=1
NN/summationdisplay
i=1(yi−xT
iˆw)2(7.96)
This is just the empirical variance of the residual errors when we plug in our estimate of ˆw.
Exercise 7.5 MLE for the offset term in linear regression
Linear regression has the form E[y|x]=w 0+wTx. It is common to include a column of 1’s in the
design matrix, so we can solve for the offset term w0term and the other parameters wat the same time
using the normal equations. However, it is also possible to solve for wandw0separately. Show that
ˆw0=1
N/summationdisplay
iyi−1
N/summationdisplay
ixTiw=y−xTw (7.97)
Soˆw0models the difference in the average output from the average predicted output. Also, show that
ˆw=(XTcXc)−1XTcyc=/bracketleftBiggN/summationdisplay
i=1(xi−x)(xi−x)T/bracketrightBigg−1/bracketleftBiggN/summationdisplay
i=1(yi−y)(xi−x)/bracketrightBigg
(7.98)
whereXcis the centered input matrix containing xc
i=xi−xalong its rows, and yc=y−yis
the centered output vector. Thus we can ﬁrst compute ˆwon centered data, and then estimate w0using
y−xTˆw.
7.6. Bayesian linear regression 241
Exercise 7.6 MLE for simple linear regression
Simple linear regression refers to the case where the input is scalar, so D=1. Show that the MLE in
this case is given by the following equations, which may be familiar from basic statistics classes:
w1=/summationtext
i(xi−x)(yi−¯y)/summationtext
i(xi−¯x)2=/summationtext
ixiyi−Nxy/summationtext
ix2
i−Nx2≈cov[X,Y ]
var[X](7.99)
w0=¯y−w1¯x≈E[Y]−w1E[X] (7.100)
SeelinregDemo1 for a demo.
Exercise 7.7 Sufficient statistics for online linear regression
(Source: Jaakkola.) Consider ﬁtting the model ˆy=w0+w1xusing least squares. Unfortunately we did
not keep the original data, xi,yi, but we do have the following functions (statistics) of the data:
x(n)=1
nn/summationdisplay
i=1xi,y(n)=1
nn/summationdisplay
i=1yi (7.101)
C(n)
xx=1
nn/summationdisplay
i=1(xi−x)2,C(n)
xy=1
nn/summationdisplay
i=1(xi−x)(yi−y),C(n)
yy=1
nn/summationdisplay
i=1(yi−y)2(7.102)
a. What are the minimal set of statistics that we need to estimate w1? (Hint: see Equation 7.99.)
b. What are the minimal set of statistics that we need to estimate w0? (Hint: see Equation 7.97.)
c. Suppose a new data point, xn+1,yn+1arrives, and we want to update our sufficient statistics without
looking at the old data, which we have not stored. (This is useful for online learning.) Show that we
can this for xas follows.
x(n+1)/defines1
n+1n+1/summationdisplay
i=1xi=1
n+1/parenleftBig
nx(n)+xn+1/parenrightBig
(7.103)
=x(n)+1
n+1(xn+1−x(n)) (7.104)
This has the form: new estimate is old estimate plus correction. We see that the size of the correctiondiminishes over time (i.e., as we get more samples). Derive a similar expression to update
y
d. Show that one can update C(n+1)
xyrecursively using
C(n+1)
xy=1
n+1/bracketleftBig
xn+1yn+1+nC(n)
xy+nx(n)y(n)−(n+1)x(n+1)y(n+1)/bracketrightBig
(7.105)
Derive a similar expression to update Cxx.
e. Implementtheonlinelearningalgorithm, i.e., writeafunctionoftheform [w,ss] = linregUpdateSS(ss,
x, y), where x and y are scalars and ss is a structure containing the sufficient statistics.
f. Plot the coefficients over “time”, using the dataset in linregDemo1 . (Speciﬁcally, use [x,y] =
polyDataMake(’sampling’,’thibaux’). ) Check that they converge to the solution given by the
batch (offline) learner (i.e, ordinary least squares). Your result should look like Figure 7.14.
Turn in your derivation, code and plot.
Exercise 7.8 Bayesian linear regression in 1d with known σ2
(Source: Bolstad.) Consider ﬁtting a model of the form
p(y|x,θ)=N(y|w0+w1x,σ2) (7.106)
to the data shown below:
242 Chapter 7. Linear regression
0 5 10 15 20−6−5−4−3−2−10123
timeweightsonline linear regression
  
w0
w1
w0 batch
w1 batch
Figure 7.14 Regression coefficients over time. Produced by Exercise 7.7.
x = [94,96,94,95,104,106,108,113,115,121,131];
y = [0.47, 0.75, 0.83, 0.98, 1.18, 1.29, 1.40, 1.60, 1.75, 1.90, 2.23];
a. Compute an unbiased estimate of σ2using
ˆσ2=1
N−2N/summationdisplay
i=1(yi−ˆyi)2(7.107)
(The denominator is N−2since we have 2 inputs, namely the offset term and x.) Hereˆyi=ˆw0+ˆw1xi,
andˆw=(ˆw0,ˆw1)is the MLE.
b. Now assume the following prior on w:
p(w)=p(w0)p(w1) (7.108)
Use an (improper) uniform prior on w0and aN(0,1)prior onw1. Show that this can be written as
a Gaussian prior of the form p(w)=N(w|w0,V0). What are w0andV0?
c. Compute the marginal posterior of the slope, p(w1|D,σ2),w h e r eDis the data above, and σ2is the
unbiased estimate computed above. What is E/bracketleftbig
w1|D,σ2/bracketrightbig
andvar/bracketleftbig
w1|D,σ2/bracketrightbig
Show your work. (You
can use Matlab if you like.) Hint: the posterior variance is a very small number!
d. What is a 95% credible interval for w1?
Exercise 7.9 Generative model for linear regression
Linear regression is the problem of estimating E[Y|x]using a linear function of the form w0+wTx.
Typically we assume that the conditional distribution of YgivenXis Gaussian. We can either estimate this
conditional Gaussian directly (a discriminative approach), or we can ﬁt a Gaussian to the joint distributionofX,Yand then derive E[Y|X=x].
In Exercise 7.5 we showed that the discriminative approach leads to these equations
E[Y|x]=w
0+wTx (7.109)
w0=y−xTw (7.110)
w=(XT
cXc)−1XTcyc (7.111)
7.6. Bayesian linear regression 243
whereXc=X−¯Xis the centered input matrix, and ¯X=1nxTreplicates xacross the rows. Similarly,
yc=y−yis the centered output vector, and y=1nyreplicates yacross the rows.
a. By ﬁnding the maximum likelihood estimates of ΣXX,ΣXY,μXandμY, derive the above equations
by ﬁtting a joint Gaussian to X,Yand using the formula for conditioning a Gaussian (see Section 4.3.1).
Show your work.
b. What are the advantages and disadvantages of this approach compared to the standard discriminative
approach?
Exercise 7.10 Bayesian linear regression using the g-prior
Show that when we use the g-prior, p(w,σ2)=N I G ( w,σ2|0,g(XTX)−1,0,0), the posterior has the
following form:
p(w,σ2|D)=N I G ( w,σ2|wN,VN,aN,bN) (7.112)
VN=g
g+1(XTX)−1(7.113)
wN=g
g+1ˆwmle (7.114)
aN=N/2 (7.115)
bN=s2
2+1
2(g+1)ˆwT
mleXTXˆwmle (7.116)
(7.117)

8 Logistic regression
8.1 Introduction
One way to build a probabilistic classiﬁer is to create a joint model of the form p(y,x)and
then to condition on x, thereby deriving p(y|x). This is called the generative approach. An
alternative approach is to ﬁt a model of the form p(y|x)directly. This is called the discrimi-
nativeapproach, and is the approach we adopt in this chapter. In particular, we will assume
discriminative models which are linear in the parameters. This will turn out to signiﬁcantly sim-
plify model ﬁtting, as we will see. In Section 8.6, we compare the generative and discriminativeapproaches, and in later chapters, we will consider non-linear and non-parametric discriminativemodels.
8.2 Model speciﬁcation
As we discussed in Section 1.4.6, logistic regression corresponds to the following binary classiﬁ-cation model:
p(y|x,w)=B e r (y|sigm(w
Tx)) (8.1)
A 1d example is shown in Figure 1.19(b). Logistic regression can easily be extended to higher-
dimensional inputs. For example, Figure 8.1 shows plots of p(y=1|x,w) = sigm( wTx)for
2d input and different weight vectors w. If we threshold these probabilities at 0.5, we induce a
linear decision boundary, whose normal (perpendicular) is given by w.
8.3 Model ﬁtting
In this section, we discuss algorithms for estimating the parameters of a logistic regressionmodel.
246 Chapter 8. Logistic regression
−3 −2 −1 0 1 2 3 4 5 6−3−2−1012345
−10
0
10−1001000.51
x2
W = ( −2 , −1 )
x1
−10
0
10−1001000.51
x2
W = ( −2 , 3 )
x1
−10
0
10−1001000.51
x2
W = ( 0 , 2 )
x1
−10
0
10−1001000.51
x2
W = ( 1 , 4 )
x1
−10
0
10−1001000.51
x2
W = ( 1 , 0 )
x1
−10
0
10−1001000.51
x2
W = ( 2 , 2 )
x1
−10
0
10−1001000.51
x2
W = ( 2 , −2 )
x1
−10
0
10−1001000.51
x2
W = ( 3 , 0 )
x1
−10
0
10−1001000.51
x2
W = ( 5 , 4 )
x1
−10
0
10−1001000.51
x2
W = ( 5 , 1 )
x1
w1w2
Figure 8.1 Plots ofsigm(w1x1+w2x2).H e r ew=(w1,w2)deﬁnes the normal to the decision
boundary. Points to the right of this have sigm(wTx)>0.5, and points to the left have sigm(wTx)<
0.5. Based on Figure 39.3 of (MacKay 2003). Figure generated by sigmoidplot2D .
8.3.1 MLE
The negative log-likelihood for logistic regression is given by
NLL(w)=−N/summationdisplay
i=1log[μI(yi=1)
i×(1−μi)I(yi=0)] (8.2)
=−N/summationdisplay
i=1[yilogμi+(1−yi)log(1−μi)] (8.3)
This is also called the cross-entropy error function (see Section 2.8.2).
Another way of writing this is as follows. Suppose ˜yi∈{ −1,+1}instead of yi∈{0,1}.W e
havep(y=1 )=1
1+exp(−wTx)andp(y=1 )=1
1+exp(+ wTx). Hence
NLL(w)=N/summationdisplay
i=1log(1+exp( −˜yiwTxi)) (8.4)
Unlike linear regression, we can no longer write down the MLE in closed form. Instead, we
need to use an optimization algorithm to compute it. For this, we need to derive the gradient
and Hessian.
In the case of logistic regression, one can show (Exercise 8.3) that the gradient and Hessian
8.3. Model ﬁtting 247
0 0.5 1 1.5 2−0.500.511.522.53
(a)0 0.5 1 1.5 2−0.500.511.522.53
(b)
Figure 8.2 Gradient descent on a simple function, starting from (0,0), for 20 steps, using a ﬁxed
learning rate (step size) η. The global minimum is at (1,1). (a)η=0.1. (b)η=0.6. Figure generated by
steepestDescentDemo .
of this are given by the following
g=d
dwf(w)=/summationdisplay
i(μi−yi)xi=XT(μ−y) (8.5)
H=d
dwg(w)T=/summationdisplay
i(∇wμi)xT
i=/summationdisplay
iμi(1−μi)xixTi(8.6)
=XTSX (8.7)
whereS/definesdiag(μ i(1−μi)). One can also show (Exercise 8.3) that His positive deﬁnite.
Hence the NLL is convex and has a unique global minimum. Below we discuss some methods
for ﬁnding this minimum.
8.3.2 Steepest descent
Perhaps the simplest algorithm for unconstrained optimization is gradient descent, also known
assteepest descent. This can be written as follows:
θk+1=θk−ηkgk (8.8)
whereηkis thestep size orlearning rate. The main issue in gradient descent is: how should
we set the step size? This turns out to be quite tricky. If we use a constant learning rate, butmake it too small, convergence will be very slow, but if we make it too large, the method can failto converge at all. This is illustrated in Figure 8.2. where we plot the following (convex) function
f(θ)=0.5(θ
2
1−θ2)2+0.5(θ1−1)2, (8.9)
We arbitrarily decide to start from (0,0). In Figure 8.2(a), we use a ﬁxed step size of η=0.1;w e
see that it moves slowly along the valley. In Figure 8.2(b), we use a ﬁxed step size of η=0.6;w e
see that the algorithm starts oscillating up and down the sides of the valley and never convergesto the optimum.
248 Chapter 8. Logistic regression
exact line searching 1
0 0.5 1 1.5 2−0.500.511.522.53
(a) (b)
Figure 8.3 (a) Steepest descent on the same function as Figure 8.2, starting from (0,0), using line search.
Figure generated by steepestDescentDemo . (b) Illustration of the fact that at the end of a line search
(top of picture), the local gradient of the function will be perpendicular to the search direction. Based on
Figure 10.6.1 of (Press et al. 1988).
Let us develop a more stable method for picking the step size, so that the method is guaran-
teed to converge to a local optimum no matter where we start. (This property is called global
convergence, which should not be confused with convergence to the global optimum!) By
Taylor’s theorem, we have
f(θ+ηd)≈f(θ)+ηgTd (8.10)
wheredis our descent direction. So if ηis chosen small enough, then f(θ+ηd)<f(θ), since
the gradient will be negative. But we don’t want to choose the step size ηtoo small, or we will
move very slowly and may not reach the minimum. So let us pick ηto minimize
φ(η)=f(θk+ηdk) (8.11)
This is called line minimization orline search. There are various methods for solving this 1d
optimization problem; see (Nocedal and Wright 2006) for details.
Figure 8.3(a) demonstrates that line search does indeed work for our simple problem. However,
we see that the steepest descent path with exact line searches exhibits a characteristic zig-zag
behavior. To see why, note that an exact line search satisﬁes ηk=a r g m i n η>0φ(η).A
necessary condition for the optimum is φ/prime(η)=0. By the chain rule, φ/prime(η)=dTg,w h e r e
g=f/prime(θ+ηd)is the gradient at the end of the step. So we either have g=0, which means
we have found a stationary point, or g⊥d, which means that exact search stops at a point
where the local gradient is perpendicular to the search direction. Hence consecutive directionswill be orthogonal (see Figure 8.3(b)). This explains the zig-zag behavior.
One simple heuristic to reduce the effect of zig-zagging is to add a momentum term,(θ
k−
θk−1), as follows:
θk+1=θk−ηkgk+μk(θk−θk−1) (8.12)
8.3. Model ﬁtting 249
where0≤μk≤1controls the importance of the momentum term. In the optimization
community, this is known as the heavy ball method (see e.g., (Bertsekas 1999)).
An alternative way to minimize “zig-zagging” is to use the method of conjugate gradients
(see e.g., (Nocedal and Wright 2006, ch 5) or (Golub and van Loan 1996, Sec 10.2)). This is the
method of choice for quadratic objectives of the form f(θ)=θTAθ, which arise when solving
linear systems. However, non-linear CG is less popular.
8.3.3 Newton’s method
Algorithm 8.1: Newton’s method for minimizing a strictly convex function
1Initializeθ0;
2fork=1,2,... until convergence do
3Evaluategk=∇f(θk);
4EvaluateHk=∇2f(θk);
5SolveHkdk=−gkfordk;
6Use line search to ﬁnd stepsize ηkalongdk;
7θk+1=θk+ηkdk;
One can derive faster optimization methods by taking the curvature of the space (i.e., the
Hessian) into account. These are called second order optimization metods. The primary
example is Newton’s algorithm. This is an iterative algorithm which consists of updates of the
form
θk+1=θk−ηkH−1
kgk (8.13)
The full pseudo-code is given in Algorithm 2.
This algorithm can be derived as follows. Consider making a second-order Taylor series
approximation of f(θ)aroundθk:
fquad(θ)=fk+gT
k(θ−θk)+1
2(θ−θk)THk(θ−θk) (8.14)
Let us rewrite this as
fquad(θ)=θTAθ+bTθ+c (8.15)
where
A=1
2Hk,b=gk−Hkθk,c=fk−gT
kθk+1
2θT
kHkθk (8.16)
The minimum of fquadis at
θ=−1
2A−1b=θk−H−1
kgk (8.17)
Thus the Newton step dk=−H−1
kgkis what should be added to θkto minimize the second
order approximation of faroundθk. See Figure 8.4(a) for an illustration.
250 Chapter 8. Logistic regression
f(x)
fquad(x)
xkxk+dk
(a)f(x)
fquad(x)
xkxk+dk
(b)
Figure 8.4 Illustration of Newton’s method for minimizing a 1d function. (a) The solid curve is the
functionf(x). The dotted line fquad(x)is its second order approximation at xk. The Newton step dk
is what must be added to xkto get to the minimum of fquad(x). Based on Figure 13.4 of (Vandenberghe
2006). Figure generated by newtonsMethodMinQuad . (b) Illustration of Newton’s method applied to a
nonconvex function. We ﬁt a quadratic around the current point xkand move to its stationary point,
xk+1=xk+dk. Unfortunately, this is a local maximum, not minimum. This means we need to be careful
about the extent of our quadratic approximation. Based on Figure 13.11 of (Vandenberghe 2006). Figure
generated by newtonsMethodNonConvex .
In its simplest form (as listed), Newton’s method requires that Hkbe positive deﬁnite, which
will hold if the function is strictly convex. If not, the objective function is not convex, then
Hkmay not be positive deﬁnite, so dk=−H−1
kgkmay not be a descent direction (see
Figure 8.4(b) for an example). In this case, one simple strategy is to revert to steepest descent,d
k=−gk. TheLevenberg Marquardt algorithm is an adaptive way to blend between Newton
steps and steepest descent steps. This method is widely used when solving nonlinear leastsquares problems. An alternative approach is this: Rather than computing d
k=−H−1
kgk
directly, we can solve the linear system of equations Hkdk=−gkfordkusing conjugate
gradient (CG). If Hkis not positive deﬁnite, we can simply truncate the CG iterations as soon
as negative curvature is detected; this is called truncated Newton.
8.3.4 Iteratively reweighted least squares (IRLS)
Let us now apply Newton’s algorithm to ﬁnd the MLE for binary logistic regression. The Newtonupdate at iteration k+1for this model is as follows (using η
k=1, since the Hessian is exact):
wk+1=wk−H−1gk (8.18)
=wk+(XTSkX)−1XT(y−μk) (8.19)
=(XTSkX)−1/bracketleftbig
(XTSkX)wk+XT(y−μk)/bracketrightbig
(8.20)
=(XTSkX)−1XT[SkXwk+y−μk] (8.21)
=(XTSkX)−1XTSkzk (8.22)
where we have deﬁned the working response as
zk/definesXwk+S−1
k(y−μk) (8.23)
8.3. Model ﬁtting 251
Equation 8.22 is an example of a weighted least squares problem, which is a minimizer of
N/summationdisplay
i=1Ski(zki−wTxi)2(8.24)
SinceSkis a diagonal matrix, we can rewrite the targets in component form (for each case
i=1:N)a s
zki=wT
kxi+yi−μki
μki(1−μki)(8.25)
This algorithm is known as iteratively reweighted least squares orIRLSfor short, since at
each iteration, we solve a weighted least squares problem, where the weight matrix Skchanges
at each iteration. See Algorithm 10 for some pseudocode.
Algorithm 8.2: Iteratively reweighted least squares (IRLS)
1w=0D;
2w0= log(y/(1−y));
3repeat
4ηi=w0+wTxi;
5μi=s i g m (ηi);
6si=μi(1−μi);
7zi=ηi+yi−μi
si;
8S=d i a g (s1:N);
9w=(XTSX)−1XTSz;
10until converged ;
8.3.5 Quasi-Newton (variable metric) methods
The mother of all second-order optimization algorithm is Newton’s algorithm, which we dis-
cussed in Section 8.3.3. Unfortunately, it may be too expensive to compute Hexplicitly. Quasi-
Newtonmethods iteratively build up an approximation to the Hessian using information gleaned
from the gradient vector at each step. The most common method is called BFGS(named after
its inventors, Broyden, Fletcher, Goldfarb and Shanno), which updates the approximation to theHessianB
k≈Hkas follows:
Bk+1=Bk+ykyT
k
yT
ksk−(Bksk)(Bksk)T
sT
kBksk(8.26)
sk=θk−θk−1 (8.27)
yk=gk−gk−1 (8.28)
This is a rank-two update to the matrix, and ensures that the matrix remains positive deﬁnite
(under certain restrictions on the step size). We typically start with a diagonal approximation,B
0=I. Thus BFGS can be thought of as a “diagonal plus low-rank” approximation to the
Hessian.
252 Chapter 8. Logistic regression
Alternatively, BFGS can iteratively update an approximation to the inverse Hessian, Ck≈H−1
k,
as follows:
Ck+1=/parenleftbigg
I−skyT
k
yT
ksk/parenrightbigg
Ck/parenleftbigg
I−yksT
k
yT
ksk/parenrightbigg
+sksTk
yT
ksk(8.29)
Since storing the Hessian takes O(D2)space, for very large problems, one can use limited
memory BFGS,o rL-BFGS,w h e r e HkorH−1
kis approximated by a diagonal plus low rank
matrix. In particular, the product H−1
kgkcan be obtained by performing a sequence of inner
products with skandyk, using only the mmost recent (sk,yk)pairs, and ignoring older
information. The storage requirements are therefore O(mD). Typically m∼20suffices for
good performance. See (Nocedal and Wright 2006, p177) for more information. L-BFGS is
often the method of choice for most unconstrained smooth optimization problems that arise inmachine learning (although see Section 8.5).
8.3.6/lscript2regularization
Just as we prefer ridge regression to linear regression, so we should prefer MAP estimation forlogistic regression to computing the MLE. In fact, regularization is important in the classiﬁcationsetting even if we have lots of data. To see why, suppose the data is linearly separable. Inthis case, the MLE is obtained when ||w|| → ∞, corresponding to an inﬁnitely steep sigmoid
function, I(w
Tx>w0), also known as a linear threshold unit. This assigns the maximal
amount of probability mass to the training data. However, such a solution is very brittle andwill not generalize well.
To prevent this, we can use /lscript
2regularization, just as we did with ridge regression. We note
that the new objective, gradient and Hessian have the following forms:
f/prime(w) = NLL( w)+λwTw (8.30)
g/prime(w)=g (w)+λw (8.31)
H/prime(w)=H( w)+λI (8.32)
It is a simple matter to pass these modiﬁed equations into any gradient-based optimizer.
8.3.7 Multi-class logistic regression
Now we consider multinomial logistic regression , sometimes called a maximum entropy
classiﬁer. This is a model of the form
p(y=c|x,W)=exp(wT
cx)/summationtextC
c/prime=1exp(wT
c/primex)(8.33)
A slight variant, known as a conditional logit model, normalizes over a different set of classes
for each data case; this can be useful for modeling choices that users make between different
sets of items that are offered to them.
Let us now introduce some notation. Let μic=p(yi=c|xi,W)=S(ηi)c,w h e r eηi=
WTxiis aC×1vector. Also, let yic=I(yi=c)be the one-of-C encoding of yi; thusyiis a
bit vector, in which the c’th bit turns on iff yi=c. Following (Krishnapuram et al. 2005), let us
8.3. Model ﬁtting 253
setwC=0, to ensure identiﬁability, and deﬁne w= vec(W(:,1:C−1))to be aD×(C−1)
column vector.
With this, the log-likelihood can be written as
/lscript(W)=l o gN/productdisplay
i=1C/productdisplay
c=1μyic
ic=N/summationdisplay
i=1C/summationdisplay
c=1yiclogμic (8.34)
=N/summationdisplay
i=1/bracketleftBigg/parenleftBiggC/summationdisplay
c=1yicwT
cxi/parenrightBigg
−log/parenleftBiggC/summationdisplay
c/prime=1exp(wT
c/primexi)/parenrightBigg/bracketrightBigg
(8.35)
Deﬁne the NLL as
f(w)=−/lscript(w) (8.36)
We now proceed to compute the gradient and Hessian of this expression. Since wis block-
structured, the notation gets a bit heavy, but the ideas are simple. It helps to deﬁne A⊗B
be thekronecker product of matrices AandB.I fAis anm×nmatrix and Bis ap×q
matrix, then A×Bis themp×nqblock matrix
A⊗B=⎡
⎢⎣a11B···a1nB
.........
a
m1B···amnB⎤
⎥⎦ (8.37)
Returning to the task at hand, one can show (Exercise 8.4) that the gradient is given by
g(W)=∇f(w)=N/summationdisplay
i=1(μi−yi)⊗xi (8.38)
whereyi=(I(yi=1 ),...,I(yi=C−1))andμi(W)=[p(yi=1|xi,W),...,p(yi=
C−1|xi,W)]are column vectors of length C−1, For example, if we have D=3feature
dimensions and C=3classes, this becomes
g(W)=/summationdisplay
i⎛
⎜⎜⎜⎜⎜⎜⎝(μ
i1−yi1)xi1
(μi1−yi1)xi2
(μi1−yi1)xi3
(μi2−yi2)xi1
(μi2−yi2)xi2
(μi2−yi2)xi3⎞
⎟⎟⎟⎟⎟⎟⎠(8.39)
In other words, for each class c, the derivative for the weights in the c’th column is
∇
wcf(W)=/summationdisplay
i(μic−yic)xi (8.40)
This has the same form as in the binary logistic regression case, namely an error term times xi.
(This turns out to be a general property of distributions in the exponential family, as we will see
in Section 9.3.2.)
254 Chapter 8. Logistic regression
One can also show (Exercise 8.4) that the Hessian is the following block structured D(C−
1)×D(C−1)matrix:
H(W)=∇2f(w)=N/summationdisplay
i=1(diag(μi)−μiμT
i)⊗(xixTi) (8.41)
For example, if we have 3 features and 3 classes, this becomes
H(W)=/summationdisplay
i/parenleftbiggμi1−μ2
i1−μi1μi2
−μi1μi2μi2−μ2i2/parenrightbigg
⊗⎛
⎝xi1xi1xi1xi2xi1xi3
xi2xi1xi2xi2xi2xi3
xi3xi1xi3xi2xi3xi3⎞⎠ (8.42)
=/summationdisplay
i/parenleftbigg(μi1−μ2
i1)Xi−μi1μi2Xi
−μi1μi2Xi(μi2−μ2i2)Xi/parenrightbigg
(8.43)
whereXi=xixTi. In other words, the block c,c/primesubmatrix is given by
Hc,c/prime(W)=/summationdisplay
iμic(δc,c/prime−μi,c/prime)xixT
i (8.44)
This is also a positive deﬁnite matrix, so there is a unique MLE.
Now consider minimizing
f/prime(W)/defines−logp(D|w)−logp(W) (8.45)
wherep(W)=/producttext
cN(wc|0,V0). The new objective, its gradient and Hessian are given by
f/prime(W)=f (W)+1
2/summationdisplay
cwcV−1
0wc (8.46)
g/prime(W)=g (W)+V−1
0(/summationdisplay
cwc) (8.47)
H/prime(W)=H( W)+IC⊗V−1
0 (8.48)
This can be passed to any gradient-based optimizer to ﬁnd the MAP estimate. Note, however,
that the Hessian has size O((CD)×(CD)), which is Ctimes more row and columns than
in the binary case, so limited memory BFGS is more appropriate than Newton’s method. SeelogregFit for some Matlab code.
8.4 Bayesian logistic regression
It is natural to want to compute the full posterior over the parameters, p(w|D), for logistic
regression models. This can be useful for any situation where we want to associate conﬁdenceintervals with our predictions (e.g., this is necessary when solving contextual bandit problems,discussed in Section 5.7.3.1).
Unfortunately, unlike the linear regression case, this cannot be done exactly, since there is no
convenient conjugate prior for logistic regression. We discuss one simple approximation below;some other approaches include MCMC (Section 24.3.3.1), variational inference (Section 21.8.1.1),expectation propagation (Kuss and Rasmussen 2005), etc. For notational simplicity, we stick tobinary logistic regression.
8.4. Bayesian logistic regression 255
8.4.1 Laplace approximation
In this section, we discuss how to make a Gaussian approximation to a posterior distribution.
The approximation works as follows. Suppose θ∈RD.L e t
p(θ|D)=1
Ze−E(θ)(8.49)
whereE(θ)is called an energy function, and is equal to the negative log of the unnormal-
ized log posterior, E(θ)=−logp(θ,D), withZ=p(D)being the normalization constant.
Performing a Taylor series expansion around the mode θ∗(i.e., the lowest energy state) we get
E(θ)≈E(θ∗)+(θ−θ∗)Tg+1
2(θ−θ∗)TH(θ−θ∗) (8.50)
wheregis the gradient and His the Hessian of the energy function evaluated at the mode:
g/defines∇E(θ)/vextendsingle/vextendsingle
θ∗,H/defines∂2E(θ)
∂θ∂θT|θ∗ (8.51)
Sinceθ∗is the mode, the gradient term is zero. Hence
ˆp(θ|D)≈1
Ze−E(θ∗)exp/bracketleftbigg
−1
2(θ−θ∗)TH(θ−θ∗)/bracketrightbigg
(8.52)
=N(θ|θ∗,H−1) (8.53)
Z=p(D)≈/integraldisplay
ˆp(θ|D)dθ=e−E(θ∗)(2π)D/2|H|−1
2 (8.54)
The last line follows from normalization constant of the multivariate Gaussian.
Equation 8.54 is known as the Laplace approximation to the marginal likelihood. Therefore
Equation 8.52 is sometimes called the the Laplace approximation to the posterior. However,
in the statistics community, the term “Laplace approximation” refers to a more sophisticated
method (see e.g. (Rue et al. 2009) for details). It may therefore be better to use the term“Gaussian approximation” to refer to Equation 8.52. A Gaussian approximation is often areasonable approximation, since posteriors often become more “Gaussian-like” as the samplesize increases, for reasons analogous to the central limit theorem. (In physics, there is ananalogous technique known as a saddle point approximation.)
8.4.2 Derivation of the BIC
We can use the Gaussian approximation to write the log marginal likelihood as follows, droppingirrelevant constants:
logp(D)≈logp(D|θ
∗)+logp(θ∗)−1
2log|H| (8.55)
The penalization terms which are added to the logp(D|θ∗)are sometimes called the Occam
factor, and are a measure of model complexity. If we have a uniform prior, p(θ)∝1, we can
drop the second term, and replace θ∗with the MLE, ˆθ.
256 Chapter 8. Logistic regression
We now focus on approximating the third term. We have H=/summationtextN
i=1Hi,w h e r eHi=
∇∇logp(Di|θ). Let us approximate each Hib yaﬁ x e dm a t r i x ˆH. Then we have
log|H|=l o g|NˆH|= log(Nd|ˆH|)=DlogN+log|ˆH| (8.56)
whereD=d i m (θ)and we have assumed His full rank. We can drop the log|ˆH|term, since
it is independent of N, and thus will get overwhelmed by the likelihood. Putting all the pieces
together, we recover the BIC score (Section 5.3.2.4):
logp(D)≈logp(D|ˆθ)−D
2logN (8.57)
8.4.3 Gaussian approximation for logistic regression
Now let us apply the Gaussian approximation to logistic regression. We will use a a Gaussian
prior of the form p(w)=N(w|0,V0), just as we did in MAP estimation. The approximate
posterior is given by
p(w|D)≈N(w|ˆw,H−1) (8.58)
whereˆw=a r gm i n wE(w),E(w)=−(logp(D|w)+logp(w)), andH=∇2E(w)|ˆw.
As an example, consider the linearly separable 2D data in Figure 8.5(a). There are many
parameter settings that correspond to lines that perfectly separate the training data; we show 4examples. The likelihood surface is shown in Figure 8.5(b), where we see that the likelihood isunbounded as we move up and to the right in parameter space, along a ridge where w
2/w1=
2.35(this is indicated by the diagonal line). The reasons for this is that we can maximize the
likelihood by driving ||w||to inﬁnity (subject to being on this line), since large regression weights
make the sigmoid function very steep, turning it into a step function. Consequently the MLE isnot well deﬁned when the data is linearly separable.
Toregularizetheproblem, letususeavaguesphericalpriorcenteredattheorigin, N(w|0,100I).
Multiplying this spherical prior by the likelihood surface results in a highly skewed posterior,shown in Figure 8.5(c). (The posterior is skewed because the likelihood function “chops off”regions of parameter space (in a “soft” fashion) which disagree with the data.) The MAP estimateis shown by the blue dot. Unlike the MLE, this is not at inﬁnity.
The Gaussian approximation to this posterior is shown in Figure 8.5(d). We see that this is
a symmetric distribution, and therefore not a great approximation. Of course, it gets the modecorrect (by construction), and it at least represents the fact that there is more uncertainty alongthe southwest-northeast direction (which corresponds to uncertainty about the orientation ofseparating lines) than perpendicular to this. Although a crude approximation, this is surelybetter than approximating the posterior by a delta function, which is what MAP estimation does.
8.4.4 Approximating the posterior predictive
Given the posterior, we can compute credible intervals, perform hypothesis tests, etc., just as wedid in Section 7.6.3.3 in the case of linear regression. But in machine learning, interest usuallyfocusses on prediction. The posterior predictive distribution has the form
p(y|x,D)=/integraldisplay
p(y|x,w)p(w|D)dw (8.59)
8.4. Bayesian logistic regression 257
−10 −5 0 5−8−6−4−202468data
(a)Log−Likelihood
123 4
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(b)
Log−Unnormalised Posterior
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(c)Laplace Approximation to Posterior
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(d)
Figure 8.5 (a) Two-class data in 2d. (b) Log-likelihood for a logistic regression model. The line is drawn
from the origin in the direction of the MLE (which is at inﬁnity). The numbers correspond to 4 points
in parameter space, corresponding to the lines in (a). (c) Unnormalized log posterior (assuming vaguespherical prior). (d) Laplace approximation to posterior. Based on a ﬁgure by Mark Girolami. Figuregenerated by logregLaplaceGirolamiDemo .
Unfortunately this integral is intractable.
The simplest approximation is the plug-in approximation, which, in the binary case, takes the
form
p(y=1|x,D)≈p(y=1|x,E[w]) (8.60)
where E[w]is the posterior mean. In this context, E[w]is called the Bayes point. Of course,
such a plug-in estimate underestimates the uncertainty. We discuss some better approximations
below.
258 Chapter 8. Logistic regression
p(y=1|x, wMAP)
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(a)−10 −8 −6 −4 −2 0 2 4 6 8−8−6−4−202468decision boundary for sampled w
(b)
MC approx of p(y=1|x)
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(c)numerical approx of p(y=1|x)
−8 −6 −4 −2 0 2 4 6 8−8−6−4−202468
(d)
Figure 8.6 Posterior predictive distribution for a logistic regression model in 2d. Top left: contours of
p(y=1|x,ˆwmap). Top right: samples from the posterior predictive distribution. Bottom left: Averaging
over these samples. Bottom right: moderated output (probit approximation). Based on a ﬁgure by Mark
Girolami. Figure generated by logregLaplaceGirolamiDemo .
8.4.4.1 Monte Carlo approximation
A better approach is to use a Monte Carlo approximation, as follows:
p(y=1|x,D)≈1
SS/summationdisplay
s=1sigm((ws)Tx) (8.61)
wherews∼p(w|D)are samples from the posterior. (This technique can be trivially extended
to the multi-class case.) If we have approximated the posterior using Monte Carlo, we can reuse
these samples for prediction. If we made a Gaussian approximation to the posterior, we candraw independent samples from the Gaussian using standard methods.
Figure 8.6(b) shows samples from the posteiror predictive for our 2d example. Figure 8.6(c)
8.4. Bayesian logistic regression 259
460 480 500 520 540 560 580 600 620 64000.10.20.30.40.50.60.70.80.91
(a)−6 −4 −2 0 2 4 600.10.20.30.40.50.60.70.80.91
  
sigmoid
probit
(b)
Figure 8.7 (a) Posterior predictive density for SAT data. The red circle denotes the posterior mean, the
blue cross the posterior median, and the blue lines denote the 5th and 95th percentiles of the predictive
distribution. Figure generated by logregSATdemoBayes . (b) The logistic (sigmoid) function sigm(x) in
solid red, with the rescaled probit function Φ(λx)in dotted blue superimposed. Here λ=/radicalbig
π/8, which
was chosen so that the derivatives of the two curves match at x=0. Based on Figure 4.9 of (Bishop
2006b). Figure generated by probitPlot . Figure generated by probitRegDemo .
shows the average of these samples. By averaging over multiple predictions, we see that the
uncertainty in the decision boundary “splays out” as we move further from the training data.So although the decision boundary is linear, the posterior predictive density is not linear. Notealso that the posterior mean decision boundary is roughly equally far from both classes; this isthe Bayesian analog of the large margin principle discussed in Section 14.5.2.2.
Figure 8.7(a) shows an example in 1d. The red dots denote the mean of the posterior predictive
evaluated at the training data. The vertical blue lines denote 95% credible intervals for theposterior predictive; the small blue star is the median. We see that, with the Bayesian approach,we are able to model our uncertainty about the probability a student will pass the exam basedon his SAT score, rather than just getting a point estimate.
8.4.4.2 Probit approximation (moderated output) *
If we have a Gaussian approximation to the posterior p(w|D)≈N(w|m
N,VN), we can also
compute a deterministic approximation to the posterior predictive distribution, at least in thebinary case. We proceed as follows:
p(y=1|x,D)≈/integraldisplay
sigm(w
Tx)p(w|D)dw=/integraldisplay
sigm(a)N(a|μa,σ2
a)da (8.62)
a/defineswTx (8.63)
μa/definesE[a]=mT
Nx (8.64)
σ2
a/definesvar[a]=/integraldisplay
p(a|D)[a2−E/bracketleftbig
a2/bracketrightbig
]da (8.65)
=/integraldisplay
p(w|D)[(wTx)2−(mTNx)2]dw=xTVNx (8.66)
260 Chapter 8. Logistic regression
Thus we see that we need to evaluate the expectation of a sigmoid with respect to a Gaussian.
This can be approximated by exploiting the fact that the sigmoid function is similar to theprobitfunction, which is given by the cdf of the standard normal:
Φ(a)/defines/integraldisplay
a
−∞N(x|0,1)dx (8.67)
Figure 8.7(b) plots the sigmoid and probit functions. We have rescaled the axes so that sigm(a)
has the same slope as Φ(λa)at the origin, where λ2=π/8.
The advantage of using the probit is that one can convolve it with a Gaussian analytically:
/integraldisplay
Φ(λa)N(a|μ,σ2)da=Φ/parenleftbigga
(λ−2+σ2)1
2/parenrightbigg
(8.68)
We now plug in the approximation sigm(a)≈Φ(λa)to both sides of this equation to get
/integraldisplay
sigm(a)N(a|μ,σ2)da≈sigm(κ(σ2)μ) (8.69)
κ(σ2)/defines(1+πσ2/8)−1
2 (8.70)
Applying this to the logistic regression model we get the following expression (ﬁrst suggested in(Spiegelhalter and Lauritzen 1990)):
p(y=1|x,D)≈sigm(κ(σ
2
a)μa) (8.71)
Figure 8.6(d) indicates that this gives very similar results to the Monte Carlo approximation.
Using Equation 8.71 is sometimes called a moderated output, since it is less extreme than
the plug-in estimate. To see this, note that 0≤κ(σ2)≤1and hence
sigm(κ(σ2)μ)≤sigm(μ)=p(y=1|x,ˆw) (8.72)
where the inequality is strict if μ/negationslash=0.I fμ>0,w eh a v e p(y=1|x,ˆw)>0.5, but the
moderated prediction is always closer to 0.5, so it is less conﬁdent. However, the decisionboundary occurs whenever p(y=1|x,D) = sigm(κ( σ
2)μ)=0.5, which implies μ=ˆwTx=
0. Hence the decision boundary for the moderated approximation is the same as for the plug-inapproximation. So the number of misclassiﬁcations will be the same for the two methods,but the log-likelihood will not. (Note that in the multiclass case, taking into account posteriorcovariance gives different answers than the plug-in approach: see Exercise 3.10.3 of (Rasmussenand Williams 2006).)
8.4.5 Residual analysis (outlier detection) *
It is sometimes useful to detect data cases which are “outliers”. This is called residual analysis
orcase analysis. In a regression setting, this can be performed by computing ri=yi−ˆyi,w h e r e
ˆyi=ˆwTxi. These values should follow a N(0,σ2)distribution, if the modelling assumptions
are correct. This can be assessed by creating a qq-plot, where we plot the Ntheoretical
quantiles of a Gaussian distribution against the Nempirical quantiles of the ri. Points that
deviate from the straightline are potential outliers.
8.5. Online learning and stochastic optimization 261
Classical methods, based on residuals, do not work well for binary data, because they rely
on asymptotic normality of the test statistics. However, adopting a Bayesian approach, we
can just deﬁne outliers to be points which which p(yi|ˆyi)is small, where we typically use
ˆyi=s i g m (ˆwTxi). Note that ˆwwas estimated from all the data. A better method is to exclude
(xi,yi)from the estimate of wwhen predicting yi. That is, we deﬁne outliers to be points
which have low probability under the cross-validated posterior predictive distribution, deﬁnedby
p(y
i|xi,x−i,y−i)=/integraldisplay
p(yi|xi,w)/productdisplay
i/prime/negationslash=ip(yi/prime|xi/prime,w)p(w)dw (8.73)
This can be efficiently approximated by sampling methods (Gelfand 1996). For further discussionof residual analysis in logistic regression models, see e.g.,(Johnson and Albert 1999, Sec 3.4).
8.5 Online learning and stochastic optimization
Traditionally machine learning is performed offline, which means we have a batchof data, and
we optimize an equation of the following form
f(θ)=1
NN/summationdisplay
i=1f(θ,zi) (8.74)
wherezi=(xi,yi)in the supervised case, or just xiin the unsupervised case, and f(θ,zi)is
some kind of loss function. For example, we might use
f(θ,zi)=−logp(yi|xi,θ) (8.75)
in which case we are trying to maximize the likelihood. Alternatively, we might use
f(θ,zi)=L(yi,h(xi,θ)) (8.76)
whereh(xi,θ)is a prediction function, and L(y,ˆy)is some other loss function such as squared
error or the Huber loss. In frequentist decision theory, the average loss is called the risk (seeSection 6.3), so this overall approach is called empirical risk minimization or ERM (see Section 6.5for details).
However, if we have streaming data, we need to perform online learning, so we can update
our estimates as each new data point arrives rather than waiting until “the end” (which maynever occur). And even if we have a batch of data, we might want to treat it like a stream if it istoo large to hold in main memory. Below we discuss learning methods for this kind of scenario.
1
1. A simple implementation trick can be used to speed up batch learning algorithms when applied to data sets that
are too large to hold in memory. First note that the naive implementation makes a pass over the data ﬁle, from the
beginning to end, accumulating the sufficient statistics and gradients as it goes; then an update is performed and theprocess repeats. Unfortunately, at the end of each pass, the data from the beginning of the ﬁle will have been evicted
from the cache (since are are assuming it cannot all ﬁt into memory). Rather than going back to the beginning of the
ﬁle and reloading it, we can simply work backwards from the end of the ﬁle, which is already in memory. We then
repeat this forwards-backwards pattern over the data. This simple trick is known as rocking.
262 Chapter 8. Logistic regression
8.5.1 Online learning and regret minimization
Suppose that at each step, “nature” presents a sample zkand the “learner” must respond with
a parameter estimate θk. In the theoretical machine learning community, the objective used in
online learning is the regret, which is the averaged loss incurred relative to the best we could
have gotten in hindsight using a single ﬁxed parameter value:
regretk/defines1
kk/summationdisplay
t=1f(θt,zt)−min
θ∗∈Θ1
kk/summationdisplay
t=1f(θ∗,zt) (8.77)
For example, imagine we are investing in the stock-market. Let θjbe the amount we invest in
stockj, and letzjbe the return on this stock. Our loss function is f(θ,z)=−θTz. The regret
is how much better (or worse) we did by trading at each step, rather than adopting a “buy and
hold” strategy using an oracle to choose which stocks to buy.
One simple algorithm for online learning is online gradient descent (Zinkevich 2003), which
is as follows: at each step k, update the parameters using
θk+1=p r ojΘ(θk−ηkgk) (8.78)
whereprojV(v) = argminw∈V||w−v||2is the projection of vector vonto space V,gk=
∇f(θk,zk)is the gradient, and ηkis the step size. (The projection step is only needed if
the parameter must be constrained to live in a certain subset of RD. See Section 13.4.3 for
details.) Below we will see how this approach to regret minimization relates to more traditionalobjectives, such as MLE.
There are a variety of other approaches to regret minimization which are beyond the scope
of this book (see e.g., Cesa-Bianchi and Lugosi (2006) for details).
8.5.2 Stochastic optimization and risk minimization
Now suppose that instead of minimizing regret with respect to the past, we want to minimizeexpected loss in the future, as is more common in (frequentist) statistical learning theory. Thatis, we want to minimize
f(θ)=E[f(θ,z)] (8.79)
where the expectation is taken over future data. Optimizing functions where some of thevariables in the objective are random is called stochastic optimization.
2
Suppose we receive an inﬁnite stream of samples from the distribution. One way to optimize
stochastic objectives such as Equation 8.79 is to perform the update in Equation 8.78 at eachstep. This is called stochastic gradient descent orSGD(Nemirovski and Yudin 1978). Since we
typically want a single parameter estimate, we can use a running average:
θk=1
kk/summationdisplay
t=1θt (8.80)
2. Note that in stochastic optimization, the objective is stochastic, and therefore the algorithms will be, too. However,
it is also possible to apply stochastic optimization algorithms to deterministic objectives. Examples include simulated
annealing (Section 24.6.1) and stochastic gradient descent applied to the empirical risk minimization problem. There are
some interesting theoretical connections between online learning and stochastic optimization (Cesa-Bianchi and Lugosi
2006), but this is beyond the scope of this book.
8.5. Online learning and stochastic optimization 263
This is called Polyak-Ruppert averaging, and can be implemented recursively as follows:
θk=θk−1−1
k(θk−1−θk) (8.81)
See e.g., (Spall 2003; Kushner and Yin 2003) for details.
8.5.2.1 Setting the step size
We now discuss some sufficient conditions on the learning rate to guarantee convergence of
SGD. These are known as the Robbins-Monro conditions:
∞/summationdisplay
k=1ηk=∞,∞/summationdisplay
k=1η2
k<∞. (8.82)
The set of values of ηkover time is called the learning rate schedule. Various formulas are
used, such as ηk=1/k, or the following (Bottou 1998; Bach and Moulines 2011):
ηk=(τ0+k)−κ(8.83)
whereτ0≥0slows down early iterations of the algorithm, and κ∈(0.5,1]controls the rate at
which old values of are forgotten.
The need to adjust these tuning parameters is one of the main drawback of stochastic
optimization. One simple heuristic (Bottou 2007) is as follows: store an initial subset of thedata, and try a range of ηvalues on this subset; then choose the one that results in the fastest
decrease in the objective and apply it to all the rest of the data. Note that this may not resultin convergence, but the algorithm can be terminated when the performance improvement on ahold-out set plateaus (this is called early stopping).
8.5.2.2 Per-parameter step sizes
One drawback of SGD is that it uses the same step size for all parameters. We now brieﬂypresent a method known as adagrad (short for adaptive gradient) (Duchi et al. 2010), which is
similar in spirit to a diagonal Hessian approximation. (See also (Schaul et al. 2012) for a similarapproach.) In particular, if θ
i(k)is parameter iat timek, andgi(k)is its gradient, then we
make an update as follows:
θi(k+1)=θi(k)−ηgi(k)
τ0+/radicalbig
si(k)(8.84)
where the diagonal step size vector is the gradient vector squared, summed over all time steps.This can be recursively updated as follows:
s
i(k)=si(k−1)+gi(k)2(8.85)
The result is a per-parameter step size that adapts to the curvature of the loss function. Thismethod was original derived for the regret minimization case, but it can be applied moregenerally.
264 Chapter 8. Logistic regression
8.5.2.3 SGD compared to batch learning
If we don’t have an inﬁnite data stream, we can “simulate” one by sampling data points at
random from our training set. Essentially we are optimizing Equation 8.74 by treating it as anexpectation with respect to the empirical distribution.
Algorithm 8.3: Stochastic gradient descent
1Initializeθ,η;
2repeat
3Randomly permute data;
4fori=1:Ndo
5 g=∇f(θ,zi);
6 θ←projΘ(θ−ηg);
7 Updateη;
8until converged ;
In theory, we should sample with replacement, although in practice it is usually better to
randomly permute the data and sample without replacement, and then to repeat. A single suchpass over the entire data set is called an epoch. See Algorithm 8 for some pseudocode.
In this offline case, it is often better to compute the gradient of a mini-batch ofBdata cases.
IfB=1, this is standard SGD, and if B=N, this is standard steepest descent. Typically
B∼100is used.
Although a simple ﬁrst-order method, SGD performs surprisingly well on some problems,
especially ones with large data sets (Bottou 2007). The intuitive reason for this is that one canget a fairly good estimate of the gradient by looking at just a few examples. Carefully evaluatingprecise gradients using large datasets is often a waste of time, since the algorithm will haveto recompute the gradient again anyway at the next step. It is often a better use of computertime to have a noisy estimate and to move rapidly through parameter space. As an extremeexample, suppose we double the training set by duplicating every example. Batch methods willtake twice as long, but online methods will be unaffected, since the direction of the gradienthas not changed (doubling the size of the data changes the magnitude of the gradient, but thatis irrelevant, since the gradient is being scaled by the step size anyway).
In addition to enhanced speed, SGD is often less prone to getting stuck in shallow local
minima, because it adds a certain amount of “noise”. Consequently it is quite popular in themachine learning community for ﬁtting models with non-convex objectives, such as neuralnetworks (Section 16.5) and deep belief networks (Section 28.1).
8.5.3 The LMS algorithm
As an example of SGD, let us consider how to compute the MLE for linear regression in anonline fashion. We derived the batch gradient in Equation 7.14. The online gradient at iterationkis given by
g
k=xi(θT
kxi−yi) (8.86)
8.5. Online learning and stochastic optimization 265
black line = LMS trajectory towards LS soln (red cross)
w0w1
−1 0 1 2 3−1−0.500.511.522.53
(a)0 5 10 15 20 25 30345678910RSS vs iteration
(b)
Figure 8.8 Illustration of the LMS algorithm. Left: we start from θ=(−0.5,2)and slowly converging
to the least squares solution of ˆθ=( 1.45,0.92)(red cross). Right: plot of objective function over time.
Note that it does not decrease monotonically. Figure generated by LMSdemo.
wherei=i(k)is the training example to use at iteration k. If the data set is streaming, we use
i(k)=k; we shall assume this from now on, for notational simplicity. Equation 8.86 is easy
to interpret: it is the feature vector xkweighted by the difference between what we predicted,
ˆyk=θT
kxk, and the true response, yk; hence the gradient acts like an error signal.
After computing the gradient, we take a step along it as follows:
θk+1=θk−ηk(ˆyk−yk)xk (8.87)
(There is no need for a projection step, since this is an unconstrained optimization problem.)
This algorithm is called the least mean squares orLMSalgorithm, and is also known as the
delta rule,o rt h eWidrow-Hoff rule.
Figure 8.8 shows the results of applying this algorithm to the data shown in Figure 7.2. We
start atθ=(−0.5,2)and converge (in the sense that ||θk−θk−1||2
2drops below a threshold
of10−2) in about 26 iterations.
Note that LMS may require multiple passes through the data to ﬁnd the optimum. By
contrast, the recursive least squares algorithm, which is based on the Kalman ﬁlter and which
uses second-order information, ﬁnds the optimum in a single pass (see Section 18.2.3). See alsoExercise 7.7.
8.5.4 The perceptron algorithm
Now let us consider how to ﬁt a binary logistic regression model in an online manner. Thebatch gradient was given in Equation 8.5. In the online case, the weight update has the simpleform
θ
k=θk−1−ηkgi=θk−1−ηk(μi−yi)xi (8.88)
whereμi=p(yi=1|xi,θk)=E[yi|xi,θk]. We see that this has exactly the same form as the
LMS algorithm. Indeed, this property holds for all generalized linear models (Section 9.3).
266 Chapter 8. Logistic regression
We now consider an approximation to this algorithm. Speciﬁcally, let
ˆyi=a r g m a x
y∈{0,1}p(y|xi,θ) (8.89)
represent the most probable class label. We replace μi=p(y=1|xi,θ) = sigm(θTxi)in the
gradient expression with ˆyi. Thus the approximate gradient becomes
gi≈(ˆyi−yi)xi (8.90)
It will make the algebra simpler if we assume y∈{ −1,+1}rather than y∈{0,1}. In this
case, our prediction becomes
ˆyi=s i g n (θTxi) (8.91)
Then ifˆyiyi=−1, we have made an error, but if ˆyiyi=+ 1, we guessed the right label.
At each step, we update the weight vector by adding on the gradient. The key observation is
that, if we predicted correctly, then ˆyi=yi, so the (approximate) gradient is zero and we do
not change the weight vector. But if xiis misclassiﬁed, we update the weights as follows: If
ˆyi=1butyi=−1, then the negative gradient is −(ˆyi−yi)xi=−2xi; and ifˆyi=−1but
yi=1, then the negative gradient is −(ˆyi−yi)xi=2xi. We can absorb the factor of 2 into
the learning rate ηand just write the update, in the case of a misclassiﬁcation, as
θk=θk−1+ηkyixi (8.92)
Since it is only the sign of the weights that matter, not the magnitude, we will set ηk=1. See
Algorithm 11 for the pseudocode.
One can show that this method, known as the perceptron algorithm (Rosenblatt 1958), will
converge, provided the data is linearly separable, i.e., that there exist parameters θsuch that
predicting with sign(θTx)achieves 0 error on the training set. However, if the data is not
linearly separable, the algorithm will not converge, and even if it does converge, it may take
a long time. There are much better ways to train logistic regression models (such as usingproper SGD, without the gradient approximation, or IRLS, discussed in Section 8.3.4). However,the perceptron algorithm is historically important: it was one of the ﬁrst machine learningalgorithms ever derived (by Frank Rosenblatt in 1957), and was even implemented in analoghardware. In addition, the algorithm can be used to ﬁt models where computing marginalsp(y
i|x,θ)is more expensive than computing the MAP output, argmax yp(y|x,θ); this arises
in some structured-output classiﬁcation problems. See Section 19.7 for details.
8.5.5 A Bayesian view
Another approach to online learning is to adopt a Bayesian view. This is conceptually quitesimple: we just apply Bayes rule recursively:
p(θ|D
1:k)∝p(Dk|θ)p(θ|D1:k−1) (8.93)
This has the obvious advantage of returning a posterior instead of just a point estimate. It alsoallows for the online adaptation of hyper-parameters, which is important since cross-validationcannot be used in an online setting. Finally, it has the (less obvious) advantage that it can be
8.6. Generative vs discriminative classiﬁers 267
Algorithm 8.4: Perceptron algorithm
1Input: linearly separable data set xi∈RD,yi∈{ −1,+1}fori=1:N;
2Initializeθ0;
3k←0;
4repeat
5k←k+1;
6i←kmodN;
7ifˆyi/negationslash=yithen
8 θk+1←θk+yixi
9else
10 no-op
11until converged ;
quicker than SGD. To see why, note that by modeling the posterior variance of each parameter
in addition to its mean, we effectively associate a different learning rate for each parameter(de Freitas et al. 2000), which is a simple way to model the curvature of the space. Thesevariances can then be adapted using the usual rules of probability theory. By contrast, gettingsecond-order optimization methods to work online is more tricky (see e.g., (Schraudolph et al.2007; Sunehag et al. 2009; Bordes et al. 2009, 2010)).
As a simple example, in Section 18.2.3 we show how to use the Kalman ﬁlter to ﬁt a linear
regression model online. Unlike the LMS algorithm, this converges to the optimal (offline) answerin a single pass over the data. An extension which can learn a robust non-linear regression modelin an online fashion is described in (Ting et al. 2010). For the GLM case, we can use an assumeddensity ﬁlter (Section 18.5.3), where we approximate the posterior by a Gaussian with a diagonalcovariance; the variance terms serve as a per-parameter step-size. See Section 18.5.3.2 for details.Another approach is to use particle ﬁltering (Section 23.5); this was used in (Andrieu et al. 2000)for sequentially learning a kernelized linear/logistic regression model.
8.6 Generative vs discriminative classiﬁers
In Section 4.2.2, we showed that the posterior over class labels induced by Gaussian discrim-inant analysis (GDA) has exactly the same form as logistic regression, namely p(y=1|x)=
sigm(w
Tx). The decision boundary is therefore a linear function of xin both cases. Note,
however, that many generative models can give rise to a logistic regression posterior, e.g., if eachclass-conditional density is Poisson, p(x|y=c)=P o i (x|λ
c). So the assumptions made by GDA
are much stronger than the assumptions made by logistic regression.
A further difference between these models is the way they are trained. When ﬁtting a discrim-
inative model, we usually maximize the conditional log likelihood/summationtextN
i=1logp(yi|xi,θ), whereas
whenﬁttingagenerativemodel, weusuallymaximizethejointloglikelihood,/summationtextNi=1logp(yi,xi|θ).
It is clear that these can, in general, give different results (see Exercise 4.20).
When the Gaussian assumptions made by GDA are correct, the model will need less training
data than logistic regression to achieve a certain level of performance, but if the Gaussian
268 Chapter 8. Logistic regression
assumptions are incorrect, logistic regression will do better (Ng and Jordan 2002). This is
because discriminative models do not need to model the distribution of the features. This isillustrated in Figure 8.10. We see that the class conditional densities are rather complex; inparticular, p(x|y=1 )is a multimodal distribution, which might be hard to estimate. However,
the class posterior, p(y=c|x), is a simple sigmoidal function, centered on the threshold value
of 0.55. This suggests that, in general, discriminative methods will be more accurate, since their“job” is in some sense easier. However, accuracy is not the only important factor when choosinga method. Below we discuss some other advantages and disadvantages of each approach.
8.6.1 Pros and cons of each approach
•Easy to ﬁt? As we have seen, it is usually very easy to ﬁt generative classiﬁers. For example,
in Sections 3.5.1.1 and 4.2.4, we show that we can ﬁt a naive Bayes model and an LDA modelby simple counting and averaging. By contrast, logistic regression requires solving a convexoptimization problem (see Section 8.3.4 for the details), which is much slower.
•Fit classes separately? In a generative classiﬁer, we estimate the parameters of each class
conditional density independently, so we do not have to retrain the model when we addmore classes. In contrast, in discriminative models, all the parameters interact, so the wholemodel must be retrained if we add a new class. (This is also the case if we train a generativemodel to maximize a discriminative objective Salojarvi et al. (2005).)
•Handle missing features easily? Sometimes some of the inputs (components of x) are not
observed. In a generative classiﬁer, there is a simple method for dealing with this, as wediscuss in Section 8.6.2. However, in a discriminative classiﬁer, there is no principled solutionto this problem, since the model assumes that xis always available to be conditioned on
(although see (Marlin 2008) for some heuristic approaches).
•Can handle unlabeled training data? There is much interest in semi-supervised learning,
which uses unlabeled data to help solve a supervised task. This is fairly easy to do usinggenerative models (see e.g., (Lasserre et al. 2006; Liang et al. 2007)), but is much harder to dowith discriminative models.
•Symmetric in inputs and outputs? We can run a generative model “backwards”, and
infer probable inputs given the output by computing p(x|y). This is not possible with a
discriminative model. The reason is that a generative model deﬁnes a joint distribution on x
andy, and hence treats both inputs and outputs symmetrically.
•Can handle feature preprocessing? A big advantage of discriminative methods is that they
allow us to preprocess the input in arbitrary ways, e.g., we can replace xwithφ(x), which
could be some basis function expansion, as illustrated in Figure 8.9. It is often hard todeﬁne a generative model on such pre-processed data, since the new features are correlatedin complex ways.
•Well-calibrated probabilities? Some generative models, such as naive Bayes, make strong
independence assumptions which are often not valid. This can result in very extreme poste-rior class probabilities (very near 0 or 1). Discriminative models, such as logistic regression,are usually better calibrated in terms of their probability estimates.
We see that there are arguments for and against both kinds of models. It is therefore useful
to have both kinds in your “toolbox”. See Table 8.1 for a summary of the classiﬁcation and
8.6. Generative vs discriminative classiﬁers 269
−1 −0.5 0 0.5 1−1−0.500.51Linear Multinomial Logistic Regression
(a)−1 −0.5 0 0.5 1−1−0.500.51Kernel−RBF Multinomial Logistic Regression
(b)
Figure 8.9 (a) Multinomial logistic regression for 5 classes in the original feature space. (b) After basis
function expansion, using RBF kernels with a bandwidth of 1, and using all the data points as centers.
Figure generated by logregMultinomKernelDemo .
0 0.2 0.4 0.6 0.8 1012345
xclass conditional densitiesp(x|y=1)p(x|y=2)
(a)0 0.2 0.4 0.6 0.8 100.20.40.60.811.2
xp(y=1|x) p(y=2|x)
(b)
Figure 8.10 The class-conditional densities p(x|y=c)(left) may be more complex than the
class posteriors p(y=c|x)(right). Based on Figure 1.27 of (Bishop 2006a). Figure generated by
generativeVsDiscrim .
regression techniques we cover in this book.
8.6.2 Dealing with missing data
Sometimes some of the inputs (components of x) are not observed; this could be due to a
sensor failure, or a failure to complete an entry in a survey, etc. This is called the missing data
problem (Little. and Rubin 1987). The ability to handle missing data in a principled way is one
of the biggest advantages of generative models.
To formalize our assumptions, we can associate a binary response variable ri∈{0,1},
that speciﬁes whether each value xiis observed or not. The joint model has the form
p(xi,ri|θ,φ)=p(ri|xi,φ)p(xi|θ),w h e r eφare the parameters controlling whether the item
270 Chapter 8. Logistic regression
Model Classif/regr Gen/Discr Param/Non Section
Discriminant analysis Classif Gen Param Sec. 4.2.2, 4.2.4
Naive Bayes classiﬁer Classif Gen Param Sec. 3.5, 3.5.1.2
Tree-augmented Naive Bayes classiﬁer Classif Gen Param Sec. 10.2.1
Linear regression Regr Discrim Param Sec. 1.4.5, 7.3, 7.6,
Logistic regression Classif Discrim Param Sec. 1.4.6, 8.3.4, 8.4.3, 21.8.1.1
Sparse linear/ logistic regression Both Discrim Param Ch. 13
Mixture of experts Both Discrim Param Sec. 11.2.4
Multilayer perceptron (MLP)/ Neural network Both Discrim Param Ch. 16
Conditional random ﬁeld (CRF) Classif Discrim Param Sec. 19.6
Knearest neighbor classiﬁer Classif Gen Non Sec. 1.4.2, 14.7.3
(Inﬁnite) Mixture Discriminant analysis Classif Gen Non Sec. 14.7.3Classiﬁcation and regression trees (CART) Both Discrim Non Sec. 16.2
Boosted model Both Discrim Non Sec. 16.4
Sparse kernelized lin/logreg (SKLR) Both Discrim Non Sec. 14.3.2
Relevance vector machine (RVM) Both Discrim Non Sec. 14.3.2
Support vector machine (SVM) Both Discrim Non Sec. 14.5
Gaussian processes (GP) Both Discrim Non Ch. 15
Smoothing splines Regr Discrim Non Section 15.4.6
Table 8.1 List of various models for classiﬁcation and regression which we discuss in this book. Columns
are as follows: Model name; is the model suitable for classiﬁcation, regression, or both; is the model
generative or discriminative; is the model parametric or non-parametric; list of sections in book whichdiscuss the model. See also http://pmtk3 .googlecode .com/svn/trunk/docs/tutorial/html/tu
tSupervised .htmlfor the PMTK equivalents of these models. Any generative probabilistic model (e.g.,
HMMs, Boltzmann machines, Bayesian networks, etc.) can be turned into a classiﬁer by using it as a classconditional density.
is observed or not. If we assume p(ri|xi,φ)=p(ri|φ), we say the data is missing completely
at random orMCAR. If we assume p(ri|xi,φ)=p(ri|xo
i,φ),w h e r exoiis the observed part of
xi, we say the data is missing at random orMAR. If neither of these assumptions hold, we say
the data is not missing at random orNMAR. In this case, we have to model the missing data
mechanism, since the pattern of missingness is informative about the values of the missing data
and the corresponding parameters. This is the case in most collaborative ﬁltering problems, forexample. See e.g., (Marlin 2008) for further discussion. We will henceforth assume the data isMAR.
When dealing with missing data, it is helpful to distinguish the cases when there is missing-
ness only at test time (so the training data is complete data), from the harder case when there
is missingness also at training time. We will discuss these two cases below. Note that the classlabel is always missing at test time, by deﬁnition; if the class label is also sometimes missing attraining time, the problem is called semi-supervised learning.
8.6. Generative vs discriminative classiﬁers 271
8.6.2.1 Missing data at test time
In a generative classiﬁer, we can handle features that are MAR by marginalizing them out. For
example, if we are missing the value of x1, we can compute
p(y=c|x2:D,θ)∝p(y=c|θ)p(x2:D|y=c,θ) (8.94)
=p(y=c|θ)/summationdisplay
x1p(x1,x2:D|y=c,θ) (8.95)
If we make the naive Bayes assumption, the marginalization can be performed as follows:
/summationdisplay
x1p(x1,x2:D|y=c,θ)=/bracketleftBigg/summationdisplay
x1p(x1|θ1c)/bracketrightBiggD/productdisplay
j=2p(xj|θjc)=D/productdisplay
j=2p(xj|θjc) (8.96)
where we exploited the fact that/summationtext
x1p(x1|y=c,θ)=1. Hence in a naive Bayes classiﬁer, we
can simply ignore missing features at test time. Similarly, in discriminant analysis, no matterwhat regularization method was used to estimate the parameters, we can always analyticallymarginalize out the missing variables (see Section 4.3):
p(x
2:D|y=c,θ)=N(x2:D|μc,2:D,Σc,2:D,2:D) (8.97)
8.6.2.2 Missing data at training time
Missing data at training time is harder to deal with. In particular, computing the MLE or MAPestimate is no longer a simple optimization problem, for reasons discussed in Section 11.3.2.However, soon we will study are a variety of more sophisticated algorithms (such as EM algo-rithm, in Section 11.4) for ﬁnding approximate ML or MAP estimates in such cases.
8.6.3 Fisher’s linear discriminant analysis (FLDA) *
Discriminant analysis is a generative approach to classiﬁcation, which requires ﬁtting an MVN tothe features. As we have discussed, this can be problematic in high dimensions. An alternativeapproach is to reduce the dimensionality of the features x∈R
Dand then ﬁt an MVN to the
resulting low-dimensional features z∈RL. The simplest approach is to use a linear projection
matrix,z=Wx,w h e r e Wis aL×Dmatrix. One approach to ﬁnding Wwould be to use
PCA (Section 12.2); the result would be very similar to RDA (Section 4.2.6), since SVD and PCAare essentially equivalent. However, PCA is an unsupervised technique that does not take classlabels into account. Thus the resulting low dimensional features are not necessarily optimalfor classiﬁcation, as illustrated in Figure 8.11. An alternative approach is to ﬁnd the matrixWsuch that the low-dimensional data can be classiﬁed as well as possible using a Gaussian
class-conditional density model. The assumption of Gaussianity is reasonable since we arecomputing linear combinations of (potentially non-Gaussian) features. This approach is calledFisher’s linear discriminant analysis,o rFLDA.
FLDA is an interesting hybrid of discriminative and generative techniques. The drawback of
this technique is that it is restricted to using L≤C−1dimensions, regardless of D, for reasons
that we will explain below. In the two-class case, this means we are seeking a single vector w
onto which we can project the data. Below we derive the optimal win the two-class case. We
272 Chapter 8. Logistic regression
−4 −2 0 2 4 6 801234means
fisher
pca
(a)
−45 −40 −35 −30 −25 −20 −15 −10 −5 005101520fisher
(b)
−8 −6 −4 −2 0 2 40510152025pca
(c)
Figure 8.11 Example of Fisher’s linear discriminant. (a) Two class data in 2D. Dashed green line = ﬁrst
principal basis vector. Dotted red line = Fisher’s linear discriminant vector. Solid black line joins the
class-conditional means. (b) Projection of points onto Fisher’s vector shows good class separation. (c)Projection of points onto PCA vector shows poor class separation. Figure generated by fisherLDAdemo .
8.6. Generative vs discriminative classiﬁers 273
then generalize to the multi-class case, and ﬁnally we give a probabilistic interpretation of this
technique.
8.6.3.1 Derivation of the optimal 1d projection
We now derive this optimal direction w, for the two-class case, following the presentation of
(Bishop 2006b, Sec 4.1.4). Deﬁne the class-conditional means as
μ1=1
N1/summationdisplay
i:yi=1xi,μ2=1
N2/summationdisplay
i:yi=2xi (8.98)
Letmk=wTμkbe the projection of each mean onto the line w. Also, let zi=wTxibe the
projection of the data onto the line. The variance of the projected points is proportional to
s2
k=/summationdisplay
i:yi=k(zi−mk)2(8.99)
The goal is to ﬁnd wsuch that we maximize the distance between the means, m2−m1, while
also ensuring the projected clusters are “tight”:
J(w)=(m2−m1)2
s2
1+s22(8.100)
We can rewrite the right hand side of the above in terms of was follows
J(w)=wTSBw
wTSWw(8.101)
whereSBis the between-class scatter matrix given by
SB=(μ2−μ1)(μ2−μ1)T(8.102)
andSWis the within-class scatter matrix, given by
SW=/summationdisplay
i:yi=1(xi−μ1)(xi−μ1)T+/summationdisplay
i:yi=2(xi−μ2)(xi−μ2)T(8.103)
To see this, note that
wTSBw=wT(μ2−μ1)(μ2−μ1)Tw=(m2−m1)(m2−m1) (8.104)
and
wTSWw=/summationdisplay
i:yi=1wT(xi−μ1)(xi−μ1)Tw+/summationdisplay
i:yi=2wT(xi−μ2)(xi−μ2)Tw(8.105)
=/summationdisplay
i:yi=1(zi−m1)2+/summationdisplay
i:yi=2(zi−m2)2(8.106)
Equation 8.101 is a ratio of two scalars; we can take its derivative with respect to wand equate
to zero. One can show (Exercise 12.6) that that J(w)is maximized when
SBw=λSWw (8.107)
274 Chapter 8. Logistic regression
−4 −3 −2 −1 0 1 2 3 4−3−2−10123
(a)−4. 5 −4 −3.5 −3 −2. 5 −2 −1. 5 −1 −0.5 0−3.5−3−2.5−2−1.5−1−0.500.5
(b)
Figure 8.12 (a) PCA projection of vowel data to 2d. (b) FLDA projection of vowel data to 2d. We see there
is better class separation in the FLDA case. Based on Figure 4.11 of (Hastie et al. 2009). Figure generated by
fisherDiscrimVowelDemo , by Hannes Bretschneider.
where
λ=wTSBw
wTSWw(8.108)
Equation 8.107 is called a generalized eigenvalue problem. If SWis invertible, we can convert
it to a regular eigenvalue problem:
S−1
WSBw=λw (8.109)
However, in the two class case, there is a simpler solution. In particular, since
SBw=(μ2−μ1)(μ2−μ1)Tw=(μ2−μ1)(m2−m1) (8.110)
then, from Equation 8.109 we have
λw=S−1
W(μ2−μ1)(m2−m1) (8.111)
w∝S−1
W(μ2−μ1) (8.112)
Since we only care about the directionality, and not the scale factor, we can just set
w=S−1
W(μ2−μ1) (8.113)
This is the optimal solution in the two-class case. If SW∝I, meaning the pooled covariance
matrix is isotropic, then wis proportional to the vector that joins the class means. This is an
intuitively reasonable direction to project onto, as shown in Figure 8.11.
8.6.3.2 Extension to higher dimensions and multiple classes
We can extend the above idea to multiple classes, and to higher dimensional subspaces, by
ﬁnding a projection matrixWwhich maps from DtoLso as to maximize
J(W)=|WΣBWT|
|WΣWWT|(8.114)
8.6. Generative vs discriminative classiﬁers 275
where
ΣB/defines/summationdisplay
cNc
N(μc−μ)(μc−μ)T(8.115)
ΣW/defines/summationdisplay
cNc
NΣc (8.116)
Σc/defines1
Nc/summationdisplay
i:yi=c(xi−μc)(xi−μc)T(8.117)
The solution can be shown to be
W=Σ−1
2
WU (8.118)
whereUare theLleading eigenvectors of Σ−1
2
WΣBΣ−1
2
W, assuming ΣWis non-singular. (If it
is singular, we can ﬁrst perform PCA on all the data.)
Figure 8.12 gives an example of this method applied to some D=1 0dimensional speech
data, representing C=1 1different vowel sounds. We see that FLDA gives better class separation
than PCA.
Note that FLDA is restricted to ﬁnding at most a L≤C−1dimensional linear subspace,
no matter how large D, because the rank of the between class covariance matrix ΣBisC−1.
(The -1 term arises because of the μterm, which is a linear function of the μc.) This is a rather
severe restriction which limits the usefulness of FLDA.
8.6.3.3 Probabilistic interpretation of FLDA *
To ﬁnd a valid probabilistic interpretation of FLDA, we follow the approach of (Kumar and Andreo
1998; Zhou et al. 2009). They proposed a model known as heteroscedastic LDA (HLDA), which
works as follows. Let Wbe aD×Dinvertible matrix, and let zi=Wxibe a transformed
version of the data. We now ﬁt full covariance Gaussians to the transformed data, one per class,but with the constraint that only the ﬁrst Lcomponents will be class-speciﬁc; the remaining
H=D−Lcomponents will be shared across classes, and will thus not be discriminative. That
is, we use
p(z
i|θ,yi=c)=N (zi|μc,Σc) (8.119)
μc/defines(mc;m0) (8.120)
Σc/defines/parenleftbiggSc0
0S0/parenrightbigg
(8.121)
wherem0is the shared Hdimensional mean and S0is the shared H×Hcovariace. The pdf
of the original (untransformed) data is given by
p(xi|yi=c,W,θ)=|W |N(Wxi|μc,Σc) (8.122)
=|W|N(WLxi|mc,Sc)N(WHxi|m0,S0) (8.123)
whereW=/parenleftbiggWL
WH/parenrightbigg
. For ﬁxed W, it is easy to derive the MLE for θ. One can then optimize
Wusing gradient methods.
276 Chapter 8. Logistic regression
In the special case that the Σcare diagonal, there is a closed-form solution for W(Gales
1999). And in the special case the Σcare all equal, we recover classical LDA (Zhou et al. 2009).
In view of this this result, it should be clear that HLDA will outperform LDA if the class
covariances are not equal within the discriminative subspace (i.e., if the assumption that Σcis
independent of cis a poor assumption). This is easy to demonstrate on synthetic data, and is
also the case on more challenging tasks such as speech recognition (Kumar and Andreo 1998).
Furthermore, we can extend the model by allowing each class to use its own projection matrix;this is known as multiple LDA (Gales 2002).
Exercises
Exercise 8.1 Spam classiﬁcation using logistic regression
Consider the email spam data set discussed on p300 of (Hastie et al. 2009). This consists of 4601 email
messages, from which 57 features have been extracted. These are as follows:
• 48 features, in [0,100], giving the percentage of words in a given message which match a given word
on the list. The list contains words such as “business”, “free”, “george”, etc. (The data was collected by
George Forman, so his name occurs quite a lot.)
• 6 features, in [0,100], giving the percentage of characters in the email that match a given character on
the list. The characters are ;([!$#
• Feature 55: The average length of an uninterrupted sequence of capital letters (max is 40.3, mean is 4.9)
• Feature 56: The length of the longest uninterrupted sequence of capital letters (max is 45.0, mean is
52.6)
• Feature 57: The sum of the lengts of uninterrupted sequence of capital letters (max is 25.6, mean is
282.2)
Load the data from spamData.mat , which contains a training set (of size 3065) and a test set (of size
1536).One can imagine performing several kinds of preprocessing to this data. Try each of the following
separately:
a. Standardize the columns so they all have mean 0 and unit variance.
b. Transform the features using log(x
ij+0.1).
c. Binarize the features using I(xij>0).
For each version of the data, ﬁt a logistic regression model. Use cross validation to choose the strengthof the/lscript
2regularizer. Report the mean error rate on the training and test sets. You should get numbers
similar to this:
method train test
stnd 0.082 0.079
log 0.052 0.059
binary 0.065 0.072
(The precise values will depend on what regularization value you choose.) Turn in your code and numericalresults.
(See also Exercise 8.2.
Exercise 8.2 Spam classiﬁcation using naive Bayes
We will re-examine the dataset from Exercise 8.1.
8.6. Generative vs discriminative classiﬁers 277
a. Use naiveBayesFit andnaiveBayesPredict on the binarized spam data. What is the training and
test error? (You can try different settings of the pseudocount αif you like (this corresponds to the
Beta(α,α) prior each θjc), although the default of α=1is probably ﬁne.) Turn in your error rates.
b. Modify the code so it can handle real-valued features. Use a Gaussian density for each feature; ﬁt it
with maximum likelihood. What are the training and test error rates on the standardized data and the
log transformed data? Turn in your 4 error rates and code.
Exercise 8.3 Gradient and Hessian of log-likelihood for logistic regression
a. Letσ(a)=1
1+e−abe the sigmoid function. Show that
dσ(a)
da=σ(a)(1−σ(a)) (8.124)
b. Using the previous result and the chain rule of calculus, derive an expression for the gradient of the
log likelihood (Equation 8.5).
c. The Hessian can be written as H=XTSX,w h e r e S/definesdiag(μ 1(1−μ1),...,μ n(1−μn)). Show
thatHis positive deﬁnite. (You may assume that 0<μi<1, so the elements of Swill be strictly
positive, and that Xis full rank.)
Exercise 8.4 Gradient and Hessian of log-likelihood for multinomial logistic regression
a. Letμik=S(ηi)k. Prove that the Jacobian of the softmax is
∂μik
∂ηij=μik(δkj−μij) (8.125)
whereδkj=I(k=j).
b. Hence show that
∇wc/lscript=/summationdisplay
i(yic−μic)xi (8.126)
Hint: use the chain rule and the fact that/summationtext
cyic=1.
c. Show that the block submatrix of the Hessian for classes candc/primeis given by
Hc,c/prime=−/summationdisplay
iμic(δc,c/prime−μi,c/prime)xixT
i (8.127)
Exercise 8.5 Symmetric version of /lscript2regularized multinomial logistic regression
(Source: Ex 18.3 of (Hastie et al. 2009).)
Multiclass logistic regression has the form
p(y=c|x,W)=exp(wc0+wT
cx)/summationtextC
k=1exp(w k0+wT
kx)(8.128)
whereWis a(D+1)×Cweight matrix. We can arbitrarily deﬁne wc=0for one of the classes, say
c=C, sincep(y=C|x,W)=1−/summationtextC−1
c=1p(y=c|x,w). In this case, the model has the form
p(y=c|x,W)=exp(wc0+wT
cx)
1+/summationtextC−1
k=1exp(wk0+wT
kx)(8.129)
278 Chapter 8. Logistic regression
If we don’t “clamp” one of the vectors to some constant value, the parameters will be unidentiﬁable.
However, suppose we don’t clamp wc=0, so we are using Equation 8.128, but we add /lscript2regularization
by optimizing
N/summationdisplay
i=1logp(yi|xi,W)−λC/summationdisplay
c=1||wc||2
2 (8.130)
Show that at the optimum we have/summationtextC
c=1ˆwcj=0forj=1:D. (For the unregularized ˆwc0terms, we
still need to enforce that w0C=0to ensure identiﬁability of the offset.)
Exercise 8.6 Elementary properties of /lscript2regularized logistic regression
(Source: Jaaakkola.). Consider minimizing
J(w)=−/lscript(w,Dtrain)+λ||w||2
2 (8.131)
where
/lscript(w,D)=1
|D|/summationdisplay
i∈Dlogσ(yixTiw) (8.132)
is the average log-likelihood on data set D,f o ryi∈{ −1,+1}. Answer the following true/ false questions.
a.J(w)has multiple locally optimal solutions: T/F?
b. Letˆw= argmin wJ(w)be a global optimum. ˆwis sparse (has many zero entries): T/F?
c. If the training data is linearly separable, then some weights wjmight become inﬁnite if λ=0: T/F?
d./lscript(ˆw,Dtrain)always increases as we increase λ: T/F?
e./lscript(ˆw,Dtest)always increases as we increase λ: T/F?
Exercise 8.7 Regularizing separate terms in 2d logistic regression
(Source: Jaaakkola.)
a. Consider the data in Figure 8.13, where we ﬁt the model p(y=1|x,w)=σ(w0+w1x1+w2x2).
Suppose we ﬁt the model by maximum likelihood, i.e., we minimize
J(w)=−/lscript(w,Dtrain) (8.133)
where/lscript(w,Dtrain)is the log likelihood on the training set. Sketch a possible decision boundary
corresponding to ˆw. (Copy the ﬁgure ﬁrst (a rough sketch is enough), and then superimpose your
answer on your copy, since you will need multiple versions of this ﬁgure). Is your answer (decision
boundary) unique? How many classiﬁcation errors does your method make on the training set?
b. Now suppose we regularize only the w0parameter, i.e., we minimize
J0(w)=−/lscript(w,Dtrain)+λw2
0 (8.134)
Supposeλis a very large number, so we regularize w0all the way to 0, but all other parameters are
unregularized. Sketch a possible decision boundary. How many classiﬁcation errors does your methodmake on the training set? Hint: consider the behavior of simple linear regression, w
0+w1x1+w2x2
whenx1=x2=0.
c. Now suppose we heavily regularize only the w1parameter, i.e., we minimize
J1(w)=−/lscript(w,Dtrain)+λw2
1 (8.135)
Sketch a possible decision boundary. How many classiﬁcation errors does your method make on thetraining set?
8.6. Generative vs discriminative classiﬁers 279
Figure 8.13 Data for logistic regression question.
d. Now suppose we heavily regularize only the w2parameter. Sketch a possible decision boundary. How
many classiﬁcation errors does your method make on the training set?

9Generalized linear models and the
exponential family
9.1 Introduction
We have now encountered a wide variety of probability distributions: the Gaussian, the Bernoulli,
the Student t, the uniform, the gamma, etc. It turns out that most of these are members of a
broader class of distributions known as the exponential family.1In this chapter, we discuss
various properties of this family. This allows us to derive theorems and algorithms with verybroad applicability.
We will see how we can easily use any member of the exponential family as a class-conditional
density in order to make a generative classiﬁer. In addition, we will discuss how to builddiscriminative models, where the response variable has an exponential family distribution, whosemean is a linear function of the inputs; this is known as a generalized linear model, andgeneralizes the idea of logistic regression to other kinds of response variables.
9.2 The exponential family
Before deﬁning the exponential family, we mention several reasons why it is important:
• It can be shown that, under certain regularity conditions, the exponential family is the only
family of distributions with ﬁnite-sized sufficient statistics, meaning that we can compress
the data into a ﬁxed-sized summary without loss of information. This is particularly usefulfor online learning, as we will see later.
• The exponential family is the only family of distributions for which conjugate priors exist,
which simpliﬁes the computation of the posterior (see Section 9.2.5).
• The exponential family can be shown to be the family of distributions that makes the least
set of assumptions subject to some user-chosen constraints (see Section 9.2.6).
• The exponential family is at the core of generalized linear models, as discussed in Section 9.3.
• The exponential family is at the core of variational inference, as discussed in Section 21.2.
1. The exceptions are the Student t, which does not have the right form, and the uniform distribution, which does not
have ﬁxed support independent of the parameter values.
282 Chapter 9. Generalized linear models and the exponential family
9.2.1 Deﬁnition
A pdf or pmf p(x|θ),f o rx=(x1,...,x m)∈Xmandθ∈Θ⊆Rd, is said to be in the
exponential family if it is of the form
p(x|θ)=1
Z(θ)h(x)exp[θTφ(x)] (9.1)
=h(x)exp[θTφ(x)−A(θ)] (9.2)
where
Z(θ)=/integraldisplay
Xmh(x)exp[θTφ(x)]dx (9.3)
A(θ)=l o g Z(θ) (9.4)
Hereθare called the natural parameters orcanonical parameters, φ(x)∈Rdis called a
vector of sufficient statistics, Z(θ)is called the partition function, A(θ)is called the log
partition function orcumulant function, and h(x)is the a scaling constant, often 1. If
φ(x)=x, we say it is a natural exponential family.
Equation 9.2 can be generalized by writing
p(x|θ)=h(x)exp[η(θ)Tφ(x)−A(η(θ))] (9.5)
whereηis a function that maps the parameters θto the canonical parameters η=η(θ).I f
dim(θ)<dim(η(θ)), it is called a curved exponential family , which means we have more
sufficient statistics than parameters. If η(θ)=θ, the model is said to be in canonical form.
We will assume models are in canonical form unless we state otherwise.
9.2.2 Examples
Let us consider some examples to make things clearer.
9.2.2.1 Bernoulli
The Bernoulli for x∈{0,1}can be written in exponential family form as follows:
Ber(x|μ)=μx(1−μ)1−x=e x p [xlog(μ)+(1− x)log(1−μ) ]=e x p [ φ(x)Tθ](9.6)
whereφ(x)=[ I(x=0 ),I(x=1 ) ]andθ= [log(μ),log(1−μ)]. However, this representation
isover-complete since there is a linear dependendence between the features:
1Tφ(x)=I(x=0 )+ I(x=1 )=1 (9.7)
Consequently θis not uniquely identiﬁable. It is common to require that the representation be
minimal, which means there is a unique θassociated with the distribution. In this case, we
can just deﬁne
Ber(x|μ)=( 1−μ)exp/bracketleftbigg
xlog/parenleftbiggμ
1−μ/parenrightbigg/bracketrightbigg
(9.8)
9.2. The exponential family 283
Now we have φ(x)=x,θ=l o g/parenleftBig
μ
1−μ/parenrightBig
, which is the log-odds ratio, and Z=1/(1−μ).W e
can recover the mean parameter μfrom the canonical parameter using
μ=s i g m (θ)=1
1+e−θ(9.9)
9.2.2.2 Multinoulli
We can represent the multinoulli as a minimal exponential family as follows (where xk=I(x=
k)):
Cat(x|μ)=K/productdisplay
k=1μxk
k=e x p/bracketleftBiggK/summationdisplay
k=1xklogμk/bracketrightBigg
(9.10)
=e x p/bracketleftBiggK−1/summationdisplay
k=1xklogμk+/parenleftBigg
1−K−1/summationdisplay
k=1xk/parenrightBigg
log(1−K−1/summationdisplay
k=1μk)/bracketrightBigg
(9.11)
=e x p/bracketleftBiggK−1/summationdisplay
k=1xklog/parenleftBigg
μk
1−/summationtextK−1
j=1μj/parenrightBigg
+log(1−K−1/summationdisplay
k=1μk)/bracketrightBigg
(9.12)
=e x p/bracketleftBiggK−1/summationdisplay
k=1xklog/parenleftbiggμk
μK/parenrightbigg
+logμK/bracketrightBigg
(9.13)
whereμK=1−/summationtextK−1
k=1μk. We can write this in exponential family form as follows:
Cat(x|θ)=e x p ( θTφ(x)−A(θ)) (9.14)
θ= [logμ1
μK,...,logμK−1
μK] (9.15)
φ(x)=[ I(x=1 ),...,I(x=K−1)] (9.16)
We can recover the mean parameters from the canonical parameters using
μk=eθk
1+/summationtextK−1
j=1eθj(9.17)
From this, we ﬁnd
μK=1−/summationtextK−1
j=1eθj
1+/summationtextK−1
j=1eθj=1/summationtextK−1
j=1eθj(9.18)
and hence
A(θ)=l o g/parenleftBigg
1+K−1/summationdisplay
k=1eθk/parenrightBigg
(9.19)
If we deﬁne θK=0, we can write μ=S(θ)andA(θ)=l o g/summationtextK
k=1eθk,w h e r eSis the
softmax function in Equation 4.39.
284 Chapter 9. Generalized linear models and the exponential family
9.2.2.3 Univariate Gaussian
The univariate Gaussian can be written in exponential family form as follows:
N(x|μ,σ2)=1
(2πσ2)1
2exp[−1
2σ2(x−μ)2] (9.20)
=1
(2πσ2)1
2exp[−1
2σ2x2+μ
σ2x−1
2σ2μ2] (9.21)
=1
Z(θ)exp(θTφ(x)) (9.22)
where
θ=/parenleftbiggμ/σ2
−1
2σ2/parenrightbigg
(9.23)
φ(x)=/parenleftbiggx
x2/parenrightbigg
(9.24)
Z(μ,σ2)=√
2πσexp[μ2
2σ2] (9.25)
A(θ)=−θ2
1
4θ2−1
2log(−2θ 2)−1
2log(2π) (9.26)
9.2.2.4 Non-examples
Not all distributions of interest belong to the exponential family. For example, the uniform
distribution, X∼Unif(a,b ), does not, since the support of the distribution depends on the
parameters. Also, the Student T distribution (Section 11.4.5) does not belong, since it does nothave the required form.
9.2.3 Log partition function
An important property of the exponential family is that derivatives of the log partition functioncan be used to generate cumulants of the sufficient statistics.
2For this reason, A(θ)is
sometimes called a cumulant function. We will prove this for a 1-parameter distribution;
this can be generalized to a K-parameter distribution in a straightforward way. For the ﬁrst
2. The ﬁrst and second cumulants of a distribution are its mean E[X]and variance var[X], whereas the ﬁrst and
second moments are its mean E[X]andE/bracketleftbig
X2/bracketrightbig
.
9.2. The exponential family 285
derivative we have
dA
dθ=d
dθ/parenleftbigg
log/integraldisplay
exp(θφ(x))h(x)dx/parenrightbigg
(9.27)
=d
dθ/integraltext
exp(θφ(x))h(x)dx/integraltext
exp(θφ(x))h(x)dx(9.28)
=/integraltext
φ(x)exp(θφ(x))h(x)dx
exp(A(θ))(9.29)
=/integraldisplay
φ(x)exp(θφ(x)−A(θ))h(x)dx (9.30)
=/integraldisplay
φ(x)p(x)dx=E[φ(x)] (9.31)
For the second derivative we have
d2A
dθ2=/integraldisplay
φ(x)exp(θφ(x)−A(θ))h(x)(φ(x)−A/prime(θ))dx (9.32)
=/integraldisplay
φ(x)p(x)(φ(x)−A/prime(θ))dx (9.33)
=/integraldisplay
φ2(x)p(x)dx−A/prime(θ)/integraldisplay
φ(x)p(x)dx (9.34)
=E/bracketleftbig
φ2(X)/bracketrightbig
−E[φ(x)]2= var[φ(x)] (9.35)
where we used the fact that A/prime(θ)=dA
dθ=E[φ(x)].
In the multivariate case, we have that
∂2A
∂θi∂θj=E[φi(x)φj(x)]−E[φi(x)]E[φj(x)] (9.36)
and hence
∇2A(θ)=c o v[φ(x)] (9.37)
Since the covariance is positive deﬁnite, we see that A(θ)is a convex function (see Section 7.3.3).
9.2.3.1 Example: the Bernoulli distribution
For example, consider the Bernoulli distribution. We have A(θ)=l o g ( 1+ eθ), so the mean is
given by
dA
dθ=eθ
1+eθ=1
1+e−θ=s i g m (θ)=μ (9.38)
The variance is given by
d2A
dθ2=d
dθ(1+e−θ)−1=( 1+e−θ)−2.e−θ(9.39)
=e−θ
1+e−θ1
1+e−θ=1
eθ+11
1+e−θ=( 1−μ)μ (9.40)
286 Chapter 9. Generalized linear models and the exponential family
9.2.4 MLE for the exponential family
The likelihood of an exponential family model has the form
p(D|θ)=/bracketleftBiggN/productdisplay
i=1h(xi)/bracketrightBigg
g(θ)Nexp/parenleftBigg
η(θ)T[N/summationdisplay
i=1φ(xi)]/parenrightBigg
(9.41)
We see that the sufficient statistics are Nand
φ(D)=[N/summationdisplay
i=1φ1(xi),...,N/summationdisplay
i=1φK(xi)] (9.42)
For example, for the Bernoulli model we have φ=[/summationtext
iI(xi=1 ) ], and for the univariate
Gaussian, we have φ=[/summationtext
ixi,/summationtext
ix2
i]. (We also need to know the sample size, N.)
ThePitman-Koopman-Darmois theorem states that, under certain regularity conditions, the
exponential family is the only family of distributions with ﬁnite sufficient statistics. (Here, ﬁnite
means of a size independent of the size of the data set.)
One of the conditions required in this theorem is that the support of the distribution not be
dependent on the parameter. For a simple example of such a distribution, consider the uniformdistribution
p(x|θ)=U(x|θ)=1
θI(0≤x≤θ) (9.43)
The likelihood is given by
p(D|θ)=θ−NI(0≤max{x i}≤θ) (9.44)
So the sufficient statistics are Nands(D)=m a x ixi. This is ﬁnite in size, but the uni-
form distribution is not in the exponential family because its support set, X, depends on the
parameters.
We now descibe how to compute the MLE for a canonical exponential family model. Given
Niid data points D=(x1,...,x N), the log-likelihood is
logp(D|θ)=θTφ(D)−NA(θ) (9.45)
Since−A(θ)is concave in θ, andθTφ(D)is linear in θ, we see that the log likelihood is
concave, and hence has a unique global maximum. To derive this maximum, we use the factthat the derivative of the log partition function yields the expected value of the sufficient statisticvector (Section 9.2.3):
∇
θlogp(D|θ)=φ(D)−NE[φ(X)] (9.46)
Setting this gradient to zero, we see that at the MLE, the empirical average of the sufficient
statistics must equal the model’s theoretical expected sufficient statistics, i.e., ˆθmust satisfy
E[φ(X)] =1
NN/summationdisplay
i=1φ(xi) (9.47)
9.2. The exponential family 287
This is called moment matching. For example, in the Bernoulli distribution, we have φ(X)=
I(X=1 ), so the MLE satisﬁes
E[φ(X)] =p(X=1 )=ˆμ=1
NN/summationdisplay
i=1I(xi=1 ) (9.48)
9.2.5 Bayes for the exponential family *
We have seen that exact Bayesian analysis is considerably simpliﬁed if the prior is conjugate to
the likelihood. Informally this means that the prior p(θ|τ)has the same form as the likelihood
p(D|θ). For this to make sense, we require that the likelihood have ﬁnite sufficient statistics, so
that we can write p(D|θ)=p(s(D)|θ). This suggests that the only family of distributions for
which conjugate priors exist is the exponential family. We will derive the form of the prior andposterior below.
9.2.5.1 Likelihood
The likelihood of the exponential family is given by
p(D|θ)∝g(θ)
Nexp/parenleftbig
η(θ)TsN/parenrightbig
(9.49)
wheresN=/summationtextN
i=1s(xi). In terms of the canonical parameters this becomes
p(D|η)∝exp(NηTs−NA(η)) (9.50)
wheres=1
NsN.
9.2.5.2 Prior
The natural conjugate prior has the form
p(θ|ν0,τ0)∝g(θ)ν0exp/parenleftbig
η(θ)Tτ0/parenrightbig
(9.51)
Let us write τ0=ν0τ0, to separate out the size of the prior pseudo-data, ν0, from the mean of
the sufficient statistics on this pseudo-data, τ0. In canonical form, the prior becomes
p(η|ν0,τ0)∝exp(ν0ηTτ0−ν0A(η)) (9.52)
9.2.5.3 Posterior
The posterior is given by
p(θ|D)=p(θ|νN,τN)=p(θ|ν0+N,τ0+sN) (9.53)
So we see that we just update the hyper-parameters by adding. In canonical form, this becomes
p(η|D)∝exp/parenleftbig
ηT(ν0τ0+Ns)−(ν0+N)A(η))/parenrightbig
(9.54)
=p(η|ν0+N,ν0τ0+Ns
ν0+N) (9.55)
So we see that the posterior hyper-parameters are a convex combination of the prior mean
hyper-parameters and the average of the sufficient statistics.
288 Chapter 9. Generalized linear models and the exponential family
9.2.5.4 Posterior predictive density
Let us derive a generic expression for the predictive density for future observables D/prime=
(˜x1,...,˜xN/prime)given past data D=(x1,...,xN)as follows. For notational brevity, we
will combine the sufficient statistics with the size of the data, as follows: ˜τ0=(ν0,τ0),
˜s(D)=(N,s(D)), and˜s(D/prime)=(N/prime,s(D/prime)). So the prior becomes
p(θ|˜τ0)=1
Z(˜τ0)g(θ)ν0exp(η(θ)Tτ0) (9.56)
The likelihood and posterior have a similar form. Hence
p(D/prime|D)=/integraldisplay
p(D/prime|θ)p(θ|D)dθ (9.57)
=⎡
⎣N/prime/productdisplay
i=1h(˜xi)⎤⎦Z(˜τ
0+˜s(D))−1/integraldisplay
g(θ)ν0+N+N/primedθ (9.58)
×exp⎛⎝/summationdisplay
kηk(θ)(τk+N/summationdisplay
i=1sk(xi)+N/prime/summationdisplay
i=1sk(˜xi)⎞⎠dθ (9.59)
=⎡⎣
N/prime/productdisplay
i=1h(˜xi)⎤⎦Z(˜τ
0+˜s(D)+˜s(D/prime))
Z(˜τ0+˜s(D))(9.60)
IfN=0, this becomes the marginal likelihood of D/prime, which reduces to the familiar form of
normalizer of the posterior divided by the normalizer of the prior, multiplied by a constant.
9.2.5.5 Example: Bernoulli distribution
As a simple example, let us revisit the Beta-Bernoulli model in our new notation.
The likelihood is given by
p(D|θ)=( 1−θ)Nexp/parenleftBigg
log(θ
1−θ)/summationdisplay
ixi/parenrightBigg
(9.61)
Hence the conjugate prior is given by
p(θ|ν0,τ0)∝(1−θ)ν0exp/parenleftbigg
log(θ
1−θ)τ0/parenrightbigg
(9.62)
=θτ0(1−θ)ν0−τ0(9.63)
If we deﬁne α=τ0+1andβ=ν0−τ0+1, we see that this is a beta distribution.
We can derive the posterior as follows, where s=/summationtext
iI(xi=1 )is the sufficient statistic:
p(θ|D)∝θτ0+s(1−θ)ν0−τ0+n−s(9.64)
=θτn(1−θ)νn−τn(9.65)
We can derive the posterior predictive distribution as follows. Assume p(θ)=B e t a ( θ|α,β),
and lets=s(D)be the number of heads in the past data. We can predict the probability of a
9.2. The exponential family 289
given sequence of future heads, D/prime=(˜x1,...,˜xm), with sufficient statistic s/prime=/summationtextm
i=1I(˜xi=
1), as follows:
p(D/prime|D)=/integraldisplay1
0p(D/prime|θ|Beta(θ|αn,βn)dθ (9.66)
=Γ(αn+βn)
Γ(αn)Γ(βn)/integraldisplay1
0θαn+t/prime−1(1−θ)βn+m−t/prime−1dθ (9.67)
=Γ(αn+βn)
Γ(αn)Γ(βn)Γ(αn+m)Γ(βn+m)
Γ(αn+m+βn+m)(9.68)
where
αn+m=αn+s/prime=α+s+s/prime(9.69)
βn+m=βn+(m−s/prime)=β+(n−s)+(m−s/prime) (9.70)
9.2.6 Maximum entropy derivation of the exponential family *
Although the exponential family is convenient, is there any deeper justiﬁcation for its use? It
turns out that there is: it is the distribution that makes the least number of assumptions aboutthe data, subject to a speciﬁc set of user-speciﬁed constraints, as we explain below. In particular,suppose all we know is the expected values of certain features or functions:
/summationdisplay
xfk(x)p(x)=Fk (9.71)
whereFkare known constants, and fk(x)is an arbitrary function. The principle of maximum
entropyormaxentsays we should pick the distribution with maximum entropy (closest to
uniform), subject to the constraints that the moments of the distribution match the empiricalmoments of the speciﬁed functions.
To maximize entropy subject to the constraints in Equation 9.71, and the constraints that
p(x)≥0and/summationtext
xp(x)=1, we need to use Lagrange multipliers. The Lagrangian is given by
J(p,λ)=−/summationdisplay
xp(x)logp(x)+λ0(1−/summationdisplay
xp(x))+/summationdisplay
kλk(Fk−/summationdisplay
xp(x)fk(x))(9.72)
We can use the calculus of variations to take derivatives wrt the function p, but we will adopt
a simpler approach and treat pas a ﬁxed length vector (since we are assuming xis discrete).
Then we have
∂J
∂p(x)=−1−logp(x)−λ0−/summationdisplay
kλkfk(x) (9.73)
Setting∂J
∂p(x)=0yields
p(x)=1
Zexp(−/summationdisplay
kλkfk(x)) (9.74)
290 Chapter 9. Generalized linear models and the exponential family
xiw
ηi μi θig−1
gΨ
Ψ−1
Figure 9.1 A visualization of the various features of a GLM. Based on Figure 8.3 of (Jordan 2007).
whereZ=e1+λ0. Using the sum to one constraint, we have
1=/summationdisplay
xp(x)=1
Z/summationdisplay
xexp(−/summationdisplay
kλkfk(x)) (9.75)
Hence the normalization constant is given by
Z=/summationdisplay
xexp(−/summationdisplay
kλkfk(x)) (9.76)
Thus the maxent distribution p(x)has the form of the exponential family (Section 9.2), also
known as the Gibbs distribution.
9.3 Generalized linear models (GLMs)
Linear and logistic regression are examples of generalized linear models, or GLMs (McCullagh
and Nelder 1989). These are models in which the output density is in the exponential family
(Section 9.2), and in which the mean parameters are a linear combination of the inputs, passedthrough a possibly nonlinear function, such as the logistic function. We describe GLMs in moredetail below. We focus on scalar outputs for notational simplicity. (This excludes multinomiallogistic regression, but this is just to simplify the presentation.)
9.3.1 Basics
To understand GLMs, let us ﬁrst consider the case of an unconditional dstribution for a scalarresponse variable:
p(y
i|θ,σ2)=e x p/bracketleftbiggyiθ−A(θ)
σ2+c(yi,σ2)/bracketrightbigg
(9.77)
whereσ2is thedispersion parameter (often set to 1), θis the natural parameter, Ais the
partition function, and cis a normalization constant. For example, in the case of logistic
regression, θis the log-odds ratio, θ= log(μ
1−μ),w h e r eμ=E[y]=p(y=1 )is the mean
parameter (see Section 9.2.2.1). To convert from the mean parameter to the natural parameter
9.3. Generalized linear models (GLMs) 291
Distrib. Link g(μ)θ=ψ(μ)μ=ψ−1(θ)=E[y]
N(μ,σ2)identity θ=μμ =θ
Bin(N,μ )logit θ= log(μ
1−μ)μ=s i g m (θ)
Poi(μ)log θ= log(μ)μ=eθ
Table 9.1 Canonical link functions ψand their inverses for some common GLMs.
we can use a function ψ,s oθ=Ψ (μ). This function is uniquely determined by the form of the
exponential family distribution. In fact, this is an invertible mapping, so we have μ=Ψ−1(θ).
Furthermore, we know from Section 9.2.3 that the mean is given by the derivative of the partition
function, so we have μ=Ψ−1(θ)=A/prime(θ).
Now let us add inputs/ covariates. We ﬁrst deﬁne a linear function of the inputs:
ηi=wTxi (9.78)
We now make the mean of the distribution be some invertible monotonic function of this linearcombination. By convention, this function, known as the mean function, is denoted by g
−1,s o
μi=g−1(ηi)=g−1(wTxi) (9.79)
See Figure 9.1 for a summary of the basic model.
The inverse of the mean function, namely g(), is called the link function.W ea r ef r e et o
choose almost any function we like for g, so long as it is invertible, and so long as g−1has the
appropriate range. For example, in logistic regression, we set μi=g−1(ηi) = sigm(η i).
One particularly simple form of link function is to use g=ψ; this is called the canonical
link function. In this case, θi=ηi=wTxi, so the model becomes
p(yi|xi,w,σ2)=e x p/bracketleftbiggyiwTxi−A(wTxi)
σ2+c(yi,σ2)/bracketrightbigg
(9.80)
In Table 9.1, we list some distributions and their canonical link functions. We see that for theBernoulli/ binomial distribution, the canonical link is the logit function, g(μ)=l o g (η/(1−η)),
whose inverse is the logistic function, μ=s i g m (η).
Based on the results in Section 9.2.3, we can show that the mean and variance of the response
variable are as follows:
E/bracketleftbig
y|x
i,w,σ2/bracketrightbig
=μi=A/prime(θi) (9.81)
var/bracketleftbig
y|xi,w,σ2/bracketrightbig
=σ2
i=A/prime/prime(θi)σ2(9.82)
To make the notation clearer, let us consider some simple examples.
• For linear regression, we have
logp(yi|xi,w,σ2)=yiμi−μ2
i
2
σ2−1
2/parenleftbiggy2
i
σ2+log(2πσ2)/parenrightbigg
(9.83)
whereyi∈R, andθi=μi=wTxiHereA(θ)=θ2/2,s oE[yi]=μiandvar[yi]=σ2.
292 Chapter 9. Generalized linear models and the exponential family
• For binomial regression, we have
logp(yi|xi,w)=y ilog(πi
1−πi)+Nilog(1−πi)+log/parenleftbigg
Ni
yi/parenrightbigg
(9.84)
whereyi∈{0,1,...,N i},πi=s i g m (wTxi),θi= log(π i/(1−πi)) =wTxi, andσ2=1.
HereA(θ)=Nilog(1+eθ), soE[yi]=Niπi=μi,var[yi]=Niπi(1−πi).
•F o rpoisson regression,w eh a v e
logp(yi|xi,w)=y ilogμi−μi−log(yi!) (9.85)
whereyi∈{0,1,2,...},μi=e x p (wTxi),θi= log(μi)=wTxi, andσ2=1.H e r e
A(θ)=eθ,s oE[yi]=v a r[yi]=μi. Poisson regression is widely used in bio-statistical
applications, where yimight represent the number of diseases of a given person or place,
or the number of reads at a genomic location in a high-throughput sequencing context (see
e.g., (Kuan et al. 2009)).
9.3.2 ML and MAP estimation
One of the appealing properties of GLMs is that they can be ﬁt using exactly the same methodsthat we used to ﬁt logistic regression. In particular, the log-likelihood has the following form:
/lscript(w)=l o gp(D|w)=1
σ2N/summationdisplay
i=1/lscripti (9.86)
/lscripti/definesθiyi−A(θi) (9.87)
We can compute the gradient vector using the chain rule as follows:
d/lscripti
dwj=d/lscripti
dθidθi
dμidμi
dηidηi
dwj(9.88)
=(yi−A/prime(θi))dθi
dμidμi
dηixij (9.89)
=(yi−μi)dθi
dμidμi
dηixij (9.90)
If we use a canonical link, θi=ηi, this simpliﬁes to
∇w/lscript(w)=1
σ2/bracketleftBiggN/summationdisplay
i=1(yi−μi)xi/bracketrightBigg
(9.91)
which is a sum of the input vectors, weighted by the errors. This can be used inside a (stochastic)gradient descent procedure, discussed in Section 8.5.2. However, for improved efficiency, weshould use a second-order method. If we use a canonical link, the Hessian is given by
H=−1
σ2N/summationdisplay
i=1dμi
dθixixT
i=−1
σ2XTSX (9.92)
9.4. Probit regression 293
Name Formula
Logistic g−1(η)=s i g m ( η)=eη
1+eη
Probit g−1(η)=Φ (η)
Log-log g−1(η)=e x p (−exp(−η))
Complementary log-log g−1(η)=1−exp(−exp(η))
Table 9.2 Summary of some possible mean functions for binary regression.
whereS=d i a g (dμ1
dθ1,...,dμN
dθN)is a diagonal weighting matrix. This can be used inside the
IRLS algorithm (Section 8.3.4). Speciﬁcally, we have the following Newton update:
wt+1=(XTStX)−1XTStzt (9.93)
zt=θt+S−1
t(y−μt) (9.94)
whereθt=Xwtandμt=g−1(ηt).
If we extend the derivation to handle non-canonical links, we ﬁnd that the Hessian has another
term. However, it turns out that the expected Hessian is the same as in Equation 9.92; using
the expected Hessian (known as the Fisher information matrix) instead of the actual Hessian isknown as the Fisher scoring method.
It is straightforward to modify the above procedure to perform MAP estimation with a Gaus-
sian prior: we just modify the objective, gradient and Hessian, just as we added /lscript
2regularization
to logistic regression in Section 8.3.6.
9.3.3 Bayesian inference
Bayesian inference for GLMs is usually conducted using MCMC (Chapter 24). Possible methodsinclude Metropolis Hastings with an IRLS-based proposal (Gamerman 1997), Gibbs samplingusing adaptive rejection sampling (ARS) for each full-conditional (Dellaportas and Smith 1993),etc. See e.g., (Dey et al. 2000) for futher information. It is also possible to use the Gaussianapproximation (Section 8.4.1) or variational inference (Section 21.8.1.1).
9.4 Probit regression
In (binary) logistic regression, we use a model of the form p(y=1|xi,w) = sigm( wTxi).I n
general, we can write p(y=1|xi,w)=g−1(wTxi), for any function g−1that maps [−∞,∞]
to[0,1]. Several possible mean functions are listed in Table 9.2.
In this section, we focus on the case where g−1(η)=Φ (η),w h e r eΦ(η)is the cdf of the
standard normal. This is known as probit regression. The probit function is very similar to
the logistic function, as shown in Figure 8.7(b). However, this model has some advantages overlogistic regression, as we will see.
294 Chapter 9. Generalized linear models and the exponential family
9.4.1 ML/MAP estimation using gradient-based optimization
We can ﬁnd the MLE for probit regression using standard gradient methods. Let μi=wTxi,
and let˜yi∈{ −1,+1}. Then the gradient of the log-likelihod for a speciﬁc case is given by
gi/definesd
dwlogp(˜yi|wTxi)=dμi
dwd
dμilogp(˜yi|wTxi)=xi˜yiφ(μi)
Φ(˜yiμi)(9.95)
whereφis the standard normal pdf, and Φis its cdf. Similarly, the Hessian for a single case is
given by
Hi=d
dw2logp(˜yi|wTxi)=−xi/parenleftbiggφ(μi)2
Φ(˜yiμi)2+˜yiμiφ(μi)
Φ(˜yiμi)/parenrightbigg
xT
i (9.96)
We can modify these expressions to compute the MAP estimate in a straightforward manner. In
particular, if we use the prior p(w)=N(0,V0), the gradient and Hessian of the penalized
log likelihood have the form/summationtext
igi+2V−1
0wand/summationtext
iHi+2V−1
0. These expressions can be
passed to any gradient-based optimizer. See probitRegDemo for a demo.
9.4.2 Latent variable interpretation
We can interpret the probit (and logistic) model as follows. First, let us associate each itemx
iwith two latent utilities, u0iandu1i, corresponding to the possible choices of yi=0and
yi=1. We then assume that the observed choice is whichever action has larger utility. More
precisely, the model is as follows:
u0i/defineswT
0xi+δ0i (9.97)
u1i/defineswT
1xi+δ1i (9.98)
yi=I(u1i>u10) (9.99)
whereδ’s are error terms, representing all the other factors that might be relevant in decision
making that we have chosen not to (or are unable to) model. This is called a random utility
modelorRUM(McFadden 1974; Train 2009).
Since it is only the difference in utilities that matters, let us deﬁne zi=u1i−u0i+/epsilon1i,w h e r e
/epsilon1i=δ1i−δ0i. If theδ’s have a Gaussian distribution, then so does /epsilon1i. Thus we can write
zi/defineswTxi+/epsilon1i (9.100)
/epsilon1i∼N(0,1) (9.101)
yi=1 = I(zi≥0) (9.102)
Following (Fruhwirth-Schnatter and Fruhwirth 2010), we call this the difference RUM or dRUM
model.
When we marginalize out zi, we recover the probit model:
p(yi=1|xi,w)=/integraldisplay
I(zi≥0)N(zi|wTxi,1)dzi (9.103)
=p(wTxi+/epsilon1≥0) =p(/epsilon1≥−wTxi) (9.104)
=1−Φ(−wTxi)=Φ (wTxi) (9.105)
9.4. Probit regression 295
where we used the symmetry of the Gaussian.3This latent variable interpretation provides an
alternative way to ﬁt the model, as discussed in Section 11.4.6.
Interestingly, if we use a Gumbel distribution for the δ’s, we induce a logistic distibution for
/epsilon1i, and the model reduces to logistic regression. See Section 24.5.1 for further details.
9.4.3 Ordinal probit regression *
One advantage of the latent variable interpretation of probit regression is that it is easy to extend
to the case where the response variable is ordinal, that is, it can take on Cdiscrete values which
can be ordered in some way, such as low, medium and high. This is called ordinal regression.
The basic idea is as follows. We introduce C+1thresholds γjand set
yi=jifγj−1<zi≤γj (9.106)
whereγ0≤···≤γC. For identiﬁability reasons, we set γ0=−∞,γ1=0andγC=∞.F o r
example, if C=2, this reduces to the standard binary probit model, whereby zi<0produces
yi=0andzi≥0produces yi=1.I fC=3, we partition the real line into 3 intervals:
(−∞,0],(0,γ2],(γ2,∞). We can vary the parameter γ2to ensure the right relative amount
of probability mass falls in each interval, so as to match the empirical frequencies of each classlabel.
Finding the MLEs for this model is a bit trickier than for binary probit regression, since
we need to optimize for wandγ, and the latter must obey an ordering constraint. See e.g.,
(Kawakatsu and Largey 2009) for an approach based on EM. It is also possible to derive a simpleGibbs sampling algorithm for this model (see e.g., (Hoff 2009, p216)).
9.4.4 Multinomial probit models *
Now consider the case where the response variable can take on Cunordered categorical values,
yi∈{1,...,C}. Themultinomial probit model is deﬁned as follows:
zic=wTxic+/epsilon1ic (9.107)
/epsilon1∼N(0,R) (9.108)
yi=a r g m a x
czic (9.109)
See e.g., (Dow and Endersby 2004; Scott 2009; Fruhwirth-Schnatter and Fruhwirth 2010) formore details on the model and its connection to multinomial logistic regression. (By deﬁningw=[w
1,...,wC], andxic=[0,...,0,xi,0,...,0], we can recover the more familiar
formulation zic=xT
iwc.) Since only relative utilities matter, we constrain Rto be a correlation
matrix. If instead of setting yi=a r g m a xczicwe useyic=I(zic>0), we get a model known
asmultivariate probit, which is one way to model Ccorrelated binary outcomes (see e.g.,
(Talhouk et al. 2011)).
3. Note that the assumption that the Gaussian noise term is zero mean and unit variance is made without loss of
generality. To see why, suppose we used some other mean μand variance σ2. Then we could easily rescale wand add
an offset term without changing the likelihood. since P(N(0,1)≥−wTx)=P(N(μ,σ2)≥−(wTx+μ)/σ).
296 Chapter 9. Generalized linear models and the exponential family
9.5 Multi-task learning
Sometimes we want to ﬁt many related classiﬁcation or regression models. It is often reasonable
to assume the input-output mapping is similar across these different models, so we can getbetter performance by ﬁtting all the parameters at the same time. In machine learning, thissetup is often called multi-task learning (Caruana 1998), transfer learning (e.g., (Raina et al.
2005)), or learning to learn (Thrun and Pratt 1997). In statistics, this is usually tackled using
hierarchical Bayesian models (Bakker and Heskes 2003), as we discuss below, although there areother possible methods (see e.g., (Chai 2010)).
9.5.1 Hierarchical Bayes for multi-task learning
Letyijbe the response of the i’ t hi t e mi ng r o u pj ,f o ri=1:N jandj=1:J. For example,
jmight index schools, imight index students within a school, and yijmight be the test score,
as in Section 5.6.2. Or jmight index people, and imight index purchaes, and yijmight be
the identity of the item that was purchased (this is known as discrete choice modeling (Train
2009)). Let xijbe a feature vector associated with yij. The goal is to ﬁt the models p(yj|xj)
for allj.
Although some groups may have lots of data, there is often a long tail, where the majority
of groups have little data. Thus we can’t reliably ﬁt each model separately, but we don’t wantto use the same model for all groups. As a compromise, we can ﬁt a separate model foreach group, but encourage the model parameters to be similar across groups. More precisely,suppose E[y
ij|xij]=g(xT
ijβj),w h e r egis the link function for the GLM. Furthermore, suppose
βj∼N(β∗,σ2
jI), and that β∗∼N(μ,σ2
∗I). In this model, groups with small sample
size borrow statistical strength from the groups with larger sample size, because the βj’s are
correlated via the latent common parents β∗(see Section 5.5 for further discussion of this point).
The term σ2
jcontrols how much group jdepends on the common parents and the σ2
∗term
controls the strength of the overall prior.
Suppose, for simplicity, that μ=0, and that σ2
jandσ2
∗are all known (e.g., they could be set
by cross validation). The overall log probability has the form
logp(D|β)+logp(β)=/summationdisplay
j/bracketleftBigg
logp(Dj|βj)−||βj−β∗||2
2σ2
j/bracketrightBigg
−||β∗||2
2σ2∗(9.110)
We can perform MAP estimation of β=(β1:J,β∗)using standard gradient methods. Alter-
natively, we can perform an iterative optimization scheme, alternating between optimizing the
βjand theβ∗; since the likelihood and prior are convex, this is guaranteed to converge to the
global optimum. Note that once the models are trained, we can discard β∗, and use each model
separately.
9.5.2 Application to personalized email spam ﬁltering
An interesting application of multi-task learning is personalized spam ﬁltering. Suppose we
want to ﬁt one classiﬁer per user, βj. Since most users do not label their email as spam or not,
it will be hard to estimate these models independently. So we will let the βjhave a common
priorβ∗, representing the parameters of a generic user.
9.5. Multi-task learning 297
In this case, we can emulate the behavior of the above model with a simple trick (Daume
2007b; Attenberg et al. 2009; Weinberger et al. 2009): we make two copies of each feature xi,
one concatenated with the user id, and one not. The effect will be to learn a predictor of the
form
E[yi|xi,u]=(β∗,w1,···,wJ)T[xi,I(u=1 )xi,···,I(u=J)xi] (9.111)
whereuis the user id. In other words,
E[yi|xi,u=j]=(βT
∗+wj)Txi (9.112)
Thusβ∗will be estimated from everyone’s email, whereas wjwill just be estimated from user
j’s email.
To see the correspondence with the above hierarchical Bayesian model, deﬁne wj=βj−β∗.
Then the log probability of the original model can be rewritten as
/summationdisplay
j/bracketleftBigg
logp(Dj|β∗+wj)−||wj||2
2σ2
j/bracketrightBigg
−||β∗||2
2σ2∗(9.113)
If we assume σ2
j=σ2
∗, the effect is the same as using the augmented feature trick, with the
same regularizer strength for both wjandβ∗. However, one typically gets better performance
by not requiring that σ2
jbe equal to σ2
∗(Finkel and Manning 2009).
9.5.3 Application to domain adaptation
Domain adaptation is the problem of training a set of classiﬁers on data drawn from different
distributions, such as email and newswire text. This problem is obviously a special case of
multi-task learning, where the tasks are the same.
(Finkel and Manning 2009) used the above hierarchical Bayesian model to perform domain
adaptation for two NLP tasks, namely named entity recognition and parsing. They report reason-ably large improvements over ﬁtting separate models to each dataset, and small improvementsover the approach of pooling all the data and ﬁtting a single model.
9.5.4 Other kinds of prior
In multi-task learning, it is common to assume that the prior is Gaussian. However, sometimesother priors are more suitable. For example, consider the task of conjoint analysis, which
requires ﬁguring out which features of a product customers like best. This can be modelledusing the same hierarchical Bayesian setup as above, but where we use a sparsity-promotingprior onβ
j, rather than a Gaussian prior. This is called multi-task feature selection. See e.g.,
(Lenk et al. 1996; Argyriou et al. 2008) for some possible approaches.
It is not always reasonable to assume that all tasks are all equally similar. If we pool the
parameters across tasks that are qualitatively different, the performance will be worse than notusing pooling, because the inductive bias of our prior is wrong. Indeed, it has been foundexperimentally that sometimes multi-task learning does worse than solving each task separately(this is called negative transfer).
298 Chapter 9. Generalized linear models and the exponential family
One way around this problem is to use a more ﬂexible prior, such as a mixture of Gaussians.
Such ﬂexible priors can provide robustness against prior mis-speciﬁcation. See e.g., (Xue et al.
2007; Jacob et al. 2008) for details. One can of course combine mixtures with sparsity-promotingpriors (Ji et al. 2009). Many other variants are possible.
9.6 Generalized linear mixed models *
Suppose we generalize the multi-task learning scenario to allow the response to include infor-mation at the group level, x
j, as well as at the item level, xij. Similarly, we can allow the
parameters to vary across groups, βj, or to be tied across groups, α. This gives rise to the
following model:
E[yij|xij,xj]=g/parenleftbig
φ1(xij)Tβj+φ2(xj)Tβ/prime
j+φ3(xij)Tα+φ4(xj)Tα/prime/parenrightbig
(9.114)
where the φkare basis functions. This model can be represented pictorially as shown in
Figure 9.2(a). (Such ﬁgures will be explained in Chapter 10.) Note that the number of βj
parameters grows with the number of groups, whereas the size of αis ﬁxed.
Frequentists call the terms βjrandom effects, since they vary randomly across groups, but
they call αaﬁxed effect, since it is viewed as a ﬁxed but unknown constant. A model with
both ﬁxed and random effects is called a mixed model.I f p(y|x)is a GLM, the overall model
is called a generalized linear mixed effects model orGLMM. Such models are widely used in
statistics.
9.6.1 Example: semi-parametric GLMMs for medical data
Consider the following example from (Wand 2009). Suppose yijis the amount of spinal bone
mineral density (SBMD) for person jat measurement i.L e txijbe the age of person, and let
xjbe their ethnicity, which can be one of: White, Asian, Black, or Hispanic. The primary goal
is to determine if there are signiﬁcant differences in the mean SBMD among the four ethnic
groups, after accounting for age. The data is shown in the light gray lines in Figure 9.2(b). Wesee that there is a nonlinear effect of SBMD vs age, so we will use a semi-parametric model
which combines linear regression with non-parametric regression (Ruppert et al. 2003). We alsosee that there is variation across individuals within each group, so we will use a mixed effectsmodel. Speciﬁcally, we will use φ
1(xij)=1to account for the random effect of each person;
φ2(xij)=0since no other coefficients are person-speciﬁc; φ3(xij)=[bk(xij)],w h e r e bkis
thek’th spline basis functions (see Section 15.4.6.2), to account for the nonlinear effect of age;
andφ4(xj)=[I(xj=w),I(xj=a),I(xj=b),I(xj=h)]to account for the effect of the
different ethnicities. Furthermore, we use a linear link function. The overall model is therefore
E[yij|xij,xj]=β j+αTb(xij)+/epsilon1ij (9.115)
+α/prime
wI(xj=w)+α/prime
aI(xj=a)+α/prime
bI(xj=b)+α/prime
hI(xj=h)(9.116)
where/epsilon1ij∼N(0,σ2
y).αcontains the non-parametric part of the model related to age, α/prime
contains the parametric part of the model related to ethnicity, and βjis a random offset
for person j. We endow all of these regression coefficients with separate Gaussian priors.
We can then perform posterior inference to compute p(α,α/prime,β,σ2|D)(see Section 9.6.2 for
9.6. Generalized linear mixed models * 299
xjxijyij
Njβj
Jμβσ2
β
α μα
σ2
ασ2
y
(a)
age in yearsspinal bone mineral density (g/cm2)
0.60.81.01.21.4
10 15 20 25Asian BlackHispanic10 15 20 25
0.60.81.01.21.4White
(b)
Figure 9.2 (a) Directed graphical model for generalized linear mixed effects model with Jgroups. (b)
Spinal bone mineral density vs age for four different ethnic groups. Raw data is shown in the light gray
lines. Fitted model shown in black (solid is the posterior predicted mean, dotted is the posterior predictivevariance). From Figure 9 of (Wand 2009). Used with kind permission of Matt Wand
300 Chapter 9. Generalized linear models and the exponential family
computational details). After ﬁtting the model, we can compute the prediction for each group.
See Figure 9.2(b) for the results. We can also perform signiﬁcance testing, by computing p(αg−
αw|D)for each ethnic group grelative to some baseline (say, White), as we did in Section 5.2.3.
9.6.2 Computational issues
The principle problem with GLMMs is that they can be difficult to ﬁt, for two reasons. First,p(y
ij|θ)may not be conjugate to the prior p(θ)whereθ=(α,β). Second, there are two levels
of unknowns in the model, namely the regression coefficients θand the means and variances
of the priors η=(μ,σ).
One approach is to adopt fully Bayesian inference methods, such as variational Bayes (Hall
et al. 2011) or MCMC (Gelman and Hill 2007). We discuss VB in Section 21.5, and MCMC inSection 24.1.
An alternative approach is to use empirical Bayes, which we discuss in general terms in
Section 5.6. In the context of a GLMM, we can use the EM algorithm (Section 11.4), where in theE step we compute p(θ|η,D), and in the M step we optimize η. If the linear regression setting,
the E step can be performed exactly, but in general we need to use approximations. Traditionalmethods use numerical quadrature or Monte Carlo (see e.g., (Breslow and Clayton 1993)). Afaster approach is to use variational EM; see (Braun and McAuliffe 2010) for an application ofvariational EM to a multi-level discrete choice modeling problem.
In frequentist statistics, there is a popular method for ﬁtting GLMMs called generalized
estimating equations orGEE(Hardin and Hilbe 2003). However, we do not recommend this
approach, since it is not as statistically efficient as likelihood-based methods (see Section 6.4.3).In addition, it can only provide estimates of the population parameters α, but not the random
effectsβ
j, which are sometimes of interest in themselves.
9.7 Learning to rank *
In this section, we discuss the learning to rank orLETORproblem. That is, we want to learn a
function that can rank order a set of items (we will be more precise below). The most commonapplication is to information retrieval. Speciﬁcally, suppose we have a query qand a set of
documents d
1,...,dmthat might be relevant to q(e.g., all documents that contain the string q).
We would like to sort these documents in decreasing order of relevance and show the top kto
the user. Similar problems arise in other areas, such as collaborative ﬁltering. (Ranking playersin a game or tournament setting is a slightly different kind of problem; see Section 22.5.5.)
Below we summarize some methods for solving this problem, following the presentation of
(Liu 2009). This material is not based on GLMs, but we include it in this chapter anyway forlack of a better place.
A standard way to measure the relevance of a document dto a query qis to use a probabilistic
language model based on a bag of words model. That is, we deﬁne sim(q,d)/definesp(q|d)=/producttext
n
i=1p(qi|d),w h e r eqiis thei’th word or term, and p(qi|d)is a multinoulli distribution
estimated from document d. In practice, we need to smooth the estimated distribution, for
example by using a Dirichlet prior, representing the overall frequency of each word. This can be
9.7. Learning to rank * 301
estimated from all documents in the system. More precisely, we can use
p(t|d)=( 1−λ)TF(t,d)
LEN(d)+λp(t|background) (9.117)
where TF(t,d)is the frequency of term tin document d, LEN(d)is the number of words in d,
and0<λ<1is a smoothing parameter (see e.g., Zhai and Lafferty (2004) for details).
However, there might be many other signals that we can use to measure relevance. For
example, the PageRank of a web document is a measure of its authoritativeness, derived from
the web’s link structure (see Section 17.2.4 for details). We can also compute how often andwhere the query occurs in the document. Below we discuss how to learn how to combine allthese signals.
4
9.7.1 The pointwise approach
Suppose we collect some training data representing the relevance of a set of documents for eachquery. Speciﬁcally, for each query q, suppose that we retrieve mpossibly relevant documents
d
j,f o rj=1:m. For each query document pair, we deﬁne a feature vector, x(q,d).F o r
example, this might contain the query-document similarity score and the page rank score of thedocument. Furthermore, suppose we have a set of labels y
jrepresenting the degree of relevance
of document djto queryq. Such labels might be binary (e.g., relevant or irrelevant), or they may
represent a degree of relevance (e.g., very relevant, somewhat relevant, irrelevant). Such labelscan be obtained from query logs, by thresholding the number of times a document was clickedon for a given query.
If we have binary relevance labels, we can solve the problem using a standard binary clas-
siﬁcation scheme to estimate, p(y=1|x(q,d)). If we have ordered relevancy labels, we can
use ordinal regression to predict the rating, p(y=r|x(q,d)). In either case, we can then sort
the documents by this scoring metric. This is called the pointwise approach to LETOR, and
is widely used because of its simplicity. However, this method does not take into account thelocation of each document in the list. Thus it penalizes errors at the end of the list just as muchas errors at the beginning, which is often not the desired behavior. In addition, each decisionabout relevance is made very myopically.
9.7.2 The pairwise approach
There is evidence (e.g., (Carterette et al. 2008)) that people are better at judging the relativerelevance of two items rather than absolute relevance. Consequently, the data might tell usthatd
jis more relevant than dkfor a given query, or vice versa. We can model this kind of
data using a binary classiﬁer of the form p(yjk|x(q,dj),x(q,dk)), where we set yjk=1if
rel(dj,q)>rel(dk,q)andyjk=0otherwise.
One way to model such a function is as follows:
p(yjk=1|xj,xk) = sigm(f (xj)−f(xk)) (9.118)
4. Rather surprisingly, Google does not (or at least, did not as of 2008) using such learning methods in its search engine.
Source: Peter Norvig, quoted in http://anand .typepad .com/datawocky/2008/05/are-human-experts-less-p
rone-to-catastrophic-errors-than-machine-learned-models .html.
302 Chapter 9. Generalized linear models and the exponential family
wheref(x)is a scoring function, often taken to be linear, f(x)=wTx. This is a special
kind of neural network known as RankNet (Burges et al. 2005) (see Section 16.5 for a general
discussion of neural networks). We can ﬁnd the MLE of wby maximizing the log likelihood, or
equivalently, by minimizing the cross entropy loss, given by
L=N/summationdisplay
i=1mi/summationdisplay
j=1mi/summationdisplay
k=j+1Lijk (9.119)
−Lijk=I(yijk=1 )l o gp(yijk=1|xij,xik,w)
+I(yijk=0 )l o gp(yijk=0|xij,xik,w) (9.120)
This can be optimized using gradient descent. A variant of RankNet is used by Microsoft’s Bing
search engine.5
9.7.3 The listwise approach
The pairwise approach suffers from the problem that decisions about relevance are made justbased on a pair of items (documents), rather than considering the full context. We now considermethods that look at the entire list of items at the same time.
We can deﬁne a total order on a list by specifying a permutation of its indices, π. To model
our uncertainty about π, we can use the Plackett-Luce distribution, which derives its name
from independent work by (Plackett 1975) and (Luce 1959). This has the following form:
p(π|s)=
m/productdisplay
j=1sj/summationtextm
u=jsu(9.121)
wheresj=s(π−1(j))is the score of the document ranked at the j’th position.
To understand Equation 9.121, let us consider a simple example. Suppose π=(A,B,C).
Then we have that p(π)is the probability of Abeing ranked ﬁrst, times the probability of B
being ranked second given that Ais ranked ﬁrst, times the probabilty of Cbeing ranked third
given that AandBare ranked ﬁrst and second. In other words,
p(π|s)=sA
sA+sB+sC×sB
sB+sC×sC
sC(9.122)
To incorporate features, we can deﬁne s(d)=f(x(q,d)), where we often take fto be a
linear function, f(x)=wTx. This is known as the ListNetmodel (Cao et al. 2007). To train
this model, let yibe the relevance scores of the documents for query i. We then minimize the
cross entropy term
−/summationdisplay
i/summationdisplay
πp(π|yi)logp(π|si) (9.123)
Of course, as stated, this is intractable, since the i’th term needs to sum over mi!permutations.
To make this tractable, we can consider permutations over the top kpositions only:
p(π1:k|s1:m)=k/productdisplay
j=1sj/summationtextmu=1su(9.124)
5. Source: http://www .bing.com/community/site_blogs/b/search/archive/2009/06/01/user-needs-f
eatures-and-the-science-behind-bing .aspx.
9.7. Learning to rank * 303
There are only m!/(m−k)!such permutations. If we set k=1, we can evaluate each cross
entropy term (and its derivative) in O(m)time.
In the special case where only one document from the presented list is deemed relevant, say
yi=c, we can instead use multinomial logistic regression:
p(yi=c|x)=exp(sc)/summationtextm
c/prime=1exp(sc/prime)(9.125)
This often performs at least as well as ranking methods, at least in the context of collaborative
ﬁltering (Yang et al. 2011).
9.7.4 Loss functions for ranking
There are a variety of ways to measure the performance of a ranking system, which we summa-rize below.
•Mean reciprocal rank (MRR). For a query q, let the rank position of its ﬁrst relevant
document be denoted by r(q). Then we deﬁne the mean reciprocal rank to be1/r(q).
This is a very simple performance measure.
•Mean average precision (MAP). In the case of binary relevance labels, we can deﬁne the
precision at k of some ordering as follows:
P@k(π)/definesnum. relevant documents in the top kpositions of π
k(9.126)
We then deﬁne the average precision as follows:
AP(π)/defines/summationtext
kP@k(π)·Ik
num. relevant documents(9.127)
whereIkis 1 iff document kis relevant. For example, if we have the relevancy labels
y=( 1,0,1,0,1), then the AP is1
3(1
1+2
3+3
5)≈0.76. Finally, we deﬁne the mean average
precision as the AP averaged over all queries.
•Normalized discounted cumulative gain (NDCG). Suppose the relevance labels have multi-ple levels. We can deﬁne the discounted cumulative gain of the ﬁrst kitems in an ordering
as follows:
DCG@k(r)=r
1+k/summationdisplay
i=2ri
log2i(9.128)
whereriis the relevance of item iand thelog2term is used to discount items later in
the list. Table 9.3 gives a simple numerical example. An alternative deﬁnition, that placesstronger emphasis on retrieving relevant documents, uses
DCG@k(r)=k/summationdisplay
i=12ri−1
log2(1+i)(9.129)
The trouble with DCG is that it varies in magnitude just because the length of a returnedlist may vary. It is therefore common to normalize this measure by the ideal DCG, which is
304 Chapter 9. Generalized linear models and the exponential family
i12 3 4 5 6
ri32 3 0 1 2
log2i0 1 1.59 2.0 2.32 2.59
ri
log2iN/A 2 1.887 0 0.431 0.772
Table 9.3 Illustration of how to compute NDCG, from http://en .wikipedia .org/wiki/Discounted
_cumulative_gain . The value riis the relevance score of the item in position i. From this, we see
that DCG@6 =3+( 2+1 .887+0+0 .431+0.772) = 8.09. The maximum DCG is obtained using the
ordering with scores 3, 3, 2, 2, 1, 0. Hence the ideal DCG is 8.693, and so the normalized DCG is 8.09 /
8.693 = 0.9306.
the DCG obtained by using the optimal ordering: IDCG@k( r) = argmaxπDCG@k(r). This
can be easily computed by sorting r1:mand then computing DCG@k. Finally, we deﬁne
thenormalized discounted cumulative gain orNDCGas DCG/IDCG. Table 9.3 gives a
simple numerical example. The NDCG can be averaged over queries to give a measure of
performance.
•Rank correlation . We can measure the correlation between the ranked list, π, and the
relevance judegment, π∗, using a variety of methods. One approach, known as the (weighted)
Kendall’s τstatistics, is deﬁned in terms of the weighted pairwise inconsistency between the
two lists:
τ(π,π∗)=/summationtext
u<vwuv[1+sgn(π u−πv)sgn(π∗
u−π∗
v)]
2/summationtext
u<vwuv(9.130)
A variety of other measures are commonly used.
These loss functions can be used in different ways. In the Bayesian approach, we ﬁrst ﬁt the
model using posterior inference; this depends on the likelihood and prior, but not the loss. Wethen choose our actions at test time to minimize the expected future loss. One way to do this isto sample parameters from the posterior, θ
s∼p(θ|D), and then evaluate, say, the precision@k
for different thresholds, averaging over θs. See (Zhang et al. 2010) for an example of such an
approach.
In the frequentist approach, we try to minimize the empirical loss on the training set. The
problem is that these loss functions are not differentiable functions of the model parameters.We can either use gradient-free optimization methods, or we can minimize a surrogate lossfunction instead. Cross entropy loss (i.e., negative log likelihood) is an example of a widely usedsurrogate loss function.
Another loss, known as weighted approximate-rank pairwise orWARPloss, proposed in
(Usunier et al. 2009) and extended in (Weston et al. 2010), provides a better approximation tothe precision@k loss. WARP is deﬁned as follows:
WARP(f(x,:),y)/definesL(rank(f(x,:),y)) (9.131)
rank(f(x,:),y)=/summationdisplay
y/prime/negationslash=yI(f(x,y/prime)≥f(x,y)) (9.132)
L(k)/definesk/summationdisplay
j=1αj,withα1≥α2≥···≥0 (9.133)
9.7. Learning to rank * 305
Heref(x,:) = [f(x,1),...,f(x,|y|)]is the vector of scores for each possible output label,
or, in IR terms, for each possible document corresponding to input query x. The expression
rank(f(x,:),y)measures the rank of the true label yassigned by this scoring function. Finally,
Ltransforms the integer rank into a real-valued penalty. Using α1=1andαj>1=0would
optimize the proportion of top-ranked correct labels. Setting α1:kto be non-zero values would
optimize the top kin the ranked list, which will induce good performance as measured by
MAP or precision@k. As it stands, WARP loss is still hard to optimize, but it can be further
approximated by Monte Carlo sampling, and then optimized by gradient descent, as describedin (Weston et al. 2010).
Exercises
Exercise 9.1 Conjugate prior for univariate Gaussian in exponential family form
Derive the conjugate prior for μandλ=1/σ2for a univariate Gaussian using the exponential family,
by analogy to Section 9.2.5.5. By suitable reparameterization, show that the prior has the form p(μ,λ)=
N(μ|γ,λ(2α−1))Ga(λ|α,β), and thus only has 3 free parameters.
Exercise 9.2 The MVN is in the exponential family
Show that we can write the MVN in exponential family form. Hint: use the information form deﬁned in
Section 4.3.3.

10 Directed graphical models (Bayes nets)
10.1 Introduction
I basically know of two principles for treating complicated systems in simple ways: the
ﬁrst is the principle of modularity and the second is the principle of abstraction. Iam an apologist for computational probability in machine learning because I believe thatprobability theory implements these two principles in deep and intriguing ways — namelythrough factorization and through averaging. Exploiting these two mechanisms as fullyas possible seems to me to be the way forward in machine learning. — Michael Jordan,1997 (quoted in (Frey 1998)).
Suppose we observe multiple correlated variables, such as words in a document, pixels in animage, or genes in a microarray. How can we compactly representthejoint distribution p(x|θ)?
How can we use this distribution to inferone set of variables given another in a reasonable
amount of computation time? And how can we learnthe parameters of this distribution with a
reasonable amount of data? These questions are at the core of probabilistic modeling, inferenceand learning, and form the topic of this chapter.
10.1.1 Chain rule
By thechain rule of probability, we can always represent a joint distribution as follows, using
any ordering of the variables:
p(x1:V)=p(x1)p(x2|x1)p(x3|x2,x1)p(x4|x1,x2,x3)...p(xV|x1:V−1) (10.1)
whereVis the number of variables, the Matlab-like notation 1:Vdenotes the set {1,2,...,V},
and where we have dropped the conditioning on the ﬁxed parameters θfor brevity. The problem
with this expression is that it becomes more and more complicated to represent the conditionaldistributions p(x
t|x1:t−1)astgets large.
For example, suppose all the variables have Kstates. We can represent p(x1)as a table
ofO(K)numbers, representing a discrete distribution (there are actually only K−1free
parameters, due to the sum-to-one constraint, but we write O(K)for simplicity). Similarly, we
can represent p(x2|x1)as a table of O(K2)numbers by writing p(x2=j|x1=i)=Tij;w e
say thatTis astochastic matrix, since it satisﬁes the constraint/summationtext
jTij=1for all rows i,
and0≤Tij≤1for all entries. Similarly, we can represent p(x3|x1,x2)as a 3d table with
308 Chapter 10. Directed graphical models (Bayes nets)
O(K3)numbers. These are called conditional probability tables orCPTs. We see that there
areO(KV)parameters in the model. We would need an awful lot of data to learn so many
parameters.
One solution is to replace each CPT with a more parsimonius conditional probability distri-
butionorCPD, such as multinomial logistic regression, i.e., p(xt=k|x1:t−1)=S(Wtx1:t−1)k.
The total number of parameters is now only O(K2V2), making this a compact density model
(Neal 1992; Frey 1998). This is adequate if all we want to do is evaluate the probability of a fully
observed vector x1:T. For example, we can use this model to deﬁne a class-conditional density,
p(x|y=c), thus making a generative classiﬁer (Bengio and Bengio 2000). However, this model
is not useful for other kinds of prediction tasks, since each variable depends on all the previousvariables. So we need another approach.
10.1.2 Conditional independence
The key to efficiently representing large joint distributions is to make some assumptions aboutconditional independence (CI). Recall from Section 2.2.4 that XandYare conditionally inde-
pendent given Z, denoted X⊥Y|Z, if and only if (iff) the conditional joint can be written as
a product of conditional marginals, i.e.,
X⊥Y|Z⇐⇒p(X,Y|Z)=p(X|Z)p(Y|Z) (10.2)
Let us see why this might help. Suppose we assume that x
t+1⊥x1:t−1|xt, or in words,
“the future is independent of the past given the present”. This is called the (ﬁrst order) Markov
assumption. Using this assumption, plus the chain rule, we can write the joint distribution asfollows:
p(x
1:V)=p(x1)V/productdisplay
t=1p(xt|xt−1) (10.3)
This is called a (ﬁrst-order) Markov chain. They can be characterized by an initial distribution
over states, p(x1=i), plus astate transition matrix p(xt=j|xt−1=i). See Section 17.2 for
more information.
10.1.3 Graphical models
Although the ﬁrst-order Markov assumption is useful for deﬁning distributions on 1d sequences,how can we deﬁne distributions on 2d images, or 3d videos, or, in general, arbitrary collectionsof variables (such as genes belonging to some biological pathway)? This is where graphicalmodels come in.
Agraphical model (GM) is a way to represent a joint distribution by making CI assumptions.
Inparticular, thenodesinthegraphrepresentrandomvariables, andthe(lackof)edgesrepresentCI assumptions. (A better name for these models would in fact be “independence diagrams”,but the term “graphical models” is now entrenched.) There are several kinds of graphical model,depending on whether the graph is directed, undirected, or some combination of directed andundirected. In this chapter, we just study directed graphs. We consider undirected graphs inChapter 19.
10.1. Introduction 309
45231
(a)45231
(b)
Figure 10.1 (a) A simple DAG on 5 nodes, numbered in topological order. Node 1 is the root, nodes 4 and
5 are the leaves. (b) A simple undirected graph, with the following maximal cliques: {1,2,3},{2,3,4},
{3,5}.
10.1.4 Graph terminology
Before we continue, we must deﬁne a few basic terms, most of which are very intuitive.
AgraphG=(V,E)consists of a set of nodesorvertices, V={1,...,V }, and a set
ofedges,E={(s,t):s,t∈V }. We can represent the graph by its adjacency matrix,i n
which we write G(s,t)=1to denote (s,t)∈E, that is, if s→tis an edge in the graph.
IfG(s,t)=1iffG(t,s)=1, we say the graph is undirected, otherwise it is directed.W e
usually assume G(s,s)=0, which means there are no self loops.
Here are some other terms we will commonly use:
•ParentFor a directed graph, the parentsof a node is the set of all nodes that feed into it:
pa(s)/defines{t:G(t,s)=1}.
•ChildFor a directed graph, the children of a node is the set of all nodes that feed out of it:
ch(s)/defines{t:G(s,t)=1} .
•FamilyFor a directed graph, the familyof a node is the node and its parents, fam(s)=
{s}∪pa(s).
•RootFor a directed graph, a rootis a node with no parents.
•LeafFor a directed graph, a leafis a node with no children.
•Ancestors For a directed graph, the ancestors are the parents, grand-parents, etc of a node.
That is, the ancestors of tis the set of nodes that connect to tvia a trail: anc(t) /defines{s:s;
t}.
•Descendants For a directed graph, the descendants are the children, grand-children, etc of
a node. That is, the descendants of sis the set of nodes that can be reached via trails from
s:desc(s)/defines{t:s;t}.
•Neighbors For any graph, we deﬁne the neighbors of a node as the set of all immediately
connected nodes, nbr(s)/defines{t:G(s,t)=1∨G(t,s)=1}. For an undirected graph, we
310 Chapter 10. Directed graphical models (Bayes nets)
writes∼tto indicate that sandtare neighbors (so (s,t)∈Eis an edge in the graph).
•DegreeThedegreeof a node is the number of neighbors. For directed graphs, we speak of
thein-degree andout-degree, which count the number of parents and children.
•Cycle or loop For any graph, we deﬁne a cycleorloopto be a series of nodes such that
we can get back to where we started by following edges, s1−s2···−sn−s1,n≥2. If the
graph is directed, we may speak of a directed cycle. For example, in Figure 10.1(a), there are
no directed cycles, but 1→2→4→3→1is an undirected cycle.
•DAGAdirected acyclic graph orDAGis a directed graph with no directed cycles. See
Figure 10.1(a) for an example.
•Topological ordering For a DAG, a topological ordering ortotal ordering is a numbering
of the nodes such that parents have lower numbers than their children. For example, inFigure 10.1(a), we can use (1,2,3,4,5),o r(1,3,2,5,4), etc.
•Path or trail Apathortrails;tis a series of directed edges leading from stot.
•TreeAn undirected treeis an undirectecd graph with no cycles. A directed tree is a DAG in
which there are no directed cycles. If we allow a node to have multiple parents, we call it apolytree, otherwise we call it a moral directed tree.
•ForestAforestis a set of trees.
•Subgraph A (node-induced) subgraph G
Ais the graph created by using the nodes in Aand
their corresponding edges, GA=(VA,EA).
•CliqueFor an undirected graph, a cliqueis a set of nodes that are all neighbors of each
other. A maximal clique is a clique which cannot be made any larger without losing the
clique property. For example, in Figure 10.1(b), {1,2}is a clique but it is not maximal, since
we can add 3 and still maintain the clique property. In fact, the maximal cliques are asfollows:{1,2,3},{2,3,4},{3,5}.
10.1.5 Directed graphical models
Adirected graphical model orDGMis a GM whose graph is a DAG. These are more commonly
known as Bayesian networks. However, there is nothing inherently “Bayesian” about Bayesian
networks: they are just a way of deﬁning probability distributions. These models are also calledbelief networks. The term “belief” here refers to subjective probability. Once again, there isnothing inherently subjective about the kinds of probability distributions represented by DGMs.Finally, these models are sometimes called causal networks, because the directed arrows are
sometimes interpreted as representing causal relations. However, there is nothing inherentlycausal about DGMs. (See Section 26.6.1 for a discussion of causal DGMs.) For these reasons, weuse the more neutral (but less glamorous) term DGM.
The key property of DAGs is that the nodes can be ordered such that parents come before
children. This is called a topological ordering, and it can be constructed from any DAG. Givensuch an order, we deﬁne the ordered Markov property to be the assumption that a node only
depends on its immediate parents, not on all predecessors in the ordering, i.e.,
x
s⊥xpred(s)\pa(s) |xpa(s) (10.4)
wherepa(s)are the parents of node s, andpred(s)are the predecessors of node sin the
ordering. This is a natural generalization of the ﬁrst-order Markov property to from chains togeneral DAGs.
10.2. Examples 311
Y
X1X2X3X4
(a)Y
X1 X2 X3
X4
(b)
Figure 10.2 (a) A naive Bayes classiﬁer represented as a DGM. We assume there are D=4features,
for simplicity. Shaded nodes are observed, unshaded nodes are hidden. (b) Tree-augmented naive Bayes
classiﬁer for D=4features. In general, the tree topology can change depending on the value of y.
For example, the DAG in Figure 10.1(a) encodes the following joint distribution:
p(x1:5)=p( x1)p(x2|x1)p(x3|x1,x2)p(x4|x1,x2,x3)p(x5|x1,x2,x3,x4) (10.5)
=p(x1)p(x2|x1)p(x3|x1)p(x4|x2,x3)p(x5|x3) (10.6)
In general, we have
p(x1:V|G)=V/productdisplay
t=1p(xt|xpa(t)) (10.7)
where each term p(xt|xpa(t))is a CPD. We have written the distribution as p(x|G)to emphasize
that this equation only holds if the CI assumptions encoded in DAG Gare correct. However,
we will usual drop this explicit conditioning for brevity. If each node has O(F)parents and
Kstates, the number of parameters in the model is O(VKF), which is much less than the
O(KV)needed by a model which makes no CI assumptions.
10.2 Examples
In this section, we show a wide variety of commonly used probabilistic models can be conve-
niently represented as DGMs.
10.2.1 Naive Bayes classiﬁers
In Section 3.5, we introduced the naive Bayes classiﬁer. This assumes the features are condi-tionally independent given the class label. This assumption is illustrated in Figure 10.2(a). Thisallows us to write the joint distirbution as follows:
p(y,x)=p(y)
D/productdisplay
j=1p(xj|y) (10.8)
The naive Bayes assumption is rather naive, since it assumes the features are conditionally
independent. One way to capture correlation between the features is to use a graphical model.In particular, if the model is a tree, the method is known as a tree-augmented naive Bayes
312 Chapter 10. Directed graphical models (Bayes nets)
x1 x2 x3···
(a)x1 x2 x3 x4···
(b)
Figure 10.3 A ﬁrst and second order Markov chain.
x1 x2 xTz1 z2 zT
Figure 10.4 A ﬁrst-order HMM.
classiﬁer orTANmodel (Friedman et al. 1997). This is illustrated in Figure 10.2(b). The reason
to use a tree, as opposed to a generic graph, is two-fold. First, it is easy to ﬁnd the optimal
tree structure using the Chow-Liu algorithm, as explained in Section 26.3. Second, it is easy tohandle missing features in a tree-structured model, as we explain in Section 20.2.
10.2.2 Markov and hidden Markov models
Figure 10.3(a) illustrates a ﬁrst-order Markov chain as a DAG. Of course, the assumption that theimmediate past, x
t−1, captures everything we need to know about the entire history, x1:t−2,i s
a bit strong. We can relax it a little by adding a dependence from xt−2toxtas well; this is
called asecond order Markov chain, and is illustrated in Figure 10.3(b). The corresponding
joint has the following form:
p(x1:T)=p(x1,x2)p(x3|x1,x2)p(x4|x2,x3)...=p(x1,x2)T/productdisplay
t=3p(xt|xt−1,xt−2)(10.9)
We can create higher-order Markov models in a similar way. See Section 17.2 for a more detaileddiscussion of Markov models.
Unfortunately, even the second-order Markov assumption may be inadequate if there are long-
range correlations amongst the observations. We can’t keep building ever higher order models,since the number of parameters will blow up. An alternative approach is to assume that thereis an underlying hidden process, that can be modeled by a ﬁrst-order Markov chain, but thatthe data is a noisy observation of this process. The result is known as a hidden Markov model
orHMM, and is illustrated in Figure 10.4. Here z
tis known as a hidden variable at “time” t,
andxtis the observed variable. (We put “time” in quotation marks, since these models can be
applied to any kind of sequence data, such as genomics or language, where trepresents location
rather than time.) The CPD p(zt|zt−1)is thetransition model, and the CPD p(xt|zt)is the
observation model.
10.2. Examples 313
h0h1h2P(v=0|h1,h2)P(v=1|h1,h2)
100 θ0 1−θ0
110 θ0θ1 1−θ0θ1
101 θ0θ2 1−θ0θ2
111 θ0θ1θ2 1−θ0θ1θ2
Table 10.1 Noisy-OR CPD for 2 parents augmented with leak node. We have omitted the tsubscript for
brevity.
The hidden variables often represent quantities of interest, such as the identity of the word
that someone is currently speaking. The observed variables are what we measure, such as the
acoustic waveform. What we would like to do is estimate the hidden state given the data, i.e., tocompute p(z
t|x1:t,θ). This is called state estimation, and is just another form of probabilistic
inference. See Chapter 17 for further details on HMMs.
10.2.3 Medical diagnosis
Consider modeling the relationship between various variables that are measured in an intensivecare unit (ICU), such as the breathing rate of a patient, their blood pressure, etc. The alarm
network in Figure 10.5(a) is one way to represent these (in)dependencies (Beinlich et al. 1989).
This model has 37 variables and 504 parameters.
Since this model was created by hand, by a process called knowledge engineering,i ti s
known as a probabilistic expert system. In Section 10.4, we discuss how to learn the parameters
of DGMs from data, assuming the graph structure is known, and in Chapter 26, we discuss howto learn the graph structure itself.
A different kind of medical diagnosis network, known as the quick medical reference or
QMRnetwork (Shwe et al. 1991), is shown in Figure 10.5(b). This was designed to model infectious
diseases. The QMR model is a bipartite graph structure, with diseases (causes) at the top and
symptoms or ﬁndings at the bottom. All nodes are binary. We can write the distribution asfollows:
p(v,h)=/productdisplay
sp(hs)/productdisplay
tp(vt|hpa(t)) (10.10)
wherehsrepresent the hidden nodes (diseases), and vtrepresent the visible nodes (symptoms).
The CPD for the root nodes are just Bernoulli distributions, representing the prior probability
of that disease. Representing the CPDs for the leaves (symptoms) using CPTs would requiretoo many parameters, because the fan-in(number of parents) of many leaf nodes is very
high. A natural alternative is to use logistic regression to model the CPD, p(v
t=1|hpa(t))=
sigm(wT
thpa(t)). (A DGM in which the CPDs are logistic regression distributions is known as a
sigmoid belief net (Neal 1992).) However, since the parameters of this model were created by
hand, an alternative CPD, known as the noisy-OR model, was used.
The noisy-OR model assumes that if a parent is on, then the child will usually also be on
(since it is an or-gate), but occasionally the “links” from parents to child may fail, independentlyat random. In this case, even if the parent is on, the child may be off. To model this moreprecisely, let θ
st=1−qstbe the probability that the s→tlink fails, so qst=1−θst=p(vt=
314 Chapter 10. Directed graphical models (Bayes nets)
HRBPErrCauter
HRSATTPRMinVol
PVSATPAP Pulm  
Embolus
ShuntIntubation
PressDisconnect VentMach
VentTube
VentLung
VentAlv
Artco2
BPAnaphy
Laxis  Hypo  
Volemia
PCWPCOLvFailure
 Lved 
VolumeStroke
Volume
History
CVPErrlow
Output
HrEKGHRInsuff
Anesth
CatecholSAO2
ExpCo2MinVolset
Kinked
 Tube 
FIO2
(a)
IOXKHDUW
GLVHDVHERWXOLVP
VH[ )DEGRPHQ
SDLQGLVHDVHV
V\PSWRPV:%&
FRXQW
(b)
Figure 10.5 (a) The alarm network. Figure generated by visualizeAlarmNetwork . (b) The QMR
network.
10.2. Examples 315
GpGmp(X=a)p(X=b)p(X=o)p(X=ab)
aa 1000
ab 000 1
ao 1000
ba 000 1
bb 0100
bo 0100
oa 1000
ob 0100
oo 001 0
Table 10.2 CPT which encodes a mapping from genotype to phenotype (bloodtype). This is a determin-
istic, but many-to-one, mapping.
1|hs=1,h−s=0 )is the probability that scan activate ton its own (its “causal power”). The
only way for the child to be off is if all the links from all parents that are on fail independently
at random. Thus
p(vt=0|h)=/productdisplay
s∈pa(t)θI(hs=1)
st (10.11)
Obviously, p(vt=1|h)=1−p(vt=0|h).
If we observe that vt=1but all its parents are off, then this contradicts the model. Such
a data case would get probability zero under the model, which is problematic, because it ispossible that someone exhibits a symptom but does not have any of the speciﬁed diseases. Tohandle this, we add a dummy leak node h
0, which is always on; this represents “all other
causes”. The parameter q0trepresents the probability that the background leak can cause the
effect on its own. The modiﬁed CPD becomes p(vt=0|h)=θ0t/producttext
s∈pa(t)θhs
st. See Table 10.1
for a numerical example.
If we deﬁne wst/defineslog(θst), we can rewrite the CPD as
p(vt=1|h)=1−exp/parenleftBigg
w0t+/summationdisplay
shswst/parenrightBigg
(10.12)
We see that this is similar to a logistic regression model.
Bipartite models with noisy-OR CPDs are called BN2Omodels. It is relatively easy to set the
θstparameters by hand, based on domain expertise. However, it is also possible to learn them
from data (see e.g, (Neal 1992; Meek and Heckerman 1997)). Noisy-OR CPDs have also proveduseful in modeling human causal learning (Griffiths and Tenenbaum 2005), as well as generalbinary classiﬁcation settings (Yuille and Zheng 2009).
10.2.4 Genetic linkage analysis *
Another important (and historically very early) application of DGMs is to the problem of genetic
linkage analysis. We start with a pedigree graph, which is a DAG that representing the
relationship between parents and children, as shown in Figure 10.6(a). We then convert this to aDGM, as we explain below. Finally we perform probabilistic inference in the resulting model.
316 Chapter 10. Directed graphical models (Bayes nets)
 
 
 
(a)
 
 
 
 
 /RFXV /RFXV
(b)
Figure 10.6 Left: family tree, circles are females, squares are males. Individuals with the disease of
interest are highlighted. Right: DGM for two loci. Blue nodes Xijis the observed phenotype for individual
iat locusj. All other nodes are hidden. Orange nodes Gp/m
ijis the paternal/ maternal allele. Small
red nodes zp/m
ijlare the paternal/ maternal selection switching variables. These are linked across loci,
zm
ij→zm
i,j+1andzp
ij→zp
i,j+1. The founder (root) nodes do not have any parents, and hence do no need
switching variables. Based on Figure 3 from (Friedman et al. 2000).
10.2. Examples 317
In more detail, for each person (or animal) iand location or locus jalong the genome, we
create three nodes: the observed markerXij(which can be a property such as blood type,
or just a fragment of DNA that can be measured), and two hidden alleles,Gm
ijandGp
ij, one
inherited from i’s mother (maternal allele) and the other from i’s father (paternal allele). Together,
the ordered pair Gij=(Gm
ij,Gp
ij)constitutes i’s hidden genotype at locusj.
Obviously we must add Gm
ij→XijandGp
ij→Xijarcs representing the fact that genotypes
cause phenotypes (observed manifestations of genotypes). The CPD p(Xij|Gm
ij,Gp
ij)is called
thepenetrance model. As a very simple example, suppose Xij∈{A,B,O,AB }represents
personi’s observed bloodtype, and Gm
ij,Gp
ij∈{A,B,O}is their genotype. We can repre-
sent the penetrance model using the deterministic CPD shown in Table 10.2. For example, A
dominates O, so if a person has genotype AO or OA, their phenotype will be A.
In addition, we add arcs from i’s mother and father into Gij, reﬂecting the Mendelian
inheritance of genetic material from one’s parents. More precisely, let mi=kbei’s mother.
ThenGm
ijcould either be equal to Gm
kjorGp
kj, that is,i’s maternal allele is a copy of one of its
mother’s two alleles. Let Zm
ijbe a hidden variable than speciﬁes the choice. We can model this
using the following CPD, known as the inheritance model:
p(Gm
ij|Gmkj,Gp
kj,Zm
ij)=/braceleftbiggI(Gm
ij=Gm
kj)ifZm
ij=m
I(Gm
ij=Gp
kj)ifZm
ij=p(10.13)
We can deﬁne p(Gp
ij|Gm
kj,Gp
kj,Zp
ij)similarly, where k=piisi’s father. The values of the Zij
are said to specify the phaseof the genotype. The values of Gp
i,j,Gm
i,j,Zp
i,jandZm
i,jconstitute
thehaplotype of person iat locusj.1
Next, we need to specify the prior for the root nodes, p(Gmij)andp(Gp
ij). This is called
thefounder model, and represents the overall prevalence of difference kinds of alleles in the
population. We usually assume independence between the loci for these founder alleles.
Finally, we need to specify priors for the switch variables that control the inheritance process.
These variables are spatially correlated, since adjacent sites on the genome are typically inherited
together (recombination events are rare). We can model this by imposing a two-state Markovchain on the Z’s, where the probability of switching state at locus jis given by θ
j=1
2(1−
e−2dj),w h e r edjis the distance between loci jandj+1. This is called the recombination
model.
The resulting DGM is shown in Figure 10.6(b): it is a series of replicated pedigree DAGs,
augmented with switching Zvariables, which are linked using Markov chains. (There is a
related model known as phylogenetic HMM (Siepel and Haussler 2003), which is used to model
evolution amongst phylogenies.)
As a simpliﬁed example of how this model can be used, suppose we only have one locus,
corresponding to blood type. For brevity, we will drop the jindex. Suppose we observe xi=A.
Then there are 3 possible genotypes: Giis(A,A),(A,O)or(O,A). There is ambiguity
because the genotype to phenotype mapping is many-to-one. We want to reverse this mapping.This is known as an inverse problem. Fortunately, we can use the blood types of relatives to
help disambiguate the evidence. Information will “ﬂow” from the other x
i/prime’s up to their Gi/prime’s,
then across to i’sGivia the pedigree DAG. Thus we can combine our local evidence p(xi|Gi)
1. Sometimes the observed marker is equal to the unphased genotype, which is the unordered set {Gp
ij,Gm
ij}; however,
the phased or hidden genotype is not directly measurable.
318 Chapter 10. Directed graphical models (Bayes nets)
with an informative prior, p(Gi|x−i), conditioned on the other data, to get a less entropic local
posterior, p(Gi|x)∝p(xi|Gi)p(Gi|x−i).
In practice, the model is used to try to determine where along the genome a given disease-
causing gene is assumed to lie — this is the genetic linkage analysis task. The method works as
follows. First, suppose all the parameters of the model, including the distance between all themarker loci, are known. The only unknown is the location of the disease-causing gene. If thereareLmarker loci, we construct L+1models: in model /lscript, we postulate that the disease gene
comes after marker /lscript,f o r0</lscript<L+1. We can estimate the Markov switching parameter ˆθ
/lscript,
and hence the distance d/lscriptbetween the disease gene and its nearest known locus. We measure
the quality of that model using its likelihood, p(D|ˆθ/lscript). We then can then pick the model with
highest likelihood (which is equivalent to the MAP model under a uniform prior).
Note, however, that computing the likelihood requires marginalizing out all the hidden Z
andGvariables. See (Fishelson and Geiger 2002) and the references therein for some exact
methods for this task; these are based on the variable elimination algorithm, which we discussin Section 20.3. Unfortunately, for reasons we explain in Section 20.5, exact methods can becomputationally intractable if the number of individuals and/or loci is large. See (Albers et al.2006) for an approximate method for computing the likelihood; this is based on a form ofvariational inference, which we will discuss in Section 22.4.1.
10.2.5 Directed Gaussian graphical models *
Consider a DGM where all the variables are real-valued, and all the CPDs have the followingform:
p(x
t|xpa(t))=N(xt|μt+wT
txpa(t),σ2
t) (10.14)
This is called a linear Gaussian CPD. As we show below, multiplying all these CPDs together
results in a large joint Gaussian distribution of the form p(x)=N(x|μ,Σ). This is called a
directed GGM, or a Gaussian Bayes net.
We now explain how to derive μandΣfrom the CPD parameters, following (Shachter and
Kenley 1989, App. B). For convenience, we will rewrite the CPDs in the following form:
xt=μt+/summationdisplay
s∈pa(t)wts(xs−μs)+σtzt (10.15)
wherezt∼N(0,1),σtis the conditional standard deviation of xtgiven its parents, wtsis the
strength of the s→tedge, and μtis the local mean.2
It is easy to see that the global mean is just the concatenation of the local means, μ=
(μ1,...,μ D). We now derive the global covariance, Σ.L e tS/definesdiag(σ)be a diagonal matrix
containing the standard deviations. We can rewrite Equation 10.15 in matrix-vector form asfollows:
(x−μ)=W(x−μ)+Sz (10.16)
2. If we do not subtract off the parent’s mean (i.e., if we use xt=μt+/summationtext
s∈pa(t)wtsxs+σtzt), the derivation of Σ
is much messier, as can be seen by looking at (Bishop 2006b, p370).
10.3. Inference 319
Now letebe a vector of noise terms:
e/definesSz (10.17)
We can rearrange this to get
e=(I−W)(x−μ) (10.18)
SinceWis lower triangular (because wts=0ift>sin the topological ordering), we have that
I−Wis lower triangular with 1s on the diagonal. Hence
⎛
⎜⎜⎜⎝e
1
e2
...
ed⎞
⎟⎟⎟⎠=⎛
⎜⎜⎜⎜⎜⎝1
−w
211
−w32−w311
......
−wd1−wd2...−wd,d−11⎞
⎟⎟⎟⎟⎟⎠⎛
⎜⎜⎜⎝x
1−μ1
x2−μ2
...
xd−μd⎞
⎟⎟⎟⎠(10.19)
SinceI−Wis always invertible, we can write
x−μ=(I−W)−1e/definesUe=USz (10.20)
where we deﬁned U=(I−W)−1. Thus the regression weights correspond to a Cholesky
decomposition of Σ,a sw en o ws h o w :
Σ=c o v [x]=c o v[x−μ] (10.21)
=c o v [USz]=UScov[z]SUT=US2UT(10.22)
10.3 Inference
We have seen that graphical models provide a compact way to deﬁne joint probability distribu-
tions. Given such a joint distribution, what can we do with it? The main use for such a jointdistribution is to perform probabilistic inference. This refers to the task of estimating unknown
quantities from known quantities. For example, in Section 10.2.2, we introduced HMMs, andsaid that one of the goals is to estimate the hidden states (e.g., words) from the observations(e.g., speech signal). And in Section 10.2.4, we discussed genetic linkage analysis, and said thatone of the goals is to estimate the likelihood of the data under various DAGs, corresponding todifferent hypotheses about the location of the disease-causing gene.
In general, we can pose the inference problem as follows. Suppose we have a set of correlated
random variables with joint distribution p(x
1:V|θ). (In this section, we are assuming the
parameters θof the model are known. We discuss how to learn the parameters in Section 10.4.)
Let us partition this vector into the visible variables xv, which are observed, and the hidden
variables, xh, which are unobserved. Inference refers to computing the posterior distribution
of the unknowns given the knowns:
p(xh|xv,θ)=p(xh,xv|θ)
p(xv|θ)=p(xh,xv|θ)/summationtext
x/prime
hp(x/prime
h,xv|θ)(10.23)
Essentially we are conditioning on the data by clamping the visible variables to their observed
values,xv, and then normalizing, to go from p(xh,xv)top(xh|xv). The normalization constant
p(xv|θ)is the likelihood of the data, also called the probability of the evidence.
320 Chapter 10. Directed graphical models (Bayes nets)
Sometimes only some of the hidden variables are of interest to us. So let us partition the
hidden variables into query variables, xq, whose value we wish to know, and the remaining
nuisance variables, xn, which we are not interested in. We can compute what we are interested
in bymarginalizing out the nuisance variables:
p(xq|xv,θ)=/summationdisplay
xnp(xq,xn|xv,θ) (10.24)
In Section 4.3.1, we saw how to perform all these operations for a multivariate Gaussian in
O(V3)time, where Vis the number of variables. What if we have discrete random variables,
with say Kstates each? If the joint distribution is represented as a multi-dimensional table,
we can always perform these operations exactly, but this will take O(KV)time. In Chapter 20,
we explain how to exploit the factorization encoded by the GM to perform these operations inO(VK
w+1)time, where wis a quantity known as the treewidth of the graph. This measures
how “tree-like” the graph is. If the graph is a tree (or a chain), we have w=1, so for these
models, inference takes time linear in the number of nodes. Unfortunately, for more generalgraphs, exact inference can take time exponential in the number of nodes, as we explain inSection 20.5. We will therefore examine various approximate inference schemes later in thebook.
10.4 Learning
In the graphical models literature, it is common to distinguish between inference and learning.Inference means computing (functions of) p(x
h|xv,θ),w h e r evare the visible nodes, hare the
hidden nodes, and θare the parameters of the model, assumed to be known. Learning usually
means computing a MAP estimate of the parameters given data:
ˆθ=a r g m a x
θN/summationdisplay
i=1logp(xi,v|θ)+logp(θ) (10.25)
wherexi,vare the visible variables in case i. If we have a uniform prior, p(θ)∝1, this reduces
to the MLE, as usual.
If we adopt a Bayesian view, the parameters are unknown variables and should also be
inferred. Thus to a Bayesian, there is no distinction between inference and learning. In fact, wecan just add the parameters as nodes to the graph, condition on D, and then infer the values
of all the nodes. (We discuss this in more detail below.)
In this view, the main difference between hidden variables and parameters is that the number
of hidden variables grows with the amount of training data (since there is usually a set of hiddenvariables for each observed data case), whereas the number of parameters in usually ﬁxed (atleast in a parametric model). This means that we must integrate out the hidden variables to avoidoverﬁtting, but we may be able to get away with point estimation techniques for parameters,which are fewer in number.
10.4.1 Plate notation
When inferring parameters from data, we often assume the data is iid. We can represent thisassumption explicitly using a graphical model, as shown in Figure 10.7(a). This illustrates the
10.4. Learning 321
θ
X1XN
Nθ
Xi
Figure 10.7 Left: data points xiare conditionally independent given θ. Right: Plate notation. This
represents the same model as the one on the left, except the repeated xinodes are inside a box, known as
a plate; the number in the lower right hand corner, N, speciﬁes the number of repetitions of the Xinode.
assumption that each data case was generated independently but from the same distribution.
Notice that the data cases are only independent conditional on the parameters θ; marginally,
the data cases are dependent. Nevertheless, we can see that, in this example, the order in whichthe data cases arrive makes no difference to our beliefs about θ, since all orderings will have
the same sufficient statistics. Hence we say the data is exchangeable.
To avoid visual clutter, it is common to use a form of syntactic sugar calledplates:w e
simply draw a little box around the repeated variables, with the convention that nodes withinthe box will get repeated when the model is unrolled. We often write the number of copies or
repetitions in the bottom right corner of the box. See Figure 10.7(b) for a simple example. Thecorresponding joint distribution has the form
p(θ,D)=p(θ)/bracketleftBigg
N/productdisplay
i=1p(xi|θ)/bracketrightBigg
(10.26)
This DGM represents the CI assumptions behind the models we considered in Chapter 5.
A slightly more complex example is shown in Figure 10.8. On the left we show a naive Bayes
classiﬁer that has been “unrolled” for Dfeatures, but uses a plate to represent repetition over
casesi=1:N. The version on the right shows the same model using nested plate notation.
When a variable is inside two plates, it will have two sub-indices. For example, we write θjc
to represent the parameter for feature jin class-conditional density c. Note that plates can
be nested or crossing. Notational devices for modeling more complex parameter tying patternscan be devised (e.g., (Heckerman et al. 2004)), but these are not widely used. What is not clearfrom the ﬁgure is that θ
jcis used to generate xijiffyi=c, otherwise it is ignored. This is an
example of context speciﬁc independence, since the CI relationship xij⊥θjconly holds if
yi/negationslash=c.
322 Chapter 10. Directed graphical models (Bayes nets)
θc1 ... θcD
CXi1 ... XiDYi
Nπ
(a)DCN
θjcXijYiπ
(b)
Figure 10.8 Naive Bayes classiﬁer as a DGM. (a) With single plates. (b) WIth nested plates.
10.4.2 Learning from complete data
If all the variables are fully observed in each case, so there is no missing data and there are no
hidden variables, we say the data is complete. For a DGM with complete data, the likelihood is
given by
p(D|θ)=N/productdisplay
i=1p(xi|θ)=N/productdisplay
i=1V/productdisplay
t=1p(xit|xi,pa(t),θt)=V/productdisplay
t=1p(Dt|θt) (10.27)
whereDtis the data associated with node tand its parents, i.e., the t’th family. This is a
product of terms, one per CPD. We say that the likelihood decomposes according to the graph
structure.
Now suppose that the prior factorizes as well:
p(θ)=V/productdisplay
t=1p(θt) (10.28)
Then clearly the posterior also factorizes:
p(θ|D)∝p(D|θ)p(θ)=V/productdisplay
t=1p(Dt|θt)p(θt) (10.29)
This means we can compute the posterior of each CPD independently. In other words,
factored prior plus factored likelihood implies factored posterior (10.30)
Let us consider an example, where all CPDs are tabular, thus extending the earlier results of
Secion 3.5.1.2, where discussed Bayesian naive Bayes. We have a separate row (i.e., a separatemultinoulli distribution) for each conditioning case, i.e., for each combination of parent values,
as in Table 10.2. Formally, we can write the t’th CPT as x
t|xpa(t)=c∼Cat(θtc),w h e r e
θtck/definesp(xt=k|xpa(t)=c),f o rk=1:Kt,c=1:Ctandt=1:T.H e r eKtis the number
10.4. Learning 323
of states for node t,Ct/defines/producttext
s∈pa(t)Ksis the number of parent combinations, and Tis the
number of nodes. Obviously/summationtext
kθtck=1for each row of each CPT.
Let us put a separate Dirichlet prior on each row of each CPT, i.e., θtc∼Dir(αtc). Then we
can compute the posterior by simply adding the pseudo counts to the empirical counts to get
θtc|D ∼Dir(N tc+αtc),w h e r eN tckis the number of times that node tis in state kwhile its
parents are in state c:
Ntck/definesN/summationdisplay
i=1I(xi,t=k,xi,pa(t)=c) (10.31)
From Equation 2.77, the mean of this distribution is given by the following:
θtck=Ntck+αtck/summationtext
k/prime(Ntck/prime+αtck/prime)(10.32)
For example, consider the DGM in Figure 10.1(a). Suppose the training data consists of the
following 5 cases:
x1x2x3x4x5
0010001111
11010
0110001110
Below we list all the sufficient statistics N
tck, and the posterior mean parameters θickunder
a Dirichlet prior with αick=1(corresponding to add-one smoothing) for the t=4node:
x2x3Ntck=1Ntck=0θtck=1θtck=0
00 00 1/2 1/2
10 10 2/3 1/3
01 01 1/3 2/3
11 21 3/5 2/5
It is easy to show that the MLE has the same form as Equation 10.32, except without the αtck
terms, i.e.,
ˆθtck=Ntck/summationtext
k/primeNtck/prime(10.33)
Of course, the MLE suffers from the zero-count problem discussed in Section 3.3.4.1, so it isimportant to use a prior to regularize the estimation problem.
10.4.3 Learning with missing and/or latent variables
If we have missing data and/or hidden variables, the likelihood no longer factorizes, and indeedit is no longer convex, as we explain in detail in Section 11.3. This means we will usually canonly compute a locally optimal ML or MAP estimate. Bayesian inference of the parameters iseven harder. We discuss suitable approximate inference techniques in later chapters.
324 Chapter 10. Directed graphical models (Bayes nets)
10.5 Conditional independence properties of DGMs
At the heart of any graphical model is a set of conditional indepence (CI) assumptions. We write
xA⊥GxB|xCifAis independent of BgivenCin the graph G, using the semantics to be
deﬁned below. Let I(G)be the set of all such CI statements encoded by the graph.
We say that Gis anI-map(independence map) for p, or that pisMarkovwrtG,i ff
I(G)⊆I(p),w h e r eI(p)is the set of all CI statements that hold for distribution p. In other
words, the graph is an I-map if it does not make any assertions of CI that are not true of thedistribution. This allows us to use the graph as a safe proxy for pwhen reasoning about p’s CI
properties. This is helpful for designing algorithms that work for large classes of distributions,regardless of their speciﬁc numerical parameters θ.
Note that the fully connected graph is an I-map of all distributions, since it makes no CI
assertions at all (since it is not missing any edges). We therefore say Gis aminimal I-map of
pifGis an I-map of p, and if there is no G
/prime⊆Gwhich is an I-map of p.
It remains to specify how to determine if xA⊥GxB|xC. Deriving these independencies
for undirected graphs is easy (see Section 19.2), but the DAG situation is somewhat complicated,because of the need to respect the orientation of the directed edges. We give the details below.
10.5.1 d-separation and the Bayes Ball algorithm (global Markov properties)
First, we introduce some deﬁnitions. We say an undirected path Pisd-separated b yas e to f
nodesE(containing the evidence) iff at least one of the following conditions hold:
1. P contains a chain, s→m→tors←m←t,w h e r em ∈E
2. P contains a tent or fork, s/arrowsouthwestm/arrowsoutheastt,w h e r em ∈E
3. P contains a colliderorv-structure, s/arrowsoutheastm/arrowsouthwestt,w h e r e mis not in Eand nor is any
descendant of m.
Next, we say that a set of nodes Ais d-separated from a different set of nodes Bgiven a
third observed set Eiff each undirected path from every node a∈Ato every node b∈Bis
d-separated by E. Finally, we deﬁne the CI properties of a DAG as follows:
xA⊥GxB|xE⇐⇒A is d-separated from B given E (10.34)
TheBayes ball algorithm (Shachter 1998) is a simple way to see if Ais d-separated from B
givenE, based on the above deﬁnition. The idea is this. We “shade” all nodes in E, indicating
that they are observed. We then place “balls” at each node in A, let them “bounce around”
according to some rules, and then ask if any of the balls reach any of the nodes in B. The three
main rules are shown in Figure 10.9. Notice that balls can travel opposite to edge directions.We see that a ball can pass through a chain, but not if it is shaded in the middle. Similarly, aball can pass through a fork, but not if it is shaded in the middle. However, a ball cannot passthrough a v-structure, unless it is shaded in the middle.
We can justify the 3 rules of Bayes ball as follows. First consider a chain structure X→Y→
Z, which encodes
p(x,y,z)=p(x)p(y|x)p(z|y) (10.35)
10.5. Conditional independence properties of DGMs 325
XYZ
(a)XY
Z
(b)
X
YZ
(c)XYZ
(d)
XY
Z
(e)X
YZ
(f)
Figure 10.9 Bayes ball rules. A shaded node is one we condition on. If there is an arrow hitting a bar, it
means the ball cannot pass through; otherwise the ball can pass through. Based on (Jordan 2007).
When we condition on y,a r exandzindependent? We have
p(x,z|y)=p(x)p(y|x)p(z|y)
p(y)=p(x,y)p(z|y)
p(y)=p(x|y)p(z|y) (10.36)
and therefore x⊥z|y. So observing the middle node of chain breaks it in two (as in a Markov
chain).
Now consider the tent structure X←Y→Z. The joint is
p(x,y,z)=p(y)p(x|y)p(z|y) (10.37)
326 Chapter 10. Directed graphical models (Bayes nets)
xy
(a)xy
(b)y/primeyxz
(c)
Figure 10.10 (a-b) Bayes ball boundary conditions. (c) Example of why we need boundary conditions. y/prime
is an observed child of y, rendering y“effectively observed”, so the ball bounces back up on its way from
xtoz.
When we condition on y,a r exandzindependent? We have
p(x,z|y)=p(x,y,z)
p(y)=p(y)p(x|y)p(z|y)
p(y)=p(x|y)p(z|y) (10.38)
and therefore x⊥z|y. So observing a root node separates its children (as in a naive Bayes
classiﬁer: see Section 3.5).
Finally consider a v-structure X→Y←Z. The joint is
p(x,y,z)=p(x)p(z)p(y|x,z) (10.39)
When we condition on y,a r exandzindependent? We have
p(x,z|y)=p(x)p(z)p(y|x,z)
p(y)(10.40)
sox/negationslash⊥z|y. However, in the unconditional distribution, we have
p(x,z)=p(x)p(z) (10.41)
so we see that xandzare marginally independent. So we see that conditioning on a common
child at the bottom of a v-structure makes its parents become dependent. This important effect
is calledexplaining away, inter-causal reasoning,o r Berkson’s paradox. As an example of
explaining away, suppose we toss two coins, representing the binary numbers 0 and 1, and weobserve the “sum” of their values. A priori, the coins are independent, but once we observetheir sum, they become coupled (e.g., if the sum is 1, and the ﬁrst coin is 0, then we know thesecond coin is 1).
Finally, Bayes Ball also needs the “boundary conditions” shown in Figure 10.10(a-b). To
understand where these rules come from, consider Figure 10.10(c). Suppose Y
/primeis a noise-free
copy ofY. Then if we observe Y/prime, we effectively observe Yas well, so the parents XandZ
have to compete to explain this. So if we send a ball down X→Y→Y/prime, it should “bounce
back” up along Y/prime→Y→Z. However, if Yand all its children are hidden, the ball does not
bounce back.
10.5. Conditional independence properties of DGMs 327
12
354
67
Figure 10.11 A DGM.
For example, in Figure 10.11, we see that x2⊥x6|x5, since the 2→5→6path is blocked
byx5(which is observed), the 2→4→7→6path is blocked by x7(which is hidden), and
the2→1→3→6path is blocked by x1(which is hidden). However, we also see that
x2/negationslash⊥x6|x5,x7, since now the 2→4→7→6path is no longer blocked by x7(which is
observed). Exercise 10.2 gives you some more practice in determining CI relationships for DGMs.
10.5.2 Other Markov properties of DGMs
From the d-separation criterion, one can conclude that
t⊥nd(t)\pa(t)|pa(t) (10.42)
where the non-descendants of a node nd(t)are all the nodes except for its descendants,
nd(t)=V\{ t∪desc(t)}. Equation 10.42 is called the directed local Markov property.F o r
example, in Figure 10.11, we have nd(3) ={2,4}, andpa(3) = 1,s o3 ⊥2,4|1.
A special case of this property is when we only look at predecessors of a node according to
some topological ordering. We have
t⊥pred(t)\pa(t)|pa(t) (10.43)
which follows since pred(t)⊆nd(t). This is called the ordered Markov property, which
justiﬁes Equation 10.7. For example, in Figure 10.11, if we use the ordering 1,2,...,7. we ﬁnd
pred(3) = {1,2}andpa(3) = 1,s o3 ⊥2|1.
We
have now described three Markov properties for DAGs: the directed global Markov property
G in Equation 10.34, the ordered Markov property O in Equation 10.43, and the directed local
Markov property L in Equation 10.42. It is obvious that G=⇒L=⇒O. What is less
obvious, but nevertheless true, is that O=⇒L=⇒G(see e.g., (Koller and Friedman 2009)
for the proof). Hence all these properties are equivalent.
Furthermore, any distribution pthat is Markov wrt Gcan be factorized as in Equation 10.7;
this is called the factorization property F. It is obvious that O=⇒F, but one can show that
the converse also holds (see e.g., (Koller and Friedman 2009) for the proof).
10.5.3 Markov blanket and full conditionals
The set of nodes that renders a node tconditionally independent of all the other nodes in
the graph is called t’sMarkov blanket; we will denote this by mb(t). One can show that the
Markov blanket of a node in a DGM is equal to the parents, the children, and the co-parents,
328 Chapter 10. Directed graphical models (Bayes nets)
i.e., other nodes who are also parents of its children:
mb(t)/definesch(t)∪pa(t)∪copa(t) (10.44)
For example, in Figure 10.11, we have
mb(5) = {6,7}∪{2,3}∪{4}={2,3,4,6,7} (10.45)
where 4 is a co-parent of 5 because they share a common child, namely 7.
To see why the co-parents are in the Markov blanket, note that when we derive p(xt|x−t)=
p(xt,x−t)/p(x−t), all the terms that do not involve xtwill cancel out between numerator and
denominator, so we are left with a product of CPDs which contain xtin theirscope. Hence
p(xt|x−t)∝p(xt|xpa(t))/productdisplay
s∈ch(t)p(xs|xpa(s)) (10.46)
For example, in Figure 10.11 we have
p(x5|x−5)∝p(x5|x2,x3)p(x6|x3,x5)p(x7|x4,x5,x6) (10.47)
The resulting expression is called t’sfull conditional, and will prove to be important when we
study Gibbs sampling (Section 24.2).
10.6 Inﬂuence (decision) diagrams *
We can represent multi-stage (Bayesian) decision problems by using a graphical notation known
as adecision diagram or aninﬂuence diagram (Howard and Matheson 1981; Kjaerulff and
Madsen 2008). This extends directed graphical models by adding decision nodes (also called ac-
tion nodes), represented by rectangles, and utility nodes (also called value nodes), represented
by diamonds. The original random variables are called chance nodes, and are represented by
ovals, as usual.
Figure 10.12(a) gives a simple example, illustrating the famous oil wild-catter problem.3In
this problem, you have to decide whether to drill an oil well or not. You have two possibleactions:d=1means drill, d=0means don’t drill. You assume there are 3 states of nature:
o=0means the well is dry, o=1means it is wet (has some oil), and o=2means it is
soaking (has a lot of oil). Suppose your prior beliefs are p(o)=[ 0.5,0.3,0.2]. Finally, you must
specify the utility function U(d,o). Since the states and actions are discrete, we can represent
it as a table (analogous to a CPT in a DGM). Suppose we use the following numbers, in dollars:
o=0o=1o=2
d=0000
d=1-70 50 200
We see that if you don’t drill, you incur no costs, but also make no money. If you drill a dry
well, you lose $70; if you drill a wet well, you gain $50; and if you drill a soaking well, you gain$200. Your prior expected utility if you drill is given by
EU(d=1 )= 2/summationdisplay
o=0p(o)U(d,o)=0.5·(−70)+0.3·50+0.2·200 = 20 (10.48)
3. This example is originally from (Raiffa 1968). Our presentation is based on some notes by Daphne Koller.
10.6. Inﬂuence (decision) diagrams * 329
Oil
UtilityDrill
(a)Oil
UtilityDrillSound
(b)
Oil
UtilityDrillSoundTest
Cost
(c)
Figure 10.12 (a) Inﬂuence diagram for basic oil wild catter problem. (b) An extension in which we have
an information arc from the Sound chance node to the Drill decision node. (c) An extension in which we
get to decide whether to perform the test or not.
Your expected utility if you don’t drill is 0. So your maximum expected utility is
MEU=m a x{EU(d=0 ),EU(d=1 )}=m a x{0,20}=2 0 (10.49)
and therefore the optimal action is to drill:
d∗=a r gm a x {EU(d=0 ),EU(d=1 )}=1 (10.50)
Now let us consider a slight extension to the model. Suppose you perform a sounding to
estimate the state of the well. The sounding observation can be in one of 3 states: s=0is
a diffuse reﬂection pattern, suggesting no oil; s=1is an open reﬂection pattern, suggesting
some oil; and s=2is a closed reﬂection pattern, indicating lots of oil. Since Sis caused by O,
we add an O→Sarc to our model. In addition, we assume that the outcome of the sounding
test will be available before we decide whether to drill or not; hence we add an information
arcfromStoD. This is illustrated in Figure 10.12(b).
Let us model the reliability of our sensor using the following conditional distribution for
p(s|o):
330 Chapter 10. Directed graphical models (Bayes nets)
s=0s=1s=2
o=00.6 0.3 0.1
o=10.3 0.4 0.3
o=20.1 0.4 0.5
Suppose we do the sounding test and we observe s=0. The posterior over the oil state is
p(o|s=0 )=[ 0 .732,0.219,0.049] (10.51)
Now your posterior expected utility of performing action dis
EU(d|s=0 )=2/summationdisplay
o=0p(o|s=0 )U(o,d) (10.52)
Ifd=1, this gives
EU(d=1|s=0 )=0 .732×(−70)+0.219×50+0.049×200 =−30.5 (10.53)
However, if d=0, thenEU(d=0|s=0 )=0 , since not drilling incurs no cost. So if we
observes=0, we are better off not drilling, which makes sense.
Now suppose we do the sounding test and we observe s=1. By similar reasoning, one
can show that EU(d=1|s=1 )=3 2 .9, which is higher than EU(d=0|s=1 )=0 .
Similarly, if we observe s=2,w eh a v e EU(d=1|s=2 )=8 7 .5which is much higher
thanEU(d=0|s=2 )=0 .Hence the optimal policy d∗(s)is as follows: if s=0, choose
d∗(0) = 0and get $0; if s=1, choosed∗(1) = 1and get $32.9; and if s=2, choosed∗(2) = 1
and get $87.5.
You can compute your expected proﬁt or maximum expected utility as follows:
MEU=/summationdisplay
sp(s)EU(d∗(s)|s) (10.54)
This is the expected utility given possible outcomes of the sounding test, assuming you act
optimally given the outcome. The prior marginal on the outcome of the test is
p(s)=/summationdisplay
op(o)p(s|o)=[ 0.41,0.35,0.24] (10.55)
Hence your maximum expected utility is
MEU=0.41×0+0.35×32.9+0.24×87.5=3 2.2 (10.56)
Now suppose you can choose whether to do the test or not. This can be modelled as shown
in Figure 10.12(c), where we add a new test node T.I fT=1, we do the test, and Scan enter 1
of 3 states, determined by O, exactly as above. If T=0, we don’t do the test, and Senters a
special unknown state. There is also some cost associated with performing the test.
Is it worth doing the test? This depends on how much our MEU changes if we know the
outcome of the test (namely the state of S). If you don’t do the test, we have MEU=2 0
from Equation 10.49. If you do the test, you have MEU=3 2.2from Equation 10.56. So the
improvement in utility if you do the test (and act optimally on its outcome) is $12.2. This is
10.6. Inﬂuence (decision) diagrams * 331
at
zt zt+1xt xt+1
Rt
(a)at
xt xt+1
Rt
(b)
Figure 10.13 (a) A POMDP, shown as an inﬂuence diagram. ztare hidden world states. We implicitly
make the no forgetting assumption, which effectively means that athas arrows coming into it from all
previous observations, x1:t. (b) An MDP, shown as an inﬂuence diagram.
called the value of perfect information (VPI). So we should do the test as long as it costs less
than $12.2.
In terms of graphical models, the VPI of a variable Tcan be determined by computing the
MEU for the base inﬂuence diagram, I, and then computing the MEU for the same inﬂuence
diagram where we add information arcs from Tto the action nodes, and then computing the
difference. In other words,
VPI=MEU(I+T→D)−MEU(I) (10.57)
whereDis the decision node and Tis the variable we are measuring.
It is possible to modify the variable elimination algorithm (Section 20.3) so that it computes
the optimal policy given an inﬂuence diagram. These methods essentially work backwards from
the ﬁnal time-step, computing the optimal decision at each step assuming all following actionsare chosen optimally. See e.g., (Lauritzen and Nilsson 2001; Kjaerulff and Madsen 2008) fordetails.
We could continue to extend the model in various ways. For example, we could imagine a
dynamical system in which we test, observe outcomes, perform actions, move on to the nextoil well, and continue drilling (and polluting) in this way. In fact, many problems in robotics,business, medicine, public policy, etc. can be usefully formulated as inﬂuence diagrams unrolledover time (Raiffa 1968; Lauritzen and Nilsson 2001; Kjaerulff and Madsen 2008).
A generic model of this form is shown in Figure 10.13(a). This is known as a partially
observed Markov decision process orPOMDP(pronounced “pom-d-p”). This is basically a
hidden Markov model (Section 17.3) augmented with action and reward nodes. This can be usedto model the perception-action cycle that all intelligent agents use (see e.g., (Kaelbling et al.
1998) for details).
A special case of a POMDP, in which the states are fully observed, is called a Markov decision
processorMDP, shown in Figure 10.13(b). This is much easier to solve, since we only have
to compute a mapping from observed states to actions. This can be solved using dynamicprogramming (see e.g., (Sutton and Barto 1998) for details).
In the POMDP case, the information arc from x
ttoatis not sufficient to uniquely determine
332 Chapter 10. Directed graphical models (Bayes nets)
(a)AB CE FI DG H
(b)JGA D
H IE FB C
(c)
Figure 10.14 Some DGMs.
the best action, since the state is not fully observed. Instead, we need to choose actions based
on ourbelief state ,p(zt|x1:t,a1:t). Since the belief updating process is deterministic (see
Section 17.4.2), we can compute a belief state MDP . For details on to compute the policies for
such models, see e.g., (Kaelbling et al. 1998; Spaan and Vlassis 2005).
Exercises
Exercise 10.1 Marginalizing a node in a DGM
(Source: Koller.)
Consider the DAG Gin Figure 10.14(a). Assume it is a minimal I-map for p(A,B,C,D,E,F,X ).N o w
consider marginalizing out X. Construct a new DAG G/primewhich is a minimal I-map for p(A,B,C,D,E,F ).
Specify (and justify) which extra edges need to be added.
Exercise 10.2 Bayes Ball
(Source: Jordan.)
Here we compute some global independence statements from some directed graphical models. You can
use the “Bayes ball” algorithm, the d-separation criterion, or the method of converting to an undirected
graph (all should give the same results).
a. Consider the DAG in Figure 10.14(b). List all variables that are independent of Agiven evidence on B.
b. Consider the DAG in Figure 10.14(c). List all variables that are independent of Agiven evidence on J.
Exercise 10.3 Markov blanket for a DGM
Prove that the full conditional for node iin a DGM is given by
p(Xi|X−i)∝p(Xi|Pa(Xi))/productdisplay
Yj∈ch(Xi)p(Yj|Pa(Yj)) (10.58)
wherech(Xi)are the children of XiandPa(Yj)are the parents of Yj.
Exercise 10.4 Hidden variables in DGMs
Consider the DGMs in Figure 11.1 which both deﬁne p(X1:6), where we number empty nodes left to right,
top to bottom. The graph on the left deﬁnes the joint as
p(X1:6)=/summationdisplay
hp(X1)p(X2)p(X3)p(H=h|X1:3)p(X4|H=h)p(X5|H=h)p(X6|H=h)(10.59)
10.6. Inﬂuence (decision) diagrams * 333
(a)
 (b)
Figure 10.15 (a) Weather BN. (b) Fishing BN.
where we have marginalized over the hidden variable H. The graph on the right deﬁnes the joint as
p(X1:6)=p(X1)p(X2)p(X3)p(X4|X1:3)p(X5|X1:4)p(X6|X1:5) (10.60)
a. (5 points) Assuming all nodes (including H) are binary and all CPDs are tabular, prove that the model
on the left has 17 free parameters.
b. (5 points) Assuming all nodes are binary and all CPDs are tabular, prove that the model on the right
has 59 free parameters.
c. (5 points) Suppose we have a data set D=Xn
1:6forn=1:N, where we observe the Xs but not H,
and we want to estimate the parameters of the CPDs using maximum likelihood. For which model is
this easier? Explain your answer.
Exercise 10.5 B a y e sn e t sf o rar a i n yd a y
(Source: Nando de Freitas.). In this question you must model a problem with 4 binary variables: G=”gray”,
V=”Vancouver”, R=”rain” and S=”sad”. Consider the directed graphical model describing the relation-
ship between these variables shown in Figure 10.15(a).
a. Write down an expression for P(S=1|V=1 )in terms of α,β,γ,δ.
b. Write down an expression for P(S=1|V=0 ). Is this the same or different to P(S=1|V=1 )?
Explain why.
c. Find maximum likelihood estimates of α,β,γusing the following data set, where each row is a training
case. (You may state your answers without proof.)
VGRS
1111
1101
1000(10.61)
Exercise 10.6 Fishing nets
(Source: (Duda et al. 2001)..) Consider the Bayes net shown in Figure 10.15(b). Here, the nodes represent
the following variables
X1∈{winter, spring, summer, autumn },X2∈{salmon, sea bass } (10.62)
X3∈{light, medium, dark },X4∈{wide, thin } (10.63)
334 Chapter 10. Directed graphical models (Bayes nets)
X1 X2 X3 X4 X5Z1 Z2 Z3
(a)X1 X2 X4Z1 Z2 Z3
(b)
Figure 10.16 (a) A QMR-style network with some hidden leaves. (b) Removing the barren nodes.
The corresponding conditional probability tables are
p(x1)=/parenleftbig
.25.25.25.25/parenrightbig
,p(x2|x1)=⎛
⎜⎜⎝.9.1
.3.7
.4.6
.8.2⎞
⎟⎟⎠(10.64)
p(x3|x2)=/parenleftbigg.33.33.34
.8.1.1/parenrightbigg
,p(x4|x2)=/parenleftbigg.4.6
.95.05/parenrightbigg
(10.65)
Note that in p(x4|x2), the rows represent x2and the columns x4(so each row sums to one and represents
the child of the CPD). Thus p(x4=thin|x2=sea bass)=0 .05,p(x4=thin|x2=salmon)=0 .6, etc.
Answer the following queries. You may use matlab or do it by hand. In either case, show your work.
a. Suppose the ﬁsh was caught on December 20 — the end of autumn and the beginning of winter —
and thus let p(x1)=(.5,0,0,.5)instead of the above prior. (This is called soft evidence, since we
do not know the exact value of X1, but we have a distribution over it.) Suppose the lightness has not
been measured but it is known that the ﬁsh is thin. Classify the ﬁsh as salmon or sea bass.
b. Suppose all we know is that the ﬁsh is thin and medium lightness. What season is it now, most likely?
Usep(x1)=/parenleftbig
.25.25.25.25/parenrightbig
Exercise 10.7 Removing leaves in BN20 networks
a. Consider the QMR network, where only some of the symtpoms are observed. For example, in Fig-
ure 10.16(a), X4andX5are hidden. Show that we can safely remove all the hidden leaf nodes without
affecting the posterior over the disease nodes, i.e., prove that we can compute p(z1:3|x1,x2,x4)using
the network in Figure 10.16(b). This is called barren node removal, and can be applied to any DGM.
b. Now suppose we partition the leaves into three groups: on, off and unknown. Clearly we can remove the
unknown leaves, since they are hidden and do not affect their parents. Show that we can analytically
remove the leaves that are in the “off state”, by absorbing their effect into the prior of the parents.(This trick only works for noisy-OR CPDs.)
Exercise 10.8 Handling negative ﬁndings in the QMR network
Consider the QMR network. Let dbe the hidden diseases, f−be the negative ﬁndings (leaf nodes that are
off), andf−be the positive ﬁndings (leaf nodes that are on). We can compute the posterior p(d|f,f+)in
two steps: ﬁrst absorb the negative ﬁndings, p(d|f−)∝p(d)p(f−|d), then absorb the positive ﬁndings,
p(d|f−,f+)∝p(d|f−)p(f+|d). Show that the ﬁrst step can be done in O(|d||f−|)time, where |d|is
the number of dieases and |f−|is the number of negative ﬁndings. For simplicity, you can ignore leak
nodes. (Intuitively, the reason for this is that there is no correlation induced amongst the parents whenthe ﬁnding is off, since there is no explaining away.)
10.6. Inﬂuence (decision) diagrams * 335
Exercise 10.9 Moralization does not introduce new independence statements
Recall that the process of moralizing a DAG means connecting together all “unmarried” parents that share
a common child, and then dropping all the arrows. Let Mbe the moralization of DAG G. Show that
CI(M)⊆CI(G), where CI are the set of conditional independence statements implied by the model.

11 Mixture models and the EM algorithm
11.1 Latent variable models
In Chapter 10 we showed how graphical models can be used to deﬁne high-dimensional joint
probability distributions. The basic idea is to model dependence between two variables byadding an edge between them in the graph. (Technically the graph represents conditionalindependence, but you get the point.)
An alternative approach is to assume that the observed variables are correlated because they
arise from a hidden common “cause”. Model with hidden variables are also known as latent
variable models orLVMs. As we will see in this chapter, such models are harder to ﬁt than
models with no latent variables. However, they can have signiﬁcant advantages, for two mainreasons. First, LVMs often have fewer parameters than models that directly represent correlationin the visible space. This is illustrated in Figure 11.1. If all nodes (including H) are binary and allCPDs are tabular, the model on the left has 17 free parameters, whereas the model on the righthas 59 free parameters.
Second, the hidden variables in an LVM can serve as a bottleneck, which computes a
compressed representation of the data. This forms the basis of unsupervised learning, as wewill see. Figure 11.2 illustrates some generic LVM structures that can be used for this purpose.In general there are Llatent variables, z
i1,...,z IL, andDvisible variables, xi1,...,x iD,
where usually D/greatermuchL.I fw eh a v e L>1, there are many latent factors contributing to each
observation, so we have a many-to-many mapping. If L=1, we we only have a single latent
variable; in this case, ziis usually discrete, and we have a one-to-many mapping. We can
also have a many-to-one mapping, representing different competing factors or causes for eachobserved variable; such models form the basis of probabilistic matrix factorization, discussedin Section 27.6.2. Finally, we can have a one-to-one mapping, which can be represented asz
i→xi. By allowing ziand/orxito be vector-valued, this representation can subsume all the
others. Depending on the form of the likelihood p(xi|zi)and the prior p(zi), we can generate
a variety of different models, as summarized in Table 11.1.
11.2 Mixture models
The simplest form of LVM is when zi∈{1,...,K}, representing a discrete latent state. We will
use a discrete prior for this, p(zi)=C a t (π). For the likelihood, we use p(xi|zi=k)=pk(xi),
338 Chapter 11. Mixture models and the EM algorithm
+
SDUDPHWHUV SDUDPHWHUV
Figure 11.1 A DGM with and without hidden variables. The leaves represent medical symptoms. The
roots represent primary causes, such as smoking, diet and exercise. The hidden variable can represent
mediating factors, such as heart disease, which might not be directly visible.
xi1... xiDzi1...ziL
(a)xi1... xiDzi
(b)
xizi1...ziL
(c)xizi
(d)
Figure 11.2 A latent variable model represented as a DGM. (a) Many-to-many. (b) One-to-many. (c)
Many-to-one. (d) One-to-one.
wherepkis thek’thbase distribution for the observations; this can be of any type. The overall
model is known as a mixture model, since we are mixing together the Kbase distributions as
follows:
p(xi|θ)=K/summationdisplay
k=1πkpk(xi|θ) (11.1)
This is a convex combination of thepk’s, since we are taking a weighted sum, where the
mixing weights πksatisfy0≤πk≤1and/summationtextK
k=1πk=1. We give some examples below.
11.2. Mixture models 339
p(xi|zi) p(zi) Name Section
MVN Discrete Mixture of Gaussians 11.2.1
Prod. Discrete Discrete Mixture of multinomials 11.2.2
Prod. Gaussian Prod. Gaussian Factor analysis/ probabilistic PCA 12.1.5
Prod. Gaussian Prod. Laplace Probabilistic ICA/ sparse coding 12.6
Prod. Discrete Prod. Gaussian Multinomial PCA 27.2.3
Prod. Discrete Dirichlet Latent Dirichlet allocation 27.3
Prod. Noisy-OR Prod. Bernoulli BN20/ QMR 10.2.3
Prod. Bernoulli Prod. Bernoulli Sigmoid belief net 27.7
Table 11.1 Summary of some popular directed latent variable models. Here “Prod” means product, so
“Prod. Discrete” in the likelihood means a factored distribution of the form/producttext
jCat(xij|zi), and “Prod.
Gaussian”meansafactoreddistributionoftheform/producttext
jN(xij|zi). “PCA”standsfor“principalcomponents
analysis”. “ICA” stands for “indepedendent components analysis”.
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.90.20.30.40.50.60.70.8
(a)
 (b)
Figure 11.3 A mixture of 3 Gaussians in 2d. (a) We show the contours of constant probability for each
component in the mixture. (b) A surface plot of the overall density. Based on Figure 2.23 of (Bishop 2006a).
Figure generated by mixGaussPlotDemo .
11.2.1 Mixtures of Gaussians
The most widely used mixture model is the mixture of Gaussians (MOG), also called a Gaussian
mixture model orGMM. In this model, each base distribution in the mixture is a multivariate
Gaussian with mean μkand covariance matrix Σk. Thus the model has the form
p(xi|θ)=K/summationdisplay
k=1πkN(xi|μk,Σk) (11.2)
Figure 11.3 shows a mixture of 3 Gaussians in 2D. Each mixture component is represented by a
different set of eliptical contours. Given a sufficiently large number of mixture components, a
GMM can be used to approximate any density deﬁned on RD.
340 Chapter 11. Mixture models and the EM algorithm
11.2.2 Mixture of multinoullis
We can use mixture models to deﬁne density models on many kinds of data. For example,
suppose our data consist of D-dimensional bit vectors. In this case, an appropriate class-
conditional density is a product of Bernoullis:
p(xi|zi=k,θ)=D/productdisplay
j=1Ber(xij|μjk)=D/productdisplay
j=1μxij
jk(1−μjk)1−xij(11.3)
whereμjkis the probability that bit jturns on in cluster k.
The latent variables do not have to any meaning, we might simply introduce latent variables
in order to make the model more powerful. For example, one can show (Exercise 11.8) that themean and covariance of the mixture distribution are given by
E[x]=/summationdisplay
kπkμk (11.4)
cov[x]=/summationdisplay
kπk[Σk+μkμT
k]−E[x]E[x]T(11.5)
whereΣk=d i a g (μjk(1−μjk)). So although the component distributions are factorized,
the joint distribution is not. Thus the mixture distribution can capture correlations between
variables, unlike a single product-of-Bernoullis model.
11.2.3 Using mixture models for clustering
There are two main applications of mixture models. The ﬁrst is to use them as a black-box
density model, p(xi). This can be useful for a variety of tasks, such as data compression, outlier
detection, and creating generative classiﬁers, where we model each class-conditional densityp(x|y=c)by a mixture distribution (see Section 14.7.3).
The second, and more common, application of mixture models is to use them for clustering.
We discuss this topic in detail in Chapter 25, but the basic idea is simple. We ﬁrst ﬁt the mixturemodel, and then compute p(z
i=k|xi,θ), which represents the posterior probability that point
ibelongs to cluster k. This is known as the responsibility of cluster kfor point i, and can be
computed using Bayes rule as follows:
rik/definesp(zi=k|xi,θ)=p(zi=k|θ)p(xi|zi=k,θ)/summationtextK
k/prime=1p(zi=k/prime|θ)p(xi|zi=k/prime,θ)(11.6)
This procedure is called soft clustering, and is identical to the computations performed when
using a generative classiﬁer. The difference between the two models only arises at training time:
in the mixture case, we never observe zi, whereas with a generative classiﬁer, we do observe yi
(which plays the role of zi).
We can represent the amount of uncertainty in the cluster assignment by using 1−maxkrik.
Assuming this is small, it may be reasonable to compute a hard clustering using the MAP
estimate, given by
z∗
i=a r gm a x
krik=a r gm a x
klogp(xi|zi=k,θ)+logp(zi=k|θ) (11.7)
11.2. Mixture models 341
0 9.5 11.5 13.5 15.5 18.5 20.5−5−4−3−2−1012345
timegenesyeast microarray data
(a)K−Means centroids
(b)
Figure 11.4 (a) Some yeast gene expression data plotted as a time series. (c) Visualizing the 16 cluster
centers produced by K-means. Figure generated by kmeansYeastDemo .
0.12
 0.14
 0.12
 0.06
 0.13
0.07
 0.05
 0.15
 0.07
 0.09
Figure 11.5 We ﬁt a mixture of 10 Bernoullis to the binarized MNIST digit data. We show the MLE for the
corresponding cluster means, μk. The numbers on top of each image represent the mixing weights ˆπk.
No labels were used when training the model. Figure generated by mixBerMnistEM .
Hard clustering using a GMM is illustrated in Figure 1.8, where we cluster some data rep-
resenting the height and weight of people. The colors represent the hard assignments. Note
that the identity of the labels (colors) used is immaterial; we are free to rename all the clusters,
without affecting the partitioning of the data; this is called label switching .
Another example is shown in Figure 11.4. Here the data vectors xi∈R7represent the
expression levels of different genes at 7 different time points. We clustered them using a GMM.
We see that there are several kinds of genes, such as those whose expression level goes up
monotonically over time (in response to a given stimulus), those whose expression level goes
down monotonically, and those with more complex response patterns. We have clustered the
series into K=1 6groups. (See Section 11.5 for details on how to choose K.) For example, we
can represent each cluster by a prototype orcentroid. This is shown in Figure 11.4(b).
As an example of clustering binary data, consider a binarized version of the MNIST handwrit-
ten digit dataset (see Figure 1.5(a)), where we ignore the class labels. We can ﬁt a mixture of
342 Chapter 11. Mixture models and the EM algorithm
Bernoullis to this, using K=1 0, and then visualize the resulting centroids, ˆμk, as shown in
Figure 11.5. We see that the method correctly discovered some of the digit classes, but overall the
results aren’t great: it has created multiple clusters for some digits, and no clusters for others.There are several possible reasons for these “errors”:
• The model is very simple and does not capture the relevant visual characteristics of a digit.
For example, each pixel is treated independently, and there is no notion of shape or a stroke.
• Although we think there should be 10 clusters, some of the digits actually exhibit a fair degree
of visual variety. For example, there are two ways of writing 7’s (with and without the cross
bar). Figure 1.5(a) illustrates some of the range in writing styles. Thus we need K/greatermuch10
clusters to adequately model this data. However, if we set Kto be large, there is nothing
in the model or algorithm preventing the extra clusters from being used to create multipleversions of the same digit, and indeed this is what happens. We can use model selectionto prevent too many clusters from being chosen but what looks visually appealing and whatmakes a good density estimator may be quite different.
• The likelihood function is not convex, so we may be stuck in a local optimum, as we explain
in Section 11.3.2.
This example is typical of mixture modeling, and goes to show one must be very cautious
trying to “interpret” any clusters that are discovered by the method. (Adding a little bit ofsupervision, or using informative priors, can help a lot.)
11.2.4 Mixtures of experts
Section 14.7.3 described how to use mixture models in the context of generative classiﬁers. Wecan also use them to create discriminative models for classiﬁcation and regression. For example,consider the data in Figure 11.6(a). It seems like a good model would be three different linearregression functions, each applying to a different part of the input space. We can model this byallowing the mixing weights and the mixture densities to be input-dependent:
p(y
i|xi,zi=k,θ)=N (yi|wT
kxi,σ2
k) (11.8)
p(zi|xi,θ)=C a t ( zi|S(VTxi)) (11.9)
See Figure 11.7(a) for the DGM.
This model is called a mixture of experts or MoE (Jordan and Jacobs 1994). The idea is that
each submodel is considered to be an “expert” in a certain region of input space. The functionp(z
i=k|xi,θ)is called a gating function, and decides which expert to use, depending on
the input values. For example, Figure 11.6(b) shows how the three experts have “carved up” the1d input space, Figure 11.6(a) shows the predictions of each expert individually (in this case, theexperts are just linear regression models), and Figure 11.6(c) shows the overall prediction of themodel, obtained using
p(y
i|xi,θ)=/summationdisplay
kp(zi=k|xi,θ)p(yi|xi,zi=k,θ) (11.10)
We discuss how to ﬁt this model in Section 11.4.3.
11.2. Mixture models 343
−1 −0.5 0 0.5 1−1.5−1−0.500.511.5expert predictions, fixed mixing weights=0
(a)−1 −0.5 0 0.5 100.10.20.30.40.50.60.70.80.91gating functions, fixed mixing weights=0
(b)
−1.5 −1 −0.5 0 0.5 1−2−1.5−1−0.500.511.5predicted mean and var, fixed mixing weights=0
(c)
Figure 11.6 (a) Some data ﬁt with three separate regression lines. (b) Gating functions for three different
“experts”. (c) The conditionally weighted average of the three expert predictions. Figure generated by
mixexpDemo .
yizixi
(a)yiz1
i
z2
ixi
(b)
Figure 11.7 (a) A mixture of experts. (b) A hierarchical mixture of experts.
344 Chapter 11. Mixture models and the EM algorithm
0 0.2 0.4 0.6 0.8 1−0.200.20.40.60.811.2forwards problem
(a)−0.2 0 0.2 0.4 0.6 0.8 1 1.2−0.200.20.40.60.811.2expert predictions
(b)
−0.2 0 0.2 0.4 0.6 0.8 1 1.200.10.20.30.40.50.60.70.80.91prediction
  
mean
mode
(c)
Figure 11.8 (a) Some data from a simple forwards model. (b) Some data from the inverse model, ﬁt
with a mixture of 3 linear regressions. Training points are color coded by their responsibilities. (c) The
predictive mean (red cross) and mode (black square). Based on Figures 5.20 and 5.21 of (Bishop 2006b).Figure generated by mixexpDemoOneToMany .
It should be clear that we can “plug in” any model for the expert. For example, we can use
neural networks (Chapter 16) to represent both the gating functions and the experts. The result
is known as a mixture density network. Such models are slower to train, but can be more
ﬂexible than mixtures of experts. See (Bishop 1994) for details.
It is also possible to make each expert be itself a mixture of experts. This gives rise to a
model known as the hierarchical mixture of experts. See Figure 11.7(b) for the DGM, and
Section 16.2.6 for further details.
11.2.4.1 Application to inverse problems
Mixtures of experts are useful in solving inverse problems. These are problems where we have
to invert a many-to-one mapping. A typical example is in robotics, where the location of theend effector (hand) yis uniquely determined by the joint angles of the motors, x. However,
for any given location y, there are many settings of the joints xthat can produce it. Thus the
inverse mapping x=f
−1(y)is not unique. Another example is kinematic tracking of people
from video (Bo et al. 2008), where the mapping from image appearance to pose is not unique,due to self occlusion, etc.
11.3. Parameter estimation for mixture models 345
θz
z1 zN
···
x1 xN
θx
(a)θz
Nzi
xi
θx
(b)
Figure 11.9 A LVM represented as a DGM. Left: Model is unrolled for Nexamples. Right: same model
using plate notation.
A simpler example, for illustration purposes, is shown in Figure 11.8(a). We see that this
deﬁnes a function, y=f(x), since for every value xalong the horizontal axis, there is a
unique response y. This is sometimes called the forwards model. Now consider the problem
of computing x=f−1(y). The corresponding inverse model is shown in Figure 11.8(b); this is
obtained by simply interchanging the xandyaxes. Now we see that for some values along
the horizontal axis, there are multiple possible outputs, so the inverse is not uniquely deﬁned.
For example, if y=0.8, thenxcould be 0.2 or 0.8. Consequently, the predictive distribution,
p(x|y,θ)is multimodal.
We can ﬁt a mixture of linear experts to this data. Figure 11.8(b) shows the prediction of each
expert, and Figure 11.8(c) shows (a plugin approximation to) the posterior predictive mode andmean. Note that the posterior mean does not yield good predictions. In fact, any model whichis trained to minimize mean squared error — even if the model is a ﬂexible nonlinear model,such as neural network — will work poorly on inverse problems such as this. However, theposterior mode, where the mode is input dependent, provides a reasonable approximation.
11.3 Parameter estimation for mixture models
We have seen how to compute the posterior over the hidden variables given the observedvariables, assuming the parameters are known. In this section, we discuss how to learn theparameters.
In Section 10.4.2, we showed that when we have complete data and a factored prior, the
posterior over the parameters also factorizes, making computation very simple. Unfortunatelythis is no longer true if we have hidden variables and/or missing data. The reason is apparentfrom looking at Figure 11.9. If the z
iwere observed, then by d-separation, we see that θz⊥θx|D,
and hence the posterior will factorize. But since, in an LVM, the ziare hidden, the parameters
are no longer independent, and the posterior does not factorize, making it much harder to
346 Chapter 11. Mixture models and the EM algorithm
−25 −20 −15 −10 −5 0 5 10 15 20 2505101520253035
(a)μ1μ2
−15.5 −10.5 −5.5 −0.5 4.5 9.5 14.5 19.5−15.5−10.5−5.5−0.54.59.514.519.5
(b)
Figure 11.10 Left:N= 200data points sampled from a mixture of 2 Gaussians in 1d, with πk=0.5,
σk=5,μ1=−10andμ2=1 0. Right: Likelihood surface p(D|μ1,μ2), with all other parameters set
to their true values. We see the two symmetric modes, reﬂecting the unidentiﬁability of the parameters.
Figure generated by mixGaussLikSurfaceDemo .
compute. This also complicates the computation of MAP and ML estimates, as we discus below.
11.3.1 Unidentiﬁability
The main problem with computing p(θ|D)for an LVM is that the posterior may have multiple
modes. To see why, consider a GMM. If the ziwere all observed, we would have a unimodal
posterior for the parameters:
p(θ|D) = Dir(π |D)K/productdisplay
k=1NIW(μk,Σk|D) (11.11)
Consequently we can easily ﬁnd the globally optimal MAP estimate (and hence globally optimal
MLE).
But now suppose the zi’s are hidden. In this case, for each of the possible ways of “ﬁlling in”
thezi’s, we get a different unimodal likelihood. Thus when we marginalize out over the zi’s, we
get a multi-modal posterior for p(θ|D).1These modes correspond to different labelings of the
clusters. This is illustrated in Figure 11.10(b), where we plot the likelihood function, p(D|μ1,μ2),
for a 2D GMM with K=2for the data is shown in Figure 11.10(a). We see two peaks, one
corresponding to the case where μ1=−10,μ2=1 0, and the other to the case where μ1=1 0,
μ2=−10. We say the parameters are not identiﬁable, since there is not a unique MLE.
Therefore there cannot be a unique MAP estimate (assuming the prior does not rule out certainlabelings), and hence the posterior must be multimodal. The question of how many modes there
1. Do not confuse multimodality of the parameter posterior, p(θ|D), with the multimodality deﬁned by the model,
p(x|θ). In the latter case, if we have Kclusters, we would expect to only get Kpeaks, although it is theoretically
possible to get more than K, at least if D>1(Carreira-Perpinan and Williams 2003).
11.3. Parameter estimation for mixture models 347
are in the parameter posterior is hard to answer. There are K!possible labelings, but some of
the peaks might get merged. Nevertheless, there can be an exponential number, since ﬁnding
the optimal MLE for a GMM is NP-hard (Aloise et al. 2009; Drineas et al. 2004).
Unidentiﬁability can cause a problem for Bayesian inference. For example, suppose we
draw some samples from the posterior, θ(s)∼p(θ|D), and then average them, to try to
approximate the posterior mean, θ=1
S/summationtextS
s=1θ(s). (This kind of Monte Carlo approach is
explained in more detail in Chapter 24.) If the samples come from different modes, the average
will be meaningless. Note, however, that it is reasonable to average the posterior predictive
distributions, p(x)≈1
S/summationtextS
s=1p(x|θ(s)), since the likelihood function is invariant to which
mode the parameters came from.
A variety of solutions have been proposed to the unidentiﬁability problem. These solutions
depend on the details of the model and the inference algorithm that is used. For example, see
(Stephens 2000) for an approach to handling unidentiﬁability in mixture models using MCMC.
The approach we will adopt in this chapter is much simpler: we just compute a single
local mode, i.e., we perform approximate MAP estimation. (We say “approximate” since ﬁndingthe globally optimal MLE, and hence MAP estimate, is NP-hard, at least for mixture models(Aloise et al. 2009).) This is by far the most common approach, because of its simplicity. Itis also a reasonable approximation, at least if the sample size is sufficiently large. To see why,consider Figure 11.9(a). We see that there are Nlatent variables, each of which gets to “see”
one data point each. However, there are only two latent parameters, each of which gets toseeNdata points. So the posterior uncertainty about the parameters is typically much less
than the posterior uncertainty about the latent variables. This justiﬁes the common strategyof computing p(z
i|xi,ˆθ), but not bothering to compute p(θ|D). In Section 5.6, we will study
hierarchical Bayesian models, which essentially put structure on top of the parameters. In suchmodels, it is important to model p(θ|D), so that the parameters can send information between
themselves. If we used a point estimate, this would not be possible.
11.3.2 Computing a MAP estimate is non-convex
In the previous sections, we have argued, rather heuristically, that the likelihood function hasmultiple modes, and hence that ﬁnding an MAP or ML estimate will be hard. In this section, weshow this result by more algebraic means, which sheds some additional insight into the problem.Our presentation is based in part on (Rennie 2004).
Consider the log-likelihood for an LVM:
logp(D|θ)=/summationdisplay
ilog/bracketleftBigg/summationdisplay
zip(xi,zi|θ)/bracketrightBigg
(11.12)
Unfortunately, this objective is hard to maximize. since we cannot push the log inside the sum.This precludes certain algebraic simplications, but does not prove the problem is hard.
Now suppose the joint probability distribution p(z
i,xi|θ)is in the exponential family, which
means it can be written as follows:
p(x,z|θ)=1
Z(θ)exp[θTφ(x,z)] (11.13)
348 Chapter 11. Mixture models and the EM algorithm
whereφ(x,z)are the sufficient statistics, and Z(θ)is the normalization constant (see Sec-
tion 9.2 for more details). It can be shown (Exercise 9.2) that the MVN is in the exponential
family, as are nearly all of the distributions we have encountered so far, including Dirichlet,multinomial, Gamma, Wishart, etc. (The Student distribution is a notable exception.) Further-more, mixtures of exponential families are also in the exponential family, providing the mixingindicator variables are observed (Exercise 11.11).
With this assumption, the complete data log likelihood can be written as follows:
/lscript
c(θ)=/summationdisplay
ilogp(xi,zi|θ)=θT(/summationdisplay
iφ(xi,zi))−NZ(θ) (11.14)
The ﬁrst term is clearly linear in θ. One can show that Z(θ)is a convex function (Boyd and
Vandenberghe 2004), so the overall objective is concave (due to the minus sign), and hence hasa unique maximum.
Now consider what happens when we have missing data. The observed data log likelihood
is given by
/lscript(θ)=/summationdisplay
ilog/summationdisplay
zip(xi,zi|θ)=/summationdisplay
ilog/bracketleftBigg/summationdisplay
zieθTφ(zi,xi)/bracketrightBigg
−NlogZ(θ) (11.15)
One can show that the log-sum-exp function is convex (Boyd and Vandenberghe 2004), and weknow that Z(θ)is convex. However, the difference of two convex functions is not, in general,
convex. So the objective is neither convex nor concave, and has local optima.
The disadvantage of non-convex functions is that it is usually hard to ﬁnd their global op-
timum. Most optimization algorithms will only ﬁnd a local optimum; which one they ﬁnddepends on where they start. There are some algorithms, such as simulated annealing (Sec-tion 24.6.1) or genetic algorithms, that claim to always ﬁnd the global optimum, but this is onlyunder unrealistic assumptions (e.g., if they are allowed to be cooled “inﬁnitely slowly”, or al-lowed to run “inﬁnitely long”). In practice, we will run a local optimizer, perhaps using multiple
random restarts to increase out chance of ﬁnding a “good” local optimum. Of course, careful
initialization can help a lot, too. We give examples of how to do this on a case-by-case basis.
Note that a convex method for ﬁtting mixtures of Gaussians has been proposed. The idea
is to assign one cluster per data point, and select from amongst them, using a convex /lscript
1-type
penalty, rather than trying to optimize the locations of the cluster centers. See (Lashkari andGolland 2007) for details. This is essentially an unsupervised version of the approach used insparse kernel logistic regression, which we will discuss in Section 14.3.2. Note, however, that the/lscript
1penalty, although convex, is not necessarily a good way to promote sparsity, as discussed in
Chapter 13. In fact, as we will see in that Chapter, some of the best sparsity-promoting methodsuse non-convex penalties, and use EM to optimie them! The moral of the story is: do not beafraid of non-convexity.
11.4 The EM algorithm
For many models in machine learning and statistics, computing the ML or MAP parameterestimate is easy provided we observe all the values of all the relevant random variables, i.e., if
11.4. The EM algorithm 349
Model Section
Mix. Gaussians 11.4.2
Mix. experts 11.4.3
Factor analysis 12.1.5
Student T 11.4.5
Probit regression 11.4.6
DGM with hidden variables 11.4.4
MVN with missing data 11.6.1
HMMs 17.5.2
Shrinkage estimates of Gaussian means Exercise 11.13
Table 11.2 Some models discussed in this book for which EM can be easily applied to ﬁnd the ML/ MAP
parameter estimate.
we have complete data. However, if we have missing data and/or latent variables, then computing
the ML/MAP estimate becomes hard.
One approach is to use a generic gradient-based optimizer to ﬁnd a local minimum of the
negative log likelihood orNLL, given by
NLL(θ)=−/defines1
Nlogp(D|θ) (11.16)
However, we often have to enforce constraints, such as the fact that covariance matrices must bepositive deﬁnite, mixing weights must sum to one, etc., which can be tricky (see Exercise 11.5). Insuchcases, itis oftenmuchsimpler (butnotalways faster)to useanalgorithm called expectation
maximization,o r EMfor short (Dempster et al. 1977; Meng and van Dyk 1997; McLachlan and
Krishnan 1997). This is a simple iterative algorithm, often with closed-form updates at each step.Furthermore, the algorithm automatically enforce the required constraints.
EM exploits the fact that if the data were fully observed, then the ML/ MAP estimate would be
easy to compute. In particular, EM is an iterative algorithm which alternates between inferringthe missing values given the parameters (E step), and then optimizing the parameters given the“ﬁlled in” data (M step). We give the details below, followed by several examples. We end witha more theoretical discussion, where we put the algorithm in a larger context. See Table 11.2 fora summary of the applications of EM in this book.
11.4.1 Basic idea
Letxibe the visible or observed variables in case i, and let zibe the hidden or missing
variables. The goal is to maximize the log likelihood of the observed data:
/lscript(θ)=N/summationdisplay
i=1logp(xi|θ)=N/summationdisplay
i=1log/bracketleftBigg/summationdisplay
zip(xi,zi|θ)/bracketrightBigg
(11.17)
Unfortunately this is hard to optimize, since the log cannot be pushed inside the sum.
350 Chapter 11. Mixture models and the EM algorithm
EM gets around this problem as follows. Deﬁne the complete data log likelihood to be
/lscriptc(θ)/definesN/summationdisplay
i=1logp(xi,zi|θ) (11.18)
This cannot be computed, since ziis unknown. So let us deﬁne the expected complete data
log likelihood as follows:
Q(θ,θt−1)=E/bracketleftbig
/lscriptc(θ)/vextendsingle/vextendsingleD,θt−1/bracketrightbig
(11.19)
wheretis the current iteration number. Qis called the auxiliary function. The expectation
is taken wrt the old parameters, θt−1, and the observed data D. The goal of the Es t e pis to
compute Q(θ,θt−1), or rather, the terms inside of it which the MLE depends on; these are
known as the expected sufficient statistics or ESS. In the Ms t e p, we optimize the Q function
wrtθ:
θt=a r gm a x
θQ(θ,θt−1) (11.20)
To perform MAP estimation, we modify the M step as follows:
θt=a r g m a x
θQ(θ,θt−1)+logp(θ) (11.21)
The E step remains unchanged.
In Section 11.4.7 we show that the EM algorithm monotonically increases the log likelihood of
the observed data (plus the log prior, if doing MAP estimation), or it stays the same. So if the
objective ever goes down, there must be a bug in our math or our code. (This is a surprisinglyuseful debugging tool!)
Below we explain how to perform the E and M steps for several simple models, that should
make things clearer.
11.4.2 EM for GMMs
In this section, we discuss how to ﬁt a mixture of Gaussians using EM. Fitting other kinds ofmixture models requires a straightforward modiﬁcation — see Exercise 11.3. We assume thenumber of mixture components, K, is known (see Section 11.5 for discussion of this point).
11.4. The EM algorithm 351
11.4.2.1 Auxiliary function
The expected complete data log likelihood is given by
Q(θ,θ(t−1))/definesE/bracketleftBigg/summationdisplay
ilogp(xi,zi|θ)/bracketrightBigg
(11.22)
=/summationdisplay
iE/bracketleftBigg
log/bracketleftBiggK/productdisplay
k=1(πkp(xi|θk))I(zi=k)/bracketrightBigg/bracketrightBigg
(11.23)
=/summationdisplay
i/summationdisplay
kE[I(zi=k)]log[π kp(xi|θk)] (11.24)
=/summationdisplay
i/summationdisplay
kp(zi=k|xi,θt−1)log[π kp(xi|θk)] (11.25)
=/summationdisplay
i/summationdisplay
kriklogπk+/summationdisplay
i/summationdisplay
kriklogp(xi|θk) (11.26)
whererik/definesp(zi=k|xi,θ(t−1))is theresponsibility that cluster ktakes for data point i.
This is computed in the E step, described below.
11.4.2.2 E step
The E step has the following simple form, which is the same for any mixture model:
rik=πkp(xi|θ(t−1)
k)
/summationtext
k/primeπk/primep(xi|θ(t−1)
k/prime)(11.27)
11.4.2.3 M step
In the M step, we optimize Qwrtπand theθk.F o rπ, we obviously have
πk=1
N/summationdisplay
irik=rk
N(11.28)
whererk/defines/summationtext
irikis the weighted number of points assigned to cluster k.
To derive the M step for the μkandΣkterms, we look at the parts of Qthat depend on μk
andΣk. We see that the result is
/lscript(μk,Σk)=/summationdisplay
k/summationdisplay
iriklogp(xi|θk) (11.29)
=−1
2/summationdisplay
irik/bracketleftbig
log|Σk|+(xi−μk)TΣ−1
k(xi−μk)/bracketrightbig
(11.30)
This is just a weighted version of the standard problem of computing the MLEs of an MVN (see
Section 4.1.3). One can show (Exercise 11.2) that the new parameter estimates are given by
μk=/summationtext
irikxi
rk(11.31)
Σk=/summationtext
irik(xi−μk)(xi−μk)T
rk=/summationtext
irikxixT
i
rk−μkμT
k (11.32)
352 Chapter 11. Mixture models and the EM algorithm
These equations make intuitive sense: the mean of cluster kis just the weighted average of all
points assigned to cluster k, and the covariance is proportional to the weighted empirical scatter
matrix.
After computing the new estimates, we set θt=(πk,μk,Σk)fork=1:K, and go to the
next E step.
11.4.2.4 Example
An example of the algorithm in action is shown in Figure 11.11. We start with μ1=(−1,1),
Σ1=I,μ2=( 1,−1),Σ2=I. We color code points such that blue points come from cluster
1 and red points from cluster 2. More precisely, we set the color to
color(i)=ri1blue+ri2red (11.33)
so ambiguous points appear purple. After 20 iterations, the algorithm has converged on a good
clustering. (The data was standardized, by removing the mean and dividing by the standarddeviation, before processing. This often helps convergence.)
11.4.2.5 K-means algorithm
There is a popular variant of the EM algorithm for GMMs known as the K-means algorithm,
which we now discuss. Consider a GMM in which we make the following assumptions: Σ
k=
σ2IDis ﬁxed, and πk=1/Kis ﬁxed, so only the cluster centers, μk∈RD,h a v et ob e
estimated. Now consider the following delta-function approximation to the posterior computedduring the E step:
p(z
i=k|xi,θ)≈I(k=z∗
i) (11.34)
wherezi∗=a r g m a xkp(zi=k|xi,θ). This is sometimes called hard EM, since we are making
a hard assignment of points to clusters. Since we assumed an equal spherical covariance matrixfor each cluster, the most probable cluster for x
ican be computed by ﬁnding the nearest
prototype:
z∗
i=a r gm i n
k||xi−μk||2
2 (11.35)
Hence in each E step, we must ﬁnd the Euclidean distance between Ndata points and Kcluster
centers, which takes O(NKD)time. However, this can be sped up using various techniques,
such as applying the triangle inequality to avoid some redundant computations (Elkan 2003).
Given the hard cluster assignments, the M step updates each cluster center by computing themean of all points assigned to it:
μ
k=1
Nk/summationdisplay
i:zi=kxi (11.36)
See Algorithm 5 for the pseudo-code.
11.4. The EM algorithm 353
−2 0 2−202
(a)
 (b)
(c)
 (d)
(e)
 (f)
Figure 11.11 Illustration of the EM for a GMM applied to the Old Faithful data. (a) Initial (random) values
of the parameters. (b) Posterior responsibility of each point computed in the ﬁrst E step. The degree of
redness indicates the degree to which the point belongs to the red cluster, and similarly for blue; this
purple points have a roughly uniform posterior over clusters. (c) We show the updated parameters after
the ﬁrst M step. (d) After 3 iterations. (e) After 5 iterations. (f) After 16 iterations. Based on (Bishop 2006a)
Figure 9.8. Figure generated by mixGaussDemoFaithful .
354 Chapter 11. Mixture models and the EM algorithm
Algorithm 11.1: K-means algorithm
1initialize mk;
2repeat
3Assign each data point to its closest cluster center: zi=a r gm i n k||xi−μk||2
2;
4Update each cluster center by computing the mean of all points assigned to it:
μk=1
Nk/summationtext
i:zi=kxi;
5until converged ;
K=2
50 100 150 200 250 30020
40
60
80
100
120
140
160
180
200
(a)
 (b)
Figure 11.12 An image compressed using vector quantization with a codebook of size K. (a)K=2. (b)
K=4. Figure generated by vqDemo.
11.4.2.6 Vector quantization
Since K-means is not a proper EM algorithm, it is not maximizing likelihood. Instead, it can be
interpreted as a greedy algorithm for approximately minimizing a loss function related to data
compression, as we now explain.
Suppose we want to perform lossy compression of some real-valued vectors, xi∈RD.Av e r y
simple approach to this is to use vector quantization orVQ. The basic idea is to replace each
real-valued vector xi∈RDwith a discrete symbol zi∈{1,...,K}, which is an index into a
codebook ofKprototypes, μk∈RD. Each data vector is encoded by using the index of the
most similar prototype, where similarity is measured in terms of Euclidean distance:
encode(xi) = argmin
k||xi−μk||2(11.37)
We can deﬁne a cost function that measures the quality of a codebook by computing the
reconstruction error ordistortion it induces:
J(μ,z|K,X)/defines1
NN/summationdisplay
i=1||xi−decode(encode(xi))||2=1
NN/summationdisplay
i=1||xi−μzi||2(11.38)
where decode (k)=μk. The K-means algorithm can be thought of as a simple iterative scheme
for minimizing this objective.
Of course, we can achieve zero distortion if we assign one prototype to every data vector,
but that takes O(NDC)space, where Nis the number of real-valued data vectors, each of
11.4. The EM algorithm 355
lengthD, andCis the number of bits needed to represent a real-valued scalar (the quantization
accuracy). However, in many data sets, we see similar vectors repeatedly, so rather than storing
them many times, we can store them once and then create pointers to them. Hence we canreduce the space requirement to O(Nlog
2K+KDC): theO(Nlog2K)term arises because
each of the Ndata vectors needs to specify which of the Kcodewords it is using (the pointers);
and theO(KDC)term arises because we have to store each codebook entry, each of which is
aD-dimensional vector. Typically the ﬁrst term dominates the second, so we can approximate
therateof the encoding scheme (number of bits needed per object) as O(log2K), which is
typically much less than O(DC).
One application of VQ is to image compression. Consider the N= 200×320 = 64 ,000pixel
image in Figure 11.12; this is gray-scale, so D=1. If we use one byte to represent each pixel
(a gray-scale intensity of 0 to 255), then C=8, so we need NC= 512,000bits to represent
the image. For the compressed image, we need Nlog2K+KCbits. ForK=4, this is about
128kb, a factor of 4 compression. For K=8, this is about 192kb, a factor of 2.6 compression,
at negligible perceptual loss (see Figure 11.12(b)). Greater compression could be achieved if wemodelled spatial correlation between the pixels, e.g., if we encoded 5x5 blocks (as used by JPEG).This is because the residual errors (differences from the model’s predictions) would be smaller,and would take fewer bits to encode.
11.4.2.7 Initialization and avoiding local minima
Both K-means and EM need to be initialized. It is common to pick Kdata points at random, and
to make these be the initial cluster centers. Or we can pick the centers sequentially so as to tryto “cover” the data. That is, we pick the initial point uniformly at random. Then each subsequentpoint is picked from the remaining points with probability proportional to its squared distanceto the points’s closest cluster center. This is known as farthest point clustering (Gonzales 1985),
ork-means++ (Arthur and Vassilvitskii 2007; Bahmani et al. 2012). Surprisingly, this simple trick
can be shown to guarantee that the distortion is never more than O(logK)worse than optimal
(Arthur and Vassilvitskii 2007).
An heuristic that is commonly used in the speech recognition community is to incrementally
“grow” GMMs: we initially give each cluster a score based on its mixture weight; after eachround of training, we consider splitting the cluster with the highest score into two, with the newcentroids being random perturbations of the original centroid, and the new scores being half ofthe old scores. If a new cluster has too small a score, or too narrow a variance, it is removed.We continue in this way until the desired number of clusters is reached. See (Figueiredo andJain 2002) for a similar incremental approach.
11.4.2.8 MAP estimation
As usual, the MLE may overﬁt. The overﬁtting problem is particularly severe in the case ofGMMs. To understand the problem, suppose for simplicity that Σ
k=σ2
kI, and that K=2.I t
is possible to get an inﬁnite likelihood by assigning one of the centers, say μ2, to a single data
point, say x1, since then the 1st term makes the following contribution to the likelihood:
N(x1|μ2,σ2
2I)=1/radicalbig
2πσ2
2e0(11.39)
356 Chapter 11. Mixture models and the EM algorithm
xp(x)
(a)10 20 30 40 50 60 70 80 90 10000.10.20.30.40.50.60.70.80.91
dimensionalityfraction of times EM for GMM fails
  
MLE
MAP
(b)
Figure 11.13 (a) Illustration of how singularities can arise in the likelihood function of GMMs. Based on
(Bishop 2006a) Figure 9.7. Figure generated by mixGaussSingularity . (b) Illustration of the beneﬁt of
MAP estimation vs ML estimation when ﬁtting a Gaussian mixture model. We plot the fraction of times
(out of 5 random trials) each method encounters numerical problems vs the dimensionality of the problem,forN=1 0 0samples. Solid red (upper curve): MLE. Dotted black (lower curve): MAP. Figure generated by
mixGaussMLvsMAP .
Hence we can drive this term to inﬁnity by letting σ2→0, as shown in Figure 11.13(a). We will
call this the “collapsing variance problem”.
An easy solution to this is to perform MAP estimation. The new auxiliary function is the
expected complete data log-likelihood plus the log prior:
Q/prime(θ,θold)=/bracketleftBigg/summationdisplay
i/summationdisplay
kriklogπik+/summationdisplay
i/summationdisplay
kriklogp(xi|θk)/bracketrightBigg
+logp(π)+/summationdisplay
klogp(θk)(11.40)
Note that the E step remains unchanged, but the M step needs to be modiﬁed, as we now
explain.
For the prior on the mixture weights, it is natural to use a Dirichlet prior, π∼Dir(α), since
this is conjugate to the categorical distribution. The MAP estimate is given by
πk=rk+αk−1
N+/summationtext
kαk−K(11.41)
If we use a uniform prior, αk=1, this reduces to Equation 11.28.
The prior on the parameters of the class conditional densities, p(θk), depends on the form of
the class conditional densities. We discuss the case of GMMs below, and leave MAP estimationfor mixtures of Bernoullis to Exercise 11.3.
For simplicity, let us consider a conjugate prior of the form
p(μ
k,Σk) = NIW( μk,Σk|m0,κ0,ν0,S0) (11.42)
11.4. The EM algorithm 357
From Section 4.6.3, the MAP estimate is given by
ˆμk=rkxk+κ0m0
rk+κ0(11.43)
(11.44)
xk/defines/summationtext
irikxi
rk(11.45)
ˆΣk=S0+Sk+κ0rk
κ0+rk(xk−m0)(xk−m0)T
ν0+rk+D+2(11.46)
Sk/defines/summationdisplay
irik(xi−xk)(xi−xk)T(11.47)
We now illustrate the beneﬁts of using MAP estimation instead of ML estimation in the
context of GMMs. We apply EM to some synthetic data in Ddimensions, using either ML or
MAP estimation. We count the trial as a “failure” if there are numerical issues involving singular
matrices. For each dimensionality, we conduct 5 random trials. The results are illustrated inFigure 11.13(b) using N= 100. We see that as soon as Dbecomes even moderately large, ML
estimation crashes and burns, whereas MAP estimation never encounters numerical problems.
When using MAP estimation, we need to specify the hyper-parameters. Here we mention
some simple heuristics for setting them (Fraley and Raftery 2007, p163). We can set κ
0=0,
so that the μkare unregularized, since the numerical problems only arise from Σk. In this
case, the MAP estimates simplify to ˆμk=xkandˆΣk=S0+Sk
ν0+rk+D+2, which is not quite so
scary-looking.
Now we discuss how to set S0. One possibility is to use
S0=1
K1/Ddiag(s2
1,...,s2D) (11.48)
wheresj=( 1/N)/summationtextN
i=1(xij−xj)2is the pooled variance for dimension j. (The reason
for the1
K1/Dterm is that the resulting volume of each ellipsoid is then given by |S0|=
1
K|diag(s2
1,...,s2
D)|.) The parameter ν0controls how strongly we believe this prior. The
weakest prior we can use, while still being proper, is to set ν0=D+2, so this is a common
choice.
11.4.3 EM for mixture of experts
We can ﬁt a mixture of experts model using EM in a straightforward manner. The expected
complete data log likelihood is given by
Q(θ,θold)=N/summationdisplay
i=1K/summationdisplay
k=1riklog[πikN(yi|wT
kxi,σ2
k)] (11.49)
πi,k/definesS(VTxi)k (11.50)
rik∝πold
ikN(yi|xT
iwold
k,(σold
k)2) (11.51)
So the E step is the same as in a standard mixture model, except we have to replace πkwith
πi,kwhen computing rik.
358 Chapter 11. Mixture models and the EM algorithm
In the M step, we need to maximize Q(θ,θold)wrtwk,σ2
kandV. For the regression
parameters for model k, the objective has the form
Q(θk,θold)=N/summationdisplay
i=1rik/braceleftbigg
−1
σ2
k(yi−wT
kxi)/bracerightbigg
(11.52)
We recognize this as a weighted least squares problem, which makes intuitive sense: if rikis
small, then data point iwill be downweighted when estimating model k’s parameters. From
Section 8.3.4 we can immediately write down the MLE as
wk=(XTRkX)−1XTRky (11.53)
whereRk=d i a g (r:,k). The MLE for the variance is given by
σ2
k=/summationtextN
i=1rik(yi−wT
kxi)2
/summationtextNi=1rik(11.54)
We replace the estimate of the unconditional mixing weights πwith the estimate of the gating
parameters, V. The objective has the form
/lscript(V)=/summationdisplay
i/summationdisplay
kriklogπi,k (11.55)
We recognize this as equivalent to the log-likelihood for multinomial logistic regression in
Equation 8.34, except we replace the “hard” 1-of-C encoding yiwith the “soft” 1-of-K encoding
ri. Thus we can estimate Vby ﬁtting a logistic regression model to soft target labels.
11.4.4 EM for DGMs with hidden variables
We can generalize the ideas behind EM for mixtures of experts to compute the MLE or MAPestimate for an arbitrary DGM. We could use gradient-based methods (Binder et al. 1997), but itis much simpler to use EM (Lauritzen 1995): in the E step, we just estimate the hidden variables,and in the M step, we will compute the MLE using these ﬁlled-in values. We give the detailsbelow.
For simplicity of presentation, we will assume all CPDs are tabular. Based on Section 10.4.2,
let us write each CPT as follows:
p(x
it|xi,pa(t),θt)=Kpa(t )/productdisplay
c=1Kt/productdisplay
k=1θI(xit=i,xi,pa(t )=c)
tck(11.56)
The log-likelihood of the complete data is given by
logp(D|θ)=V/summationdisplay
t=1Kpa(t )/summationdisplay
c=1Kt/summationdisplay
k=1Ntcklogθtck (11.57)
whereNtck=/summationtextN
i=1I(xit=i,xi,pa(t)=c)are the empirical counts. Hence the expected
complete data log-likelihood has the form
E[logp(D|θ)] =/summationdisplay
t/summationdisplay
c/summationdisplay
kNtcklogθtck (11.58)
11.4. The EM algorithm 359
where
Ntck=N/summationdisplay
i=1E/bracketleftbig
I(xit=i,xi,pa(t)=c)/bracketrightbig
=/summationdisplay
ip(xit=k,xi,pa(t)=c|Di) (11.59)
whereDiare all the visible variables in case i.
The quantity p(xit,xi,pa(t)|Di,θ)is known as a family marginal, and can be computed
using any GM inference algorithm. The Ntjkare the expected sufficient statistics, and constitute
the output of the E step.
Given these ESS, the M step has the simple form
ˆθtck=Ntck/summationtext
k/primeNtjk/prime(11.60)
This can be proved by adding Lagrange multipliers (to enforce the constraint/summationtext
kθtjk=1)
to the expected complete data log likelihood, and then optimizing each parameter vector θtc
separately. We can modify this to perform MAP estimation with a Dirichlet prior by simply
adding pseudo counts to the expected counts.
11.4.5 EM for the Student distribution *
One problem with the Gaussian distribution is that it is sensitive to outliers, since the log-probability only decays quadratically with distance from the center. A more robust alternative isthe Student t distribution, as discussed in Section ??.
Unlike the case of a Gaussian, there is no closed form formula for the MLE of a Student, even
if we have no missing data, so we must resort to iterative optimization methods. The easiestone to use is EM, since it automatically enforces the constraints that νis positive and that Σ
is symmetric positive deﬁnite. In addition, the resulting algorithm turns out to have a simpleintuitive form, as we see below.
At ﬁrst blush, it might not be apparent why EM can be used, since there is no missing data.
The key idea is to introduce an “artiﬁcial” hidden or auxiliary variable in order to simplify thealgorithm. In particular, we will exploit the fact that a Student distribution can be written as aGaussian scale mixture:
T(x
i|μ,Σ,ν)=/integraldisplay
N(xi|μ,Σ/zi)Ga(zi|ν
2,ν
2)dzi (11.61)
(See Exercise 11.1 for a proof of this in the 1d case.) This can be thought of as an “inﬁnite”mixture of Gaussians, each one with a slightly different covariance matrix.
Treating the z
ias missing data, we can write the complete data log likelihood as
/lscriptc(θ)=N/summationdisplay
i=1[logN(xi|μ,Σ/zi)+logGa( zi|ν/2,ν/2)] (11.62)
=N/summationdisplay
i=1/bracketleftbigg
−D
2log(2π)−1
2log|Σ|−zi
2δi+ν
2logν
2−logΓ(ν
2) (11.63)
+ν
2(logzi−zi)+(D
2−1)logzi/bracketrightbigg
(11.64)
360 Chapter 11. Mixture models and the EM algorithm
where we have deﬁned the Mahalanobis distance to be
δi=(xi−μ)TΣ−1(xi−μ) (11.65)
We can partition this into two terms, one involving μandΣ, and the other involving ν.W e
have, dropping irrelevant constants,
/lscriptc(θ)=L N(μ,Σ)+L G(ν) (11.66)
LN(μ,Σ)/defines−1
2Nlog|Σ|−1
2N/summationdisplay
i=1ziδi (11.67)
LG(ν)/defines−NlogΓ(ν/2)+1
2Nνlog(ν/2)+1
2νN/summationdisplay
i=1(logzi−zi) (11.68)
11.4.5.1 EM with νknown
Let us ﬁrst derive the algorithm with νassumed known, for simplicity. In this case, we can
ignore the LGterm, so we only need to ﬁgure out how to compute E[zi]wrt the old parameters.
From Section 4.6.2.2 we have
p(zi|xi,θ)=G a ( zi|ν+D
2,ν+δi
2) (11.69)
Now ifzi∼Ga(a,b), then E[zi]=a/b. Hence the E step at iteration tis
z(t)
i/definesE/bracketleftBig
zi|xi,θ(t)/bracketrightBig
=ν(t)+D
ν(t)+δ(t)
i(11.70)
The M step is obtained by maximizing E[LN(μ,Σ)]to yield
ˆμ(t+1)=/summationtext
iz(t)ixi/summationtext
iz(t)
i(11.71)
ˆΣ(t+1)=1
N/summationdisplay
iz(t)
i(xi−ˆμ(t+1))(xi−ˆμ(t+1))T(11.72)
=1
N/bracketleftBigg/summationdisplay
iz(t)ixixT
i−/parenleftBiggN/summationdisplay
i=1z(t)
i/parenrightBigg
ˆμ(t+1)(ˆμ(t+1))T/bracketrightBigg
(11.73)
These results are quite intuitive: the quantity ziis the precision of measurement i,s oi fi ti s
small, the corresponding data point is down-weighted when estimating the mean and covariance.
This is how the Student achieves robustness to outliers.
11.4.5.2 EM with νunknown
To compute the MLE for the degrees of freedom, we ﬁrst need to compute the expectation ofL
G(ν), which involves ziandlogzi.N o wi fzi∼Ga(a,b), then one can show that
/lscript(t)
i/definesE/bracketleftBig
logzi|θ(t)/bracketrightBig
=Ψ (a)−logb (11.74)
11.4. The EM algorithm 361
−5 −4 −3 −2 −1 0 1 2−7−6−5−4−3−2−1012314 errors using gauss (red=error)
Bankrupt
Solvent
(a)−5 −4 −3 −2 −1 0 1 2−7−6−5−4−3−2−10124 errors using student (red=error)
Bankrupt
Solvent
(b)
Figure 11.14 Mixture modeling on the bankruptcy data set. Left: Gaussian class conditional densities.
Right: Student class conditional densities. Points that belong to class 1 are shown as triangles, points that
belong to class 2 are shown as circles The estimated labels, based on the posterior probability of belongingto each mixture component, are computed. If these are incorrect, the point is colored red, otherwise it iscolored blue. (Training data is in black.) Figure generated by mixStudentBankruptcyDemo .
whereΨ(x)=d
dxlogΓ(x) is the digamma function. Hence, from Equation 11.69, we have
/lscript(t)
i=Ψ (ν(t)+D
2)−log(ν(t)+δ(t)
i
2) (11.75)
= log(z(t)
i)+Ψ(ν(t)+D
2)−log(ν(t)+D
2) (11.76)
Substituting into Equation 11.68, we have
E[LG(ν)] =−NlogΓ(ν/2)+Nν
2log(ν/2)+ν
2/summationdisplay
i(/lscript(t)
i−z(t)
i) (11.77)
The gradient of this expression is equal to
d
dνE[LG(ν)] =−N
2Ψ(ν/2)+N
2log(ν/2)+N
2+1
2/summationdisplay
i(/lscript(t)
i−z(t)
i) (11.78)
This has a unique solution in the interval (0,+∞]which can be found using a 1d constrained
optimizer.
Performing a gradient-based optimization in the M step, rather than a closed-form update, is
an example of what is known as the generalized EM algorithm. One can show that EM will still
converge to a local optimum even if we only perform a “partial” improvement to the parameters
in the M step.
11.4.5.3 Mixtures of Student distributions
It is easy to extend the above methods to ﬁt a mixture of Student distributions. See Exercise 11.4for the details.
Let us consider a small example from (Lo 2009, ch3). We have a N=6 6,D=2data
set regarding the bankrupty patterns of certain companies. The ﬁrst feature speciﬁes the ratio
362 Chapter 11. Mixture models and the EM algorithm
of retained earnings (RE) to total assets, and the second feature speciﬁes the ratio of earnings
before interests and taxes (EBIT) to total assets. We ﬁt two models to this data, ignoring theclass labels: a mixture of 2 Gaussians, and a mixture of 2 Students. We then use each ﬁttedmodel to classify the data. We compute the most probable cluster membership and treat thisasˆy
i. We then compare ˆyito the true labels yiand compute an error rate. If this is more
than 50%, we permute the latent labels (i.e., we consider cluster 1 to represent class 2 and viceversa), and then recompute the error rate. Points which are misclassiﬁed are then shown in red.The result is shown in Figure 11.14. We see that the Student model made 4 errors, the Gaussianmodel made 21. This is because the class-conditional densities contain some extreme values,causing the Gaussian to be a poor choice.
11.4.6 EM for probit regression *
In Section 9.4.2, we described the latent variable interpretation of probit regression. Recall thatthis has the form p(y
i=1|zi)=I(zi>0),w h e r ezi∼N(wTxi,1)is latent. We now show
how to ﬁt this model using EM. (Although it is possible to ﬁt probit regression models usinggradient based methods, as shown in Section 9.4.1, this EM-based approach has the advantagethat it generalized to many other kinds of models, as we will see later on.)
The complete data log likelihood has the following form, assuming a N(0,V
0)prior onw:
/lscript(z,w|V0)=l o g p(y|z)+logN(z|Xw,I)+logN(w|0,V0) (11.79)
=/summationdisplay
ilogp(yi|zi)−1
2(z−Xw)T(z−Xw)−1
2wTV−1
0w+const(11.80)
The posterior in the E step is a truncated Gaussian:
p(zi|yi,xi,w)=/braceleftbiggN(zi|wTxi,1)I(zi>0)ifyi=1
N(zi|wTxi,1)I(zi<0)ifyi=0(11.81)
In Equation 11.80, we see that wonly depends linearly on z, so we just need to compute
E[zi|yi,xi,w]. Exercise 11.15 asks you to show that the posterior mean is given by
E[zi|w,xi]=/braceleftBigg
μi+φ(μi)
1−Φ(−μi)=μi+φ(μi)
Φ(μi)ifyi=1
μi−φ(μi)
Φ(−μi)=μi−φ(μi)
1−Φ(μi)ifyi=0(11.82)
whereμi=wTxi.
In the M step, we estimate wusing ridge regression, where μ=E[z]is the output we are
trying to predict. Speciﬁcally, we have
ˆw=(V−1
0+XTX)−1XTμ (11.83)
The EM algorithm is simple, but can be much slower than direct gradient methods, as
illustrated in Figure 11.15. This is because the posterior entropy in the E step is quite high, sincewe only observe that zis positive or negative, but are given no information from the likelihood
about its magnitude. Using a stronger regularizer can help speed convergence, because itconstrains the range of plausible zvalues. In addition, one can use various speedup tricks, such
as data augmentation (van Dyk and Meng 2001), but we do not discuss that here.
11.4. The EM algorithm 363
0 20 40 60 80 100 120010203040506070
iterpenalized NLLprobit regression with L2 regularizer of 0.100
  
em
minfunc
Figure 11.15 Fitting a probit regression model in 2d using a quasi-Newton method or EM. Figure generated
byprobitRegDemo .
11.4.7 Theoretical basis for EM *
In this section, we show that EM monotonically increases the observed data log likelihood until
it reaches a local maximum (or saddle point, although such points are usually unstable). Ourderivation will also serve as the basis for various generalizations of EM that we will discuss later.
11.4.7.1 Expected complete data log likelihood is a lower bound
Consider an arbitrary distribution q(z
i)over the hidden variables. The observed data log
likelihood can be written as follows:
/lscript(θ)/definesN/summationdisplay
i=1log/bracketleftBigg/summationdisplay
zip(xi,zi|θ)/bracketrightBigg
=N/summationdisplay
i=1log/bracketleftBigg/summationdisplay
ziq(zi)p(xi,zi|θ)
q(zi)/bracketrightBigg
(11.84)
Nowlog(u)is a concavefunction, so from Jensen’s inequality (Equation 2.113) we have the
following lower bound:
/lscript(θ)≥/summationdisplay
i/summationdisplay
ziqi(zi)logp(xi,zi|θ)
qi(zi)(11.85)
Let us denote this lower bound as follows:
Q(θ,q)/defines/summationdisplay
iEqi[logp(xi,zi|θ)]+H(qi) (11.86)
where H(qi)is the entropy of qi.
The above argument holds for any positive distribution q. Which one should we choose?
Intuitively we should pick the qthat yields the tightest lower bound. The lower bound is a sum
364 Chapter 11. Mixture models and the EM algorithm
overiof terms of the following form:
L(θ,qi)=/summationdisplay
ziqi(zi)logp(xi,zi|θ)
qi(zi)(11.87)
=/summationdisplay
ziqi(zi)logp(zi|xi,θ)p(xi|θ)
qi(zi)(11.88)
=/summationdisplay
ziqi(zi)logp(zi|xi,θ)
qi(zi)+/summationdisplay
ziqi(zi)logp(xi|θ) (11.89)
=−KL(qi(zi)||p(zi|xi,θ))+logp(xi|θ) (11.90)
Thep(xi|θ)term is independent of qi, so we can maximize the lower bound by setting qi(zi)=
p(zi|xi,θ). Of course, θis unknown, so instead we use qt
i(zi)=p(zi|xi,θt),w h e r eθtis our
estimate of the parameters at iteration t. This is the output of the E step.
Plugging this in to the lower bound we get
Q(θ,qt)=/summationdisplay
iEqt
i[logp(xi,zi|θ)]+H/parenleftbig
qt
i/parenrightbig
(11.91)
We recognize the ﬁrst term as the expected complete data log likelihood. The second term is a
constant wrt θ. So the M step becomes
θt+1=a r gm a x
θQ(θ,θt) = argmax
θ/summationdisplay
iEqt
i[logp(xi,zi|θ)] (11.92)
as usual.
Now comes the punchline. Since we used qt
i(zi)=p(zi|xi,θt), the KL divergence becomes
zero, soL(θt,qi)=l o gp(xi|θt), and hence
Q(θt,θt)=/summationdisplay
ilogp(xi|θt)=/lscript(θt) (11.93)
We see that the lower bound is tight after the E step. Since the lower bound “touches” thefunction, maximizing the lower bound will also “push up” on the function itself. That is, theM step is guaranteed to modify the parameters so as to increase the likelihood of the observeddata (unless it is already at a local maximum).
This process is sketched in Figure 11.16. The dashed red curve is the original function (the
observed data log-likelihood). The solid blue curve is the lower bound, evaluated at θ
t; this
touches the objective function at θt. We then set θt+1to the maximum of the lower bound
(blue curve), and ﬁt a new bound at that point (dotted green curve). The maximum of this newbound becomes θ
t+2, etc. (Compare this to Newton’s method in Figure 8.4(a), which repeatedly
ﬁts and then optimizes a quadratic approximation.)
11.4.7.2 EM monotonically increases the observed data log likelihood
We now prove that EM monotonically increases the observed data log likelihood until it reachesa local optimum. We have
/lscript(θ
t+1)≥Q(θt+1,θt)≥Q(θt,θt)=/lscript(θt) (11.94)
11.4. The EM algorithm 365
  
Q(θ,θt)
Q(θ,θt+1)
l(θ)
θtθt+1θt+2
Figure 11.16 Illustration of EM as a bound optimization algorithm. Based on Figure 9.14 of (Bishop 2006a).
Figure generated by emLogLikelihoodMax .
where the ﬁrst inequality follows since Q(θ,·)is a lower bound on /lscript(θ); the second inequality
follows since, by deﬁnition, Q(θt+1,θt) = max θQ(θ,θt)≥Q(θt,θt); and the ﬁnal equality
follows Equation 11.93.
As a consequence of this result, if you do not observe monotonic increase of the observed
data log likelihood, you must have an error in your math and/or code. (If you are performing
MAP estimation, you must add on the log prior term to the objective.) This is a surprisinglypowerful debugging tool.
11.4.8 Online EM
When dealing with large or streaming datasets, it is important to be able to learn online, aswe discussed in Section 8.5. There are two main approaches to online EM in the literature.
The ﬁrst approach, known as incremental EM (Neal and Hinton 1998), optimizes the lower
boundQ(θ,q
1,...,q N)oneqiat a time; however, this requires storing the expected sufficient
statistics for each data case. The second approach, known as stepwise EM (Sato and Ishii 2000;
Cappe and Mouline 2009; Cappe 2010), is based on stochastic approximation theory, and onlyrequires constant memory use. We explain both approaches in more detail below, following thepresentation of (Liang and Klein Liang and Klein).
11.4.8.1 Batch EM review
Before explaining online EM, we review batch EM in a more abstract setting. Let φ(x,z)be a
vector of sufficient statistics for a single data case. (For example, for a mixture of multinoullis,this would be the count vector a(j), which is the number of cluster jwas used in z, plus the
matrixB(j,v), which is of the number of times the hidden state was jand the observed letter
wasv.) Lets
i=/summationtext
zp(z|xi,θ)φ(xi,z)be the expected sufficient statistics for case i, and
μ=/summationtextN
i=1sibe the sum of the ESS. Given μ, we can derive an ML or MAP estimate of the
parameters in the M step; we will denote this operation by θ(μ). (For example, in the case of
mixtures of multinoullis, we just need to normalize aand each row of B.) With this notation
under our belt, the pseudo code for batch EM is as shown in Algorithm 8.
366 Chapter 11. Mixture models and the EM algorithm
Algorithm 11.2: Batch EM algorithm
1initialize μ;
2repeat
3μnew=0;
4foreach example i=1:Ndo
5 si:=/summationtext
zp(z|xi,θ(μ))φ(xi,z);
6 μnew:=μnew+si;;
7μ:=μnew;
8until converged ;
11.4.8.2 Incremental EM
In incremental EM (Neal and Hinton 1998), we keep track of μas well as the si. When we come
to a data case, we swap out the old siand replace it with the new snew
i, as shown in the code
in Algorithm 8. Note that we can exploit the sparsity of snewito speedup the computation of θ,
since most components of μwil not have changed.
Algorithm 11.3: Incremental EM algorithm
1initialize sifori=1:N;
2μ=/summationtext
isi;
3repeat
4foreach example i=1:N in a random order do
5 snewi:=/summationtext
zp(z|xi,θ(μ))φ(xi,z);
6 μ:=μ+snewi−si;
7 si:=snewi;
8until converged ;
This can be viewed as maximizing the lower bound Q(θ,q1,...,q N)by optimizing q1, then
θ, thenq2, thenθ, etc. As such, this method is guaranteed to monotonically converge to a local
maximum of the lower bound and to the log likelihood itself.
11.4.8.3 Stepwise EM
In stepwise EM, whenever we compute a new si,w em o v e μtowards it, as shown in Algorithm 7.2
At iteration k, the stepsize has value ηk, which must satisfy the Robbins-Monro conditions in
Equation 8.82. For example, (Liang and Klein Liang and Klein) use ηk=( 2+k)−κfor
0.5<κ≤1. We can get somewhat better behavior by using a minibatch of size mbefore
each update. It is possible to optimize mandκto maximize the training set likelihood, by
2. A detail: As written the update for μdoes not exploit the sparsity of si. We can ﬁx this by storing m=μ/producttext
j<k(1−ηj)
instead of μ, and then using the sparse update m:=m+ηk/producttext
j<k(1−ηj)si. This will not affect the results (i.e.,
θ(μ)=θ(m)), since scaling the counts by a global constant has no effect.
11.4. The EM algorithm 367




Figure 11.17 Illustration of deterministic annealing. Based on http://en .wikipedia .org/wiki/Grad
uated_optimization .
trying different values in parallel for an initial trial period; this can signiﬁcantly speed up the
algorithm.
Algorithm 11.4: Stepwise EM algorithm
1initialize μ;k=0;
2repeat
3foreach example i=1:N in a random order do
4 si:=/summationtext
zp(z|xi,θ(μ))φ(xi,z);
5 μ:= (1−ηk)μ+ηksi;
6 k:=k+1
7until converged ;
(Liang and Klein Liang and Klein) compare batch EM, incremental EM, and stepwise EM
on four different unsupervised language modeling tasks. They found that stepwise EM (usingκ≈0.7andm≈1000) was faster than incremental EM, and both were much faster than batch
EM. In terms of accuracy, stepwise EM was usually as good or sometimes even better than batchEM; incremental EM was often worse than either of the other methods.
11.4.9 Other EM variants *
EM is one of the most widely used algorithms in statistics and machine learning. Not surpris-ingly, many variations have been proposed. We brieﬂy mention a few below, some of which wewill use in later chapters. See (McLachlan and Krishnan 1997) for more information.
•Annealed EM In general, EM will only converge to a local maximum. To increase the chance
of ﬁnding the global maximum, we can use a variety of methods. One approach is to use
a method known as deterministic annealing (Rose 1998). The basic idea is to “smooth”
the posterior “landscape” by raising it to a temperature, and then gradually cooling it, all thewhile slowly tracking the global maximum. See Figure 11.17. for a sketch. (A stochastic version
368 Chapter 11. Mixture models and the EM algorithm
true log−likelihood
lower bound
training time
(a)true log−likelihood
lower bound
training time
(b)
Figure 11.18 Illustration of possible behaviors of variational EM. (a) The lower bound increases at each
iteration, and so does the likelihood. (b) The lower bound increases but the likelihood decreases. In
this case, the algorithm is closing the gap between the approximate and true posterior. This can have aregularizing effect. Based on Figure 6 of (Saul et al. 1996). Figure generated by varEMbound .
of this algorithm is described in Section 24.6.1.) An annealed version of EM is described in
(Ueda and Nakano 1998).
•Variational EM In Section 11.4.7, we showed that the optimal thing to do in the E step is to
makeqibe the exact posterior over the latent variables, qt
i(zi)=p(zi|xi,θt). In this case,
the lower bound on the log likelihood will be tight, so the M step will “push up” on thelog-likelihood itself. However, sometimes it is computationally intractable to perform exactinference in the E step, but we may be able to perform approximate inference. If we canensure that the E step is performing inference based onaal o w e rbound to the likelihood,then the M step can be seen as monotonically increasing this lower bound (see Figure 11.18).This is called variational EM (Neal and Hinton 1998). See Chapter 21 for some variational
inference methods that can be used in the E step.
•Monte Carlo EM Another approach to handling an intractable E step is to use a Monte
Carlo approximation to the expected sufficient statistics. That is, we draw samples from theposterior, z
s
i∼p(zi|xi,θt), and then compute the sufficient statistics for each completed
vector,(xi,zsi), and then average the results. This is called Monte Carlo EM orMCEM(Wei
and Tanner 1990). (If we only draw a single sample, it is called stochastic EM (Celeux and
Diebolt 1985).) One way to draw samples is to use MCMC (see Chapter 24). However, if we
have to wait for MCMC to converge inside each E step, the method becomes very slow. Analternative is to use stochastic approximation, and only perform “brief” sampling in the Estep, followed by a partial parameter update. This is called stochastic approximation EM
(Delyon et al. 1999) and tends to work better than MCEM. Another alternative is to applyMCMC to infer the parameters as well as the latent variables (a fully Bayesian approach), thuseliminating the distinction between E and M steps. See Chapter 24 for details.
•Generalized EM Sometimes we can perform the E step exactly, but we cannot perform the
M step exactly. However, we can still monotonically increase the log likelihood by performinga “partial” M step, in which we merely increase the expected complete data log likelihood,rather than maximizing it. For example, we might follow a few gradient steps. This is called
11.4. The EM algorithm 369
0 2 4 6 8 10 12 14 16 18−42−41.5−41−40.5−40−39.5−39−38.5
iterationsloglikK=5, D=15, N=5000
  
EM (1.080)
OR(1) (1.358)
OR(1.25) (1.141)
OR(2) (1.219)
OR(5) (1.433)
(a)0 2 4 6 8 10 12 14 16 18−42−41−40−39−38−37−36
iterationsloglikK=5, D=15, N=5000
  
EM (1.315)
OR(1) (1.368)
OR(1.25) (1.381)
OR(2) (1.540)
OR(5) (1.474)
(b)
Figure 11.19 Illustration of adaptive over-relaxed EM applied to a mixture of 5 Gaussians in 15 dimensions.
We show the algorithm applied to two different datasets, randomly sampled from a mixture of 10 Gaussians.
We plot the convergence for different update rates η. Usingη=1gives the same results as regular EM.
The actual running time is printed in the legend. Figure generated by mixGaussOverRelaxedEmDemo .
thegeneralized EM orGEMalgorithm. (This is an unfortunate term, since there are many
ways to generalize EM....)
•ECM(E) algorithm TheECMalgorithm stands for “expectation conditional maximization”,
and refers to optimizing the parameters in the M step sequentially, if they turn out to be
dependent. The ECMEalgorithm, which stands for “ECM either” (Liu and Rubin 1995), is
a variant of ECM in which we maximize the expected complete data log likelihood (the Q
function) as usual, or the observed data log likelihood, during one or more of the conditionalmaximization steps. The latter can be much faster, since it ignores the results of the E step,and directly optimizes the objective of interest. A standard example of this is when ﬁttingthe Student T distribution. For ﬁxed ν, we can update Σas usual, but then to update ν,
we replace the standard update of the form ν
t+1= argmax νQ((μt+1,Σt+1,ν),θt)with
νt+1= argmax νlogp(D|μt+1,Σt+1,ν). See (McLachlan and Krishnan 1997) for more
information.
•Over-relaxed EM Vanilla EM can be quite slow, especially if there is lots of missing data. The
adaptiveoverrelaxed EM algorithm (Salakhutdinov and Roweis 2003) performs an update
of the form θt+1=θt+η(M(θt)−θt),w h e r eηis a step-size parameter, and M(θt)is
the usual update computed during the M step. Obviously this reduces to standard EM ifη=1, but using larger values of ηcan result in faster convergence. See Figure 11.19 for an
illustration. Unfortunately, using too large a value of ηcan cause the algorithm to fail to
converge.
Finally, note that EM is in fact just a special case of a larger class of algorithms known as
bound optimization orMMalgorithms (MM stands for minorize-maximize). See (Hunter and
Lange 2004) for further discussion.
370 Chapter 11. Mixture models and the EM algorithm
11.5 Model selection for latent variable models
When using LVMs, we must specify the number of latent variables, which controls the model
complexity. In particuarl, in the case of mixture models, we must specify K, the number
of clusters. Choosing these parameters is an example of model selection. We discuss someapproaches below.
11.5.1 Model selection for probabilistic models
The optimal Bayesian approach, discussed in Section 5.3, is to pick the model with the largestmarginal likelihood, K
∗=a r g m a xkp(D|K).
There are two problems with this. First, evaluating the marginal likelihood for LVMs is
quite difficult. In practice, simple approximations, such as BIC, can be used (see e.g., (Fraleyand Raftery 2002)). Alternatively, we can use the cross-validated likelihood as a performancemeasure, although this can be slow, since it requires ﬁtting each model Ftimes, where Fis the
number of CV folds.
The second issue is the need to search over a potentially large number of models. The usual
approach is to perform exhaustive search over all candidate values of K. However, sometimes
we can set the model to its maximal size, and then rely on the power of the Bayesian Occam’srazor to “kill off” unwanted components. An example of this will be shown in Section 21.6.1.6,when we discuss variational Bayes.
An alternative approach is to perform stochastic sampling in the space of models. Traditional
approaches, such as (Green 1998, 2003; Lunn et al. 2009), are based on reversible jump MCMC,and use birth moves to propose new centers, and death moves to kill off old centers. However,this can be slow and difficult to implement. A simpler approach is to use a Dirichlet processmixture model, which can be ﬁt using Gibbs sampling, but still allows for an unbounded numberof mixture components; see Section 25.2 for details.
Perhaps surprisingly, these sampling-based methods can be faster than the simple approach
of evaluating the quality of each Kseparately. The reason is that ﬁtting the model for each
Kis often slow. By contrast, the sampling methods can often quickly determine that a certain
value ofKis poor, and thus they need not waste time in that part of the posterior.
11.5.2 Model selection for non-probabilistic methods
What if we are not using a probabilistic model? For example, how do we choose Kfor theK-
means algorithm? Since this does not correspond to a probability model, there is no likelihood,so none of the methods described above can be used.
An obvious proxy for the likelihood is the reconstruction error. Deﬁne the squared recon-
struction error of a data set D, using model complexity K, as follows:
E(D,K)=1
|D|/summationdisplay
i∈D||xi−ˆxi||2(11.95)
In the case of K-means, the reconstruction is given by ˆxi=μzi,w h e r ezi=a r g m i nk||xi−
μk||2
2, as explained in Section 11.4.2.6.
Figure 11.20(a) plots the reconstruction error on the test setfor K-means. We notice that the
error decreases with increasing model complexity! The reason for this behavior is as follows:
11.5. Model selection for latent variable models 371
2 4 6 8 10 12 14 1600.050.10.150.20.25MSE on test vs K for K−means
(a)2 4 6 8 10 12 14 1611951200120512101215122012251230123512401245NLL on test set vs K for GMM
(b)
Figure 11.20 Test set performance vs Kfor data generated from a mixture of 3 Gaussians in 1d (data is
shown in Figure 11.21(a)). (a) MSE on test set for K-means. (b) Negative log likelihood on test set for GMM.
Figure generated by kmeansModelSel1d .
−3 −2 −1 0 1 2 30102030405060Xtrain
(a)−1 0 100.20.40.60.81K=2, mse=0.2023
−2 0 200.20.40.60.81K=3, mse=0.0818
−2 0 200.20.40.60.81K=4, mse=0.0562
−2 0 200.20.40.60.81K=5, mse=0.0368
−2 0 200.20.40.60.81K=6, mse=0.0275
−2 0 200.20.40.60.81K=10, mse=0.0111
(b)
−2 0 200.10.20.30.40.5K=2, nll=1244.7882
−2 0 200.10.20.30.40.5K=3, nll=1198.9738
−2 0 200.10.20.30.40.5K=4, nll=1196.9937
−2 0 200.10.20.30.40.5K=5, nll=1202.5869
−2 0 200.10.20.30.40.5K=6, nll=1199.5574
−2 0 200.10.20.30.40.5K=10, nll=1203.2931
(c)
Figure 11.21 Synthetic data generated from a mixture of 3 Gaussians in 1d. (a) Histogram of training data.
(Test data looks essentially the same.) (b) Centroids estimated by K-means for K∈{2,3,4,5,6,10}.
(c) GMM density model estimated by EM for for the same values of K. Figure generated by
kmeansModelSel1d .
372 Chapter 11. Mixture models and the EM algorithm
when we add more and more centroids to K-means, we can “tile” the space more densely, as
shown in Figure 11.21(b). Hence any given test vector is more likely to ﬁnd a close prototype to
accurately represent it as Kincreases, thus decreasing reconstruction error. However, if we use
a probabilistic model, such as the GMM, and plot the negative log-likelihood, we get the usualU-shaped curve on the test set, as shown in Figure 11.20(b).
In supervised learning, we can always use cross validation to select between non-probabilistic
models of different complexity, but this is not the case with unsupervised learning. Althoughthis is not a novel observation (e.g., it is mentioned in passing in (Hastie et al. 2009, p519), oneof the standard references in this ﬁeld), it is perhaps not as widely appreciated as it should be.In fact, it is one of the more compelling arguments in favor of probabilistic models.
Given that cross validation doesn’t work, and supposing one is unwilling to use probabilistic
models (for some bizarre reason...), how can one choose K? The most common approach is to
plot the reconstruction error on the training set versus K, and to try to identify a kneeorkink
in the curve. The idea is that for K<K
∗,w h e r eK∗is the “true” number of clusters, the rate
of decrease in the error function will be high, since we are splitting apart things that shouldnot be grouped together. However, for K>K
∗, we are splitting apart “natural” clusters, which
does not reduce the error by as much.
This kink-ﬁnding process can be automated by use of the gap statistic (Tibshirani et al.
2001). Nevertheless, identifying such kinks can be hard, as shown in Figure 11.20(a), since theloss function usually drops off gradually. A different approach to “kink ﬁnding” is described inSection 12.3.2.1.
11.6 Fitting models with missing data
Suppose we want to ﬁt a joint density model by maximum likelihood, but we have “holes” in ourdata matrix, due to missing data (usually represented by NaNs). More formally, let O
ij=1if
component jof data case iis observed, and let Oij=0otherwise. Let Xv={xij:Oij=1}
be the visible data, and Xh={xij:Oij=0}be the missing or hidden data. Our goal is to
compute
ˆθ=a r g m a x
θp(Xv|θ,O) (11.96)
Under the missing at random assumption (see Section 8.6.2), we have
p(Xv|θ,O)=N/productdisplay
i=1p(xiv|θ) (11.97)
wherexivis a vector created from row iand the columns indexed by the set {j:Oij=1}.
Hence the log-likelihood has the form
logp(Xv|θ)=/summationdisplay
ilogp(xiv|θ) (11.98)
where
p(xiv|θ)=/summationdisplay
xihp(xiv,xih|θ) (11.99)
11.6. Fitting models with missing data 373
andxihis the vector of hidden variables for case i(assumed discrete for notational simplicity).
Substituting in, we get
logp(Xv|θ)=/summationdisplay
ilog/bracketleftBigg/summationdisplay
xihp(xiv,xih|θ)/bracketrightBigg
(11.100)
Unfortunately, this objective is hard to maximize. since we cannot push the log inside the sum.
However, we can use the EM algorithm to compute a local optimum. We give an example ofthis below.
11.6.1 EM for the MLE of an MVN with missing data
Suppose we want to ﬁt an MVN by maximum likelihood, but we have missing data. We can useEM to ﬁnd a local maximum of the objective, as we explain below.
11.6.1.1 Getting started
To get the algorithm started, we can compute the MLE based on those rows of the data ma-trix that are fully observed. If there are no such rows, we can use some ad-hoc imputationprocedures, and then compute an initial MLE.
11.6.1.2 E step
Once we have θ
t−1, we can compute the expected complete data log likelihood at iteration tas
follows:
Q(θ,θt−1)=E/bracketleftBiggN/summationdisplay
i=1logN(xi|μ,Σ)|D,θt−1/bracketrightBigg
(11.101)
=−N
2log|2πΣ|−1
2/summationdisplay
iE/bracketleftbig
(xi−μ)TΣ−1(xi−μ)/bracketrightbig
(11.102)
=−N
2log|2πΣ|−1
2tr(Σ−1/summationdisplay
iE/bracketleftbig
(xi−μ)(xi−μ)T/bracketrightbig
(11.103)
=−N
2log|Σ|−ND
2log(2π)−1
2tr(Σ−1E[S(μ)]) (11.104)
where
E[S(μ)]/defines/summationdisplay
i/parenleftBig
E/bracketleftbig
xixT
i/bracketrightbig
+μμT−2μE[xi]T/parenrightBig
(11.105)
(We drop the conditioning of the expectation on Dandθt−1for brevity.) We see that we need
to compute/summationtext
iE[xi]and/summationtext
iE/bracketleftbig
xixT
i/bracketrightbig
; these are the expected sufficient statistics.
To compute these quantities, we use the results from Section 4.3.1. Speciﬁcally, consider case
i, where components vare observed and components hare unobserved. We have
xih|xiv,θ∼N(mi,Vi) (11.106)
mi/definesμh+ΣhvΣ−1
vv(xiv−μv) (11.107)
Vi/definesΣhh−ΣhvΣ−1
vvΣvh (11.108)
374 Chapter 11. Mixture models and the EM algorithm
Hence the expected sufficient statistics are
E[xi]=(E[xih];xiv)=(mi;xiv) (11.109)
where we have assumed (without loss of generality) that the unobserved variables come before
the observed variables in the node ordering.
To compute E/bracketleftbig
xixT
i/bracketrightbig
, we use the result that cov[x]=E/bracketleftbig
xxT/bracketrightbig
−E[x]E/bracketleftbig
xT/bracketrightbig
. Hence
E/bracketleftbig
xixT
i/bracketrightbig
=E/bracketleftbigg/parenleftbiggxih
xiv/parenrightbigg/parenleftbig
xT
ihxT
iv/parenrightbig/bracketrightbigg
=/parenleftbiggE/bracketleftbig
xihxT
ih/bracketrightbig
E[xih]xT
iv
xivE[xih]TxivxTiv/parenrightbigg
(11.110)
E/bracketleftbig
xihxT
ih/bracketrightbig
=E[xih]E[xih]T+Vi (11.111)
11.6.1.3 M step
By solving ∇Q(θ,θ(t−1))=0, we can show that the M step is equivalent to plugging these
ESS into the usual MLE equations to get
μt=1
N/summationdisplay
iE[xi] (11.112)
Σt=1
N/summationdisplay
iE/bracketleftbig
xixTi/bracketrightbig
−μt(μt)T(11.113)
Thus we see that EM is notequivalent to simply replacing variables by their expectations and
applying the standard MLE formula; that would ignore the posterior variance and would result
in an incorrect estimate. Instead we must compute the expectation of the sufficient statistics,and plug that into the usual equation for the MLE. We can easily modify the algorithm toperform MAP estimation, by plugging in the ESS into the equation for the MAP estimate. For animplementation, see gaussMissingFitEm .
11.6.1.4 Example
As an example of this procedure in action, let us reconsider the imputation problem fromSection 4.3.2.3, which had N= 10010-dimensional data cases, with 50% missing data. Let
us ﬁt the parameters using EM. Call the resulting parameters ˆθ. We can use our model for
predictions by computing E/bracketleftBig
x
ih|xiv,ˆθ/bracketrightBig
. Figure 11.22(a-b) indicates that the results obtained
using the learned parameters are almost as good as with the true parameters. Not surprisingly,performance improves with more data, or as the fraction of missing data is reduced.
11.6.1.5 Extension to the GMM case
It is straightforward to ﬁt a mixture of Gaussians in the presence of partially observed datavectorsx
i. We leave the details as an exercise.
Exercises
Exercise 11.1 Student T as inﬁnite mixture of Gaussians
Derive Equation 11.61. For simplicity, assume a one-dimensional distribution.
11.6. Fitting models with missing data 375
−10 0 10−10−50510
truthimputedR2 = 0.260
−20 0 20−1001020
truthimputedR2 = 0.685
−10 0 10−10−50510
truthimputedR2 = 0.399imputation with true params
−10 0 10−10−50510
truthimputedR2 = 0.531
(a)−10 0 10−10−50510
truthimputedR2 = 0.220
−20 0 20−1001020
truthimputedR2 = 0.609
−10 0 10−10−50510
truthimputedR2 = 0.113imputation with em
−10 0 10−10−50510
truthimputedR2 = 0.532
(b)
Figure 11.22 Illustration of data imputation. (a) Scatter plot of true values vs imputed values us-
ing true parameters. (b) Same as (b), but using parameters estimated with EM. Figure generated by
gaussImputationDemo .
Exercise 11.2 EM for mixtures of Gaussians
Show that the M step for ML estimation of a mixture of Gaussians is given by
μk=/summationtext
irikxi
rk(11.114)
Σk=/summationtext
irik(xi−μk)(xi−μk)T
rk=/summationtext
irikxixT
i−rkμkμT
k
rk(11.115)
Exercise 11.3 EM for mixtures of Bernoullis
• Show that the M step for ML estimation of a mixture of Bernoullis is given by
μkj=/summationtext
irikxij/summationtext
irik(11.116)
• Show that the M step for MAP estimation of a mixture of Bernoullis with a β(α,β)prior is given by
μkj=(/summationtext
irikxij)+α−1
(/summationtext
irik)+α+β−2(11.117)
Exercise 11.4 EM for mixture of Student distributions
Derive the EM algorithm for ML estimation of a mixture of multivariate Student T distributions.
Exercise 11.5 Gradient descent for ﬁtting GMM
Consider the Gaussian mixture model
p(x|θ)=/summationdisplay
kπkN(x|μk,Σk) (11.118)
Deﬁne the log likelihood as
/lscript(θ)=N/summationdisplay
n=1logp(xn|θ) (11.119)
376 Chapter 11. Mixture models and the EM algorithm
N
m lμj σkxnJn Knpq
Figure 11.23 A mixture of Gaussians with two discrete latent indicators. Jnspeciﬁes which mean to use,
andKnspeciﬁes which variance to use.
Deﬁne the posterior responsibility that cluster khas for datapoint nas follows:
rnk/definesp(zn=k|xn,θ)=πkN(xn|μk,Σk)/summationtextK
k/prime=1πk/primeN(xn|μk/prime,Σk/prime)(11.120)
a. Show that the gradient of the log-likelihood wrt μkis
d
dμk/lscript(θ)=/summationdisplay
nrnkΣ−1
k(xn−μk) (11.121)
b. Derive the gradient of the log-likelihood wrt πk. (For now, ignore any constraints on πk.)
c. One way to handle the constraint that/summationtextKk=1πk=1is to reparameterize using the softmax function:
πk/definesewk
/summationtextKk
/prime=1ewk/prime(11.122)
Herewk∈Rare unconstrained parameters. Show that
d
dwk/lscript(θ)=/summationdisplay
nrnk−πk (11.123)
(There may be a constant factor missing in the above expression...) Hint: use the chain rule and the
fact that
dπj
dwk=/braceleftbiggπj(1−πj)ifj=k
−πjπkifj/negationslash=k(11.124)
which follows from Exercise 8.4(1).
d. Derive the gradient of the log-likelihood wrt Σk. (For now, ignore any constraints on Σk.)
e. One way to handle the constraint that Σkbe a symmetric positive deﬁnite matrix is to reparame-
terize using a Cholesky decomposition, Σk=RT
kR,w h e r eRis an upper-triangular, but otherwise
unconstrained matrix. Derive the gradient of the log-likelihood wrt Rk.
Exercise 11.6 EM for a ﬁnite scale mixture of Gaussians
(Source: Jaakkola..) Consider the graphical model in Figure 11.23 which deﬁnes the following:
p(xn|θ)=m/summationdisplay
j=1pj/bracketleftBiggl/summationdisplay
k=1qkN(xn|μj,σ2
k)/bracketrightBigg
(11.125)
11.6. Fitting models with missing data 377
whereθ={p1,...,p m,μ1,...,μ m,q1,...,q l,σ2
1,...,σ2
l}are all the parameters. Here pj/definesP(Jn=
j)andqk/definesP(Kn=k)are the equivalent of mixture weights. We can think of this as a mixture
ofmnon-Gaussian components, where each component distribution is a scale mixture, p(x|j;θ)=/summationtextl
k=1qkN(x;μj,σ2
k), combining Gaussians with different variances (scales).
We will now derive a generalized EM algorithm for this model. (Recall that in generalized EM, we do a
partial update in the M step, rather than ﬁnding the exact maximum.)
a. Derive an expression for the responsibilities, P(Jn=j,Kn=k|xn,θ), needed for the E step.
b. Write out a full expression for the expected complete log-likelihood
Q(θnew,θold)=EθoldN/summationdisplay
n=1logP(Jn,Kn,xn|θnew) (11.126)
c. Solving the M-step would require us to jointly optimize the means μ1,...,μ mand the variances
σ2
1,...,σ2
l. It will turn out to be simpler to ﬁrst solve for the μj’s given ﬁxed σ2
j’s, and subsequently
solve for σ2
j’s given the new values of μj’s. For brevity, we will just do the ﬁrst part. Derive an
expression for the maximizing μj’s given ﬁxed σ2
1:l, i.e., solve∂Q
∂μnew=0.
Exercise 11.7 Manual calculation of the M step for a GMM
(Source: de Freitas.) In this question we consider clustering 1D data with a mixture of 2 Gaussians usingthe EM algorithm. You are given the 1-D data points x= [ 11 02 0 ] . Suppose the output of the E
step is the following matrix:
R=⎡
⎣10
0.40.6
01⎤⎦ (11.127)
where entry r
i,cis the probability of obervation xibelonging to cluster c(the responsibility of cluster cfor
data point i). You just have to compute the M step. You may state the equations for maximum likelihood
estimates of these quantities (which you should know) without proof; you just have to apply the equations
to this data set. You may leave your answer in fractional form. Show your work.
a. Write down the likelihood function you are trying to optimize.
b. After performing the M step for the mixing weights π1,π2, what are the new values?
c. After performing the M step for the means μ1andμ2, what are the new values?
Exercise 11.8 Moments of a mixture of Gaussians
Consider a mixture of KGaussians
p(x)=K/summationdisplay
k=1πkN(x|μk,Σk) (11.128)
a. Show that
E[x]=/summationdisplay
kπkμk (11.129)
378 Chapter 11. Mixture models and the EM algorithm
0 2 4 6 8 10 12 14 16 18−2−1012345
Figure 11.24 Some data points in 2d. Circles represent the initial guesses for m1andm2.
b. Show that
cov[x]=/summationdisplay
kπk[Σk+μkμT
k]−E[x]E[x]T(11.130)
Hint: use the fact that cov[x]= E/bracketleftbig
xxT/bracketrightbig
−E[x]E[x]T.
Exercise 11.9 K-means clustering by hand
(Source: Jaakkola.)
In Figure 11.24, we show some data points which lie on the integer grid. (Note that the x-axis has been
compressed; distances should be measured using the actual grid coordinates.) Suppose we apply the K-means algorithm to this data, using K=2and with the centers initialized at the two circled data points.
Draw the ﬁnal clusters obtained after K-means converges (show the approximate location of the new centersand group together all the points assigned to each center). Hint: think about shortest Euclidean distance.
Exercise 11.10 Deriving the K-means cost function
Show that
J
W(z)=1
2K/summationdisplay
k=1/summationdisplay
i:zi=k/summationdisplay
i/prime:zi/prime=k(xi−xi/prime)2=K/summationdisplay
k=1nk/summationdisplay
i:zi=k(xi−xk)2(11.131)
Hint: note that, for any μ,
/summationdisplay
i(xi−μ)2=/summationdisplay
i[(xi−x)−(μ−x)]2(11.132)
=/summationdisplay
i(xi−x)2+/summationdisplay
i(x−μ)2−2/summationdisplay
i(xi−x)(μ−x) (11.133)
=ns2+n(x−μ)2(11.134)
wheres2=1
n/summationtextn
i=1(xi−x)2, since
/summationdisplay
i(xi−x)(μ−x)=( μ−x)/parenleftBigg
(/summationdisplay
ixi)−nx/parenrightBigg
=(μ−x)(nx−nx)=0 (11.135)
Exercise 11.11 Visible mixtures of Gaussians are in the exponential family
Show that the joint distribution p(x,z|θ)for a 1d GMM can be represented in exponential family form.
11.6. Fitting models with missing data 379
2 2.05 2.1 2.15 2.2 2.25 2.3 2.35 2.42.62.833.23.43.63.844.24.44.6
inverse temperaturesurvival timeregression with censored data; red x = censored, green * = predicted
  
EM
OLS
Figure 11.25 Example of censored linear regression. Black circles are observed training points, red crosses
are observed but censored training points. Green stars are predicted values of the censored training points.
We also show the lines ﬁt by least squares (ignoring censoring) and by EM. Based on Figure 5.6 of (Tanner1996). Figure generated by linregCensoredSchmeeHahnDemo , written by Hannes Bretschneider.
Exercise 11.12 EM for robust linear regression with a Student t likelihood
Consider a model of the form
p(y
i|xi,w,σ2,ν)=T(yi|wTxi,σ2,ν) (11.136)
Derive an EM algorithm to compute the MLE for w. You may assume νandσ2are ﬁxed, for simplicity.
Hint: see Section 11.4.5.
Exercise 11.13 EM for EB estimation of Gaussian shrinkage model
Extend the results of Section 5.6.2.2 to the case where the σ2
jare not equal (but are known). Hint: treat
theθjas hidden variables, and then to integrate them out in the E step, and maximize η=(μ,τ2)in the
M step.Exercise 11.14 EM for censored linear regression
Censored regression refers to the case where one knows the outcome is at least (or at most) a certain
value, but the precise value is unknown. This arises in many different settings. For example, suppose one
is trying to learn a model that can predict how long a program will take to run, for different settings ofits parameters. One may abort certain runs if they seem to be taking too long; the resulting run times aresaid to be right censored. For such runs, all we know is that y
i≥ci,w h e r eciis the censoring time,
that is,yi=m i n (zi,ci),w h e r eziis the true running time and yiis the observed running time. We
can also deﬁne left censored andinterval censored models.3Derive an EM algorithm for ﬁtting a linear
regression model to right-censored data. Hint: use the results from Exercise 11.15. See Figure 11.25 for anexample, based on the data from (Schmee and Hahn 1979). We notice that the EM line is tilted upwardsmore, since the model takes into account the fact that the truncated values are actually higher than theobserved values.
3. There is a closely related model in econometrics called the Tobit model, in which yi=m a x (zi,0), so we only
get to observe positive outcomes. An example of this is when zirepresents “desired investment”, and yiis actual
investment. Probit regression (Section 9.4) is another example.
380 Chapter 11. Mixture models and the EM algorithm
Exercise 11.15 Posterior mean and variance of a truncated Gaussian
Letzi=μi+σ/epsilon1i,w h e r e/epsilon1i∼N(0,1). Sometimes, such as in probit regression or censored regression,
we do not observe zi, but we observe the fact that it is above some threshold, namely we observe the event
E=I(zi≥ci)=I(/epsilon1i≥ci−μi
σ). (See Exercise 11.14 for details on censored regression, and Section 11.4.6
for probit regression.) Show that
E[zi|zi≥ci]=μ i+σH/parenleftBigci−μi
σ/parenrightBig
(11.137)
and
E/bracketleftbig
z2
i|zi≥ci/bracketrightbig
=μ2
i+σ2+σ(ci+μi)H/parenleftBigci−μi
σ/parenrightBig
(11.138)
where we have deﬁned
H(u)/definesφ(u)
1−Φ(u)(11.139)
and where φ(u)is the pdf of a standard Gaussian, and Φ(u)is its cdf.
Hint 1: we have p(/epsilon1i|E)=p(/epsilon1i,E)
p(E),w h e r eE is some event of interest.
Hint 2: It can be shown that
d
dwN(w|0,1) =−wN(w|0,1) (11.140)
and hence
/integraldisplayc
bwN(w|0,1) =N(b|0,1)−N(c|0,1) (11.141)
12 Latent linear models
12.1 Factor analysis
One problem with mixture models is that they only use a single latent variable to generate the
observations. In particular, each observation can only come from one of Kprototypes. One can
think of a mixture model as using Khidden binary variables, representing a one-hot encoding
of the cluster identity. But because these variables are mutually exclusive, the model is stilllimited in its representational power.
An alternative is to use a vector of real-valued latent variables, z
i∈RL. The simplest prior
to use is a Gaussian (we will consider other choices later):
p(zi)=N(zi|μ0,Σ0) (12.1)
If the observations are also continuous, so xi∈RD, we may use a Gaussian for the likelihood.
Just as in linear regression, we will assume the mean is a linear function of the (hidden) inputs,thus yielding
p(x
i|zi,θ)=N(Wzi+μ,Ψ) (12.2)
whereWis aD×Lmatrix, known as the factor loading matrix, and Ψis aD×Dcovariance
matrix. We take Ψto be diagonal, since the whole point of the model is to “force” zito explain
the correlation, rather than “baking it in” to the observation’s covariance. This overall modelis called factor analysis orFA. The special case in which Ψ=σ
2Iis called probabilistic
principal components analysis orPPCA. The reason for this name will become apparent later.
The generative process, where L=1,D=2andΨis diagonal, is illustrated in Figure 12.1.
We take an isotropic Gaussian “spray can” and slide it along the 1d line deﬁned by wzi+μ.
This induces an ellongated (and hence correlated) Gaussian in 2d.
12.1.1 FA is a low rank parameterization of an MVN
FA can be thought of as a way of specifying a joint density model on xusing a small number
of parameters. To see this, note that from Equation 4.126, the induced marginal distributionp(x
i|θ)is a Gaussian:
p(xi|θ)=/integraldisplay
N(xi|Wzi+μ,Ψ)N(zi|μ0,Σ0)dzi (12.3)
=N(xi|Wμ0+μ,Ψ+WΣ0WT) (12.4)
382 Chapter 12. Latent linear models
Z
[[[[
]S]S[ȝ
S]]_Z_S[_]
ȝ

Figure 12.1 Illustration of the PPCA generative process, where we have L=1latent dimension generating
D=2observed dimensions. Based on Figure 12.9 of (Bishop 2006b).
From this, we see that we can set μ0=0without loss of generality, since we can always absorb
Wμ0intoμ. Similarly, we can set Σ0=Iwithout loss of generality, because we can always
“emulate” a correlated prior by using deﬁning a new weight matrix, ˜W=WΣ−1
2
0. Then we
ﬁnd
cov[x|θ]=˜WT+E/bracketleftbig
/epsilon1/epsilon1T/bracketrightbig
=(WΣ−1
2
0)Σ0(WΣ−1
2
0)T+Ψ=WWT+Ψ (12.5)
We thus see that FA approximates the covariance matrix of the visible vector using a low-rank
decomposition:
C/definescov[x]=WWT+Ψ (12.6)
This only uses O(LD)parameters, which allows a ﬂexible compromise between a full covariance
Gaussian, with O(D2)parameters, and a diagonal covariance, with O(D)parameters. Note that
if we did not restrict Ψto be diagonal, we could trivially set Ψto a full covariance matrix; then
we could set W=0, in which case the latent factors would not be required.
12.1.2 Inference of the latent factors
Although FA can be thought of as just a way to deﬁne a density on x, it is often used because
we hope that the latent factors zwill reveal something interesting about the data. To do this,
we need to compute the posterior over the latent factors. We can use Bayes rule for Gaussians
to give
p(zi|xi,θ)=N(zi|mi,Σi) (12.7)
Σi/defines(Σ−1
0+WTΨ−1W)−1(12.8)
mi/definesΣi(WTΨ−1(xi−μ)+Σ−1
0μ0) (12.9)
Note that in the FA model, Σiis actually independent of i, so we can denote it by Σ. Computing
this matrix takes O(L3+L2D)time, and computing each mi=E[zi|xi,θ]takesO(L2+LD)
time. The miare sometimes called the latent scores,o rl a t e n t factors.
12.1. Factor analysis 383
−1 −0.5 0 0.5 1−1−0.8−0.6−0.4−0.200.20.40.60.81
RetailDealerEngine
Cylinders
Horsepower
CityMPGHighwayMPGWeight WheelbaseLengthWidth
Component 1Component 2rotation=none
Porsche 911 Honda InsightGMC Yukon XL 2500 SLT
Mercedes−Benz CL600Kia Sorento LX
Mercedes−Benz G500
Saturn Ion1Nissan Pathfinder Armada SE
Figure 12.2 2D projection of 2004 cars data based on factor analysis. The blue text are the names of cars
corresponding to certain chosen points. Figure generated by faBiplotDemo .
Let us give a simple example, based (Shalizi 2009). We consider a dataset of D=1 1variables
andN= 387cases describing various aspects of cars, such as the engine size, the number of
cylinders, the miles per gallon (MPG), the price, etc. We ﬁrst ﬁt a L=2dimensional model. We
can plot the miscores as points in R2, to visualize the data, as shown in Figure 12.2.
To get a better understanding of the “meaning” of the latent factors, we can project unit vectors
corresponding to each of the feature dimensions, e1=( 1,0,...,0),e2=( 0,1,0,...,0), etc.
into the low dimensional space. These are shown as blue lines in Figure 12.2; this is known as
abiplot. We see that the horizontal axis represents price, corresponding to the features labeled
“dealer” and “retail”, with expensive cars on the right. The vertical axis represents fuel efficiency(measured in terms of MPG) versus size: heavy vehicles are less efficient and are higher up,whereas light vehicles are more efficient and are lower down. We can “verify” this interpretationby clicking on some points, and ﬁnding the closest exemplars in the training set, and printingtheir names, as in Figure 12.2. However, in general, interpreting latent variable models is fraughtwith difficulties, as we discuss in Section 12.1.3.
12.1.3 Unidentiﬁability
Just like with mixture models, FA is also unidentiﬁable. To see this, suppose Ris an arbitrary
orthogonal rotation matrix, satisfying RRT=I. Let us deﬁne ˜W=WR; then the likelihood
384 Chapter 12. Latent linear models
function of this modiﬁed matrix is the same as for the unmodiﬁed matrix, since
cov[x]=˜WE/bracketleftbig
zzT/bracketrightbig˜WT+E/bracketleftbig
/epsilon1/epsilon1T/bracketrightbig
(12.10)
=WRRTWT+Ψ=WWT+Ψ (12.11)
Geometrically, multiplying Wby an orthogonal matrix is like rotating zbefore generating x;
but since zis drawn from an isotropic Gaussian, this makes no difference to the likelihood.
Consequently, we cannot unique identify W, and therefore cannot uniquely identify the latent
factors, either.
To ensure a unique solution, we need to remove L(L−1)/2degrees of freedom, since that
is the number of orthonormal matrices of size L×L.1In total, the FA model has D+LD−
L(L−1)/2free parameters (excluding the mean), where the ﬁrst term arises from Ψ. Obviously
we require this to be less than or equal to D(D+1)/2, which is the number of parameters in
an unconstrained (but symmetric) covariance matrix. This gives us an upper bound on L,a s
follows:
Lmax=⌊D+0.5(1−√
1+8D)⌋ (12.12)
For example, D=6impliesL≤3. But we usually never choose this upper bound, since it
would result in overﬁtting (see discussion in Section 12.3 on how to choose L).
Unfortunately, even if we set L<L max, we still cannot uniquely identify the parameters,
since the rotational ambiguity still exists. Non-identiﬁability does not affect the predictive per-
formance of the model. However, it does affect the loading matrix, and hence the interpretationof the latent factors. Since factor analysis is often used to uncover structure in the data, thisproblem needs to be addressed. Here are some commonly used solutions:
•ForcingWto be orthonormal Perhaps the cleanest solution to the identiﬁability problem
is to force Wto be orthonormal, and to order the columns by decreasing variance of the
corresponding latent factors. This is the approach adopted by PCA, which we will discuss in
Section 12.2. The result is not necessarily more interpretable, but at least it is unique.
•ForcingWto be lower triangular One way to achieve identiﬁability, which is popular
in the Bayesian community (e.g., (Lopes and West 2004)), is to ensure that the ﬁrst visiblefeature is only generated by the ﬁrst latent factor, the second visible feature is only generatedby the ﬁrst two latent factors, and so on. For example, if L=3andD=4, the correspond
factor loading matrix is given by
W=⎛
⎜⎜⎝w
1100
w21w220
w31w32w33
w41w42w43⎞
⎟⎟⎠(12.13)
We also require that wjj>0forj=1:L. The total number of parameters in this
constrained matrix is D+DL−L(L−1)/2, which is equal to the number of uniquely
identiﬁable parameters. The disadvantage of this method is that the ﬁrst Lvisible variables,
1. To see this, note that there are L−1free parameters in Rin the ﬁrst column (since the column vector must be
normalized to unit length), there are L−2free parameters in the second column (which must be orthogonal to the
ﬁrst), and so on.
12.1. Factor analysis 385
Ψπ
Wkμk
xiqizi
N K
Figure 12.3 Mixture of factor analysers as a DGM.
known as the founder variables, affect the interpretation of the latent factors, and so must
be chosen carefully.
•Sparsity promoting priors on the weights Instead of pre-specifying which entries in W
are zero, we can encourage the entries to be zero, using /lscript1regularization (Zou et al. 2006),
ARD (Bishop 1999; Archambeau and Bach 2008), or spike-and-slab priors (Rattray et al. 2009).
This is called sparse factor analysis. This does not necessarily ensure a unique MAP estimate,but it does encourage interpretable solutions. See Section 13.8.
•Choosing an informative rotation matrix There are a variety of heuristic methods that try
to ﬁnd rotation matrices Rwhich can be used to modify W(and hence the latent factors) so
as to try to increase the interpretability, typically by encouraging them to be (approximately)sparse. One popular method is known as varimax (Kaiser 1958).
•Use of non-Gaussian priors for the latent factors In Section 12.6, we will dicuss how re-
placingp(z
i)with a non-Gaussian distribution can enable us to sometimes uniquely identify
Was well as the latent factors. This technique is known as ICA.
12.1.4 Mixtures of factor analysers
The FA model assumes that the data lives on a low dimensional linear manifold. In reality, mostdata is better modeled by some form of low dimensional curvedmanifold. We can approximate
a curved manifold by a piecewise linear manifold. This suggests the following model: let thek’th linear subspace of dimensionality L
kbe represented by Wk,f o rk=1:K. Suppose we
have a latent indicator qi∈{1,...,K}specifying which subspace we should use to generate
the data. We then sample zifrom a Gaussian prior and pass it through the Wkmatrix (where
k=qi), and add noise. More precisely, the model is as follows:
p(xi|zi,qi=k,θ)=N (xi|μk+Wkzi,Ψ) (12.14)
p(zi|θ)=N (zi|0,I) (12.15)
p(qi|θ)=C a t ( qi|π) (12.16)
386 Chapter 12. Latent linear models
−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−1.5−1−0.500.511.5
(a)−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−1.5−1−0.500.511.5
(b)
Figure 12.4 Mixture of 1d PPCAs ﬁt to a dataset, for K=1,10. Figure generated by
mixPpcaDemoNetlab .
This is called a mixture of factor analysers (MFA) (Hinton et al. 1997). The CI assumptions are
represented in Figure 12.3.
Another way to think about this model is as a low-rank version of a mixture of Gaussians. In
particular, this model needs O(KLD)parameters instead of the O(KD2)parameters needed
for a mixture of full covariance Gaussians. This can reduce overﬁtting. In fact, MFA is a good
generic density model for high-dimensional real-valued data.
12.1.5 EM for factor analysis models
Using the results from Chapter 4, it is straightforward to derive an EM algorithm to ﬁt an FAmodel. With just a little more work, we can ﬁt a mixture of FAs. Below we state the resultswithout proof. The derivation can be found in (Ghahramani and Hinton 1996a); however, derivingthese equations yourself is a useful exercise if you want to become proﬁcient at the math.
To obtain the results for a single factor analyser, just set r
ic=1andc=1in the equations
below. In Section 12.2.5 we will see a further simpliﬁcation of these equations that arises whenﬁtting a PPCA model, where the results will turn out to have a particularly simple and elegantintepretation.
In the E step, we compute the posterior responsibility of cluster cfor data point iusing
r
ic/definesp(qi=c|xi,θ)∝πcN(xi|μc,WcWT
c+Ψ) (12.17)
The conditional posterior for ziis given by
p(zi|xi,qi=c,θ)=N (zi|mic,Σic) (12.18)
Σic/defines(IL+WT
cΨ−1
cWc)−1(12.19)
mic/definesΣic(WT
cΨ−1
c(xi−μc)) (12.20)
In the M step, it is easiest to estimate μcandWcat the same time, by deﬁning ˜Wc=
12.2. Principal components analysis (PCA) 387
(Wc,μc),˜z=(z,1), Also, deﬁne
bic/definesE[˜ z|xi,qi=c]=[mic;1] (12.21)
Cic/definesE/bracketleftbig
˜z˜zT|xi,qi=c/bracketrightbig
=/parenleftbiggE/bracketleftbig
zzT|xi,qi=c/bracketrightbig
E[z|xi,qi=c]
E[z|xi,qi=c]T1/parenrightbigg
(12.22)
Then the M step is as follows:
ˆ˜Wc=/bracketleftBigg/summationdisplay
iricxibT
ic/bracketrightBigg/bracketleftBigg/summationdisplay
iricCic/bracketrightBigg−1
(12.23)
ˆΨ=1
Ndiag/braceleftBigg/summationdisplay
icric/parenleftBig
xi−ˆ˜Wcbic/parenrightBig
xT
i/bracerightBigg
(12.24)
ˆπc=1
NN/summationdisplay
i=1ric (12.25)
Note that these updates are for “vanilla” EM. A much faster version of this algorithm, based
on ECM, is described in (Zhao and Yu 2008).
12.1.6 Fitting FA models with missing data
In many applications, such as collaborative ﬁltering, we have missing data. One virtue of the
EM approach to ﬁtting an FA/PPCA model is that it is easy to extend to this case. However,overﬁtting can be a problem if there is a lot of missing data. Consequently it is important toperform MAP estimation or to use Bayesian inference. See e.g., (Ilin and Raiko 2010) for details.
12.2 Principal components analysis (PCA)
Consider the FA model where we constrain Ψ=σ2I, andWto be orthonormal. It can
be shown (Tipping and Bishop 1999) that, as σ2→0, this model reduces to classical (non-
probabilistic) principal components analysis (PCA), also known as the Karhunen Loeve
transform. The version where σ2>0is known as probabilistic PCA (PPCA) (Tipping and
Bishop 1999), or sensible PCA (Roweis 1997). (An equivalent result was derived independently,
from a different perspective, in (Moghaddam and Pentland 1995).)
To make sense of this result, we ﬁrst have to learn about classical PCA. We then connect PCA
to the SVD. And ﬁnally we return to discuss PPCA.
12.2.1 Classical PCA: statement of the theorem
Thesynthesis view of classical PCA is summarized in the forllowing theorem.
Theorem 12.2.1. Suppose we want to ﬁnd an orthogonal set of Llinear basis vectors wj∈RD,
and the corresponding scores zi∈RL, such that we minimize the average reconstruction error
J(W,Z)=1
NN/summationdisplay
i=1||xi−ˆxi||2(12.26)
388 Chapter 12. Latent linear models
−5 0 5−3−2−101234
(a)−4 −3 −2 −1 0 1 2 3−5−4−3−2−101234
(b)
Figure 12.5 An illustration of PCA and PPCA where D=2andL=1. Circles are the original data
points, crosses are the reconstructions. The red star is the data mean. (a) PCA. The points are orthogonally
projected onto the line. Figure generated by pcaDemo2d . (b) PPCA. The projection is no longer orthogonal:
the reconstructions are shrunk towards the data mean (red star). Based on Figure 7.6 of (Nabney 2001).Figure generated by ppcaDemo2d .
whereˆxi=Wzi, subject to the constraint that Wis orthonormal. Equivalently, we can write this
objective as follows:
J(W,Z)=||X−WZT||2
F (12.27)
whereZis anN×Lmatrix with the ziin its rows, and ||A||Fis theFrobenius norm of matrix
A, deﬁned by
||A||F=/radicaltp/radicalvertex/radicalvertex/radicalbtm/summationdisplay
i=1n/summationdisplay
j=1a2
ij=/radicalBig
tr(ATA)=||A(:)|| 2 (12.28)
The optimal solution is obtained by setting ˆW=VL, whereVLcontains the Leigenvectors
with largest eigenvalues of the empirical covariance matrix, ˆΣ=1
N/summationtextN
i=1xixT
i. (We assume the
xihave zero mean, for notational simplicity.) Furthermore, the optimal low-dimensional encoding
of the data is given by ˆzi=WTxi, which is an orthogonal projection of the data onto the column
space spanned by the eigenvectors.
An example of this is shown in Figure 12.5(a) for D=2andL=1. The diagonal line is the
vectorw1; this is called the ﬁrst principal component or principal direction. The data points
xi∈R2are orthogonally projected onto this line to get zi∈R. This is the best 1-dimensional
approximation to the data. (We will discuss Figure 12.5(b) later.)
In general, it is hard to visualize higher dimensional data, but if the data happens to be a
set of images, it is easy to do so. Figure 12.6 shows the ﬁrst three principal vectors, reshaped
as images, as well as the reconstruction of a speciﬁc image using a varying number of basisvectors. (We discuss how to choose Lin Section 11.5.)
Below we will show that the principal directions are the ones along which the data shows
maximal variance. This means that PCA can be “misled” by directions in which the varianceis high merely because of the measurement scale. Figure 12.7(a) shows an example, where thevertical axis (weight) uses a large range than the horizontal axis (height), resulting in a line thatlooks somewhat “unnatural”. It is therefore standard practice to standardize the data ﬁrst, or
12.2. Principal components analysis (PCA) 389
mean
 principal basis 1
principal basis 2
 principal basis 3
(a)
reconstructed with 2 bases
 reconstructed with 10 bases
reconstructed with 100 bases
 reconstructed with 506 bases
(b)
Figure 12.6 (a) The mean and the ﬁrst three PC basis vectors (eigendigits) based on 25 images of the digit
3 (from the MNIST dataset). (b) Reconstruction of an image based on 2, 10, 100 and all the basis vectors.
Figure generated by pcaImageDemo .
55 60 65 70 75 80 8550100150200250300
heightweight
(a)−4 −3 −2 −1 0 1 2 3 4−4−3−2−1012345
heightweight
(b)
Figure 12.7 Effect of standardization on PCA applied to the height/ weight dataset. Left: PCA of raw data.
Right: PCA of standardized data. Figure generated by pcaDemoHeightWeight .
equivalently, to work with correlation matrices instead of covariance matrices. The beneﬁts of
this are apparent from Figure 12.7(b).
12.2.2 Proof *
Proof.We usewj∈RDto denote the j’th principal direction, xi∈RDto denote the i’th
high-dimensional observation, zi∈RLto denote the i’th low-dimensional representation, and
˜ zj∈RNto denote the [z1j,...,z Nj], which is the j’th component of all the low-dimensional
vectors.
Let us start by estimating the best 1d solution, w1∈RD, and the corresponding projected
points˜ z1∈RN. We will ﬁnd the remaining bases w2,w3, etc. later. The reconstruction error
390 Chapter 12. Latent linear models
is given by
J(w1,z1)=1
NN/summationdisplay
i=1||xi−zi1w1||2=1
NN/summationdisplay
i=1(xi−zi1w1)T(xi−zi1w1)(12.29)
=1
NN/summationdisplay
i=1[xT
ixi−2zi1wT
1xi+z2
i1wT
1w1] (12.30)
=1
NN/summationdisplay
i=1[xTixi−2zi1wT
1xi+z2
i1] (12.31)
sincewT
1w1=1(by the orthonormality assumption). Taking derivatives wrt zi1and equating
to zero gives
∂
∂zi1J(w1,z1)=1
N[−2wT
1xi+2zi1]=0⇒zi1=wT
1xi (12.32)
So the optimal reconstruction weights are obtained by orthogonally projecting the data onto the
ﬁrst principal direction, w1(see Figure 12.5(a)). Plugging back in gives
J(w1)=1
NN/summationdisplay
i=1[xT
ixi−z2
i1]=c o n s t −1
NN/summationdisplay
i=1z2
i1 (12.33)
Now the variance of the projected coordinates is given by
var[˜ z1]=E/bracketleftbig
˜ z21/bracketrightbig
−(E[˜ z1])2=1
NN/summationdisplay
i=1z2
i1−0 (12.34)
since
E[zi1]=E/bracketleftbig
xTiw1/bracketrightbig
=E[xi]Tw1=0 (12.35)
because the data has been centered. From this, we see that minimizing the reconstruction error
is equivalent to maximizing the variance of the projected data, i.e.,
argmin
w1J(w1) = argmax
w1var[˜ z1] (12.36)
This is why it is often said that PCA ﬁnds the directions of maximal variance. This is called the
analysis view of PCA.
The variance of the projected data can be written as
1
NN/summationdisplay
i=1z2
i1=1
NN/summationdisplay
i=1wT
1xixT
iw1=wT
1ˆΣw1 (12.37)
whereˆΣ=1
N/summationtextN
i=1/summationtext
ixixT
iis the empirical covariance matrix (or correlation matrix if the
data is standardized).
12.2. Principal components analysis (PCA) 391
We can trivially maximize the variance of the projection (and hence minimize the recon-
struction error) by letting ||w1|| → ∞, so we impose the constraint ||w1||=1and instead
maximize
˜J(w1)=wT
1ˆΣw1+λ1(wT
1w1−1) (12.38)
whereλ1is the Lagrange multiplier. Taking derivatives and equating to zero we have
∂
∂w1˜J(w1)=2 ˆΣw1−2λ1w1=0 (12.39)
ˆΣw1=λ1w1 (12.40)
Hence the direction that maximizes the variance is an eigenvector of the covariance matrix. Left
multiplying by w1(and using wT
1w1=1) we ﬁnd that the variance of the projected data is
wT
1ˆΣw1=λ1 (12.41)
Since we want to maximize the variance, we pick the eigenvector which corresponds to thelargest eigenvalue.
Now let us ﬁnd another direction w
2to further minimize the reconstruction error, subject to
wT
1w2=0andwT
2w2=1. The error is
J(w1,z1,w2,z2)=1
NN/summationdisplay
i=1||xi−zi1w1−zi2w2||2(12.42)
Optimizing wrt w1andz1gives the same solution as before. Exercise 12.4 asks you to show
that∂J
∂z2=0yieldszi2=wT
2xi. In other words, the second principal encoding is gotten by
projecting onto the second principal direction. Substituting in yields
J(w2)=1
nN/summationdisplay
i=1[xT
ixi−wT
1xixTiw1−wT
2xixTiw2]=c o n s t −wT
2ˆΣw2 (12.43)
Dropping the constant term and adding the constraints yields
˜J(w2)=−wT
2ˆΣw2+λ2(wT
2w2−1)+λ12(wT
2w1−0) (12.44)
Exercise 12.4 asks you to show that the solution is given by the eigenvector with the second
largest eigenvalue:
ˆΣw2=λ2w2 (12.45)
The proof continues in this way. (Formally one can use induction.)
392 Chapter 12. Latent linear models
12.2.3 Singular value decomposition (SVD)
We have deﬁned the solution to PCA in terms of eigenvectors of the covariance matrix. However,
there is another way to obtain the solution, based on the singular value decomposition,o r
SVD. This basically generalizes the notion of eigenvectors from square matrices to any kind of
matrix.
In particular, any (real) N×DmatrixXcan be decomposed as follows
X/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×D=U/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×NS/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×DVT
/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
D×D(12.46)
whereUis anN×Nmatrix whose columns are orthornormal (so UTU=IN),VisD×D
matrix whose rows and columns are orthonormal (so VTV=VVT=ID), andSis aN×D
matrix containing the r=m i n (N,D)singular values σi≥0on the main diagonal, with 0s
ﬁlling the rest of the matrix. The columns of Uare the left singular vectors, and the columns
ofVare the right singular vectors. See Figure 12.8(a) for an example.
Since there are at most Dsingular values (assuming N>D), the last N−Dcolumns of U
are irrelevant, since they will be multiplied by 0. The economy sized SVD,o rthin SVD, avoids
computing these unnecessary elements. Let us denote this decomposition by ˆUˆSˆV.I fN>D,
we have
X/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×D=ˆU/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×DˆS/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
D×DˆVT
/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
D×D(12.47)
as in Figure 12.8(a). If N<D,w eh a v e
X/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×D=ˆU/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×NˆS/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×NˆVT
/bracehtipupleft/bracehtipdownright/bracehtipdownleft/bracehtipupright
N×D(12.48)
Computing the economy-sized SVD takes O(NDmin(N,D ))time (Golub and van Loan 1996,
p254).
The connection between eigenvectors and singular vectors is the following. For an arbitrary
real matrix X,i fX=USVT,w eh a v e
XTX=VSTUTUSVT=V(STS)VT=VDVT(12.49)
whereD=S2is a diagonal matrix containing the squares singular values. Hence
(XTX)V=VD (12.50)
so the eigenvectors of XTXare equal to V, the right singular vectors of X, and the eigenvalues
ofXTXare equal to D, the squared singular values. Similarly
XXT=USVTVSTUT=U(SST)UT(12.51)
(XXT)U=U(SST)=UD (12.52)
so the eigenvectors of XXTare equal to U, the left singular vectors of X. Also, the eigenvalues
ofXXTare equal to the squared singular values. We can summarize all this as follows:
U=evec(XXT),V=evec(XTX),S2=eval(XXT)=eval(XTX) (12.53)
12.2. Principal components analysis (PCA) 393
=
0σ1
σD...D
DD N−D D D
N
X= US VT
(a)
/similarequalL
σ1...σLL D
LD
N
X/similarequalULSLVT
L
(b)
Figure 12.8 (a) SVD decomposition of non-square matrices X=USVT. The shaded parts of S, and all
the off-diagonal terms, are zero. The shaded entries in UandSare not computed in the economy-sized
version, since they are not needed. (b) Truncated SVD approximation of rank L.
Since the eigenvectors are unaffected by linear scaling of a matrix, we see that the right
singular vectors of Xare equal to the eigenvectors of the empirical covariance ˆΣ. Furthermore,
the eigenvalues of ˆΣare a scaled version of the squared singular values. This means we can
perform PCA using just a few lines of code (see pcaPmtk).
However, the connection between PCA and SVD goes deeper. From Equation 12.46, we can
represent a rank rmatrix as follows:
X=σ1⎛
⎝|
u1
|⎞⎠/parenleftbig
−v
T
1−/parenrightbig
+···+σr⎛⎝|
u
r
|⎞⎠/parenleftbig
−v
T
r−/parenrightbig
(12.54)
If the singular values die off quickly as in Figure 12.10, we can produce a rank Lapproximation
to the matrix as follows:
X≈U:,1:LS1:L,1:LVT
:,1:L (12.55)
This is called a truncated SVD (see Figure 12.8(b)). The total number of parameters needed to
represent an N×Dmatrix using a rank Lapproximation is
NL+LD+L=L(N+D+1) (12.56)
394 Chapter 12. Latent linear models
rank 200
(a)
rank 2
(b)
rank 5
(c)
rank 20
(d)
Figure 12.9 Low rank approximations to an image. Top left: The original image is of size 200×320,s o
has rank 200. Subsequent images have ranks 2, 5, and 20. Figure generated by svdImageDemo .
0 10 20 30 40 50 60 70 80 90 10045678910log(σi)
i  
original
randomized
Figure 12.10 First 50 log singular values for the clown image (solid red line), and for a data matrix
obtained by randomly shuffling the pixels (dotted green line). Figure generated by svdImageDemo .
12.2. Principal components analysis (PCA) 395
As an example, consider the 200×320pixel image in Figure 12.9(top left). This has 64,000
numbers in it. We see that a rank 20 approximation, with only (200+320+1) ×20 = 10, 420
numbers is a very good approximation.
One can show that the error in this approximation is given by
||X−XL||F≈σL+1 (12.57)
Furthermore, one can show that the SVD offers the best rank Lapproximation to a matrix (best
in the sense of minimizing the above Frobenius norm).
Let us connect this back to PCA. Let X=USVTbe a truncated SVD of X. We know that
ˆW=V, and that ˆZ=XˆW,s o
ˆZ=USVTV=US (12.58)
Furthermore, the optimal reconstruction is given by ˆX=ZˆWT,s ow eﬁ n d
ˆX=USVT(12.59)
This is precisely the same as a truncated SVD approximation! This is another illustration of the
fact that PCA is the best low rank approximation to the data.
12.2.4 Probabilistic PCA
We are now ready to revisit PPCA. One can show the following remarkable result.
Theorem 12.2.2 ((Tipping and Bishop 1999)). Consider a factor analysis model in which Ψ=σ2I
andWis orthogonal. The observed data log likelihood is given by
logp(X|W,σ2)=−N
2ln|C|−1
2N/summationdisplay
i=1xT
iC−1xi=−N
2ln|C|+tr(C−1ˆΣ)(12.60)
whereC=WWT+σ2IandS=1
N/summationtextN
i=1xixT
i=( 1/N)XTX. (We are assuming centered
data, for notational simplicity.) The maxima of the log-likelihood are given by
ˆW=V(Λ−σ2I)1
2R (12.61)
whereRis an arbitrary L×Lorthogonal matrix, Vis theD×Lmatrix whose columns are the
ﬁrstLeigenvectors of S, andΛis the corresponding diagonal matrix of eigenvalues. Without loss
of generality, we can set R=I. Furthermore, the MLE of the noise variance is given by
ˆσ2=1
D−LD/summationdisplay
j=L+1λj (12.62)
which is the average variance associated with the discarded dimensions.
Thus, asσ2→0,w eh a v e ˆW→V, as in classical PCA. What about ˆZ? It is easy to see that
the posterior over the latent factors is given by
p(zi|xi,ˆθ)=N (zi|ˆF−1ˆWTxi,σ2ˆF−1) (12.63)
ˆF/definesˆWTˆW+ˆσ2I (12.64)
396 Chapter 12. Latent linear models
(Do not confuse F=WTW+σ2IwithC=WWT+σ2I.) Hence, as σ2→0, we ﬁnd
ˆW→V,ˆF→Iandˆzi→VTxi. Thus the posterior mean is obtained by an orthogonal
projection of the data onto the column space of V, as in classical PCA.
Note, however, that if σ2>, the posterior mean is not an orthogonal projection, since it is
shrunk somewhat towards the prior mean, as illustrated in Figure 12.5(b). This sounds like an
undesirable property, but it means that the reconstructions will be closer to the overall datamean,ˆμ=
x.
12.2.5 EM algorithm for PCA
Although the usual way to ﬁt a PCA model uses eigenvector methods, or the SVD, we can alsouse EM, which will turn out to have some advantages that we discuss below. EM for PCA relieson the probabilistic formulation of PCA. However the algorithm continues to work in the zeronoise limit, σ
2=0, as shown by (Roweis 1997).
Let˜Zbe aL×Nmatrix storing the posterior means (low-dimensional representations)
along its columns. Similarly, let ˜X=XTstore the original data along its columns. From
Equation 12.63, when σ2=0,w eh a v e
˜Z=(WTW)−1WT˜X (12.65)
This constitutes the E step. Notice that this is just an orthogonal projection of the data.
From Equation 12.23, the M step is given by
ˆW=/bracketleftBigg/summationdisplay
ixiE[zi]T/bracketrightBigg/bracketleftBigg/summationdisplay
iE[zi]E[zi]T/bracketrightBigg−1
(12.66)
where we exploited the fact that Σ=c o v[zi|xi,θ]=0Iwhenσ2=0. It is worth comparing
this expression to the MLE for multi-output linear regression (Equation 7.89), which has the formW=(/summationtext
iyixT
i)(/summationtext
ixixTi)−1. Thus we see that the M step is like linear regression where we
replace the observed inputs by the expected values of the latent variables.
In summary, here is the entire algorithm:
•Es t e p˜Z=(WTW)−1WT˜X
•Ms t e pW =˜X˜ZT(˜Z˜ZT)−1
(Tipping and Bishop 1999) showed that the only stable ﬁxed point of the EM algorithm is the
globally optimal solution. That is, the EM algorithm converges to a solution where Wspans
the same linear subspace as that deﬁned by the ﬁrst Leigenvectors. However, if we want W
to be orthogonal, and to contain the eigenvectors in descending order of eigenvalue, we have
to orthogonalize the resulting matrix (which can be done quite cheaply). Alternatively, we canmodify EM to give the principal basis directly (Ahn and Oh 2003).
This algorithm has a simple physical analogy in the case D=2andL=1(Roweis 1997).
Consider some points in R
2attached by springs to a rigid rod, whose orientation is deﬁned by a
vectorw.L e tzibe the location where the i’th spring attaches to the rod. In the E step, we hold
the rod ﬁxed, and let the attachment points slide around so as to minimize the spring energy(which is proportional to the sum of squared residuals). In the M step, we hold the attachment
12.2. Principal components analysis (PCA) 397
−3 −2 −1 0 1 2 3−2.5−2−1.5−1−0.500.511.522.5E step 1
(a)−3 −2 −1 0 1 2 3−2.5−2−1.5−1−0.500.511.522.5M step 1
(b)
−3 −2 −1 0 1 2 3−2.5−2−1.5−1−0.500.511.522.5E step 2
(c)−3 −2 −1 0 1 2 3−3−2−10123M step 2
(d)
Figure 12.11 Illustration of EM for PCA when D=2andL=1. Green stars are the original data points,
black circles are their reconstructions. The weight vector wis represented by blue line. (a) We start with
a random initial guess of w. The E step is represented by the orthogonal projections. (b) We update the
rodwin the M step, keeping the projections onto the rod (black circles) ﬁxed. (c) Another E step. The
black circles can ’slide’ along the rod, but the rod stays ﬁxed. (d) Another M step. Based on Figure 12.12 of
(Bishop 2006b). Figure generated by pcaEmStepByStep .
points ﬁxed and let the rod rotate so as to minimize the spring energy. See Figure 12.11 for an
illustration.
Apart from this pleasing intuitive interpretation, EM for PCA has the following advantages
over eigenvector methods:
• EM can be faster. In particular, assuming N,D/greatermuchL, the dominant cost of EM is the pro-
jection operation in the E step, so the overall time is O(TLND),w h e r eTis the number of
398 Chapter 12. Latent linear models
(a) (b) (c) (d) (e) (f)
Figure 12.12 Illustration of estimating the effective dimensionalities in a mixture of factor analysers using
VBEM. The blank columns have been forced to 0 via the ARD mechanism. The data was generated from
6 clusters with intrinsic dimensionalities of 7,4,3,2,2,1, which the method has successfully estimated.
Source: Figure 4.4 of (Beal 2003). Used with kind permission of Matt Beal.
iterations. (Roweis 1997) showed experimentally that the number of iterations is usually very
small (the mean was 3.6), regardless of NorD. (This results depends on the ratio of eigenval-
ues of the empirical covariance matrix.) This is much faster than the O(min(ND2,DN2))
time required by straightforward eigenvector methods, although more sophisticated eigenvec-tor methods, such as the Lanczos algorithm, have running times comparable to EM.
• EM can be implemented in an online fashion, i.e., we can update our estimate of Was the
data streams in.
• EM can handle missing data in a simple way (see Section 12.1.6).
• EM can be extended to handle mixtures of PPCA/ FA models.• EM can be modiﬁed to variational EM or to variational Bayes EM to ﬁt more complex models.
12.3 Choosing the number of latent dimensions
In Section 11.5, we discussed how to choose the number of components Kin a mixture model.
In this section, we discuss how to choose the number of latent dimensions Lin a FA/PCA model.
12.3.1 Model selection for FA/PPCA
If we use a probabilistic model, we can in principle compute L∗= argmaxLp(L|D). However,
there are two problems with this. First, evaluating the marginal likelihood for LVMs is quite
difficult. In practice, simple approximations, such as BIC or variational lower bounds (seeSection 21.5), can be used (see also (Minka 2000a)). Alternatively, we can use the cross-validatedlikelihood as a performance measure, although this can be slow, since it requires ﬁtting eachmodelFtimes, where Fis the number of CV folds.
The second issue is the need to search over a potentially large number of models. The usual
approach is to perform exhaustive search over all candidate values of L. However, sometimes
we can set the model to its maximal size, and then use a technique called automatic relevancydetermination (Section 13.7), combined with EM, to automatically prune out irrelevant weights.
12.3. Choosing the number of latent dimensions 399
number of points 
  per cluster 1 7 4 3 2 2
  8        2       1  8      1      2 16 1       4 2 3 2 163322 6 4 1743221 2 8 174322intrinsic dimensionalities
Figure 12.13 We show the estimated number of clusters, and their estimated dimensionalities, as a
function of sample size. The VBEM algorithm found two different solutions when N=8. Note that more
clusters, with larger effective dimensionalities, are discovered as the sample sizes increases. Source: Table
4.1 of (Beal 2003). Used with kind permission of Matt Beal.
This technique will be described in a supervised context in Chapter 13, but can be adapted to
the (M)FA context as shown in (Bishop 1999; Ghahramani and Beal 2000).
Figure 12.12 illustrates this approach applied to a mixture of FAs ﬁt to a small synthetic dataset.
The ﬁgures visualize the weight matrices for each cluster, using Hinton diagrams, where where
the size of the square is proportional to the value of the entry in the matrix.2We see that
many of them are sparse. Figure 12.13 shows that the degree of sparsity depends on the amountof training data, in accord with the Bayesian Occam’s razor. In particular, when the samplesize is small, the method automatically prefers simpler models, but as the sample size getssufficiently large, the method converges on the “correct” solution, which is one with 6 subspacesof dimensionality 1, 2, 2, 3, 4 and 7.
Although the ARD/ EM method is elegant, it still needs to perform search over K. This is
done using “birth” and “death” moves (Ghahramani and Beal 2000). An alternative approach is toperform stochastic sampling in the space of models. Traditional approaches, such as (Lopes andWest 2004), are based on reversible jump MCMC, and also use birth and death moves. However,this can be slow and difficult to implement. More recent approaches use non-parametric priors,combined with Gibbs sampling, see e.g., (Paisley and Carin 2009).
12.3.2 Model selection for PCA
Since PCA is not a probabilistic model, we cannot use any of the methods described above. Anobvious proxy for the likelihood is the reconstruction error:
E(D,L)=1
|D|/summationdisplay
i∈D||xi−ˆxi||2(12.67)
In the case of PCA, the reconstruction is given by by ˆxi=Wzi+μ,w h e r ezi=WT(xi−μ)
andWandμare estimated from Dtrain.
2. Geoff Hinton is an English professor of computer science at the University of Toronto.
400 Chapter 12. Latent linear models
0 100 200 300 400 5000102030405060rmse
num PCstrain set reconstruction error
(a)0 100 200 300 400 5000102030405060rmse
num PCstest set reconstruction error
(b)
Figure 12.14 Reconstruction error on MNIST vs number of latent dimensions used by PCA. (a) Training
set. (b) Test set. Figure generated by pcaOverfitDemo .
Figure 12.14(a) plots E(Dtrain,L)vsLon the MNIST training data in Figure 12.6. We see that
it drops off quite quickly, indicating that we can capture most of the empirical correlation of the
pixels with a small number of factors, as illustrated qualitatively in Figure 12.6.
Exercise 12.5 asks you to prove that the residual error from only using Lterms is given by the
sum of the discarded eigenvalues:
E(Dtrain,L)=D/summationdisplay
j=L+1λj (12.68)
Therefore an alternative to plotting the error is to plot the retained eigenvalues, in decreasingorder. This is called a scree plot, because “the plot looks like the side of a mountain, and ’scree’
refers to the debris fallen from a mountain and lying at its base”.
3This will have the same shape
as the residual error plot.
A related quantity is the fraction of variance explained, deﬁned as
F(Dtrain,L)=/summationtextL
j=1λj/summationtextLmax
j/prime=1λj/prime(12.69)
This captures the same information as the scree plot.
Of course, if we use L= rank(X) , we get zero reconstruction error on the training set.
To avoid overﬁtting, it is natural to plot reconstruction error on the test set. This is shown in
Figure 12.14(b). Here we see that the error continues to go down even as the model becomesmore complex! Thus we do not get the usual U-shaped curve that we typically expect to see.
What is going on? The problem is that PCA is not a proper generative model of the data.
It is merely a compression technique. If you give it more latent dimensions, it will be able toapproximate the test data more accurately. By contrast, a probabilistic model enjoys a BayesianOccam’s razor effect (Section 5.3.1), in that it gets “punished” if it wastes probability mass onparts of the space where there is little data. This is illustrated in Figure 12.15, which plots the
3. Quotation from http://janda .org/workshop/factoranalysis/SPSSrun/SPSS08 .htm.
12.3. Choosing the number of latent dimensions 401
0 100 200 300 400 5001.31.41.51.61.71.81.922.12.2x 106negloglik
num PCstrain set negative loglik
(a)0 100 200 300 400 5001.81.922.12.22.32.42.5x 106negloglik
num PCstest set negative loglik
(b)
Figure 12.15 Negative log likelihood on MNIST vs number of latent dimensions used by PPCA. (a) Training
set. (b) Test set. Figure generated by pcaOverfitDemo .
negative log likelihood, computed using PPCA, vs L. Here, on the test set, we see the usual
U-shaped curve.
These results are analogous to those in Section 11.5.2, where we discussed the issue of choosing
Kin the K-means algorithm vs using a GMM.
12.3.2.1 Proﬁle likelihood
Although there is no U-shape, there is sometimes a “regime change” in the plots, from relatively
large errors to relatively small. One way to automate the detection of this is described in (Zhuand Ghodsi 2006). The idea is this. Let λ
kbe some measure of the error incurred by a model of
sizek, such that λ1≥λ2≥···≥λ Lmax. In PCA, these are the eigenvalues, but the method can
also be applied to K-means. Now consider partitioning these values into two groups, dependingon whether k<Lork>L,w h e r eLis some threshold which we will determine. To measure
the quality of L, we will use a simple change-point model, where λ
k∼N(μ1,σ2)ifk≤L,
andλk∼N(μ2,σ2)ifk>L. (It is important that σ2be the same in both models, to prevent
overﬁtting in the case where one regime has less data than the other.) Within each of the tworegimes, we assume the λ
kare iid, which is obviously incorrect, but is adequate for our present
purposes. We can ﬁt this model for each L=1:Lmaxby partitioning the data and computing
the MLEs, using a pooled estimate of the variance:
μ1(L)=/summationtext
k≤Lλk
L,μ2(L)=/summationtext
k>Lλk
N−L(12.70)
σ2(L)=/summationtext
k≤L(λk−μ1(L))2+/summationtext
k>L(λk−μ2(L))2
N(12.71)
We can then evaluate the proﬁle log likelihood
/lscript(L)=L/summationdisplay
k=1logN(λk|μ1(L),σ2(L))+K/summationdisplay
k=L+1logN(λk|μ2(L),σ2(L)) (12.72)
Finally, we choose L∗= argmax /lscript(L). This is illustrated in Figure 12.16. On the left, we plot
the scree plot, which has the same shape as in Figure 12.14(a). On the right, we plot the proﬁle
402 Chapter 12. Latent linear models
0 10 20 30 40 5000.511.522.533.54x 105
num PCseigenvaluescree plot
(a)0 10 20 30 40 50−5750−5700−5650−5600−5550−5500−5450
num PCsprofile log likelihood
(b)
Figure 12.16 (a) Scree plot for training set, corresponding to Figure 12.14(a). (b) Proﬁle likelihood. Figure
generated by pcaOverfitDemo .
likelihood. Rather miraculously, we see a fairly well-determined peak.
12.4 PCA for categorical data
In this section, we consider extending the factor analysis model to the case where the observed
data is categorical rather than real-valued. That is, the data has the form yij∈{1,...,C},
wherej=1:Ris the number of observed response variables. We assume each yijis generated
from a latent variable zi∈RL, with a Gaussian prior, which is passed through the softmax
function as follows:
p(zi)=N (0,I) (12.73)
p(yi|zi,θ)=R/productdisplay
r=1Cat(yir|S(WT
rzi+w0r)) (12.74)
whereWr∈RL×Mis the factor loading matrix for response j, andw0r∈RMis the offset
term for response r, andθ=(Wr,w0r)R
r=1. (We need an explicit offset term, since clamping
one element of zito 1 can cause problems when computing the posterior covariance.) As in
factor analysis, we have deﬁned the prior mean to be m0=0and the prior covariance V0=I,
since we can capture non-zero mean by changing w0jand non-identity covariance by changing
Wr. We will call this categorical PCA. See Chapter 27 for a discussion of related models.
It is interesting to study what kinds of distributions we can induce on the observed variables
by varying the parameters. For simplicity, we assume there is a single ternary response variable,
soyilives in the 3d probability simplex. Figure 12.17 shows what happens when we vary the
parameters of the prior, m0andV0, which is equivalent to varying the parameters of the
likelihood, W1andw01. We see that this can deﬁne fairly complex distributions over the
simplex. This induced distribution is known as the logistic normal distribution (Aitchison
1982).
We can ﬁt this model to data using a modiﬁed version of EM. The basic idea is to infer
a Gaussian approximation to the posterior p(zi|yi,θ)in the E step, and then to maximize θ
in the M step. The details for the multiclass case, can be found in (Khan et al. 2010) (see
12.4. PCA for categorical data 403
Figure 12.17 Some examples of the logistic normal distribution deﬁned on the 3d simplex. (a) Diagonal
covariance and non-zero mean. (b) Negative correlation between states 1 and 2. (c) Positive correlation
between states 1 and 2. Source: Figure 1 of (Blei and Lafferty 2007). Used with kind permission of David
Blei.
2 4 6 8 10 12 14 1620
40
60
80
100
120
140
(a)−1.5 −1 −0.5 0 0.5 1 1.5−1.5−1−0.500.511.52
(b)
Figure 12.18 Left: 150 synthetic 16 dimensional bit vectors. Right: the 2d embedding learned by binary
PCA, using variational EM. We have color coded points by the identity of the true “prototype” that generated
them. Figure generated by binaryFaDemoTipping .
also Section 21.8.1.1). The details for the binary case for the the sigmoid link can be found in
Exercise 21.9, and for the probit link in Exercise 21.10.
One application of such a model is to visualize high dimensional categorical data. Fig-
ure 12.18(a) shows a simple example where we have 150 6-dimensional bit vectors. It is clear that
each sample is just a noisy copy of one of three binary prototypes. We ﬁt a 2d catFA to this
model, yielding approximate MLEs ˆθ. In Figure 12.18(b), we plot E/bracketleftBig
zi|xi,ˆθ/bracketrightBig
. We see that there
are three distinct clusters, as is to be expected.
In (Khan et al. 2010), we show that this model outperforms ﬁnite mixture models on the task
of imputing missing entries in design matrices consisting of real and categorical data. This is
useful for analysing social science survey data, which often has missing data and variables of
mixed type.
404 Chapter 12. Latent linear models
yixiziwyWx
N
(a)xiyizs
i zxi
BxWxWy
N
(b)
xiyizs
i zxi zy
i
Bx ByWxWy
N
(c)
Figure 12.19 Gaussian latent factor models for paired data. (a) Supervised PCA. (b) Partial least squares.
(c) Canonical correlation analysis.
12.5 PCA for paired and multi-view data
It is common to have a pair of related datasets, e.g., gene expression and gene copy number, or
movie ratings by users and movie reviews. It is natural to want to combine these together into alow-dimensional embedding. This is an example of data fusion. In some cases, we might want
to predict one element of the pair, say x
i1, from the other one, xi2, via the low-dimensional
“bottleneck”.
Below we discuss various latent Gaussian models for these tasks, following the presentation
of (Virtanen 2010). The models easily generalize from pairs to sets of data, xim,f o rm=1:M.
We focus on the case where xim∈RDm. In this case, the joint distribution is multivariate
Gaussian, so we can easily ﬁt the models using EM, or Gibbs sampling.
We can generalize the models to handle discrete and count data by using the exponential
family as a response distribution instead of the Gaussian, as we explain in Section 27.2.2.However, this will require the use of approximate inference in the E step (or an analogousmodiﬁcation to MCMC).
12.5. PCA for paired and multi-view data 405
12.5.1 Supervised PCA (latent factor regression)
Consider the following model, illustrated in Figure 12.19(a):
p(zi)=N (0,IL) (12.75)
p(yi|zi)=N (wT
yzi+μy,σ2
y) (12.76)
p(xi|zi)=N (Wxzi+μx,σ2
xID) (12.77)
In (Yu et al. 2006), this is called supervised PCA. In (West 2003), this is called Bayesian factor
regression. This model is like PCA, except that the target variable yiis taken into account when
learning the low dimensional embedding. Since the model is jointly Gaussian, we have
yi|xi∼N(xT
iw,σ2
y+wT
yCwy) (12.78)
wherew=Ψ−1WxCwy,Ψ=σ2
xID, andC−1=I+WT
xΨ−1Wx. So although this is a
joint density model of (yi,xi), we can infer the implied conditional distribution.
We now show an interesting connection to Zellner’s g-prior. Suppose p(wy)=N(0,1
gΣ2),
and letX=RVTbe the SVD of X,w h e r e VTV=IandRTR=Σ2=d i a g (σ2
j)contains
the squared singular values. Then one can show (West 2003) that
p(w)=N(0,gV−TΣ−2V−1)=N(0,g(XTX)−1) (12.79)
So the dependence of the prior for wonXarises from the fact that wis derived indirectly by
a joint model of Xandy.
The above discussion focussed on regression. (Guo 2009) generalizes CCA to the exponential
family, which is more appropriate if xiand/oryiare discrete. Although we can no longer
compute the conditional p(yi|xi,θ)in closed form, the model has a similar interpretation to
the regression case, namely that we are predicting the response via a latent “bottleneck”.
The basic idea of compressing xito predict yican be formulated using information theory.
In particular, we might want to ﬁnd an encoding distribution p(z|x)such that we minimize
I(X;Z)−βI(X;Y) (12.80)
whereβ≥0is some parameter controlling the tradeoff between compression and predictive
accuracy. This is known as the information bottleneck (Tishby et al. 1999). Often Zis taken to
be discrete, as in clustering. However, in the Gaussian case, IB is closely related to CCA (Chechik
et al. 2005).
We can easily generalize CCA to the case where yiis a vector of responses to be predicted, as
in multi-label classiﬁcation. (Ma et al. 2008; Williamson and Ghahramani 2008) used this modelto perform collaborative ﬁltering, where the goal is to predict y
ij∈{1,...,5}, the rating person
igives to movie j, where the “side information” xitakes the form of a list of i’s friends. The
intuition behind this approach is that knowledge of who your friends are, as well as the ratingsof all other users, should help predict which movies you will like. In general, any setting wherethe tasks are correlated could beneﬁt from CCA. Once we adopt a probabilistic view, variousextensions are straightforward. For example, we can easily generalize to the semi-supervisedcase, where we do not observe y
ifor alli(Yu et al. 2006).
406 Chapter 12. Latent linear models
12.5.1.1 Discriminative supervised PCA
One problem with this model is that it puts as much weight on predicting the inputs xias the
outputsyi. This can be partially alleviated by using a weighted objective of the following form
(Rish et al. 2008):
/lscript(θ)=/productdisplay
ip(yi|ηiy)αyp(xi|ηix)αx(12.81)
where the αmcontrol the relative importance of the data sources, and ηim=Wmzi.F o r
Gaussian data, we can see that αmjust controls the noise variance:
/lscript(θ)∝/productdisplay
iexp(−1
2αx||xT
i−ηix||2)exp(−1
2αy||yT
i−ηiy||2) (12.82)
This interpretation holds more generally for the exponential family. Note, however, that it is hard
to estimate the αmparameters, because changing them changes the normalization constant of
the likelihood. We give an alternative approach to weighting ymore heavily below.
12.5.2 Partial least squares
The technique of partial least squares (PLS) (Gustafsson 2001; Sun et al. 2009) is an asym-
metric or more “discriminative” form of supervised PCA. The key idea is to allow some of the(co)variance in the input features to be explained by its own subspace, z
x
i, and to let the rest of
the subspace, zsi, be shared between input and output. The model has the form
p(zi)=N (zs
i|0,ILs)N(zxi|0,ILx) (12.83)
p(yi|zi)=N (Wyzsi+μy,σ2IDy) (12.84)
p(xi|zi)=N (Wxzsi+Bxzxi+μx,σ2IDx) (12.85)
See Figure 12.19(b). The corresponding induced distribution on the visible variables has the form
p(vi|θ)=/integraldisplay
N(vi|Wzi+μ,σ2I)N(zi|0,I)dzi=N(vi|μ,WWT+σ2I) (12.86)
wherevi=(xi;yi),μ=(μy;μx)and
W=/parenleftbiggWy0
WxBx/parenrightbigg
(12.87)
WWT=/parenleftbiggWyWT
yWxWT
x
WxWT
xWxWT
x+BxBT
x/parenrightbigg
(12.88)
We should choose Llarge enough so that the shared subspace does not capture covariate-
speciﬁc variation.
This model can be easily generalized to discrete data using the exponential family (Virtanen
2010).
12.6. Independent Component Analysis (ICA) 407
12.5.3 Canonical correlation analysis
Canonical correlation analysis orCCAis like a symmetric unsupervised version of PLS: it
allows each view to have its own “private” subspace, but there is also a shared subspace. If we
have two observed variables, xiandyi, then we have three latent variables, zs
i∈RL0which is
shared,zxi∈RLxandzy
i∈RLywhich are private. We can write the model as follows (Bach
and Jordan 2005):
p(zi)=N (zs
i|0,ILs)N(zxi|0,ILx)N(zy
i|0,ILy) (12.89)
p(xi|zi)=N (xi|Bxzx
i+Wxzsi+μx,σ2IDx) (12.90)
p(yi|zi)=N (yi|Byzy
i+Wyzs
i+μy,σ2IDy) (12.91)
See Figure 12.19(c). The corresponding observed joint distribution has the form
p(vi|θ)=/integraldisplay
N(vi|Wzi+μ,σ2I)N(zi|0,I)dzi=N(vi|μ,WWT+σ2ID)(12.92)
where
W=/parenleftbiggWxBx0
Wy0B y/parenrightbigg
(12.93)
WWT=/parenleftbiggWxWT
x+BxBT
xWxWT
y
WyWT
yWyWT
y+ByBTy/parenrightbigg
(12.94)
One can compute the MLE for this model using EM. (Bach and Jordan 2005) show that the
resulting MLE is equivalent (up to rotation and scaling) to the classical, non-probabilistic view.However, the advantages of the probabilistic view are many: we can trivially generalize to M>2
observed variables; we can create mixtures of CCA (Viinikanoja et al. 2010); we can create sparseversions of CCA using ARD (Archambeau and Bach 2008); we can generalize to the exponentialfamily (Klami et al. 2010); we can perform Bayesian inference of the parameters (Wang 2007;Klami and Kaski 2008); we can handle non-parametric sparsity-promoting priors for WandB
(Rai and Daume 2009); and so on.
12.6 Independent Component Analysis (ICA)
Consider the following situation. You are in a crowded room and many people are speaking.Your ears essentially act as two microphones, which are listening to a linear combination of thedifferent speech signals in the room. Your goal is to deconvolve the mixed signals into theirconstituent parts. This is known as the cocktail party problem, and is an example of blind
signal separation (BSS), orblind source separation, where “blind” means we know “nothing”
about the source of the signals. Besides the obvious applications to acoustic signal processing,this problem also arises when analysing EEG and MEG signals, ﬁnancial data, and any otherdataset (not necessarily temporal) where latent sources or factors get mixed together in a linearway.
We can formalize the problem as follows. Let x
t∈RDbe the observed signal at the sensors
at “time” t, andzt∈RLbe the vector of source signals. We assume that
xt=Wzt+/epsilon1t (12.95)
408 Chapter 12. Latent linear models
0 100 200 300 400 500−202
0 100 200 300 400 500−505
0 100 200 300 400 500−202truth
0 100 200 300 400 500−10010
(a)0 100 200 300 400 500−10010
0 100 200 300 400 500−505
0 100 200 300 400 500−10010observed signals
0 100 200 300 400 500−505
(b)
0 100 200 300 400 500−10010
0 100 200 300 400 500−505
0 100 200 300 400 500−202PCA estimate
0 100 200 300 400 500−101
(c)0 100 200 300 400 500−505
0 100 200 300 400 500−10010
0 100 200 300 400 500−202ICA estimate
0 100 200 300 400 500−202
(d)
Figure 12.20 Illustration of ICA applied to 500 iid samples of a 4d source signal. (a) Latent signals. (b)
Observations. (c) PCA estimate. (d) ICA estimate. Figure generated by icaDemo, written by Aapo Hyvarinen.
whereWis anD×Lmatrix, and /epsilon1t∼N(0,Ψ). In this section, we treat each time point
as an independent observation, i.e., we do not model temporal correlation (so we could replace
thetindex with i, but we stick with tto be consistent with much of the ICA literature). The
goal is to infer the source signals, p(zt|xt,θ), as illustrated in Figure 12.20. In this context, W
is called the mixing matrix.I f L=D(number of sources = number of sensors), it will be a
square matrix. Often we will assume the noise level, |Ψ|, is zero, for simplicity.
So far, the model is identical to factor analysis (or PCA if there is no noise, except we don’t in
general require orthogonality of W). However, we will use a different prior for p(zt). In PCA,
we assume each source is independent, and has a Gaussian distribution
p(zt)=L/productdisplay
j=1N(ztj|0,1) (12.96)
We will now relax this Gaussian assumption and let the source distributions be any non-Gaussian
12.6. Independent Component Analysis (ICA) 409
−3 −2 −1 0 1 2 3−3−2−10123uniform data
(a)−3 −2 −1 0 1 2 3−3−2−10123uniform data after linear mixing
(b)
−3 −2 −1 0 1 2 3−3−2−10123PCA applied to mixed data from uniform source
(c)−3 −2 −1 0 1 2 3−3−2−10123ICA applied to mixed data from uniform source
(d)
Figure 12.21 Illustration of ICA and PCA applied to 100 iid samples of a 2d source signal with a uniform
distribution. (a) Latent signals. (b) Observations. (c) PCA estimate. (d) ICA estimate. Figure generated by
icaDemoUniform , written by Aapo Hyvarinen.
distribution
p(zt)=L/productdisplay
j=1pj(ztj) (12.97)
Without loss of generality, we can constrain the variance of the source distributions to be 1,
because any other variance can be modelled by scaling the rows of Wappropriately. The
resulting model is known as independent component analysis orICA.
The reason the Gaussian distribution is disallowed as a source prior in ICA is that it does not
permit unique recovery of the sources, as illustrated in Figure 12.20(c). This is because the PCAlikelihood is invariant to any orthogonal transformation of the sources z
tand mixing matrix W.
PCA can recover the best linear subspace in which the signals lie, but cannot uniquely recoverthe signals themselves.
410 Chapter 12. Latent linear models
To illustrate this, suppose we have two independent sources with uniform distributions, as
shown in Figure 12.21(a). Now suppose we have the following mixing matrix
W=/parenleftbigg
23
21/parenrightbigg
(12.98)
Then we observe the data shown in Figure 12.21(b) (assuming no noise). If we apply PCA followedby scaling to this, we get the result in Figure 12.21(c). This corresponds to a whitening of thedata. To uniquely recover the sources, we need to perform an additional rotation. The troubleis, there is no information in the symmetric Gaussian posterior to tell us which angle to rotateby. In a sense, PCA solves “half” of the problem, since it identiﬁes the linear subspace; allthat ICA has to do is then to identify the appropriate rotation. (Hence we see that ICA is notthat different from methods such as varimax, which seek good rotations of the latent factors toenhance interpretability.)
Figure 12.21(d) shows that ICA can recover the source, up to a permutation of the indices and
possible sign change. ICA requires that Wis square and hence invertible. In the non-square
case (e.g., where we have more sources than sensors), we cannot uniquely recover the true signal,but we can compute the posterior p(z
t|xt,ˆW), which represents our beliefs about the source.
In both cases, we need to estimate Was well as the source distributions pj. We discuss how
to do this below.
12.6.1 Maximum likelihood estimation
In this section, we discuss ways to estimate square mixing matrices Wfor the noise-free ICA
model. As usual, we will assume that the observations have been centered; hence we can alsoassumezis zero-mean. In addition, we assume the observations have been whitened, which
can be done with PCA.
If the data is centered and whitened, we have E/bracketleftbig
xx
T/bracketrightbig
=I. But in the noise free case, we
also have
cov[x]=E/bracketleftbig
xxT/bracketrightbig
=WE/bracketleftbig
zzT/bracketrightbig
WT=WWT(12.99)
Hence we see that Wmust be orthogonal. This reduces the number of parameters we have to
estimate from D2toD(D−1)/2. It will also simplify the math and the algorithms.
LetV=W−1; these are often called the recognition weights, as opposed to W, which are
thegenerative weights.4
Sincex=Wz, we have, from Equation 2.89,
px(Wzt)=pz(zt)|det(W−1)|=pz(Vxt)|det(V)| (12.100)
Hence we can write the log-likelihood, assuming Tiid samples, as follows:
1
Tlogp(D|V)=l o g|det(V)|+1
TL/summationdisplay
j=1T/summationdisplay
t=1logpj(vT
jxt) (12.101)
4. In the literature, it is common to denote the generative weights by Aand the recognition weights by W, but we are
trying to be consistent with the notation used earlier in this chapter.
12.6. Independent Component Analysis (ICA) 411
wherevjis thej’th row of V. Since we are constraining Vto be orthogonal, the ﬁrst term is a
constant, so we can drop it. We can also replace the average over the data with an expectation
operator to get the following objective
NLL(V)=L/summationdisplay
j=1E[Gj(zj)] (12.102)
wherezj=vT
jxandGj(z)/defines−logpj(z). We want to minimize this subject to the constraint
that the rows of Vare orthogonal. We also want them to be unit norm, since this ensures
that the variance of the factors is unity (since, with whitened data, E/bracketleftbig
vT
jx/bracketrightbig
=||vj||2), which is
necessary to ﬁx the scale of the weights. In otherwords, Vshould be an orthonormal matrix.
It is straightforward to derive a gradient descent algorithm to ﬁt this model; however, it
is rather slow. One can also derive a faster algorithm that follows the natural gradient; seee.g., (MacKay 2003, ch 34) for details. A popular alternative is to use an approximate Newtonmethod, which we discuss in Section 12.6.2. Another approach is to use EM, which we discussin Section 12.6.3.
12.6.2 The FastICA algorithm
We now describe the fast ICA algorithm, based on (Hyvarinen and Oja 2000), which we will
show is an approximate Newton method for ﬁtting ICA models.
For simplicity of presentation, we initially assume there is only one latent factor. In addition,
we initially assume all source distributions are known and are the same, so we can just writeG(z)=−logp(z).L e tg(z)=
d
dzG(z). The constrained objective, and its gradient and
Hessian, are given by
f(v)=E/bracketleftbig
G(vTx)/bracketrightbig
+λ(1−vTv) (12.103)
∇f(v)=E/bracketleftbig
xg(vTx)/bracketrightbig
−βv (12.104)
H(v)=E/bracketleftbig
xxTg/prime(vTx)/bracketrightbig
−βI (12.105)
whereβ=2λis a Lagrange multiplier. Let us make the approximation
E/bracketleftbig
xxTg/prime(vTx)/bracketrightbig
≈E/bracketleftbig
xxT/bracketrightbig
E/bracketleftbig
g/prime(vTx)/bracketrightbig
=E/bracketleftbig
g/prime(vTx)/bracketrightbig
(12.106)
This makes the Hessian very easy to invert, giving rise to the following Newton update:
v∗/definesv−E/bracketleftbig
xg(vTx)/bracketrightbig
−βv
E[g/prime(vTx)]−β(12.107)
One can rewrite this in the following way
v∗/definesE/bracketleftbig
xg(vTx)/bracketrightbig
−E/bracketleftbig
g/prime(vTx)/bracketrightbig
v (12.108)
(In practice, the expectations can be replaced by Monte Carlo estimates from the training set,which gives an efficient online learning algorithm.) After performing this update, one shouldproject back onto the constraint surface using
v
new/definesv∗
||v∗||(12.109)
412 Chapter 12. Latent linear models
−4 −3 −2 −1 0 1 2 3 400.050.10.150.20.250.30.350.40.450.5
(a)−4 −3 −2 −1 0 1 2 3 4−3−2−10123Gaussian
(b)
−10 −5 0 5 10−8−6−4−20246810Laplace
(c)−2 −1 0 1 2−1.5−1−0.500.511.5Uniform
(d)
Figure 12.22 Illustration of Gaussian, sub-Gaussian (uniform) and super-Gaussian (Laplace) distributions
in 1d and 2d. Figure generated by subSuperGaussPlot , written by Kevin Swersky.
One iterates this algorithm until convergence. (Due to the sign ambiguity of v, the values of v
may not converge, but the direction deﬁned by this vector should converge, so one can assess
convergence by monitoring |vTvnew|, which should approach 1.)
Since the objective is not convex, there are multiple local optima. We can use this fact to
learn multiple different weight vectors or features. We can either learn the features sequentially
and then project out the part of vjthat lies in the subspace deﬁned by earlier features, or
we can learn them in parallel, and orthogonalize Vin parallel. This latter approach is usually
preferred, since, unlike PCA, the features are not ordered in any way. So the ﬁrst feature is not“more important” than the second, and hence it is better to treat them symmetrically.
12.6. Independent Component Analysis (ICA) 413
12.6.2.1 Modeling the source densities
So far, we have assumed that G(z)=−logp(z)is known. What kinds of models might be
reasonable as signal priors? We know that using Gaussians (which correspond to quadratic
functions for G) won’t work. So we want some kind of non-Gaussian distribution. In general,
there are several kinds of non-Gaussian distributions, such as the following:
•Super-Gaussian distributions These are distributions which have a big spike at the mean,
and hence (in order to ensure unit variance) have heavy tails. The Laplace distribution is
a classic example. See Figure 12.22. Formally, we say a distribution is super-Gaussian or
leptokurtic (“lepto” coming from the Greek for “thin”) if kurt(z)>0,w h e r e kurt(z)is the
kurtosis of the distribution, deﬁned by
kurt(z)/definesμ4
σ4−3 (12.110)
whereσis the standard deviation, and μkis thek’thcentral moment, or moment about
the mean:
μk/definesE/bracketleftbig
(X−E[X])k/bracketrightbig
(12.111)
(Soμ1=μis the mean, and μ2=σ2is the variance.) It is conventional to subtract 3 in the
deﬁnition of kurtosis to make the kurtosis of a Gaussian variable equal to zero.
•Sub-Gaussian distributions Asub-Gaussian orplatykurtic (“platy” coming from the Greek
for “broad”) distribution has negative kurtosis. These are distributions which are much ﬂatterthan a Gaussian. The uniform distribution is a classic example. See Figure 12.22.
•Skewed distributions Another way to “be non-Gaussian” is to be asymmetric. One measure
of this is skewness, deﬁned by
skew(z)/definesμ
3
σ3(12.112)
An example of a (right) skewed distribution is the gamma distribution (see Figure 2.9).
When one looks at the empirical distribution of many natural signals, such as images and
speech, when passed through certain linear ﬁlters, they tend to be very super-Gaussian. Thisresult holds both for the kind of linear ﬁlters found in certain parts of the brain, such as thesimple cells found in the primary visual cortex, as well as for the kinds of linear ﬁlters used insignal processing, such as wavelet transforms. One obvious choice for modeling natural signalswith ICA is therefore the Laplace distribution. For mean zero and variance 1, this has a log pdfgiven by
logp(z)=−√
2|z|−log(√
2) (12.113)
Since the Laplace prior is not differentiable at the origin, it is more common to use other,smoother super-Gaussian distributions. One example is the logistic distribution. The corre-sponding log pdf, for the case where the mean is zero and the variance is 1 (so μ=0and
s=
√
3
π), is given by the following:
logp(z)=−2logcosh(π
2√
3z)−log4√
3
π(12.114)
414 Chapter 12. Latent linear models
ψTxt1 xtDzt1 ztDqt1 qtD
Wσ1kμ1k
π
σDkμDk
Figure 12.23 Modeling the source distributions using a mixture of univariate Gaussians (the independent
factor analysis model of (Moulines et al. 1997; Attias 1999)).
Various ways of estimating G(Z)=−logp(z)are discussed in the seminal paper (Pham and
Garrat 1997). However, when ﬁtting ICA by maximum likelihood, it is not critical that the exact
shape of the source distribution be known (although it is important to know whether it is subor super Gaussian). Consequently, it is common to just use G(z)=√
zorG(z)=l o gc o s h ( z)
instead of the more complex expressions above.
12.6.3 Using EM
An alternative to assuming a particular form for G(z), or equivalently for p(z), is to use a
ﬂexible non-parametric density estimator, such as a mixture of (uni-variate) Gaussians:
p(qj=k)=π k (12.115)
p(zj|qj=k)=N (μj,k,σ2
j,k) (12.116)
p(x|z)=N (Wz,Ψ) (12.117)
This approach was proposed in (Moulines et al. 1997; Attias 1999), and the corresponding graph-ical model is shown in Figure 12.23.
It is possible to derive an exact EM algorithm for this model. The key observation is that
it is possible to compute E[z
t|xt,θ]exactly by summing over all KLcombinations of the qt
variables, where Kis the number of mixture components per source. (If this is too expensive,
one can use a variational mean ﬁeld approximation (Attias 1999).) We can then estimate all thesource distributions in parallel by ﬁtting a standard GMM to E[z
t]. When the source GMMs are
12.6. Independent Component Analysis (ICA) 415
known, we can compute the marginals pj(zj)very easily, using
pj(zj)=K/summationdisplay
k=1πj,kN(zj|μj,k,σ2
j,k) (12.118)
Given the pj’s, we can then use an ICA algorithm to estimate W. Of course, these steps should
be interleaved. The details can be found in (Attias 1999).
12.6.4 Other estimation principles *
It is quite common to estimate the parameters of ICA models using methods that seem different
to maximum likelihood. We will review some of these methods below, because they giveadditional insight into ICA. However, we will also see that these methods in fact are equivalentto maximum likelihood after all. Our presentation is based on (Hyvarinen and Oja 2000).
12.6.4.1 Maximizing non-Gaussianity
An early approach to ICA was to ﬁnd a matrix Vsuch that the distribution z=Vxis as far
from Gaussian as possible. (There is a related approach in statistics called projection pursuit.)
One measure of non-Gaussianity is kurtosis, but this can be sensitive to outliers. Anothermeasure is the negentropy, deﬁned as
negentropy( z)/definesH/parenleftbig
N(μ,σ
2)/parenrightbig
−H(z) (12.119)
whereμ=E[z]andσ2= var[z]. Since the Gaussian is the maximum entropy distribution,
this measure is always non-negative and becomes large for distributions that are highly non-Gaussian.
We can deﬁne our objective as maximizing
J(V)=/summationdisplay
jnegentropy( zj)=/summationdisplay
jH/parenleftbig
N(μj,σ2
j)/parenrightbig
−H(zj) (12.120)
wherez=Vx.I fw eﬁ x Vto be orthogonal, and if we whiten the data, the covariance of z
will beIindependently of V, so the ﬁrst term is a constant. Hence
J(V)=/summationdisplay
j−H(zj)+const=/summationdisplay
jE[logp(zj)]+const (12.121)
which we see is equal (up to a sign change, and irrelevant constants) to the log-likelihood inEquation 12.102.
12.6.4.2 Minimizing mutual information
One measure of dependence of a set of random variables is the multi-information:
I(z)/definesKL⎛
⎝p(z)||/productdisplay
jp(zj)⎞⎠=/summationdisplay
jH(zj)−H(z) (12.122)
416 Chapter 12. Latent linear models
We would like to minimize this, since we are trying to ﬁnd independent components. Put
another way, we want the best possible factored approximation to the joint distribution.
Now since z=Vx,w eh a v e
I(z)=/summationdisplay
jH(zj)−H(Vx) (12.123)
If we constrain Vto be orthogonal, we can drop the last term, since then H(Vx)= H(x)
(since multiplying by Vdoes not change the shape of the distribution), and H(x)is a constant
which is is solely determined by the empirical distribution. Hence we have I(z)=/summationtext
jH(zj).
Minimizing this is equivalent to maximizing the negentropy, which is equivalent to maximumlikelihood.
12.6.4.3 Maximizing mutual information (infomax)
Instead of trying to minimize the mutual information between the components of z,l e tu s
imagine a neural network where xis the input and y
j=φ(vT
jx)+/epsilon1is the noisy output, where
φis some nonlinear scalar function, and /epsilon1∼N(0,1). It seems reasonable to try to maximize
the information ﬂow through this system, a principle known as infomax. (Bell and Sejnowski
1995). That is, we want to maximize the mutual information between y(the internal neural
representation) and x(the observed input signal). We have I(x;y)=H(y)−H(y|x),w h e r e
the latter term is constant if we assume the noise has constant variance. One can show that wecan approximate the former term as follows
H(y)=L/summationdisplay
j=1E/bracketleftbig
logφ/prime(vT
jx)/bracketrightbig
+log|det(V)| (12.124)
where, as usual, we can drop the last term if Vis orthogonal. If we deﬁne φ(z)to be a cdf,
thenφ/prime(z)is its pdf, and the above expression is equivalent to the log likelihood. In particular,
if we use a logistic nonlinearity, φ(z) = sigm( z), then the corresponding pdf is the logistic
distribution, and logφ/prime(z) = logcosh( z)(ignoring irrelevant constants). Thus we see that
infomax is equivalent to maximum likelihood.
Exercises
Exercise 12.1 Ms t e pf o rF A
For the FA model, show that the MLE in the M step for Wis given by Equation 12.23.
Exercise 12.2 MAP estimation for the FA model
Derive the M step for the FA model using conjugate priors for the parameters.
Exercise 12.3 Heuristic for assessing applicability of PCA
(Source: (Press 2005, Q9.8).). Let the empirical covariance matrix Σhave eigenvalues λ1≥λ2≥···≥
λd>0. Explain why the variance of the evalues, σ2=1
d/summationtextd
i=1(λi−λ)2is a good measure of whether
or not PCA would be useful for analysing the data (the higher the value of σ2the more useful PCA).
12.6. Independent Component Analysis (ICA) 417
Exercise 12.4 Deriving the second principal component
a. Let
J(v2,z2)=1
nn/summationdisplay
i=1(xi−zi1v1−zi2v2)T(xi−zi1v1−zi2v2) (12.125)
Show that∂J
∂z2=0yieldszi2=vT
2xi.
b. Show that the value of v2that minimizes
˜J(v2)=−vT
2Cv2+λ2(vT
2v2−1)+λ12(vT
2v1−0) (12.126)
is given by the eigenvector of Cwith the second largest eigenvalue. Hint: recall that Cv1=λ1v1and
∂xTAx
∂x=(A+AT)x.
Exercise 12.5 Deriving the residual error for PCA
a. Prove that
||xi−K/summationdisplay
j=1zijvj||2=xT
ixi−K/summationdisplay
j=1vT
jxixTivj (12.127)
Hint: ﬁrst consider the case K=2. Use the fact that vT
jvj=1andvT
jvk=0fork/negationslash=j. Also,
recallzij=xT
ivj.
b. Now show that
JK/defines1
nn/summationdisplay
i=1/parenleftBigg
xT
ixi−K/summationdisplay
j=1vT
jxixTivj/parenrightBigg
=1
nn/summationdisplay
i=1xTixi−K/summationdisplay
j=1λj (12.128)
Hint: recall vT
jCvj=λjvT
jvj=λj.
c. IfK=dthere is no truncation, so Jd=0. Use this to show that the error from only using K<d
terms is given by
JK=d/summationdisplay
j=K+1λj (12.129)
Hint: partition the sum/summationtextd
j=1λjinto/summationtextKj=1λjand/summationtextdj=K+1λj.
Exercise 12.6 Derivation of Fisher’s linear discriminant
Show that the maximum of J(w)=wTSBw
wTSWwis given by SBw=λSWw
whereλ=wTSBw
wTSWw.Hint: recall that the derivative of a ratio of two scalars is given byd
dxf(x)
g(x)=f/primeg−fg/prime
g2,
wheref/prime=d
dxf(x)andg/prime=d
dxg(x). Also, recall thatd
dxxTAx=(A+AT)x.
Exercise 12.7 PCA via successive deﬂation
Letv1,v2,...,v kbe the ﬁrst keigenvectors with largest eigenvalues of C=1
nXTX, i.e., the principal
basis vectors. These satisfy
vT
jvk=/braceleftbigg0ifj/negationslash=k
1ifj=k(12.130)
We will construct a method for ﬁnding the vjsequentially.
418 Chapter 12. Latent linear models
As we showed in class, v1is the ﬁrst principal eigenvector of C, and satisﬁes Cv1=λ1v1. Now deﬁne
˜xias the orthogonal projection of xionto the space orthogonal to v1:
˜xi=P⊥v1xi=(I−v1vT
1)xi (12.131)
Deﬁne˜X=[˜x1;...;˜xn]as thedeﬂated matrix of rankd−1, which is obtained by removing from the d
dimensional data the component that lies in the direction of the ﬁrst principal direction:
˜X=(I−v1vT
1)TX=(I−v1vT
1)X (12.132)
a. Using the facts that XTXv1=nλ1v1(and hence vT
1XTX=nλ1vT
1) andvT
1v1=1, show that
the covariance of the deﬂated matrix is given by
˜C/defines1
n˜XT˜X=1
nXTX−λ1v1vT
1 (12.133)
b. Letube the principal eigenvector of ˜C. Explain why u=v2. (You may assume uis unit norm.)
c. Suppose we have a simple method for ﬁnding the leading eigenvector and eigenvalue of a pd matrix,
denoted by [λ,u]=f(C). Write some pseudo code for ﬁnding the ﬁrst Kprincipal basis vectors of
Xthat only uses the special ffunction and simple vector arithmetic, i.e., your code should not use
S V Do rt h eeig function. Hint: this should be a simple iterative routine that takes 2–3 lines to write.
The input is C,Kand the function f, the output should be vjandλjforj=1:K. Do not worry
about being syntactically correct.
Exercise 12.8 Latent semantic indexing
(Source: de Freitas.). In this exercise, we study a technique called latent semantic indexing , which applies
SVD to a document by term matrix, to create a low-dimensional embedding of the data that is designed to
capture semantic similarity of words.
The ﬁle lsiDocuments.pdf contains 9 documents on various topics. A list of all the 460 unique
words/terms that occur in these documents is in lsiWords.txt . A document by term matrix is in
lsiMatrix.txt .
a. LetXbe the transpose of lsiMatrix , so each column represents a document. Compute the SVD of X
and make an approximation to it ˆXusing the ﬁrst 2 singular values/ vectors. Plot the low dimensional
representation of the 9 documents in 2D. You should get something like Figure 12.24.
b. Consider ﬁnding documents that are about alien abductions. If If you look at lsiWords.txt , there
are 3 versions of this word, term 23 (“abducted”), term 24 (“abduction”) and term 25 (“abductions”).
Suppose we want to ﬁnd documents containing the word “abducted”. Documents 2 and 3 contain it,but document 1 does not. However, document 1 is clearly related to this topic. Thus LSI should alsoﬁnd document 1. Create a test document qcontaining the one word “abducted”, and project it into
the 2D subspace to make ˆq. Now compute the cosine similarity between ˆqand the low dimensional
representation of all the documents. What are the top 3 closest matches?
Exercise 12.9 Imputation in a FA model
Derive an expression for p(x
h|xv,θ)for a FA model.
Exercise 12.10 Efficiently evaluating the PPCA density
Derive an expression for p(x|ˆW,ˆσ2)for the PPCA model based on plugging in the MLEs and using the
matrix inversion lemma.
12.6. Independent Component Analysis (ICA) 419
−0.45 −0.4 −0.35 −0.3 −0.25 −0.2−0.8−0.6−0.4−0.200.20.40.6
12
34
5678
9
Figure 12.24 Projection of 9 documents into 2 dimensions. Figure generated by lsiCode.
Exercise 12.11 PPCA vs FA
(Source: Exercise 14.15 of (Hastie et al. 2009), due to Hinton.). Generate 200observations from the following
model, where zi∼N(0,I):xi1=zi1,xi2=zi1+0.001zi2,xi3=1 0zi3. Fit a FA and PCA model
with 1 latent factor. Hence show that the corresponding weight vector waligns with the maximal variance
direction (dimension 3) in the PCA case, but with the maximal correlation direction (dimensions 1+2) in the
case of FA.

13 Sparse linear models
13.1 Introduction
We introduced the topic of feature selection in Section 3.5.4, where we discussed methods for
ﬁnding input variables which had high mutual information with the output. The trouble withthis approach is that it is based on a myopic strategy that only looks at one variable at a time.This can fail if there are interaction effects. For example, if y=xor(x
1,x2), then neither x1nor
x2on its own can predict the response, but together they perfectly predict the response. For a
real-world example of this, consider genetic association studies: sometimes two genes on theirown may be harmless, but when present together they cause a recessive disease (Balding 2006).
In this chapter, we focus on selecting sets of variables at a time using a model-based approach.
If the model is a generalized linear model, of the form p(y|x)=p(y|f(w
Tx))for some link
functionf, then we can perform feature selection by encouraging the weight vector wto be
sparse, i.e., to have lots of zeros. This approach turns out to offer signiﬁcant computationaladvantages, as we will see below.
Here are some applications where feature selection/ sparsity is useful:
• In many problems, we have many more dimensions Dthan training cases N. The cor-
responding design matrix is short and fat, rather than tall and skinny. This is called thesmallN, largeDproblem. This is becoming increasingly prevalent as we develop more
high throughput measurement devices, For example, with gene microarrays, it is commonto measure the expression levels of D∼10,000genes, but to only get N∼100such
examples. (It is perhaps a sign of the times that even our data seems to be getting fatter...)We may want to ﬁnd the smallest set of features that can accurately predict the response(e.g., growth rate of the cell) in order to prevent overﬁtting, to reduce the cost of building adiagnostic device, or to help with scientiﬁc insight into the problem.
• In Chapter 14, we will use basis functions centered on the training examples, so φ(x)=
[κ(x,x
1),...,κ(x,xN)],w h e r e κis a kernel function. The resulting design matrix has size
N×N. Feature selection in this context is equivalent to selecting a subset of the training
examples, which can help reduce overﬁtting and computational cost. This is known as asparse kernel machine.
• In signal processing, it is common to represent signals (images, speech, etc.) in terms of
wavelet basis functions. To save time and space, it is useful to ﬁnd a sparse representation
422 Chapter 13. Sparse linear models
of the signals, in terms of a small number of such basis functions. This allows us to estimate
signals from a small number of measurements, as well as to compress the signal. SeeSection 13.8.3 for more information.
Note that the topic of feature selection and sparsity is currently one of the most active areas
of machine learning/ statistics. In this chapter, we only have space to give an overview of themain results.
13.2 Bayesian variable selection
A natural way to pose the variable selection problem is as follows. Let γj=1if feature jis
“relevant”, and let γj=0otherwise. Our goal is to compute the posterior over models
p(γ|D)=e−f(γ)
/summationtext
γ/primee−f(γ/prime)(13.1)
wheref(γ)is the cost function:
f(γ)/defines−[logp(D|γ)+logp(γ)] (13.2)
For example, suppose we generate N=2 0samples from a D=1 0dimensional linear
regression model, yi∼N(wTxi,σ2), in which K=5elements of ware non-zero. In
particular, we use w=( 0.00,−1.67,0.13,0.00,0.00,1.19,0.00,−0.04,0.33,0.00)andσ2=
1. We enumerate all 210= 1024models and compute p(γ|D)for each one (we give the
equations for this below). We order the models in Gray code order, which ensures consecutive
vectors differ by exactly 1 bit (the reasons for this are computational, and are discussed inSection 13.2.3).
The resulting set of bit patterns is shown in Figure 13.1(a). The cost of each model, f(γ),i s
shown in Figure 13.1(b). We see that this objective function is extremely “bumpy”. The resultsare easier to interpret if we compute the posterior distribution over models, p(γ|D). This is
shown in Figure 13.1(c). The top 8 models are listed below:
model prob members
4 0.447 2,61 0.241 2, 6,452 0.103 2, 6, 9,60 0.091 2, 3, 6,29 0.041 2, 5,68 0.021 2, 6, 7,36 0.015 2, 5, 6,5 0.010 2, 3,
The “true” model is {2,3,6,8,9}. However, the coefficients associated with features 3 and 8
are very small (relative to σ
2). so these variables are harder to detect. Given enough data, the
method will converge on the true model (assuming the data is generated from a linear model),but for ﬁnite data sets, there will usually be considerable posterior uncertainty.
Interpreting the posterior over a large number of models is quite difficult, so we will seek
various summary statistics. A natural one is the posterior mode, or MAP estimate
ˆγ=a r g m a x p(γ|D) = argmin f(γ) (13.3)
13.2. Bayesian variable selection 423
100 200 300 400 500 600 700 800 900 10001
2
3
4
5
6
7
8
9
10
(a)0 200 400 600 800 1000−220−200−180−160−140−120−100−80−60−40log p(model, data)
(b)
0 200 400 600 800 100000.010.020.030.040.050.060.070.080.090.1p(model|data)
(c)1 2 3 4 5 6 7 8 9 1000.10.20.30.40.50.60.70.80.91p(gamma(j)|data
(d)
Figure 13.1 (a) All possible bit vectors of length 10 enumerated in Gray code order. (b) Score function for
all possible models. (c) Posterior over all 1024 models. Vertical scale has been truncated at 0.1 for clarity.
(d) Marginal inclusion probabilities. Figure generated by linregAllsubsetsGraycodeDemo .
However, the mode is often not representative of the full posterior mass (see Section 5.2.1.3). A
better summary is the median model (Barbieri and Berger 2004; Carvahlo and Lawrence 2007),
computed using
ˆγ={j:p(γj=1|D)>0.5} (13.4)
This requires computing the posterior marginal inclusion probabilities ,p(γj=1|D). These
are shown in Figure 13.1(d). We see that the model is conﬁdent that variables 2 and 6 are
included; if we lower the decision threshold to 0.1, we would add 3 and 9 as well. However, if
we wanted to “capture” variable 8, we would incur two false positives (5 and 7). This tradeoff
between false positives and false negatives is discussed in more detail in Section 5.7.2.1.
The above example illustrates the “gold standard” for variable selection: the problem was
sufficiently small (only 10 variables) that we were able to compute the full posterior exactly.
Of course, variable selection is most useful in the cases where the number of dimensions is
large. Since there are 2Dpossible models (bit vectors), it will be impossible to compute the
full posterior in general, and even ﬁnding summaries, such as the MAP estimate or marginal
424 Chapter 13. Sparse linear models
inclusion probabilities, will be intractable. We will therefore spend most of this chapter focussing
on algorithmic speedups. But before we do that, we will explain how we computed p(γ|D)in
the above example.
13.2.1 The spike and slab model
The posterior is given by
p(γ|D)∝p(γ)p(D|γ) (13.5)
We ﬁrst consider the prior, then the likelihood.
It is common to use the following prior on the bit vector:
p(γ)=D/productdisplay
j=1Ber(γj|π0)=π||γ||0
0(1−π0)D−||γ||0(13.6)
whereπ0is the probability a feature is relevant, and ||γ||0=/summationtextD
j=1γjis the/lscript0pseudo-norm,
that is, the number of non-zero elements of the vector. For comparison with later models, it is
useful to write the log prior as follows:
logp(γ|π0)=||γ ||0logπ0+(D−||γ||0)log(1−π0) (13.7)
=||γ||0(logπ0−log(1−π0))+const (13.8)
=−λ||γ||0+const (13.9)
whereλ/defineslog1−π0
π0controls the sparsity of the model.
We can write the likelihood as follows:
p(D|γ)=p(y|X,γ)=/integraldisplay/integraldisplay
p(y|X,w,γ)p(w|γ,σ2)p(σ2)dwdσ2(13.10)
For notational simplicity, we have assumed the response is centered, (i.e., y=0), so we can
ignore any offset term μ.
We now discuss the prior p(w|γ,σ2).I fγj=0, featurejis irrelevant, so we expect wj=0.
Ifγj=1, we expect wjto be non-zero. If we standardize the inputs, a reasonable prior is
N(0,σ2σ2
w),w h e r eσ2
wcontrols how big we expect the coefficients associated with the relevant
variables to be (which is scaled by the overall noise level σ2). We can summarize this prior as
follows:
p(wj|σ2,γj)=/braceleftbiggδ0(wj) ifγj=0
N(wj|0,σ2σ2
w)ifγj=1(13.11)
The ﬁrst term is a “spike” at the origin. As σ2
w→∞, the distribution p(wj|γj=1 )approaches
a uniform distribution, which can be thought of as a “slab” of constant height. Hence this iscalled the spike and slab model (Mitchell and Beauchamp 1988).
We can drop the coefficients w
jfor which wj=0from the model, since they are clamped
to zero under the prior. Hence Equation 13.10 becomes the following (assuming a Gaussianlikelihood):
p(D|γ)=/integraldisplay/integraldisplay
N(y|X
γwγ,σ2IN)N(wγ|0Dγ,σ2σ2
wIDγ)p(σ2)dwγdσ2(13.12)
13.2. Bayesian variable selection 425
whereDγ=||γ||0is the number of non-zero elements in γ. In what follows, we will generalize
this slightly by deﬁning a prior of the form p(w|γ,σ2)=N(wγ|0Dγ,σ2Σγ)for any positive
deﬁnite matrix Σγ.1
Given these priors, we can now compute the marginal likelihood. If the noise variance is
known, we can write down the marginal likelihood (using Equation 13.151) as follows:
p(D|γ,σ2)=/integraldisplay
N(y|Xγwγ,σ2I)N(wγ|0,σ2Σγ)dwγ=N(y|0,Cγ) (13.13)
Cγ/definesσ2XγΣγXT
γ+σ2IN (13.14)
If the noise is unknown, we can put a prior on it and integrate it out. It is common to use
p(σ2)=I G (σ2|aσ,bσ). Some guidelines on setting a,bcan be found in (Kohn et al. 2001). If
we usea=b=0, we recover the Jeffrey’s prior, p(σ2)∝σ−2. When we integrate out the noise,
we get the following more complicated expression for the marginal likelihood (Brown et al. 1998):
p(D|γ)=/integraldisplay/integraldisplay
p(y|γ,wγ,σ2)p(wγ|γ,σ2)p(σ2)dwγdσ2(13.15)
∝|XTγXγ+Σ−1
γ|−1
2|Σγ|−1
2(2bσ+S(γ))−(2aσ+N−1)/2(13.16)
whereS(γ)is the RSS:
S(γ)/definesyTy−yTXγ(XTγXγ+Σ−1
γ)−1XTγy (13.17)
See also Exercise 13.4.
When the marginal likelihood cannot be computed in closed form (e.g., if we are using logistic
regression or a nonlinear model), we can approximate it using BIC, which has the form
logp(D|γ)≈logp(y|X,ˆwγ,ˆσ2)−||γ||0
2logN (13.18)
whereˆwγis the ML or MAP estimate based on Xγ, and||γ||0is the “degrees of freedom” of
the model (Zou et al. 2007). Adding the log prior, the overall objective becomes
logp(γ|D)≈logp(y|X,ˆwγ,ˆσ2)−||γ||0
2logN−λ||γ||0+const (13.19)
We see that there are two complexity penalties: one arising from the BIC approximation to
the marginal likelihood, and the other arising from the prior on p(γ). Obviously these can be
combined into one overall complexity parameter, which we will denote by λ.
13.2.2 From the Bernoulli-Gaussian model to /lscript0regularization
Another model that is sometimes used (e.g., (Kuo and Mallick 1998; Zhou et al. 2009; Soussenet al. 2010)) is the following:
y
i|xi,w,γ,σ2∼N(/summationdisplay
jγjwjxij,σ2) (13.20)
γj∼Ber(π0) (13.21)
wj∼N(0,σ2
w) (13.22)
1. It is common to use a g-prior of the form Σγ=g(XT
γXγ)−1for reasons explained in Section 7.6.3.1 (see also
Exercise 13.4). Various approaches have been proposed for setting g, including cross validation, empirical Bayes (Minka
2000b; George and Foster 2000), hierarchical Bayes (Liang et al. 2008), etc.
426 Chapter 13. Sparse linear models
In the signal processing literature (e.g., (Soussen et al. 2010)), this is called the Bernoulli-
Gaussian model, although we could also call it the binary mask model, since we can think of
theγjvariables as “masking out” the weights wj.
Unlike the spike and slab model, we do not integrate out the “irrelevant” coefficients; they
always exist. In addition, the binary mask model has the form γj→y←wj, whereas the spike
and slab model has the form γj→wj→y. In the binary mask model, only the product γjwj
can be identiﬁed from the likelihood.
One interesting aspect of this model is that it can be used to derive an objective function that
is widely used in the (non-Bayesian) subset selection literature. First, note that the joint prior
has the form
p(γ,w)∝N(w|0,σ2
wI)π||γ||0
0(1−π0)D−||γ||0(13.23)
Hence the scaled unnormalized negative log posterior has the form
f(γ,w)/defines−2σ2logp(γ,w,y|X)=||y −X(γ.∗w)||2
+σ2
σ2w||w||2+λ||γ||0+const (13.24)
where
λ/defines2σ2log(1−π0
π0) (13.25)
Let us split winto two subvectors, w−γandwγ, indexed by the zero and non-zero entries of
γrespectively. Since X(γ.∗w)=Xγwγ, we can just set w−γ=0.
Now consider the case where σ2
w→∞, so we do not regularize the non-zero weights (so
there is no complexity penalty coming from the marginal likelihood or its BIC approximation).In this case, the objective becomes
f(γ,w)=||y−X
γwγ||2
2+λ||γ||0 (13.26)
This is similar to the BIC objective above.
Instead of keeping track of the bit vector γ, we can deﬁne the set of relevant variables to
be thesupport, or set of non-zero entries, of w. Then we can rewrite the above equation as
follows:
f(w)=||y−Xw||22+λ||w||0 (13.27)
This is called /lscript0regularization. We have converted the discrete optimization problem (over
γ∈{0,1}D) into a continuous one (over w∈RD); however, the /lscript0pseudo-norm makes the
objective very non smooth, so this is still hard to optimize. We will discuss different solutions
to this in the rest of this chapter.
13.2.3 Algorithms
Since there are 2Dmodels, we cannot explore the full posterior, or ﬁnd the globally optimal
model. Instead we will have to resort to heuristics of one form or another. All of the methodswe will discuss involve searching through the space of models, and evaluating the cost f(γ)at
13.2. Bayesian variable selection 427
{}{1}{ 2}{ 3}{ 4}{1,2}{ 1,3}{ 1,4}{ 2,3}{ 2,4}{ 3,4}{1,2,3}{2,3,4}{1,3,4}{1,2,4}{1,2,3,4}
(a)0 1 2 3 4 5 6 7 80.40.60.811.21.4
subset sizetraining set errorall subsets on prostate cancer
(b)
Figure 13.2 (a) A lattice of subsets of {1,2,3,4}. (b) Residual sum of squares versus subset size, on the
prostate cancer data set. The lower envelope is the best RSS achievable for any set of a given size. Based
on Figure 3.5 of (Hastie et al. 2001). Figure generated by prostateSubsets .
each point. This requires ﬁtting the model (i.e., computing argmaxp(D|w)), or evaluating its
marginal likelihood (i.e., computing/integraltext
p(D|w)p(w)dw) at each step. This is sometimes called
thewrapper method, since we “wrap” our search for the best model (or set of good models)
around a generic model-ﬁtting procedure.
In order to make wrapper methods efficient, it is important that we can quickly evaluate the
score function for some new model, γ/prime, given the score of a previous model, γ. This can be
done provided we can efficiently update the sufficient statistics needed to compute f(γ). This
is possible provided γ/primeonly differs from γin one bit (corresponding to adding or removing
a single variable), and provided f(γ)only depends on the data via Xγ. In this case, we can
use rank-one matrix updates/ downdates to efficiently compute XT
γ/primeXγ/primefromXT
γXγ. These
updates are usually applied to the QR decomposition of X. See e.g., (Miller 2002; Schniter et al.
2008) for details.
13.2.3.1 Greedy search
Suppose we want to ﬁnd the MAP model. If we use the /lscript0-regularized objective in Equation 13.27,
we can exploit properties of least squares to derive various efficient greedy forwards search
methods, some of which we summarize below. For further details, see (Miller 2002; Soussenet al. 2010).
•Single best replacement The simplest method is to use greedy hill climbing, where at each
step, we deﬁne the neighborhood of the current model to be all models than can be reached
by ﬂipping a single bit of γ, i.e., for each variable, if it is currently out of the model, we
consider adding it, and if it is currently in the model, we consider removing it. In (Soussenet al. 2010), they call this the single best replacement (SBR). Since we are expecting a
sparse solution, we can start with the empty set, γ=0. We are essentially moving through
the lattice of subsets, shown in Figure 13.2(a). We continue adding or removing until noimprovement is possible.
•Orthogonal least squares If we set λ=0in Equation 13.27, so there is no complexity
penalty, there will be no reason to perform deletion steps. In this case, the SBR algorithm isequivalent to orthogonal least squares (Chen and Wigger 1995), which in turn is equivalent
428 Chapter 13. Sparse linear models
to greedy forwards selection. In this algorithm, we start with the empty set and add the
best feature at each step. The error will go down monotonically with ||γ||0, as shown in
Figure 13.2(b). We can pick the next best feature j∗to add to the current set γtby solving
j∗=a r gm i n
j/negationslash∈γtmin
w||y−(Xγt∪j)w||2(13.28)
We then update the active set by setting γ(t+1)=γ(t)∪{j∗}. To choose the next feature to
add at step t, we need to solve D−Dtleast squares problems at step t,w h e r eDt=|γt|is
the cardinality of the current active set. Having chosen the best feature to add, we need to
solve an additional least squares problem to compute wt+1).
•Orthogonal matching pursuits Orthogonal least squares is somewhat expensive. A simpli-
ﬁcation is to “freeze” the current weights at their current value, and then to pick the nextfeature to add by solving
j
∗=a r gm i n
j/negationslash∈γtmin
β||y−Xwt−βx:,j||2(13.29)
This inner optimization is easy to solve: we simply set β=xT
:,jrt/||x:,j||2,w h e r ert=
y−Xwtis the current residual vector. If the columns are unit norm, we have
j∗=a r gm a x xT
:,jrt (13.30)
so we are just looking for the column that is most correlated with the current residual. We
then update the active set, and compute the new least squares estimate wt+1usingXγt+1.
This method is called orthogonal matching pursuits orOMP(Mallat et al. 1994). This only
requires one least squares calculation per iteration and so is faster than orthogonal leastsquares, but is not quite as accurate (Blumensath and Davies 2007).
•Matching pursuits An even more aggressive approximation is to just greedily add the feature
that is most correlated with the current residual. This is called matching pursuits (Mallat
and Zhang 1993). This is also equivalent to a method known as least squares boosting(Section 16.4.6).
•Backwards selection Backwards selection starts with all variables in the model (the so-
calledsaturated model), and then deletes the worst one at each step. This is equivalent
to performing a greedy search from the top of the lattice downwards. This can give betterresults than a bottom-up search, since the decision about whether to keep a variable ornot is made in the context of all the other variables that might depende on it. However,this method is typically infeasible for large problems, since the saturated model will be tooexpensive to ﬁt.
•FoBaTheforwards-backwards algorithm of (Zhang 2008) is similar to the single best
replacement algorithm presented above, except it uses an OMP-like approximation whenchoosing the next move to make. A similar “dual-pass” algorithm was described in (Moghad-dam et al. 2008).
•Bayesian Matching pursuit The algorithm of (Schniter et al. 2008) is similiar to OMP except
it uses a Bayesian marginal likelihood scoring criterion (under a spike and slab model) insteadof a least squares objective. In addition, it uses a form of beam search to explore multiplepaths through the lattice at once.
13.3./lscript1regularization: basics 429
13.2.3.2 Stochastic search
If we want to approximate the posterior, rather than just computing a mode (e.g. because we
want to compute marginal inclusion probabilities), one option is to use MCMC. The standardapproach is to use Metropolis Hastings, where the proposal distribution just ﬂips single bits.This enables us to efficiently compute p(γ
/prime|D)givenp(γ|D). The probability of a state (bit
conﬁguration) is estimated by counting how many times the random walk visits this state. See(O’Hara and Sillanpaa 2009) for a review of such methods, and (Bottolo and Richardson 2010)for a very recent method based on evolutionary MCMC.
However, in a discrete state space, MCMC is needlessly inefficient, since we can compute the
(unnormalized) probability of a state directly using p(γ,D)=e x p ( −f(γ)); thus there is no
need to ever revisit a state. A much more efficient alternative is to use some kind of stochasticsearch algorithm, to generate a set Sof high scoring models, and then to make the following
approximation
p(γ|D)≈e
−f(γ)
/summationtext
γ/prime∈Se−f(γ/prime)(13.31)
See (Heaton and Scott 2009) for a review of recent methods of this kind.
13.2.3.3 EM and variational inference *
It is tempting to apply EM to the spike and slab model, which has the form γj→wj→y.W e
can compute p(γj=1|wj)in the E step, and optimize win the M step. However, this will not
work, because when we compute p(γj=1|wj), we are comparing a delta-function, δ0(wj), with
a Gaussian pdf, N(wj|0,σ2
w). We can replace the delta function with a narrow Gaussian, and
then the E step amounts to classifying wjunder the two possible Gaussian models. However,
this is likely to suffer from severe local minima.
An alternative is to apply EM to the Bernoulli-Gaussian model, which has the form γj→y←
wj. In this case, the posterior p(γ|D,w)is intractable to compute because all the bits become
correlated due to explaining away. However, it is possible to derive a mean ﬁeld approximationof the form/producttext
jq(γj)q(wj)(Huang et al. 2007; Rattray et al. 2009).
13.3/lscript1regularization: basics
When we have many variables, it is computationally difficult to ﬁnd the posterior mode ofp(γ|D). And although greedy algorithms often work well (see e.g., (Zhang 2008) for a theoretical
analysis), they can of course get stuck in local optima.
Part of the problem is due to the fact that the γ
jvariables are discrete, γj∈{0,1}.I n
the optimization community, it is common to relax hard constraints of this form by replacingdiscrete variables with continuous variables. We can do this by replacing the spike-and-slab styleprior, that assigns ﬁnite probability mass to the event that w
j=0, to continuous priors that
“encourage” wj=0by putting a lot of probability density near the origin, such as a zero-mean
Laplace distribution. This was ﬁrst introduced in Section 7.4 in the context of robust linearregression. There we exploited the fact that the Laplace has heavy tails. Here we exploit the fact
430 Chapter 13. Sparse linear models
Figure 13.3 Illustration of /lscript1(left) vs/lscript2(right) regularization of a least squares problem. Based on Figure
3.12 of (Hastie et al. 2001).
that it has a spike near μ=0. More precisely, consider a prior of the form
p(w|λ)=D/productdisplay
j=1Lap(wj|0,1/λ)∝D/productdisplay
j=1e−λ|wj|(13.32)
We will use a uniform prior on the offset term, p(w0)∝1. Let us perform MAP estimation with
this prior. The penalized negative log likelihood has the form
f(w)=−logp(D|w)−logp(w|λ) = NLL( w)+λ||w||1 (13.33)
where||w||1=/summationtextD
j=1|wj|is the/lscript1norm ofw. For suitably large λ, the estimate ˆwwill be
sparse, for reasons we explain below. Indeed, this can be thought of as a convex approximation
to the non-convex /lscript0objective
argmin
wNLL(w)+λ||w||0 (13.34)
In the case of linear regression, the /lscript1objective becomes
f(w)=N/summationdisplay
i=1−1
2σ2(yi−(w0+wTxi))2+λ||w||1 (13.35)
= RSS( w)+λ/prime||w||1 (13.36)
whereλ/prime=2λσ2. This method is known as basis pursuit denoising orBPDN(Chen et al. 1998).
The reason for this term will become clear later. In general, the technique of putting a zero-mean
Laplace prior on the parameters and performing MAP estimation is called /lscript1regularization .
It can be combined with any convex or non-convex NLL term. Many different algorithms have
been devised for solving such problems, some of which we review in Section 13.4.
13.3.1 Why does /lscript1regularization yield sparse solutions?
We now explain why /lscript1regularization results in sparse solutions, whereas /lscript2regularization does
not. We focus on the case of linear regression, although similar arguments hold for logistic
regression and other GLMs.
13.3./lscript1regularization: basics 431
The objective is the following non-smooth objective function:
min
wRSS(w)+λ||w||1 (13.37)
We can rewrite this as a constrained but smooth objective (a quadratic function with linear
constraints):
min
wRSS(w)s.t.||w||1≤B (13.38)
whereBis an upper bound on the /lscript1-norm of the weights: a small (tight) bound Bcorresponds
to a large penalty λ, and vice versa.2Equation 13.38 is known as lasso, which stands for “least
absolute shrinkage and selection operator” (Tibshirani 1996). We will see why it has this namelater.
Similarly, we can write ridge regression
min
wRSS(w)+λ||w||2
2 (13.39)
or as a bound constrained form:
min
wRSS(w)s.t.||w||22≤B (13.40)
In Figure 13.3, we plot the contours of the RSS objective function, as well as the contours of
the/lscript2and/lscript1constraint surfaces. From the theory of constrained optimization, we know that
the optimal solution occurs at the point where the lowest level set of the objective function
intersects the constraint surface (assuming the constraint is active). It should be geometricallyclear that as we relax the constraint B,w e“ g r o w ”t h e/lscript
1“ball” until it meets the objective; the
corners of the ball are more likely to intersect the ellipse than one of the sides, especially in highdimensions, because the corners “stick out” more. The corners correspond to sparse solutions,which lie on the coordinate axes. By contrast, when we grow the /lscript
2ball, it can intersect the
objective at any point; there are no “corners”, so there is no preference for sparsity.
To see this another away, notice that, with ridge regression, the prior cost of a sparse solution,
such asw=( 1,0), is the same as the cost of a dense solution, such as w=( 1/√
2,1/√
2),
as long as they have the same /lscript2norm:
||(1,0)||2=||(1/√
2,1/√
2||2=1 (13.41)
However, for lasso, setting w=( 1,0)is cheaper than setting w=( 1/√
2,1/√
2), since
||(1,0)||1=1<||(1/√
2,1/√
2||1=√
2 (13.42)
The most rigorous way to see that /lscript1regularization results in sparse solutions is to examine
conditions that hold at the optimum. We do this in Section 13.3.2.
13.3.2 Optimality conditions for lasso
The lasso objective has the form
f(θ) = RSS( θ)+λ||w||1 (13.43)
2. Equation 13.38 is an example of a quadratic program orQP, since we have a quadratic objective subject to linear
inequality constraints. Its Lagrangian is given by Equation 13.37.
432 Chapter 13. Sparse linear models
X0Xc(x − x0)f(x) − f(x0)cʼ
c
Figure 13.4 Illustration of some sub-derivatives of a function at point x0. Based on a ﬁgure at http:
//en.wikipedia .org/wiki/Subderivative . Figure generated by subgradientPlot .
Unfortunately, the ||w||1term is not differentiable whenever wj=0. This is an example of a
non-smooth optimization problem.
To handle non-smooth functions, we need to extend the notion of a derivative. We deﬁne a
subderivative orsubgradient of a (convex) function f:I→Rat a point θ0to be a scalar g
such that
f(θ)−f(θ0)≥g(θ−θ0)∀θ∈I (13.44)
whereIis some interval containing θ0. See Figure 13.4 for an illustration.3We deﬁne the setof
subderivatives as the interval [a,b]whereaandbare the one-sided limits
a= lim
θ→θ−
0f(θ)−f(θ0)
θ−θ0,b= lim
θ→θ+
0f(θ)−f(θ0)
θ−θ0(13.46)
The set[a,b]of all subderivatives is called the subdifferential of the function fatθ0and
is denoted ∂f(θ)|θ0. For example, in the case of the absolute value function f(θ)=|θ|, the
subderivative is given by
∂f(θ)=⎧
⎨
⎩{−1}ifθ<0
[−1,1]ifθ=0
{+1}ifθ>0(13.47)
If the function is everywhere differentiable, then ∂f(θ)={df(θ)
dθ}. By analogy to the standard
calculus result, one can show that the point ˆθis a local minimum of fiff0∈∂f(θ)|ˆθ.
3. In general, for a vector valued function, we say that gis a subgradient of fatθ0if for all vectors θ,
f(θ)−f(θ0)≥(θ−θ0)Tg (13.45)
sogis a linear lower bound to the function at θ0.
13.3./lscript1regularization: basics 433
FN
(a)FN
(b)
Figure 13.5 Left: soft thresholding. The ﬂat region is the interval [−λ,+λ]. Right: hard thresholding.
Let us apply these concepts to the lasso problem. Let us initially ignore the non-smooth
penalty term. One can show (Exercise 13.1) that
∂
∂wjRSS(w)=a jwj−cj (13.48)
aj=2n/summationdisplay
i=1x2
ij (13.49)
cj=2n/summationdisplay
i=1xij(yi−wT
−jxi,−j) (13.50)
wherew−jiswwithout component j, and similarly for xi,−j. We see that cjis (proportional
to) the correlation between the j’th feature x:,jand the residual due to the other features,
r−j=y−X:,−jw−j. Hence the magnitude of cjis an indication of how relevant feature jis
for predicting y(relative to the other features and the current parameters).
Adding in the penalty term, we ﬁnd that the subderivative is given by
∂wjf(w)=(ajwj−cj)+λ∂ wj||w||1 (13.51)
=⎧
⎨
⎩{ajwj−cj−λ}ifwj<0
[−cj−λ,−cj+λ]ifwj=0
{ajwj−cj+λ}ifwj>0(13.52)
We can write this in a more compact fashion as follows:
XT(Xw−y)j∈⎧
⎨
⎩{−λ}ifwj<0
[−λ,λ]ifwj=0
{λ}ifwj>0(13.53)
Depending on the value of cj, the solution to ∂wjf(w)=0can occur at 3 different values
ofwj, as follows:
434 Chapter 13. Sparse linear models
1. Ifcj<−λ, so the feature is strongly negatively correlated with the residual, then the
subgradient is zero at ˆwj=cj+λ
aj<0.
2. Ifcj∈[−λ,λ], so the feature is only weakly correlated with the residual, then the subgradient
is zero at ˆwj=0.
3. Ifcj>λ, so the feature is strongly positively correlated with the residual, then the subgra-
dient is zero at ˆwj=cj−λ
aj>0.
In summary, we have
ˆwj(cj)=⎧
⎨
⎩(cj+λ)/ajifcj<−λ
0ifcj∈[−λ,λ]
(cj−λ)/ajifcj>λ(13.54)
We can write this as follows:
ˆwj=soft(cj
aj;λ
aj) (13.55)
where
soft(a;δ)/definessign(a)(|a|−δ)+(13.56)
andx+= max(x,0)is the positive part of x. This is called soft thresholding. This is
illustrated in Figure 13.5(a), where we plot ˆwjvscj. The dotted line is the line wj=cj/aj
corresponding to the least squares ﬁt. The solid line, which represents the regularized estimate
ˆwj(cj), shifts the dotted line down (or up) by λ, except when −λ≤cj≤λ, in which case it
setswj=0.
By contrast, in Figure 13.5(b), we illustrate hard thresholding. This sets values of wjto
0i f−λ≤cj≤λ, but it does not shrink the values of wjoutside of this interval. The
slope of the soft thresholding line does not coincide with the diagonal, which means that even
large coefficients are shrunk towards zero; consequently lasso is a biased estimator. This isundesirable, since if the likelihood indicates (via c
j) that the coefficient wjshould be large, we
do not want to shrink it. We will discuss this issue in more detail in Section 13.6.2.
Now we ﬁnally can understand why Tibshirani invented the term “lasso” in (Tibshirani 1996):
it stands for “least absolute selection and shrinkage operator”, since it selects a subset of thevariables, and shrinks all the coefficients by penalizing the absolute values. If λ=0, we get the
OLS solution (of minimal /lscript
1norm). If λ≥λmax,w eg e tˆw=0,w h e r e
λmax=||XTy||∞=m a x
j|yTx:,j| (13.57)
This value is computed using the fact that 0is optimal if (XTy)j∈[−λ,λ]for allj. In general,
the maximum penalty for an /lscript1regularized objective is
λmax=m a x
j|∇jNLL(0)| (13.58)
13.3./lscript1regularization: basics 435
13.3.3 Comparison of least squares, lasso, ridge and subset selection
We can gain further insight into /lscript1regularization by comparing it to least squares, and /lscript2and
/lscript0regularized least squares. For simplicity, assume all the features of Xare orthonormal, so
XTX=I. In this case, the RSS is given by
RSS(w)=||y −Xw||2=yTy+wTXTXw−2wTXTy (13.59)
= const+/summationdisplay
kw2
k−2/summationdisplay
k/summationdisplay
iwkxikyi (13.60)
so we see this factorizes into a sum of terms, one per dimension. Hence we can write down the
MAP and ML estimates analytically, as follows:
•MLEThe OLS solution is given by
ˆwOLS
k=xT
:ky (13.61)
wherex:kis thek’th column of X. This follows trivially from Equation 13.60. We see
thatˆwOLS
kis just the orthogonal projection of feature konto the response vector (see
Section 7.3.2).
•RidgeOne can show that the ridge estimate is given by
ˆwridge
k=ˆwOLS
k
1+λ(13.62)
•LassoFrom Equation 13.55, and using the fact that ak=2andˆwOLS
k=ck/2,w eh a v e
ˆwlasso
k=s i g n ( ˆ wOLS
k)/parenleftbigg
|ˆwOLS
k|−λ
2/parenrightbigg
+(13.63)
This corresponds to soft thresholding, shown in Figure 13.5(a).
•Subset selection If we pick the best Kfeatures using subset selection, the parameter
estimate is as follows
ˆwSS
k=/braceleftbigg
ˆwOLS
kif rank(|wOLS
k|)≤K
0 otherwise(13.64)
where rank refers to the location in the sorted list of weight magnitudes. This corresponds
to hard thresholding, shown in Figure 13.5(b).
Figure 13.6(a) plots the MSE vs λfor lasso for a degree 14 polynomial, and Figure 13.6(b) plots
the MSE vs polynomial order. We see that lasso gives similar results to the subset selectionmethod.
As another example, consider a data set concerning prostate cancer. We have D=8features
andN=6 7training cases; the goal is to predict the log prostate-speciﬁc antigen levels (see
(Hastie et al. 2009, p4) for more biological details). Table 13.1 shows that lasso gives betterprediction accuracy (at least on this particular data set) than least squares, ridge, and bestsubset regression. (In each case, the strength of the regularizer was chosen by cross validation.)Lasso also gives rise to a sparse solution. Of course, for other problems, ridge may give betterpredictive accuracy. In practice, a combination of lasso and ridge, known as the elastic net,often performs best, since it provides a good combination of sparsity and regularization (seeSection 13.5.3).
436 Chapter 13. Sparse linear models
103.249 10 1 0.5 0.1 0.01 0.0001 005101520253035
lambdamsetrain
test
(a)0 2 4 6 8 10 12 14 1605101520253035
degreemseperformance of MLE
  
train
test
(b)
Figure 13.6 (a) MSE vs λfor lasso for a degree 14 polynomial. Note that λdecreases as we move to
the right. Figure generated by linregPolyLassoDemo . (b) MSE versus polynomial degree. Note that the
model order increases as we move to the right. See Figure 1.18 for a plot of some of these polynomial
regression models. Figure generated by linregPolyVsDegree .
Term LS Best Subset Ridge Lasso
Intercept 2.452 2.481 2.479 2.480
lcavol 0.716 0.651 0.656 0.653
lweight 0.293 0.380 0.300 0.297
age -0.143 -0.000 -0.129 -0.119
lbph 0.212 -0.000 0.208 0.200
svi 0.310 -0.000 0.301 0.289
lcp -0.289 -0.000 -0.260 -0.236
gleason -0.021 -0.000 -0.019 0.000
pgg45 0.277 0.178 0.256 0.226
Test Error 0.586 0.572 0.580 0.564
Table 13.1 Results of different methods on the prostate cancer data, which has 8 features and 67 training
cases. Methods are: LS = least squares, Subset = best subset regression, Ridge, Lasso. Rows representthe coefficients; we see that subset regression and lasso give sparse solutions. Bottom row is the meansquared error on the test set (30 cases). Based on Table 3.3. of (Hastie et al. 2009). Figure generated byprostateComparison .
13.3.4 Regularization path
As we increase λ, the solution vector ˆw(λ)will tend to get sparser, although not necessarily
monotonically. We can plot the values ˆwj(λ)vsλfor each feature j; this is known as the
regularization path.
This is illustrated for ridge regression in Figure 13.7(a), where we plot ˆwj(λ)as the regularizer
λdecreases. We see that when λ=∞, all the coefficients are zero. But for any ﬁnite value of
λ, all coefficients are non-zero; furthermore, they increase in magnitude as λis decreased.
In Figure 13.7(b), we plot the analogous result for lasso. As we move to the right, the upper
bound on the /lscript1penalty,B, increases. When B=0, all the coefficients are zero. As we increase
13.3./lscript1regularization: basics 437
0 5 10 15 20 25 30−0.2−0.100.10.20.30.40.50.6
  
lcavol
lweight
age
lbph
svi
lcp
gleason
pgg45
(a)0 5 10 15 20 25−0.2−0.100.10.20.30.40.50.60.7
  
lcavol
lweight
age
lbph
svi
lcp
gleason
pgg45
(b)
Figure 13.7 (a) Proﬁles of ridge coefficients for the prostate cancer example vs bound on /lscript2norm ofw,
so smallt(largeλ) is on the left. The vertical line is the value chosen by 5-fold CV using the 1SE rule.
Based on Figure 3.8 of (Hastie et al. 2009). Figure generated by ridgePathProstate . (b) Proﬁles of lasso
coefficients for the prostate cancer example vs bound on /lscript1norm ofw, so small t(largeλ) is on the left.
Based on Figure 3.10 of (Hastie et al. 2009). Figure generated by lassoPathProstate .
0 0.5 1 1.5 2−0.2−0.100.10.20.30.40.50.60.7
τ  
lcavol
lweight
age
lbph
svi
lcp
gleason
pgg45
(a)1 2 3 4 5 6 7 8 9−0.2−0.100.10.20.30.40.50.60.7
lars step  
lcavol
lweight
age
lbph
svi
lcp
gleason
pgg45
(b)
Figure 13.8 Illustration of piecewise linearity of regularization path for lasso on the prostate cancer
example. (a) We plot ˆwj(B)vsBfor the critical values of B. (b) We plot vs steps of the LARS algorithm.
Figure generated by lassoPathProstate .
B, the coefficients gradually “turn on”. But for any value between 0 and Bmax=||ˆwOLS||1,
the solution is sparse.4
Remarkably, it can be shown that the solution path is a piecewise linear function of B(Efron
et al. 2004). That is, there are a set of critical values of Bwhere the active set of non-zero
coefficients changes. For values of Bbetween these critical values, each non-zero coefficient
increases or decreases in a linear fashion. This is illustrated in Figure 13.8(a). Furthermore,
one can solve for these critical values analytically. This is the basis of the LARSalgorithm
(Efron et al. 2004), which stands for “least angle regression and shrinkage” (see Section 13.4.2for details). Remarkably, LARS can compute the entire regularization path for roughly the same
4. It is common to plot the solution versus the shrinkage factor, deﬁned as s(B)=B/B max, rather than against B.
This merely affects the scale of the horizontal axis, not the shape of the curves.
438 Chapter 13. Sparse linear models
0 1000 2000 3000 4000−101Original (D = 4096, number of nonzeros = 160)
0 1000 2000 3000 4000−101L1 reconstruction (K0 = 1024, lambda = 0.0516, MSE = 0.0027)
0 1000 2000 3000 4000−101Debiased (MSE = 3.26e−005)
0 1000 2000 3000 4000−0.500.5Minimum norm solution (MSE = 0.0292)
Figure 13.9 Example of recovering a sparse signal using lasso. See text for details. Based on Figure 1 of
(Figueiredo et al. 2007). Figure generated by sparseSensingDemo , written by Mario Figueiredo.
computational cost as a single least squares ﬁt (namely O(min(ND2,DN2)).
In Figure 13.8(b), we plot the coefficients computed at each critical value of B. Now the
piecewise linearity is more evident. Below we display the actual coefficient values at each step
along the regularization path (the last line is the least squares solution):
Listing 13.1 Output of lassoPathProstate
00000000
0.4279 0 0 0 0 0 0 0
0.5015 0.0735 0 0 0 0 0 0
0.5610 0.1878 0 0 0.0930 0 0 0
0.5622 0.1890 0 0.0036 0.0963 0 0 0
0.5797 0.2456 0 0.1435 0.2003 0 0 0.0901
0.5864 0.2572 -0.0321 0.1639 0.2082 0 0 0.1066
0.6994 0.2910 -0.1337 0.2062 0.3003 -0.2565 0 0.2452
0.7164 0.2926 -0.1425 0.2120 0.3096 -0.2890 -0.0209 0.2773
By changing Bfrom 0 to Bmax, we can go from a solution in which all the weights are zero
to a solution in which all weights are non-zero. Unfortunately, not all subset sizes are achievableusing lasso. One can show that, if D>N, the optimal solution can have at most Nvariables in
it, before reaching the complete set corresponding to the OLS solution of minimal /lscript
1norm. In
Section 13.5.3, we will see that by using an /lscript2regularizer as well as an /lscript1regularizer (a method
known as the elastic net), we can achieve sparse solutions which contain more variables thantraining cases. This lets us explore model sizes between NandD.
13.3./lscript1regularization: basics 439
13.3.5 Model selection
It is tempting to use /lscript1regularization to estimate the set of relevant variables. In some cases,
we can recover the true sparsity pattern of w∗, the parameter vector that generated the data.
A method that can recover the true model in the N→∞limit is called model selection
consistent. The details on which methods enjoy this property, and when, are beyond the scope
of this book; see e.g., (Buhlmann and van de Geer 2011) for details.
Instead of going into a theoretical discussion, we will just show a small example. We ﬁrst
generate a sparse signal w∗of sizeD= 4096, consisting of 160 randomly placed ±1spikes.
Next we generate a random design matrix Xof sizeN×D,w h e r eN= 1024. Finally we
generate a noisy observation y=Xw∗+/epsilon1,w h e r e/epsilon1i∼N(0,0.012). We then estimate wfrom
yandX.
The original w∗is shown in the ﬁrst row of Figure 13.9. The second row is the /lscript1estimate
ˆwL1usingλ=0.1λmax. We see that this has “spikes” in the right places, but they are too
small. The third row is the least squares estimate of the coefficients which are estimated to benon-zero based on supp(ˆw
L1). This is called debiasing, and is necessary because lasso shrinks
the relevant coefficients as well as the irrelevant ones. The last row is the least squares estimatefor all the coefficients jointly, ignoring sparsity. We see that the (debiased) sparse estimateis an excellent estimate of the original signal. By contrast, least squares without the sparsityassumption performs very poorly.
Of course, to perform model selection, we have to pick λ. It is common to use cross validation.
However, it is important to note that cross validation is picking a value of λthat results in good
predictive accuracy. This is not usually the same value as the one that is likely to recover the“true” model. To see why, recall that /lscript
1regularization performs selection andshrinkage, that is,
the chosen coefficients are brought closer to 0. In order to prevent relevant coefficients frombeing shrunk in this way, cross validation will tend to pick a value of λthat is not too large. Of
course, this will result in a less sparse model which contains irrelevant variables (false positives).Indeed, it was proved in (Meinshausen and Buhlmann 2006) that the prediction-optimal valueofλdoes not result in model selection consistency. In Section 13.6.2, we will discuss some
adaptive mechanisms for automatically tuning λon a per-dimension basis that does result in
model selection consistency.
A downside of using /lscript
1regularization to select variables is that it can give quite different
results if the data is perturbed slightly. The Bayesian approach, which estimates posteriormarginal inclusion probabilities, p(γ
j=1|D), is much more robust. A frequentist solution to
this is to use bootstrap resampling (see Section 6.2.1), and to rerun the estimator on differentversions of the data. By computing how often each variable is selected across different trials,we can approximate the posterior inclusion probabilities. This method is known as stability
selection (Meinshausen and BÃijhlmann 2010).
We can threshold the stability selection (bootstrap) inclusion probabilities at some level, say
90%, and thus derive a sparse estimator. This is known as bootstrap lasso orbolasso(Bach
2008). It will include a variable if it occurs in at least 90% of sets returned by lasso (for a ﬁxedλ). This process of intersecting the sets is a way of eliminating the false positives that vanillalasso produces. The theoretical results in (Bach 2008) prove that bolasso is model selectionconsistent under a wider range of conditions than vanilla lasso.
As an illustration, we reproduced the experiments in (Bach 2008). In particular, we created
440 Chapter 13. Sparse linear models
lasso on sign inconsistent data
−log( λ)variable index
0 5 10 152
4
6
8
10
12
14
16
00.10.20.30.40.50.60.70.80.91
(a)
bolasso on sign inconsistent data
128 bootstraps
−log( λ)variable index
0 5 10 152
4
6
8
10
12
14
16
00.10.20.30.40.50.60.70.80.91
(b)0 5 10 1500.51lasso vs bolasso on sign inconsistent data
nbootstraps = [0,2,4,8,16,32,64,128,256]
−log( λ)P(correct support)lasso
bolasso
(c)
Figure 13.10 (a) Probability of selection of each variable (white = large probabilities, black = small proba-
bilities) vs. regularization parameter for Lasso. As we move from left to right, we decrease the amount of
regularization, and therefore select more variables. (b) Same as (a) but for bolasso. (c) Probability of correct
sign estimation vs. regularization parameter. Bolasso (red, dashed) and Lasso (black, plain): The number
of bootstrap replications is in {2,4,8,16,32,64,128,256}. Based on Figures 1-3 of (Bach 2008). Figure
generated by bolassoDemo .
256 datasets of size N= 1000withD=1 6variables, of which 8are relevant. See (Bach 2008)
for more detail on the experimental setup. For dataset n, variable j, and sparsity level k, deﬁne
S(j,k,n)=I(ˆwj(λk,Dn)/negationslash=0 ). Now deﬁne P(j,k)be the average of S(j,k,n)over the 256
datasets. In Figure 13.10(a-b), we plot Pvs−log(λ)for lasso and bolasso. We see that for
bolasso, there is a large range of λwhere the true variables are selected, but this is not the
case for lasso. This is emphasized in Figure 13.10(c), where we plot the empirical probability that
the correct set of variables is recovered, for lasso and for bolasso with an increasing number of
bootstrap samples. Of course, using more samples takes longer. In practice, 32 bootstraps seems
to be a good compromise between speed and accuracy.
With bolasso, there is the usual issue of picking λ. Obviously we could use cross validation,
but plots such as Figure 13.10(b) suggest another heuristic: shuffle the rows to create a large
black block, and then pick λto be in the middle of this region. Of course, operationalizing this
intuition may be tricky, and will require various ad-hoc thresholds (it is reminiscent of the “ﬁnd
the knee in the curve” heuristic discussed in Section 11.5.2 when discussing how to pick Kfor
mixture models). A Bayesian approach provides a more principled method for selecting λ.
13.3.6 Bayesian inference for linear models with Laplace priors
We have been focusing on MAP estimation in sparse linear models. It is also possible to perform
Bayesian inference (see e.g., (Park and Casella 2008; Seeger 2008)). However, the posterior mean
and median, as well as samples from the posterior, are not sparse; only the mode is sparse. This
is another example of the phenomenon discussed in Section 5.2.1, where we said that the MAP
estimate is often untypical of the bulk of the posterior.
Another argument in favor of using the posterior mean comes from Equation 5.108, which
showed that that plugging in the posterior mean, rather than the posterior mode, is the optimal
thing to do if we want to minimize squared prediction error. (Schniter et al. 2008) shows
experimentally, and (Elad and Yavnch 2009) shows theoretically, that using the posterior mean
with a spike-and-slab prior results in better prediction accuracy than using the posterior mode
with a Laplace prior, albeit at slightly higher computational cost.
13.4./lscript1regularization: algorithms 441
13.4/lscript1regularization: algorithms
In this section, we give a brief review of some algorithms that can be used to solve /lscript1regularized
estimation problems. We focus on the lasso case, where we have a quadratic loss. However,
most of the algorithms can be extended to more general settings, such as logistic regression (see(Yaun et al. 2010) for a comprehensive review of /lscript
1regularized logistic regression). Note that this
area of machine learning is advancing very rapidly, so the methods below may not be state ofthe art by the time you read this chapter. (See (Schmidt et al. 2009; Yaun et al. 2010; Yang et al.2010) for some recent surveys.)
13.4.1 Coordinate descent
Sometimes it is hard to optimize all the variables simultaneously, but it easy to optimize themone by one. In particular, we can solve for the j’th coefficient with all the others held ﬁxed:
w
∗
j=a r g m i n
zf(w+zej)−f(w) (13.65)
whereejis thej’th unit vector. We can either cycle through the coordinates in a deterministic
fashion, or we can sample them at random, or we can choose to update the coordinate forwhich the gradient is steepest.
The coordinate descent method is particularly appealing if each one-dimensional optimization
problem can be solved analytically For example, the shooting algorithm (Fu 1998; Wu and Lange
2008) for lasso uses Equation 13.54 to compute the optimal value of w
jgiven all the other
coefficients. See Algorithm 7 for the pseudo code (and LassoShooting for some Matlab code).
See (Yaun et al. 2010) for some extensions of this method to the logistic regression case. The
resulting algorithm was the fastest method in their experimental comparison, which concerneddocument classiﬁcation with large sparse feature vectors (representing bags of words). Othertypes of data (e.g., dense features and/or regression problems) might call for different algorithms.
Algorithm 13.1: Coordinate descent for lasso (aka shooting algorithm)
1Initializew=(XTX+λI)−1XTy;
2repeat
3forj=1,...,Ddo
4 aj=2/summationtextn
i=1x2
ij;
5 cj=2/summationtextn
i=1xij(yi−wTxi+wjxij);
6 wj=soft(cj
aj,λ
aj);
7until converged ;
13.4.2 LARS and other homotopy methods
The problem with coordinate descent is that it only updates one variable at a time, so can be
slow to converge. Active set methods update many variables at a time. Unfortunately, they are
442 Chapter 13. Sparse linear models
more complicated, because of the need to identify which variables are constrained to be zero,
and which are free to be updated.
Active set methods typically only add or remove a few variables at a time, so they can take a
long if they are started far from the solution. But they are ideally suited for generating a set ofsolutions for different values of λ, starting with the empty set, i.e., for generating regularization
path. These algorithms exploit the fact that one can quickly compute ˆw(λ
k)fromˆw(λk−1)
ifλk≈λk−1; this is known as warm starting. In fact, even if we only want the solution for
a single value of λ, call it λ∗, it can sometimes be computationally more efficient to compute
a set of solutions, from λmaxdown toλ∗, using warm-starting; this is called a continuation
methodorhomotopy method. This is often much faster than directly “cold-starting” at λ∗; this
is particularly true if λ∗is small.
Perhaps the most well-known example of a homotopy method in machine learning is the
LARSalgorithm, which stands for “least angle regression and shrinkage” (Efron et al. 2004) (a
similar algorithm was independently invented in (Osborne et al. 2000b,a)). This can compute
ˆw(λ)for all possible values of λin an efficient manner.
LARS works as follows. It starts with a large value of λ, such that only the variable that is most
correlated with the response vector yis chosen. Then λis decreased until a second variable
is found which has the same correlation (in terms of magnitude) with the current residual asthe ﬁrst variable, where the residual at step kis deﬁned as r
k=y−X:,Fkwk,w h e r eFkis
the current active set (c.f., Equation 13.50). Remarkably, one can solve for this new value of
λanalytically, by using a geometric argument (hence the term “least angle”). This allows the
algorithm to quickly “jump” to the next point on the regularization path where the active setchanges. This repeats until all the variables are added.
It is necessary to allow variables to be removed from the active set if we want the sequence of
solutions to correspond to the regularization path of lasso. If we disallow variable removal, weget a slightly different algorithm called LAR, which tends to be faster. In particular, LAR costs
the same as a single ordinary least squares ﬁt, namely O(NDmin(N,D )), which is O(ND
2)
ifN>D, andO(N2D)ifD>N. LAR is very similar to greedy forward selection, and a
method known as least squares boosting (see Section 16.4.6).
There have been many attempts to extend the LARS algorithm to compute the full regulariza-
tion path for /lscript1regularized GLMs, such as logistic regression. In general, one cannot analytically
solve for the critical values of λ. Instead, the standard approach is to start at λmax, and then
slowly decrease λ, tracking the solution as we go; this is called a continuation method or
homotopy method. These methods exploit the fact that we can quickly compute ˆw(λk)from
ˆw(λk−1)ifλk≈λk−1; this is known as warm starting. Even if we don’t want the full path,
this method is often much faster than directly “cold-starting” at the desired value of λ(this is
particularly true if λis small).
The method described in (Friedman et al. 2010) combines coordinate descent with this warm-
starting strategy, and computes the full regularization path for any /lscript1regularized GLM. This has
been implemented in the glmnet package, which is bundled with PMTK.
13.4.3 Proximal and gradient projection methods
In this section, we consider some methods that are suitable for very large scale problems, wherehomotopy methods made be too slow. These methods will also be easy to extend to other kinds
13.4./lscript1regularization: algorithms 443
of regularizers, beyond /lscript1, as we will see later. Our presentation in this section is based on
(Vandenberghe 2011; Yang et al. 2010).
Consider a convex objective of the form
f(θ)=L(θ)+R(θ) (13.66)
whereL(θ)(representing the loss) is convex and differentiable, and R(θ)(representing the
regularizer) is convex but not necessarily differentiable. For example, L(θ) = RSS(θ )and
R(θ)=λ||θ||1corresponds to the BPDN problem. As another example, the lasso problem can
be formulated as follows: L(θ) = RSS( θ)andR(θ)=IC(θ),w h e r eC={θ:||θ||1≤B},
andIC(θ)is the indicator function of a convex set C, deﬁned as
IC(θ)/defines/braceleftbigg0θ∈C
+∞otherwise(13.67)
In some cases, it is easy to optimize functions of the form in Equation 13.66. For example,
supposeL(θ) = RSS(θ ), and the design matrix is simply X=I. Then the obective becomes
f(θ)=R(θ)+1
2||θ−y|2
2. The minimizer of this is given by proxR(y), which is the proximal
operator for the convex function R, deﬁned by
proxR(y) = argmin
z/parenleftbigg
R(z)+1
2||z−y||2
2/parenrightbigg
(13.68)
Intuitively, we are returning a point that minimizes Rbut which is also close (proximal) to y.
In general, we will use this operator inside an iterative optimizer, in which case we want to stay
close to the previous iterate. In this case, we use
proxR(θk) = argmin
z/parenleftbigg
R(z)+1
2||z−θk||2
2/parenrightbigg
(13.69)
The key issues are: how do we efficiently compute the proximal operator for different regu-
larizersR, and how do we extend this technique to more general loss functions L? We discuss
these issues below.
13.4.3.1 Proximal operators
IfR(θ)=λ||θ||1, the proximal operator is given by componentwise soft-thresholding:
proxR(θ)=s o f t (θ,λ) (13.70)
as we showed in Section 13.3.2. If R(θ)=λ||θ||0, the proximal operator is given by componen-
twise hard-thresholding:
proxR(θ)=h a r d ( θ,√
2λ) (13.71)
wherehard(u,a) /definesuI(|u|>a).
IfR(θ)=IC(θ), the proximal operator is given by the projection onto the set C:
proxR(θ) = argmin
z∈C||z−θ||22=p r ojC(θ) (13.72)
444 Chapter 13. Sparse linear models
Figure 13.11 Illustration of projected gradient descent. The step along the negative gradient, to θk−gk,
takes us outside the feasible set. If we project that point onto the closest point in the set we get
θk+1= projΘ(θk−gk). We can then derive the implicit update direction using dk=θk+1−θk. Used
with kind permission of Mark Schmidt.
For some convex sets, it is easy to compute the projection operator. For example, to project
onto the rectangular set deﬁned by the box constraints C={θ:/lscriptj≤θj≤uj}we can use
projC(θ)j=⎧
⎨
⎩/lscriptjθj≤/lscriptj
θj/lscriptj≤θj≤uj
ujθj≥uj(13.73)
To project onto the Euclidean ball C={θ:||θ||2≤1}we can use
projC(θ)=/braceleftbiggθ
||θ||2||θ||2>1
θ||θ||2≤1(13.74)
To project onto the 1-norm ball C={θ:||θ||1≤1}we can use
projC(θ)=s o f t (θ,λ) (13.75)
whereλ=0if||θ||1≤1, and otherwise λis the solution to the equation
D/summationdisplay
j=1max(|θj|−λ,0) = 1 (13.76)
We can implement the whole procedure in O(D)time, as explained in (Duchi et al. 2008).
We will see an application of these different projection methods in Section 13.5.1.2.
13.4.3.2 Proximal gradient method
We now discuss how to use the proximal operator inside of a gradient descent routine. The
basic idea is to minimize a simple quadratic approximation to the loss function, centered on the
13.4./lscript1regularization: algorithms 445
θk:
θk+1=a r g m i n
zR(z)+L(θk)+gT
k(z−θk)+1
2tk||z−θk||2
2 (13.77)
wheregk=∇L(θk)is the gradient of the loss, tkis a constant discussed below, and the last
term arises from a simple approximation to the Hessian of the loss of the form ∇2L(θk)≈1
tkI.
Dropping terms that are independent of z, and multiplying by tk, we can rewrite the above
expression in terms of a proximal operator as follows:
θk+1=a r g m i n
z/bracketleftbigg
tkR(z)+1
2||z−uk||22/bracketrightbigg
=p r o xtkR(uk) (13.78)
uk=θk−tkgk (13.79)
gk=∇L(θk) (13.80)
IfR(θ)=0, this is equivalent to gradient descent. If R(θ)=IC(θ), the method is equivalent
toprojected gradient descent, sketched in Figure 13.11. If R(θ)=λ||θ ||1, the method is
known as iterative soft thresholding.
There are several ways to pick tk, or equivalently, αk=1/tk. Given that αkIis an approxi-
mation to the Hessian ∇2L, we require that
αk(θk−θk−1)≈gk−gk−1 (13.81)
in the least squares sense. Hence
αk=a r g m i n
α||α(θk−θk−1)−(gk−gk−1)||22=(θk−θk−1)T(gk−gk−1)
(θk−θk−1)T(θk−θk−1)(13.82)
This is known as the Barzilai-Borwein (BB) orspectral stepsize (Barzilai and Borwein 1988;
Fletcher 2005; Raydan 1997). This stepsize can be used with any gradient method, whether
proximal or not. It does not lead to monotonic decrease of the objective, but it is much fasterthan standard line search techniques. (To ensure convergence, we require that the objectivedecrease “on average”, where the average is computed over a sliding window of size M+1.)
When we combine the BB stepsize with the iterative soft thresholding technique (for R(θ)=
λ||θ||
1), plus a continuation method that gradually reduces λ, we get a fast method for the
BPDN problem known as the SpaRSA algorithm, which stands for “sparse reconstruction byseparable approximation” (Wright et al. 2009). However, we will call it the iterative shrinkage andthresholding algorithm. See Algorithm 12 for some pseudocode, and SpaRSAfor some Matlab
code. See also Exercise 13.11 for a related approach based on projected gradient descent.
13.4.3.3 Nesterov’s method
A faster version of proximal gradient descent can be obtained by epxanding the quadraticapproximationaroundapointotherthanthemostrecentparametervalue. Inparticular, considerperforming updates of the form
θ
k+1=p r o xtkR(φk−tkgk) (13.83)
gk=∇L(φk) (13.84)
φk=θk+k−1
k+2(θk−θk−1) (13.85)
446 Chapter 13. Sparse linear models
Algorithm 13.2: Iterative Shrinkage-Thresholding Algorithm (ISTA)
1Input:X∈RN×D,y∈RN, parameters λ≥0,M≥1,0<s<1;
2Initializeθ0=0,α=1,r=y,λ0=∞;
3repeat
4λt= max(s ||XTr||∞,λ)// Adapt the regularizer ;
5repeat
6 g=∇L(θ);
7 u=θ−1
αg;
8 θ=s o f t (u,λt
α);
9 Updateαusing BB stepsize in Equation 13.82 ;
10untilf(θ)increased too much within the past Msteps;
11r=y−Xθ// Update residual ;
12untilλt=λ;
σ2
Nyi
xiDwjτjγ
Figure 13.12 Representing lasso using a Gaussian scale mixture prior.
This is known as Nesterov’s method (Nesterov 2004; Tseng 2008). As before, there are a variety
of ways of setting tk; typically one uses line search.
When this method is combined with the iterative soft thresholding technique (for R(θ)=
λ||θ||1), plus a continuation method that gradually reduces λ, we get a fast method for the
BPDN problem known as the fast iterative shrinkage thesholding algorithm orFISTA(Beck
and Teboulle 2009).
13.4./lscript1regularization: algorithms 447
13.4.4 EM for lasso
In this section, we show how to solve the lasso problem using lasso. At ﬁrst sight, this might
seem odd, since there are no hidden variables. The key insight is that we can represent theLaplace distribution as a Gaussian scale mixture (GSM) (Andrews and Mallows 1974; West 1987)
as follows:
Lap(w
j|0,1/γ)=γ
2e−γ|wj|=/integraldisplay
N(wj|0,τ2
j)Ga(τ2
j|1,γ2
2)dτ2
j (13.86)
Thus the Laplace is a GSM where the mixing distibution on the variances is the exponential
distribution, Expon(τ2
j|γ2
2=G a (τ2
j|1,γ2
2). Using this decomposition, we can represent the
lasso model as shown in Figure 13.12. The corresponding joint distribution has the form
p(y,w,τ,σ2|X)=N (y|Xw,σ2IN)N(w|0,Dτ)
IG(σ2|aσ,bσ)⎡
⎣/productdisplay
jGa(τ2
j|1,γ2/2)⎤⎦ (13.87)
whereD
τ=d i a g (τ2
j), and where we have assumed for notational simplicity that Xis stan-
dardized and that yis centered (so we can ignore the offset term μ). Expanding out, we
get
p(y,w,τ,σ2|X)∝/parenleftbig
σ2/parenrightbig−N/2exp/parenleftbigg
−1
2σ2||y−Xw||2
2/parenrightbigg
|Dτ|−1
2
exp/parenleftbigg
−1
2wTDτw/parenrightbigg
(σ2)−(aσ+1)
exp(−bσ/σ2)/productdisplay
jexp(−γ2
2τ2
j) (13.88)
Below we describe how to apply the EM algorithm to the model in Figure 13.12.5In brief, in
the E step we infer τ2
jandσ2, and in the M step we estimate w. The resulting estimate ˆwis
the same as the lasso estimator. This approach was ﬁrst proposed in (Figueiredo 2003) (see also
(Griffin and Brown 2007; Caron and Doucet 2008; Ding and Harrison 2010) for some extensions).
13.4.4.1 Why EM?
Before going into the details of EM, it is worthwhile asking why we are presenting this approachat all, given that there are a variety of other (often much faster) algorithms that directly solve the/lscript
1MAP estimation problem (see linregFitL1Test for an empirical comparison). The reason
is that the latent variable perspective brings several advantages, such as the following:
• It provides an easy way to derive an algorithm to ﬁnd /lscript1-regularized parameter estimates for
a variety of other models, such as robust linear regression (Exercise 11.12) or probit regression
(Exercise 13.9).
5. To ensure the posterior is unimodal, one can follow (Park and Casella 2008) and slightly modify the model by
making the prior variance for the weights depend on the observation noise: p(wj|τ2
j,σ2)=N(wj|0,σ2τ2
j). The EM
algorithm is easy to modify.
448 Chapter 13. Sparse linear models
• It suggests trying other priors on the variances besides Ga(τ2
j|1,γ2/2). We will consider
various extensions below.
• It makes it clear how we can compute the full posterior, p(w|D), rather than just a MAP
estimate. This technique is known as the Bayesian lasso (Park and Casella 2008; Hans 2009).
13.4.4.2 The objective function
From Equation 13.88, the complete data penalized log likelihood is as follows (dropping terms
that do not depend on w)
/lscriptc(w)=−1
2σ2||y−Xw||2
2−1
2wTΛw+const (13.89)
whereΛ=d i a g (1
τ2
j)is the precision matrix for w.
13.4.4.3 The E step
The key is to compute E/bracketleftBig
1
τ2
j|wj/bracketrightBig
. We can derive this directly (see Exercise 13.8). Alternatively,
we can derive the full posterior, which is given by the following (Park and Casella 2008):
p(1/τ2
j|w,D)=InverseGaussian/parenleftBigg/radicalBigg
γ2
w2
j,γ2/parenrightBigg
(13.90)
(Note that the inverse Gaussian distribution is also known as the Wald distribution.) Hence
E/bracketleftBigg
1
τ2
j|wj/bracketrightBigg
=γ
|wj|(13.91)
LetΛ=d i a g ( E/bracketleftbig
1/τ2
1/bracketrightbig
,...,E/bracketleftbig
1/τ2
D/bracketrightbig
)denote the result of this E step.
We also need to infer σ2. It is easy to show that that the posterior is
p(σ2|D,w)=I G (aσ+(N)/2,bσ+1
2(y−Xˆw)T(y−Xˆw)) = IG(a N,bN)(13.92)
Hence
E/bracketleftbig
1/σ2/bracketrightbig
=aN
bN/definesω (13.93)
13.4.4.4 The M step
The M step consists of computing
ˆw=a r g m a x
w−1
2ω||y−Xw||22−1
2wTΛw (13.94)
This is just MAP estimation under a Gaussian prior:
ˆw=(σ2Λ+XTX)−1XTy (13.95)
13.5./lscript1regularization: extensions 449
However, since we expect many wj=0, we will have τ2
j=0for many j, making inverting Λ
numerically unstable. Fortunately, we can use the SVD of X, given by X=UDVT, as follows:
ˆw=ΨV(VTΨV+1
ωD−2)−1D−1UTy (13.96)
where
Ψ=Λ−1=d i a g (1
E/bracketleftbig
1/τ2
j/bracketrightbig) = diag(|wj|
π/prime(wj)) (13.97)
13.4.4.5 Caveat
Since the lasso objective is convex, this method should always ﬁnd the global optimum. Unfor-
tunately, this sometimes does not happen, for numerical reasons. In particular, suppose that inthe true solution, w
∗
j/negationslash=0. Further, suppose that we set ˆwj=0in an M step. In the following E
step we infer that τ2
j=0, so then we set ˆwj=0again; thus we can never “undo” our mistake.
Fortunately, in practice, this situation seems to be rare. See (Hunter and Li 2005) for furtherdiscussion.
13.5/lscript1regularization: extensions
In this section, we discuss various extensions of “vanilla” /lscript1regularization.
13.5.1 Group Lasso
In standard /lscript1regularization, we assume that there is a 1:1 correspondence between parameters
and variables, so that if ˆwj=0, we interpret this to mean that variable jis excluded. But
in more complex models, there may be many parameters associated with a given variable. Inparticular, we may have a vector of weights for each input, w
j. Here are some examples:
•Multinomial logistic regression Each feature is associated with Cdifferent weights, one
per class.
•Linear regression with categorical inputs Each scalar input is one-hot encoded into a
vector of length C.
•Multi-task learning In multi-task learning, we have multiple related prediction problems.
For example, we might have Cseparate regression or binary classiﬁcation problems. Thus
each feature is associated with Cdifferent weights. We may want to use a feature for all of
the tasks or none of the tasks, and thus select weights at the group level (Obozinski et al.2007).
If we use an /lscript
1regularizer of the form ||w||=/summationtext
j/summationtext
c|wjc|, we may end up with with some
elements of wj,:being zero and some not. To prevent this kind of situation, we partition the
parameter vector into Ggroups. We now minimize the following objective
J(w) = NLL( w)+G/summationdisplay
g=1λg||wg||2 (13.98)
450 Chapter 13. Sparse linear models
where
||wg||2=/radicalBigg/summationdisplay
j∈gw2
j (13.99)
is the 2-norm of the group weight vector. If the NLL is least squares, this method is called
group lasso (Yuan and Lin 2006).
We often use a larger penalty for larger groups, by setting λg=λ/radicalbig
dg,w h e r edgis the
number of elements in group g. For example, if we have groups {1,2}and{3,4,5}, the
objective becomes
J(w) = NLL( w)+λ/bracketleftbigg√
2/radicalBig
(w2
1+w2
2|)+√
3/radicalBig
(w2
3+w2
4+w2
5)/bracketrightbigg
(13.100)
Note that if we had used the square of the 2-norms, the model would become equivalent toridge regression, since
G/summationdisplay
g=1||wg||2
2=/summationdisplay
g/summationdisplay
j∈gw2
j=||w||22(13.101)
By using the square root, we are penalizing the radius of a ball containing the group’s weight
vector: the only way for the radius to be small is if all elements are small. Thus the square rootresults in group sparsity.
A variant of this technique replaces the 2-norm with the inﬁnity-norm (Turlach et al. 2005;
Zhao et al. 2005):
||w
g||∞=m a x
j∈g|wj| (13.102)
It is clear that this will also result in group sparsity.
An illustration of the difference is shown in Figures 13.13 and 13.14. In both cases, we have a
true signal wof sizeD=212= 4096, divided into 64 groups each of size 64. We randomly
choose 8 groups of wand assign them non-zero values. In the ﬁrst example, the values are
drawn from a N(0,1). In the second example, the values are all set to 1. We then pick a random
design matrix Xof sizeN×D,w h e r eN=210= 1024. Finally, we generate y=Xw+/epsilon1,
where/epsilon1∼N(0,10−4IN). Given this data, we estimate the support of wusing/lscript1or group /lscript1,
and then estimate the non-zero values using least squares. We see that group lasso does a muchbetter job than vanilla lasso, since it respects the known group structure.
6We also see that the
/lscript∞norm has a tendency to make all the elements within a block to have similar magnitude.
This is appropriate in the second example, but not the ﬁrst. (The value of λwas the same in all
examples, and was chosen by hand.)
13.5.1.1 GSM interpretation of group lasso
Group lasso is equivalent to MAP estimation using the following prior
p(w|γ,σ2)∝exp/parenleftBigg
−γ
σG/summationdisplay
g=1||wg||2/parenrightBigg
(13.103)
6. The slight non-zero “noise” in the /lscript∞group lasso results is presumably due to numerical errors.
13.5./lscript1regularization: extensions 451
0 500 1000 1500 2000 2500 3000 3500 4000−202Original (D = 4096, number groups = 64, active groups = 8)
0 500 1000 1500 2000 2500 3000 3500 4000−202Standard L1 (debiased 1, tau = 0.385, MSE = 0.06929)
(a)
0 500 1000 1500 2000 2500 3000 3500 4000−202Block−L2 (debiased 1, tau = 0.385, MSE = 0.000351)
0 500 1000 1500 2000 2500 3000 3500 4000−202Block−Linf (debiased 1, tau = 0.385, MSE = 0.053)
(b)
Figure 13.13 Illustration of group lasso where the original signal is piecewise Gaussian. Top left: original
signal. Bottom left:: vanilla lasso estimate. Top right: group lasso estimate using a /lscript2norm on the blocks.
Bottom right: group lasso estimate using an /lscript∞norm on the blocks. Based on Figures 3-4 of (Wright et al.
2009). Figure generated by groupLassoDemo , based on code by Mario Figueiredo.
Now one can show (Exercise 13.10) that this prior can be written as a GSM, as follows:
wg|σ2,τ2
g∼N(0,σ2τ2
gIdg) (13.104)
τ2
g|γ∼Ga(dg+1
2,γ
2) (13.105)
wheredgis the size of group g. So we see that there is one variance term per group, each
of which comes from a Gamma prior, whose shape parameter depends on the group size, and
whose rate parameter is controlled by γ. Figure 13.15 gives an example, where we have 2 groups,
one of size 2 and one of size 3.
This picture also makes it clearer why there should be a grouping effect. Suppose w1,1is
small; then τ2
1will be estimated to be small, which will force w1,2to be small. Converseley,
supposew1,1is large; then τ2
1will be estimated to be large, which will allow w1,2to be become
large as well.
452 Chapter 13. Sparse linear models
0 500 1000 1500 2000 2500 3000 3500 400000.51Original (D = 4096, number groups = 64, active groups = 8)
0 500 1000 1500 2000 2500 3000 3500 400000.51Standard L1 (debiased 1, tau = 0.356, MSE = 0.1206)
(a)
0 500 1000 1500 2000 2500 3000 3500 400000.51Block−L2 (debiased 1, tau = 0.356, MSE = 0.000342)
0 500 1000 1500 2000 2500 3000 3500 400000.51Block−Linf (debiased 1, tau = 0.356, MSE = 0.000425)
(b)
Figure 13.14 Same as Figure 13.13, except the original signal is piecewise constant.
σ2yi
xiw11w12 w21w22w23τ1 τ2γ
Figure 13.15 Graphical model for group lasso with 2 groups, the ﬁrst has size G1=2, the second has
sizeG2=3.
13.5./lscript1regularization: extensions 453
13.5.1.2 Algorithms for group lasso
There are a variety of algorithms for group lasso. Here we brieﬂy mention two. The ﬁrst
approach is based on proximal gradient descent, discussed in Section 13.4.3. Since the regularizeris separable, R(w)=/summationtext
g||wg||p, the proximal operator decomposes into Gseparate operators
of the form
proxR(b) = argmin
z∈RDg||z−b||2
2+λ||z||p (13.106)
whereb=θkg−tkgkg.I fp=2, one can show (Combettes and Wajs 2005) that this can be
implemented as follows
proxR(b)=b−projλC(b) (13.107)
whereC={z:||z||2≤1}is the/lscript2ball. Using Equation 13.74, if ||b||2<λ,w eh a v e
proxR(b)=b−b=0 (13.108)
otherwise we have
proxR(b)=b−λb
||b||2=b||b||2−λ
||b||2(13.109)
We can combine these into a vectorial soft-threshold function as follows (Wright et al. 2009):
proxR(b)=bmax(||b||2−λ,0)
max(||b||2−λ,0)+λ(13.110)
Ifp=∞, we use C={z:||z||1≤1}, which is the /lscript1ball. We can project onto this in O(dg)
time using an algorithm described in (Duchi et al. 2008).
Another approach is to modify the EM algorithm. The method is almost the same as for
vanilla lasso. If we deﬁne τ2
j=τ2
g(j),w h e r eg(j)is the group to which dimension jbelongs,
we can use the same full conditionals for σ2andwas before. The only changes are as follows:
• We must modify the full conditional for the weight precisions, which are estimated based on
a shared set of weights:
1
τ2g|γ,w,σ2,y,X∼InverseGaussian(/radicalBigg
γ2σ2
||wg||2
2,γ2) (13.111)
where||wg||22=/summationtext
j∈gw2
jg. For the E step, we can use
E/bracketleftbigg1
τ2g/bracketrightbigg
=γσ
||wg||2(13.112)
• We must modify the full conditional for the tuning parameter, which is now only estimated
based on Gvalues of τ2
g:
p(γ2|τ)=G a (aγ+G/2,b γ+1
2G/summationdisplay
gτ2
g) (13.113)
454 Chapter 13. Sparse linear models
●●
●●
●
●●
●●
●●
●●●
●●
●●●
●●
●●
●●●●
●●●
●
●●●
●
●●●●
●●
●●●
●●
●●
●●●●
●
●
●
●●●
●●●
●●
●
●●
●●
●●●
●
●●●
●●
●●
●●● ●
●●
●
●
●
●●
●●●
●●●
●
●●
●●
●●
●●●
●
●●
●●
●●●●●
●●
●●●
●●●●●●
●
●●●
●●
●●●●
●●●
●●●
●
●●●●
●
●●●
●●
●
● ●●●●
●●
●●
●●●●●
●●●
●
●●
●●
●
●●●
●●
●●●
●
●●●
●●●
●
●
●●
●●
●
●● ●
●●●
●●●
●●
●
●
●●
●
●●
●●
●●
●●
●●
●●
●●
●●●●
●●●●
●●●●●
●
●
●●
●
●●● ●
●
●
●●
●
●●
●●●
●
●●●●●
●
●●●●
●●
●
●●●
●●●●●●●●
●
●
●●●
●
●
●●
●
●●
●●
●
●●
●
●
●●●
●●●
●
●●
●●
●
●●●●
●
●
●●●
●
●●
●
●●●●
●●
●●
●
●
●
●●●●
●●●
●●
●
●●●●●
●●
●●●●
●
●●●
●●●●●●
●
●
●●
●●●●●●
●●●
●●●
●
0 100 200 300 400−1.5 −1.0 −0.5 0.0 0.5
IndexCGH
(a) (b) (c)
Figure 13.16 (a) Example of the fused lasso. The vertical axis represents array CGH (chromosomal genome
hybridization) intensity, and the horizontal axis represents location along a genome. Source: Figure 1 of
(Hoeﬂing 2010). (b) Noisy image. (c) Fused lasso estimate using 2d lattice prior. Source: Figure 2 of(Hoeﬂing 2010). Used with kind permission of Holger Hoeﬂing.
13.5.2 Fused lasso
In some problem settings (e.g., functional data analysis), we want neighboring coefficients to be
similar to each other, in addition to being sparse. An example is given in Figure 13.16(a), wherewe want to ﬁt a signal that is mostly “off”, but in addition has the property that neighboringlocations are typically similar in value. We can model this by using a prior of the form
p(w|σ
2)∝exp⎛
⎝−λ1
σD/summationdisplay
j=1|wj|−λ2
σD−1/summationdisplay
j=1|wj+1−wj|⎞⎠ (13.114)
This is known as the fused lasso penalty. In the context of functional data analysis, we often
useX=I, so there is one coefficient for each location in the signal (see Section 4.4.2.3). In this
case, the overall objective has the form
J(w,λ
1,λ2)=N/summationdisplay
i=1(yi−wi)2+λ1N/summationdisplay
i=1|wi|+λ2N−1/summationdisplay
i=1|wi+1−wi| (13.115)
This is a sparse version of Equation 4.148.
It is possible to generalize this idea beyond chains, and to consider other graph structures,
using a penalty of the form
J(w,λ1,λ2)=/summationdisplay
s∈V(ys−ws)2+λ1/summationdisplay
s∈V|ws|+λ2/summationdisplay
(s,t)∈E|ws−wt| (13.116)
This is called graph-guided fused lasso (see e.g., (Chen et al. 2010)). The graph might come
from some prior knowledge, e.g., from a database of known biological pathways. Another
example is shown in Figure 13.16(b-c), where the graph structure is a 2d lattice.
13.5./lscript1regularization: extensions 455
13.5.2.1 GSM interpretation of fused lasso
One can show (Kyung et al. 2010) that the fused lasso model is equivalent to the following
hierarchical model
w|σ2,τ,ω∼N(0,σ2Σ(τ,ω)) (13.117)
τ2
j|γ1∼Expon(γ2
1
2),j=1:D (13.118)
ω2
j|γ2∼Expon(γ2
2
2),j=1:D−1 (13.119)
whereΣ=Ω−1, andΩis a tridiagonal precision matrix with
main diagonal ={1
τ2
j+1
ω2
j−1+1
ω2
j} (13.120)
off diagonal ={−1
ω2
j} (13.121)
where we have deﬁned ω−2
0=ω−2
D=0. This is very similar to the model in Section 4.4.2.3,
where we used a chain-structured Gaussian Markov random ﬁeld as the prior, with ﬁxed vari-ance. Here we just let the variance be random. In the case of graph-guided lasso, the structureof the graph is reﬂected in the zero pattern of the Gaussian precision matrix (see Section 19.4.4).
13.5.2.2 Algorithms for fused lasso
It is possible to generalize the EM algorithm to ﬁt the fused lasso model, by exploiting theMarkov structure of the Gaussian prior for efficiency. Direct solvers (which don’t use the latentvariable trick) can also be derived (see e.g., (Hoeﬂing 2010)). However, this model is undeniablymore expensive to ﬁt than the other variants we have considered.
13.5.3 Elastic net (ridge and lasso combined)
Although lasso has proved to be effective as a variable selection technique, it has severalproblems (Zou and Hastie 2005), such as the following:
• If there is a group of variables that are highly correlated (e.g., genes that are in the same
pathway), then the lasso tends to select only one of them, chosen rather arbitrarily. (This
is evident from the LARS algorithm: once one member of the group has been chosen, theremaining members of the group will not be very correlated with the new residual and hencewill not be chosen.) It is usually better to select all the relevant variables in a group. If weknow the grouping structure, we can use group lasso, but often we don’t know the groupingstructure.
• In the D>Ncase, lasso can select at most Nvariables before it saturates.
•I fN>D, but the variables are correlated, it has been empirically observed that the
prediction performance of ridge is better than that of lasso.
456 Chapter 13. Sparse linear models
Zou and Hastie (Zou and Hastie 2005) proposed an approach called the elastic net, which is
a hybrid between lasso and ridge regression, which solves all of these problems. It is apparently
called the “elastic net” because it is “like a stretchable ﬁshing net that retains ’all the big ﬁsh”’(Zou and Hastie 2005).
13.5.3.1 Vanilla version
The vanilla version of the model deﬁnes the following objective function:
J(w,λ
1,λ2)=||y−Xw||2+λ2||w||2
2+λ1||w||1 (13.122)
Notice that this penalty function is strictly convex (assuming λ2>0) so there is a unique global
minimum, even if Xis not full rank.
It can be shown (Zou and Hastie 2005) that any strictly convex penalty on wwill exhibit
agrouping effect, which means that the regression coefficients of highly correlated variables
tend to be equal (up to a change of sign if they are negatively correlated). For example, if two
features are equal, so X:j=X:k, one can show that their estimates are also equal, ˆwj=ˆwk.
By contrast, with lasso, we may have that ˆwj=0andˆwk/negationslash=0or vice versa.
13.5.3.2 Algorithms for vanilla elastic net
It is simple to show (Exercise 13.5) that the elastic net problem can be reduced to a lasso problemon modiﬁed data. In particular, deﬁne
˜X=c/parenleftbiggX√
λ2ID/parenrightbigg
,˜y=/parenleftbiggy
0D×1/parenrightbigg
(13.123)
wherec=( 1+λ2)−1
2. Then we solve
˜w=a r gm i n
˜w||˜y−˜X˜w||2+cλ1||˜w||1 (13.124)
and setw=c˜w.
We can use LARS to solve this subproblem; this is known as the LARS-EN algorithm. If we
stop the algorithm after mvariables have been included, the cost is O(m3+Dm2). Note that
we can use m=Dif we wish, since ˜Xhas rank D. This is in contrast to lasso, which cannot
select more than Nvariables (before jumping to the OLS solution) if N<D.
When using LARS-EN (or other /lscript1solvers), one typically uses cross-validation to select λ1and
λ2.
13.5.3.3 Improved version
Unfortunately it turns out that the “vanilla” elastic net does not produce functions that predictvery accurately, unless it is very close to either pure ridge or pure lasso. Intuitively the reasonis that it performs shrinkage twice: once due to the /lscript
2penalty and again due to the /lscript1penalty.
The solution is simple: undo the /lscript2shrinkage by scaling up the estimates from the vanilla
version. In other words, if w∗is the solution of Equation 13.124, then a better estimate is
ˆw=/radicalbig
1+λ2˜w (13.125)
13.6. Non-convex regularizers 457
We will call this a corrected estimate.
One can show that the corrected estimates are given by
ˆw=a r gm i n
wwT/parenleftbiggXTX+λ2I
1+λ2/parenrightbigg
w−2yTXw+λ1||w||1 (13.126)
Now
XTX+λ2I
1+λ2=( 1−ρ)ˆΣ+ρI (13.127)
whereρ=λ2/(1 +λ2). So the the elastic net is like lasso but where we use a version of
ˆΣthat is shrunk towards I. (See Section 4.2.6 for more discussion of regularized estimates of
covariance matrices.)
13.5.3.4 GSM interpretation of elastic net
The implicit prior being used by the elastic net obviously has the form
p(w|σ2)∝exp⎛
⎝−γ1
σD/summationdisplay
j=1|wj|−γ2
2σ2D/summationdisplay
j=1w2
j⎞⎠ (13.128)
which is just a product of Gaussian and Laplace distributions.
This can be written as a hierarchical prior as follows (Kyung et al. 2010; Chen et al. 2011):
w
j|σ2,τ2
j∼N(0,σ2(τ−2
j+γ2)−1) (13.129)
τ2
j|γ1∼Expon(γ2
1
2) (13.130)
Clearly if γ2=0, this reduces to the regular lasso.
It is possible to perform MAP estimation in this model using EM, or Bayesian inference using
MCMC (Kyung et al. 2010) or variational Bayes (Chen et al. 2011).
13.6 Non-convex regularizers
Although the Laplace prior results in a convex optimization problem, from a statistical point
of view this prior is not ideal. There are two main problems with it. First, it does not putenough probability mass near 0, so it does not sufficiently suppress noise. Second, it doesnot put enough probability mass on large values, so it causes shrinkage of relevant coefficients,corresponding to “signal”. (This can be seen in Figure 13.5(a): we see that /lscript
1estimates of large
coefficients are signiﬁcantly smaller than their ML estimates, a phenomenon known as bias.)
Both problems can be solved by going to more ﬂexible kinds of priors which have a larger
spike at 0 and heavier tails. Even though we cannot ﬁnd the global optimum anymore, thesenon-convex methods often outperform /lscript
1regularization, both in terms of predictive accuracy
and in detecting relevant variables (Fan and Li 2001; Schniter et al. 2008). We give some examplesbelow.
458 Chapter 13. Sparse linear models
13.6.1 Bridge regression
A natural generalization of /lscript1regularization, known as bridge regression (Frank and Friedman
1993), has the form
ˆw= NLL(w)+λ/summationdisplay
j|wj|b(13.131)
forb≥0. This corresponds to MAP estimation using a exponential power distribution given
by
ExpPower( w|μ,a,b) /definesb
2aΓ(1+1/b)exp/parenleftBigg
−|x−μ|
ab/parenrightBigg
(13.132)
Ifb=2, we get the Gaussian distribution (with a=σ√
2), corresonding to ridge regression; if
we setb=1, we get the Laplace distribution, corresponding to lasso; if we set b=0,w eg e t
/lscript0regression, which is equivalent to best subset selection. Unfortunately, the objective is not
convex for b<1, and is not sparsity promoting for b>1. So the /lscript1norm is the tightest convex
approximation to the /lscript0norm.
The effect of changing bis illustrated in Figure 13.17, where we plot the prior for b=2,b=1
andb=0.4; we assume p(w)=p(w1)p(w2). We also plot the posterior after seeing a single
observation, (x,y), which imposes a single linear constraint of the form, y=wTx, with a
certain tolerance controlled by the observation noise (compare to Figure 7.11). We see see that
the mode of the Laplace is on the vertical axis, corresponding to w1=0. By contrast, there are
two modes when using b=0.4, corresponding to two different sparse solutions. When using
the Gaussian, the MAP estimate is not sparse (the mode does not lie on either of the coordinateaxes).
13.6.2 Hierarchical adaptive lasso
Recall that one of the principal problems with lasso is that it results in biased estimates.This is because it needs to use a large value of λto “squash” the irrelevant parameters, but
this then over-penalizes the relevant parameters. It would be better if we could associate adifferent penalty parameter with each parameter. Of course, it is completely infeasible to tuneDparameters by cross validation, but this poses no problem to the Bayesian: we simply make
eachτ
2
jhave its own private tuning parameter, γj, which are now treated as random variables
coming from the conjugate prior γj∼IG(a,b). The full model is as follows:
γj∼IG(a,b) (13.133)
τ2
j|γj∼Ga(1,γ2
j/2) (13.134)
wj|τ2
j∼N(0,τ2
j) (13.135)
See Figure 13.18(a). This has been called the hierarchical adaptive lasso (HAL) (Lee et al. 2010)
(see also (Lee et al. 2011; Cevher 2009; Armagan et al. 2011)). We can integrate out τ2
j, which
induces a Lap(w j|0,1/γj)distribution on wjas before. The result is that p(wj)is now a
scaled mixture of Laplacians. It turns out that we can ﬁt this model (i.e., compute a local
posterior mode) using EM, as we explain below. The resulting estimate, ˆwHAL, often works
13.6. Non-convex regularizers 459
Figure 13.17 Top: plot of log priorfor three different distributions with unit variance: Gaussian, Laplace
and exponential power. Bottom: plot of log posteriorafter observing a single observation, corresponding
to a single linear constraint. The precision of this observation is shown by the diagonal lines in the top
ﬁgure. In the case of the Gaussian prior, the posterior is unimodal and symmetric. In the case of theLaplace prior, the posterior is unimodal and asymmetric (skewed). In the case of the exponential prior, theposterior is bimodal. Based on Figure 1 of (Seeger 2008). Figure generated by sparsePostPlot , written
by Florian Steinke.
much better than the estimate returned by lasso, ˆwL1, in the sense that it is more likely to
contain zeros in the right places (model selection consistency) and more likely to result in good
predictions (prediction consistency) (Lee et al. 2010). We give an explanation for this behavior inSection 13.6.2.2.
13.6.2.1 EM for HAL
Since the inverse Gamma is conjugate to the Laplace, we ﬁnd that the E step for γ
jis given by
p(γj|wj)=I G (a+1,b+|wj|) (13.136)
The E step for σ2is the same as for vanilla lasso.
The prior for whas the following form:
p(w|γ)=/productdisplay
j1
2γjexp(−|w j|/γj) (13.137)
Hence the M step must optimize
ˆw(t+1)=a r g m a x
wlogN(y|Xw,σ2)−/summationdisplay
j|wj|E[1/γj] (13.138)
460 Chapter 13. Sparse linear models
aσ
bσσ2
yi
xiwjτ2
jγjab
ND
(a)−1 −0.8−0.6−0.4 −0.2 0 0.2 0.4 0.6 0.8 1−1−0.8−0.6−0.4−0.200.20.40.60.81HAL
  
a=1, b=0.01
a=1, b=0.10
a=1, b=1.00
(b)
Figure 13.18 (a) DGM for hierarchical adaptive lasso. (b) Contours of Hierarchical adpative Laplace. Based
on Figure 1 of (Lee et al. 2010). Figure generated by normalGammaPenaltyPlotDemo .
The expectation is given by
E[1/γj]=a+1
b+|w(t)
j|/definess(t)
j (13.139)
Thus the M step becomes a weighted lasso problem:
ˆw(t+1)= argmin
w||y−Xw||2
2+/summationdisplay
js(t)
j|wj| (13.140)
This is easily solved using standard methods (e.g., LARS). Note that if the coefficient was esti-
mated to be large in the previous iteration (so w(t)
jis large), then the scaling factor s(t)
jwill
be small, so large coefficients are not penalized heavily. Conversely, small coefficients doget
penalized heavily. This is the way that the algorithm adapts the penalization strength of each
coefficient. The result is an estimate that is often much sparser than returned by lasso, but alsoless biased.
N o t et h a ti fw es e ta =b=0, and we only perform 1 iteration of EM, we get a method that
is closely related to the adaptive lasso of (Zou 2006; Zou and Li 2008). This EM algorithm is
also closely related to some iteratively reweighted /lscript
1methods proposed in the signal processing
community (Chartrand and Yin 2008; Candes et al. 2008).
13.6.2.2 Understanding the behavior of HAL
We can get a better understanding of HAL by integrating out γjto get the following marginal
distribution,
p(wj|a,b)=a
2b/parenleftbigg|wj|
b+1/parenrightbigg−(a+1)
(13.141)
13.6. Non-convex regularizers 461
−10 −8 −6 −4 −2 0 2 4 6 8 10−10−8−6−4−20246810Lasso
wMLEwMAP
(a)−10 −8 −6 −4 −2 0 2 4 6 8 10−10−8−6−4−20246810
wMLEwMAPHAL
  
b = 0.010, a=1
b = 0.100, a=1
b = 1.000, a=1
(b)
Figure 13.19 Thresholding behavior of two penalty functions (negative log priors). (a) Laplace.
(b) Hierarchical adaptive Laplace. Based on Figure 2 of (Lee et al. 2010). Figure generated by
normalGammaThresholdPlotDemo .
This is an instance of the generalized t distribution (McDonald and Newey 1988) (in (Cevher
2009; Armagan et al. 2011), this is called the double Pareto distribution) deﬁned as
GT(w|μ,a,c,q)/definesq
2ca1/qB(1/q,a)/parenleftbigg
1+|w−μ|q
acq/parenrightbigg−(a+1/q)
(13.142)
wherecis the scale parameter (which controls the degree of sparsity), and ais related to the
degrees of freedom. When q=2andc=√
2we recover the standard t distribution; when
a→∞, we recover the exponential power distribution; and when q=1anda=∞we
get the Laplace distribution. In the context of the current model, we see that p(wj|a,b)=
GT(wj|0,a,b/a, 1).
The resulting penalty term has the form
πλ(wj)/defines−logp(wj)=(a+1)log(1+|wj|
b)+const (13.143)
whereλ=(a,b)are the tuning parameters. We plot this penalty in 2d (i.e., we plot πλ(w1)+
πλ(w2)) in Figure 13.18(b) for various values of b. Compared to the diamond-shaped Laplace
penalty, shown in Figure 13.3(a), we see that the HAL penalty looks more like a “star ﬁsh”: it
puts much more density along the “spines”, thus enforcing sparsity more aggressively. Note thatthis penalty is clearly not convex.
We can gain further understanding into the behavior of this penalty function by considering
applying it to the problem of linear regression with an orthogonal design matrix. In this case,
462 Chapter 13. Sparse linear models
p(τ2
j) p(γj)p(wj) Ref
Ga(1,γ2
2)Fixed Lap(0,1/γ)(Andrews and Mallows 1974; West 1987)
Ga(1,γ2
2)I G ( a,b)G T ( 0 ,a,b/a,1)(Lee et al. 2010, 2011; Cevher 2009; Armagan et al. 2011)
Ga(1,γ2
2)G a ( a,b)NEG(a,b) (Griffin and Brown 2007, 2010; Chen et al. 2011)
Ga(δ,γ2
2)Fixed NG (δ,γ) (Griffin and Brown 2007, 2010)
Ga(τ2
j|0,0)-N J (wj) (Figueiredo 2003)
IG(δ
2,δγ2
2)Fixed T(0,δ,γ) (Andrews and Mallows 1974; West 1987)
C+(0,γ)C+(0,b)horseshoe( b)(Carvahlo et al. 2010)
Table 13.2 Some scale mixtures of Gaussians. Abbreviations: C+= half-rectiﬁed Cauchy; Ga= Gamma
(shape and rate parameterization); GT = generalized t; IG= inverse Gamma; NEG = Normal-Exponential-
Gamma; NG = Normal-Gamma; NJ = Normal-Jeffreys. The horseshoe distribution is the name we give
to the distribution induced on wjby the prior described in (Carvahlo et al. 2010); this has no simple
analytic form. The deﬁnitions of the NEG and NG densities are a bit complicated, but can be found in thereferences. The other distributions are deﬁned in the text.
one can show that the objective becomes
J(w)=1
2||y−Xw||2
2+D/summationdisplay
j=1πλ(|wj|) (13.144)
=1
2||y−ˆy||2+1
2D/summationdisplay
j=1(ˆwmle
j−wj)2+D/summationdisplay
j=1πλ(|wj|) (13.145)
whereˆwmle=XTyis the MLE and ˆy=Xˆwmle. Thus we can compute the MAP estimate
one dimension at a time by solving the following 1d optimization problem:
ˆwj=a r g m i n
wj1
2(ˆwmle
j−wj)2+πλ(wj) (13.146)
In Figure 13.19(a) we plot the lasso estimate, ˆwL1, vs the ML estimate, ˆwmle. We see that the
/lscript1estimator has the usual soft-thresholding behavior seen earlier in Figure 13.5(a). However,
this behavior is undesirable since the large magnitude coefficients are also shrunk towards 0,
whereas we would like them to be equal to their unshrunken ML estimates.
In Figure 13.19(b) we plot the HAL estimate, ˆwHAL, vs the ML estimate ˆwmle. We see that
this approximates the more desirable hard thresholding behavior seen earlier in Figure 13.5(b)much more closely.
13.6.3 Other hierarchical priors
Many other hierarchical sparsity-promoting priors have been proposed; see Table 13.2 for a briefsummary. In some cases, we can analytically derive the form of the marginal prior for w
j.
Generally speaking, this prior is not concave.
A particularly interesting prior is the improper Normal-Jeffreys prior, which has been used
in (Figueiredo 2003). This puts a non-informative Jeffreys prior on the variance, Ga(τ2
j|0,0)∝
13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL) 463
1/τ2
j; the resulting marginal has the form p(wj)=NJ(wj)∝1/|wj|. This gives rise to a
thresholding rule that looks very similar to HAL in Figure 13.19(b), which in turn is very similar
to hard thresholding. However, this prior has no free parameters, which is both a good thing(nothing to tune) and a bad thing (no ability to adapt the level of sparsity).
13.7 Automatic relevance determination (ARD)/sparse Bayesian learning (SBL)
All the methods we have considered so far (except for the spike-and-slab methods in Sec-tion 13.2.1) have used a factorial prior of the form p(w)=/producttext
jp(wj). We have seen how these
priors can be represented in terms of Gaussian scale mixtures of the form wj∼N(0,τ2
j),w h e r e
τ2
jhas one of the priors listed in Table 13.2. Using these latent variances, we can represent the
model in the form τ2
j→wj→y←X. We can then use EM to perform MAP estimation,
w h e r ei nt h eEs t e pw ei n f e rp( τ2
j|wj), and in the M step we estimate wfromy,Xandτ.
This M step either involves a closed-form weighted /lscript2optimization (in the case of Gaussian
scale mixtures), or a weighted /lscript1optimization (in the case of Laplacian scale mixtures). We also
discussed how to perform Bayesian inference in such models, rather than just computing MAPestimates.
In this section, we discuss an alternative approach based on type II ML estimation (empirical
Bayes), whereby we integrate out wand maximize the marginal likelihood wrt τ. This EB
procedure can be implemented via EM, or via a reweighted /lscript
1scheme, as we will explain below.
Having estimated the variances, we plug them in to compute the posterior mean of the weights,E[w|ˆτ,D]; rather surprisingly (in view of the Gaussian prior), the result is an (approximately)
sparse estimate, for reasons we explain below.
In the context of neural networks, this this method is called called automatic relevance
determination orARD(MacKay 1995b; Neal 1996): see Section 16.5.7.5. In the context of the
linear models we are considering in this chapter, this method is called sparse Bayesian learning
orSBL(Tipping 2001). Combining ARD/SBL with basis function expansion in a linear model
gives rise to a technique called the relevance vector machine (RVM), which we will discuss inSection 14.3.2.
13.7.1 ARD for linear regression
We will explain the procedure in the context of linear regression; ARD for GLMs requires the useof the Laplace (or some other) approximation. case can be It is conventional, when discussingARD / SBL, to denote the weight precisions by α
j=1/τ2
j, and the measurement precision
byβ=1/σ2(do not confuse this with the use of βin statistics to represent the regression
coefficients!). In particular, we will assume the following model:
p(y|x,w,β)=N (y|wTx,1/β) (13.147)
p(w)=N (w|0,A−1) (13.148)
464 Chapter 13. Sparse linear models
whereA=d i a g (α). The marginal likelihood can be computed analytically as follows:
p(y|X,α,β)=/integraldisplay
N(y|Xw,βIN)N(w|0,A)dw (13.149)
=N(y|0,βIN+XA−1XT) (13.150)
=( 2π)−N/2|Cα|−1
2exp(−1
2yTC−1
αy) (13.151)
where
Cα/definesβ−1IN+XA−1XT(13.152)
Compare this to the marginal likelihood in Equation 13.13 in the spike and slab model; modulo
theβ=1/σ2factor missing from the second term, the equations are the same, except we have
replaced the binary γj∈{0,1}with continuous αj∈R+. In log form, the objective becomes
/lscript(α,β)/defines−1
2logp(y|X,α,β)=l o g|Cα|+yTC−1
αy (13.153)
To regularize the problem, we may put a conjugate prior on each precision, αj∼Ga(a,b)
andβ∼Ga(c,d). The modiﬁed objective becomes
/lscript(α,β)/defines−1
2logp(y|X,α,β)+/summationdisplay
jlogGa(α j|a,b)+logGa( β|c,d) (13.154)
=l o g|Cα|+yTC−1
αy+/summationdisplay
j(alogαj−bαj)+clogβ−dβ (13.155)
This is useful when performing Bayesian inference for αandβ(Bishop and Tipping 2000).
However, when performing (type II) point estimation, we will use the improper prior a=b=
c=d=0, which results in maximal sparsity.
Below we describe how to optimize /lscript(α,β)wrt the precision terms αandβ.7This is a
proxy for ﬁnding the most probable model setting of γin the spike and slab model, which in
turn is closely related to /lscript0regularization. In particular, it can be shown (Wipf et al. 2010) that
the objective in Equation 13.153 has many fewer local optima than the /lscript0objective, and hence
is much easier to optimize.
Once we have estimated αandβ, we can compute the posterior over the parameters using
p(w|D,ˆα,ˆβ)=N(μ,Σ) (13.156)
Σ−1=ˆβXTX+A (13.157)
μ=ˆβΣXTy (13.158)
The fact that we compute a posterior over w, while simultaneously encouraging sparsity, is why
the method is called “sparse Bayesian learning”. Nevertheless, since there are many ways to besparse and Bayesian, we will use the “ARD” term instead, even in the linear model context. (Inaddition, SBL is only “being Bayesian” about the values of the coefficients, rather than reﬂectinguncertainty about the set of relevant variables, which is typically of more interest.)
7. An alternative approach to optimizing βis to put a Gamma prior on βand to integrate it out to get a Student
posterior for w(Buntine and Weigend 1991). However, it turns out that this results in a less accurate estimate for
α(MacKay 1999). In addition, working with Gaussians is easier than working with the Student distribution, and the
Gaussian case generalizes more easily to other cases such as logistic regression.
13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL) 465
x
y
(a)Cy
(b)
Figure 13.20 Illustration of why ARD results in sparsity. The vector of inputs xdoes not point towards
the vector of outputs y, so the feature should be removed. (a) For ﬁnite α, the probability density is spread
in directions away from y. (b) When α=∞, the probability density at yis maximized. Based on Figure
8 of (Tipping 2001).
13.7.2 Whence sparsity?
Ifˆαj≈0, we ﬁnd ˆwj≈ˆwmle
j, since the Gaussian prior shrinking wjtowards 0 has zero
precision. However, if we ﬁnd that ˆαj≈∞, then the prior is very conﬁdent that wj=0, and
hence that feature jis “irrelevant”. Hence the posterior mean will have ˆwj≈0. Thus irrelevant
features automatically have their weights “turned off” or “pruned out”.
We now give an intuitive argument, based on (Tipping 2001), about why ML-II should encour-
ageαj→∞for irrelevant features. Consider a 1d linear regression with 2 training examples,
soX=x=(x1,x2), andy=(y1,y2). We can plot xandyas vectors in the plane, as
shown in Figure 13.20. Suppose the feature is irrelevant for predicting the response, so xpoints
in a nearly orthogonal direction to y. Let us see what happens to the marginal likelihood as we
changeα. The marginal likelihood is given by p(y|x,α,β)=N(y|0,C),w h e r e
C=1
βI+1
αxxT(13.159)
Ifαis ﬁnite, the posterior will be elongated along the direction of x, as in Figure 13.20(a).
However, if α=∞, we ﬁnd C=1
βI,s oCis spherical, as in Figure 13.20(b). If |C|is held
constant, the latter assigns higher probability density to the observed response vector y, so this
is the preferred solution. In other words, the marginal likelihood “punishes” solutions where αj
is small but X:,jis irrelevant, since these waste probability mass. It is more parsimonious (from
the point of view of Bayesian Occam’s razor) to eliminate redundant dimensions.
13.7.3 Connection to MAP estimation
ARD seems quite different from the MAP estimation methods we have been considering earlier
in this chapter. In particular, in ARD, we are not integrating out αand optimizing w, but vice
466 Chapter 13. Sparse linear models
versa. Because the parameters wjbecome correlated in the posterior (due to explaining away),
when we estimate αjwe are borrowing information from all the features, not just feature j.
Consequently, the effective prior p(w|ˆα)isnon-factorial, and furthermore it depends on the
dataD(andσ2). However, in (Wipf and Nagarajan 2007), it was shown that ARD can be viewed
as the following MAP estimation problem:
ˆwARD=a r g m i n
wβ||y−Xw||2
2+gARD(w) (13.160)
gARD(w)/definesmin
α≥0/summationdisplay
jαjw2
j+log|Cα| (13.161)
The proof, which is based on convex analysis, is a little complicated and hence is omitted.
Furthermore, (Wipf and Nagarajan 2007; Wipf et al. 2010) prove that MAP estimation with
non-factorial priors is strictly better than MAP estimation with any possible factorial prior in
the following sense: the non-factorial objective always has fewer local minima than factorialobjectives, while still satisfying the property that the global optimum of the non-factorial objec-tive corresponds to the global optimum of the /lscript
0objective — a property that /lscript1regularization,
which has no local minima, does not enjoy.
13.7.4 Algorithms for ARD *
In this section, we review several different algorithms for implementing ARD.
13.7.4.1 EM algorithm
The easiest way to implement SBL/ARD is to use EM. The expected complete data log likelihoodis given by
Q(α,β)=E/bracketleftbig
logN(y|Xw,σ
2I)+logN(w|0,A−1)/bracketrightbig
(13.162)
=1
2E⎡
⎣Nlogβ−β||y−Xw||2+/summationdisplay
jlogαj−tr(AwwT)⎤⎦+const(13.163)
=1
2Nlogβ−β
2/parenleftbig
||y−Xμ||2+tr(XTXΣ)/parenrightbig
+1
2/summationdisplay
jlogαj−1
2tr[A(μμT+Σ)]+const (13.164)
whereμandΣare computed in the E step using Equation 13.158.
Suppose we put a Ga(a,b) prior onαjand aGa(c,d)prior onβ. The penalized objective
becomes
Q/prime(α,β)=Q(α,β)+/summationdisplay
j(alogαj−bαj)+clogβ−dβ (13.165)
SettingdQ/prime
dαj=0we get the following M step:
αj=1+2a
E/bracketleftbig
w2
j/bracketrightbig
+2b=1+2a
m2
j+Σjj+2b(13.166)
13.7. Automatic relevance determination (ARD)/sparse Bayesian learning (SBL) 467
Ifαj=α, anda=b=0, the update becomes
α=D
E[wTw]=D
μTμ+tr(Σ)(13.167)
The update for βis given by
β−1
new=||y−Xμ||2+β−1/summationtext
j(1−αjΣjj)+2d
N+2c(13.168)
(Deriving this is Exercise 13.2.)
13.7.4.2 Fixed-point algorithm
A faster and more direct approach is to directly optimize the objective in Equation 13.155. One
can show (Exercise 13.3) that the equationsd/lscript
dαj=0andd/lscript
dβ=0lead to the following ﬁxed
point updates:
αj←γj+2a
m2
j+2b(13.169)
β−1←||y−Xμ||2+2d
N−/summationtext
jγj+2c(13.170)
γj/defines1−αjΣjj (13.171)
The quantity γjis a measure of how well-determined wjis by the data (MacKay 1992). Hence
γ=/summationtext
jγjis the effective degrees of freedom of the model. See Section 7.5.3 for further
discussion.
Sinceαandβboth depend on μandΣ(which can be computed using Equation 13.158 or the
Laplace approximation), we need to re-estimate these equations until convergence. (Convergence
properties of this algorithm have been studied in (Wipf and Nagarajan 2007).) At convergence,the results are formally identical to those obtained by EM, but since the objective is non-convex,the results can depend on the initial values.
13.7.4.3 Iteratively reweighted /lscript
1algorithm
Another approach to solving the ARD problem is based on the view that it is a MAP estimationproblem. Although the log prior g(w)is rather complex in form, it can be shown to be a
non-decreasing, concave function of |w
j|. This means that it can be solved by an iteratively
reweighted /lscript1problem of the form
wt+1=a r gm i n
wNLL(w)+/summationdisplay
jλ(t)
j|wj| (13.172)
In (Wipf and Nagarajan 2010), the following procedure for setting the penalty terms is suggested
(based on a convex bound to the penalty function). We initialize with λ(0)
j=1, and then at
468 Chapter 13. Sparse linear models
iterationt+1, compute λ(t+1)
jby iterating the following equation a few times:8
λj←/bracketleftbigg
X:,j/parenleftBig
σ2I+Xdiag(1/λ j)diag(|w(t+1)
j|)/parenrightBig−1
XT)−1X:,j/bracketrightbigg1
2
(13.173)
We see that the new penalty λjdepends on allthe old weights. This is quite different from the
adaptive lasso method of Section 13.6.2.
To understand this difference, consider the noiseless case where σ2=0, and assume D/greatermuchN.
In this case, there are/parenleftbiggD
N/parenrightbigg
solutions which perfectly reconstruct the data, Xw=y, and which
have sparsity ||w||0=N; these are called basic feasible solutions or BFS. What we want are
solutions that satsify Xw=ybut which are much sparser than this. Suppose the method has
found a BFS. We do not want to increase the penalty on a weight just because it is small (as
in adaptive lasso), since that will just reinforce our current local optimum. Instead, we want toincrease the penalty on a weight if it is small and if we have ||w
(t+1)||<N. The covariance
term(Xdiag(1/λj)diag(|w(t+1)
j|))−1has this effect: if wis a BFS, this matrix will be full rank,
so the penalty will not increase much, but if wis sparser than N, the matrix will not be full
rank, so the penalties associated with zero-valued coefficients will increase, thus reinforcing thissolution (Wipf and Nagarajan 2010).
13.7.5 ARD for logistic regression
Now consider binary logistic regression, p(y|x,w)=B e r ( y|sigm(wTx)), using the same
Gaussian prior, p(w)=N(w|0,A−1). We can no longer use EM to estimate α, since the
Gaussian prior is not conjugate to the logistic likelihood, so the E step cannot be done exactly.One approach is to use a variational approximation to the E step, as discussed in Section 21.8.1.1.A simpler approach is to use a Laplace approximation (see Section 8.4.1) in the E step. We canthen use this approximation inside the same EM procedure as before, except we no longer needto update β. Note, however, that this is not guaranteed to converge.
An alternative is to use the techniques from Section 13.7.4.3. In this case, we can use exact
methods to compute the inner weighted /lscript
1regularized logistic regression problem, and no
approximations are required.
13.8 Sparse coding *
So far, we have been concentrating on sparse priors for supervised learning. In this section, wediscuss how to use them for unsupervised learning.
In Section 12.6, we discussed ICA, which is like PCA except it uses a non-Gaussian prior
for the latent factors z
i. If we make the non-Gaussian prior be sparsity promoting, such as a
Laplace distribution, we will be approximating each observed vector xias a sparse combination
of basis vectors (columns of W); note that the sparsity pattern (controlled by zi) changes from
data case to data case. If we relax the constraint that Wis orthogonal, we get a method called
8. The algorithm in (Wipf and Nagarajan 2007) is equivalent to a single iteration of Equation 13.173. However, since the
equation is cheap to compute (only O(ND||w(t+1)||0)time), it is worth iterating a few times before solving the more
expensive /lscript1problem.
13.8. Sparse coding * 469
Method p(zi) p(W)Worthogonal
PCA Gauss - yes
FA Gauss - no
ICA Non-Gauss - yes
Sparse coding Laplace - no
Sparse PCA Gauss Laplace maybeSparse MF Laplace Laplace no
Table 13.3 Summary of various latent factor models. A dash “-” in the p(W)column means we are
performing ML parameter estimation rather than MAP parameter estimation. Summary of abbreviations:
PCA = principal components analysis; FA = factor analysis; ICA = independent components analysis; MF =matrix factorization.
sparse coding. In this context, we call the factor loading matrix Wadictionary; each column
is referred to as an atom.9In view of the sparse representation, it is common for L>D,i n
which case we call the representation overcomplete.
In sparse coding, the dictionary can be ﬁxed or learned. If it is ﬁxed, it is common to use a
wavelet or DCT basis, since many natural signals can be well approximated by a small number
of such basis functions. However, it is also possible to learn the dictionary, by maximizing thelikelihood
logp(D|W)=N/summationdisplay
i=1log/integraldisplay
ziN(xi|Wzi,σ2I)p(zi)dzi (13.174)
We discuss ways to optimize this below, and then we present several interesting applications.
Do not confuse sparse coding with sparse PCA (see e.g., (Witten et al. 2009; Journee et al.
2010)): this puts a sparsity promoting prior on the regression weights W, whereas in sparse
coding, we put a sparsity promoting prior on the latent factors zi. Of course, the two techniques
can be combined; we call the result sparse matrix factorization, although this term is non-
standard. See Table 13.3 for a summary of our terminology.
13.8.1 Learning a sparse coding dictionary
Since Equation 13.174 is a hard objective to maximize, it is common to make the followingapproximation:
logp(D|W)≈N/summationdisplay
i=1max
zi/bracketleftbig
logN(xi|Wzi,σ2I)+logp(zi)/bracketrightbig
(13.175)
Ifp(zi)is Laplace, we can rewrite the NLL as
NLL(W,Z)=N/summationdisplay
i=11
2||xi−Wzi||2
2+λ||zi||1 (13.176)
9. It is common to denote the dictionary by D, and to denote the latent factors by αi. However, we will stick with the
Wandzinotation.
470 Chapter 13. Sparse linear models
To prevent Wfrom becoming arbitrarily large, it is common to constrain the /lscript2norm of its
columns to be less than or equal to 1. Let us denote this constraint set by
C={W∈RD×Ls.t.wT
jwj≤1} (13.177)
Then we want to solve minW∈C,Z∈RN×LNLL(W,Z). F o raﬁ x e d zi, the optimization over
Wis a simple least squares problem. And for a ﬁxed dictionary W, the optimization problem
overZis identical to the lasso problem, for which many fast algorithms exist. This suggests
an obvious iterative optimization scheme, in which we alternate between optimizing WandZ.
(Mumford 1994) called this kind of approach an analysis-synthesis loop, where estimating the
basisWis the analysis phase, and estimating the coefficients Zis the synthesis phase. In cases
where this is too slow, more sophisticated algorithms can be used, see e.g., (Mairal et al. 2010).
A variety of other models result in an optimization problem that is similar to Equation 13.176.
For example, non-negative matrix factorization orNMF(Paatero and Tapper 1994; Lee and
Seung 2001) requires solving an objective of the form
min
W∈C,Z∈RL×N1
2N/summationdisplay
i=1||xi−Wzi||2
2s.t.W≥0,zi≥0 (13.178)
(Note that this has no hyper-parameters to tune.) The intuition behind this constraint is that the
learned dictionary may be more interpretable if it is a positive sum of positive “parts”, ratherthan a sparse sum of atoms that may be positive or negative. Of course, we can combine NMFwith a sparsity promoting prior on the latent factors. This is called non-negative sparse coding
(Hoyer 2004).
Alternatively, we can drop the positivity constraint, but impose a sparsity constraint on both
the factors z
iand the dictionary W. We call this sparse matrix factorization . To ensure strict
convexity, we can use an elastic net type penalty on the weights (Mairal et al. 2010) resulting in
min
W,Z1
2N/summationdisplay
i=1||xi−Wzi||2
2+λ||zi||1s.t.||wj||22+γ||wj||1≤1 (13.179)
There are several related objectives one can write down. For example, we can replace the lasso
NLL with group lasso or fused lasso (Witten et al. 2009).
We can also use other sparsity-promoting priors besides the Laplace. For example, (Zhou et al.
2009) propose a model in which the latent factors ziare made sparse using the binary mask
model of Section 13.2.2. Each bit of the mask can be generated from a Bernoulli distributionwith parameter π, which can be drawn from a beta distribution. Alternatively, we can use a
non-parametric prior, such as the beta process. This allows the model to use dictionaries ofunbounded size, rather than having to specify Lin advance. One can perform Bayesian inference
in this model using e.g., Gibbs sampling or variational Bayes. One ﬁnds that the effective sizeof the dictionary goes down as the noise level goes up, due to the Bayesian Occam’s razor. Thiscan prevent overﬁtting. See (Zhou et al. 2009) for details.
13.8.2 Results of dictionary learning from image patches
One reason that sparse coding has generated so much interest recently is because it explains aninteresting phenomenon in neuroscience. In particular, the dictionary that is learned by applying
13.8. Sparse coding * 471
(a)
 (b)
(c)
 (d)
(e)
 (f)
Figure 13.21 Illustration of the ﬁlters learned by various methods when applied to natural image patches.
(Each patch is ﬁrst centered and normalized to unit norm.) (a) ICA. Figure generated by icaBasisDemo ,
kindly provided by Aapo Hyvarinen. (b) sparse coding. (c) PCA. (d) non-negative matrix factorization. (e)
sparse PCA with low sparsity on weight matrix. (f) sparse PCA with high sparsity on weight matrix. Figure
generated by sparseDictDemo , written by Julien Mairal.
472 Chapter 13. Sparse linear models
sparse coding to patches of natural images consists of basis vectors that look like the ﬁlters that
are found in simple cells in the primary visual cortex of the mammalian brain (Olshausen andField 1996). In particular, the ﬁlters look like bar and edge detectors, as shown in Figure 13.21(b).(In this example, the parameter λwas chosen so that the number of active basis functions
(non-zero components of z
i) is about 10.) Interestingly, using ICA gives visually similar results,
as shown in Figure 13.21(a). By contrast, applying PCA to the same data results in sinusoidalgratings, as shown in Figure 13.21(c); these do not look like cortical cell response patterns.
10It
has therefore been conjectured that parts of the cortex may be performing sparse coding of thesensory input; the resulting latent representation is then further processed by higher levels ofthe brain.
Figure 13.21(d) shows the result of using NMF, and Figure 13.21(e-f) show the results of sparse
PCA, as we increase the sparsity of the basis vectors.
13.8.3 Compressed sensing
Although it is interesting to look at the dictionaries learned by sparse coding, it is not necessarilyvery useful. However, there are some practical applications of sparse coding, which we discussbelow.
Imagine that, instead of observing the data x∈R
D, we observe a low-dimensional projection
of it,y=Rx+/epsilon1wherey∈RM,Ris aM×Dmatrix,M/lessmuchD, and/epsilon1is a noise term
(usually Gaussian). We assume Ris a known sensing matrix, corresponding to different linear
projections of x. For example, consider an MRI scanner: each beam direction corresponds to a
vector, encoded as a row in R. Figure 13.22 illustrates the modeling assumptions.
Our goal is to infer p(x|y,R). How can we hope to recover all of xif we do not measure
all ofx? The answer is: we can use Bayesian inference with an appropriate prior, that exploits
the fact that natural signals can be expressed as a weighted combination of a small number ofsuitably chosen basis functions. That is, we assume x=Wz,w h e r ezhas a sparse prior, and
Wis suitable dictionary. This is called compressed sensing orcompressive sensing (Candes
et al. 2006; Baruniak 2007; Candes and Wakin 2008; Bruckstein et al. 2009).
For CS to work, it is important to represent the signal in the right basis, otherwise it will
not be sparse. In traditional CS applications, the dictionary is ﬁxed to be a standard form,such as wavelets. However, one can get much better performance by learning a domain-speciﬁcdictionary using sparse coding (Zhou et al. 2009). As for the sensing matrix R, it is often chosen
to be a random matrix, for reasons explained in (Candes and Wakin 2008). However, one canget better performance by adapting the projection matrix to the dictionary (Seeger and Nickish2008; Chang et al. 2009).
13.8.4 Image inpainting and denoising
Suppose we have an image which is corrupted in some way, e.g., by having text or scratchessparsely superimposed on top of it, as in Figure 13.23. We might want to estimate the underlying
10. ThereasonPCAdiscoverssinusoidalgratingpatternsisbecauseitistryingtomodelthecovarianceofthedata, which,
in the case of image patches, is translation invariant. This means cov[I(x,y),I(x/prime,y/prime)] =f/bracketleftbig
(x−x/prime)2+(y−y/prime)2/bracketrightbig
for some function f,w h e r eI(x,y)is the image intensity at location (x,y). One can show (Hyvarinen et al. 2009, p125)
that the eigenvectors of a matrix of this kind are always sinusoids of different phases, i.e., PCA discovers a Fourier basis.
13.8. Sparse coding * 473
y Rx Wz λ
Figure 13.22 Schematic DGM for compressed sensing. We observe a low dimensional measurement y
generated by passing xthrough a measurement matrix R, and possibly subject to observation noise with
varianceσ2. We assume that xhas a sparse decomposition in terms of the dictionary Wand the latent
variables z. the parameter λcontrolls the sparsity level.
(a)
 (b)
Figure 13.23 An example of image inpainting using sparse coding. Left: original image. Right: recon-
struction. Source: Figure 13 of (Mairal et al. 2008). Used with kind permission of Julien Mairal.
“clean” image. This is called image inpainting . One can use similar techniques for image
denoising .
We can model this as a special kind of compressed sensing problem. The basic idea is as
follows. We partition the image into overlapping patches, yi, and concatenate them to form y.
We deﬁne Rso that the i’th row selects out patch i. Now deﬁne Vto be the visible (uncorrupted)
components of y, andHto be the hidden components. To perform image inpainting, we just
computep(yH|yV,θ),w h e r eθare the model parameters, which specify the dictionary Wand
the sparsity level λofz. We can either learn a dictionary offline from a database of images, or
we can learn a dictionary just for this image, based on the non-corrupted patches.
Figure 13.23 shows this technique in action. The dictionary (of size 256 atoms) was learned
from7×106undamaged 12×12color patches in the 12 mega-pixel image.
An alternative approach is to use a graphical model (e.g., the ﬁelds of experts model (S.
474 Chapter 13. Sparse linear models
and Black 2009)) which directly encodes correlations between neighboring image patches, rather
than using a latent variable model. Unfortunately such models tend to be computationally moreexpensive.
Exercises
Exercise 13.1 Partial derivative of the RSS
Deﬁne
RSS(w)=||Xw−y||2
2 (13.180)
a. Show that
∂
∂wkRSS(w)=a kwk−ck (13.181)
ak=2n/summationdisplay
i=1x2ik=2||x:,k||2(13.182)
ck=2n/summationdisplay
i=1xik(yi−wT
−kxi,−k)=2xT:,krk (13.183)
wherew−k=wwithout component k,xi,−kisxiwithout component k, andrk=y−wT
−kx:,−k
is the residual due to using all the features except feature k. Hint: Partition the weights into those
involving kand those not involving k.
b. Show that if∂
∂wkRSS(w)=0, then
ˆwk=xT
:,krk
||x:,k||2(13.184)
Hence when we sequentially add features, the optimal weight for feature kis computed by computing
orthogonally projecting x:,konto the current residual.
Exercise 13.2 Derivation of M step for EB for linear regression
Derive Equations 13.166 and 13.168. Hint: the following identity should be useful
ΣXTX=ΣXTX+β−1ΣA−β−1ΣA (13.185)
=Σ(XTXβ+A)β−1−β−1ΣA (13.186)
=(A+βXTX)−1(XTXβ+A)β−1−β−1ΣA (13.187)
=(I−AΣ)β−1(13.188)
Exercise 13.3 Derivation of ﬁxed point updates for EB for linear regression
Derive Equations 13.169 and 13.170. Hint: The easiest way to derive this result is to rewrite logp(D|α,β)
as in Equation 8.54. This is exactly equivalent, since in the case of a Gaussian prior and likelihood, the
posterior is also Gaussian, so the Laplace “approximation” is exact. In this case, we get
logp(D|α,β)=N
2logβ−β
2||y−Xw||2
+1
2/summationdisplay
jlogαj−1
2mTAm+1
2log|Σ|−D
2log(2π) (13.189)
The rest is straightforward algebra.
13.8. Sparse coding * 475
Exercise 13.4 Marginal likelihood for linear regression
Suppose we use a g-prior of the form Σγ=g(XT
γXγ)−1. Show that Equation 13.16 simpliﬁes to
p(D|γ)∝(1+g)−Dγ/2(2bσ+S(γ))−(2aσ+N−1)/2(13.190)
S(γ)=yTy−g
1+gyTXγ(XT
γXγ)−1XTγy (13.191)
Exercise 13.5 Reducing elastic net to lasso
Deﬁne
J1(w)=|y−Xw|2+λ2|w|2+λ1|w|1 (13.192)
and
J2(w)=|˜y−˜X˜w|2+cλ1|w|1 (13.193)
wherec=( 1+λ2)−1
2and
˜X=c/parenleftbiggX√
λ2Id/parenrightbigg
,˜y=/parenleftbiggy
0d×1/parenrightbigg
(13.194)
Show
argminJ1(w)=c(argmin J2(w)) (13.195)
i.e.
J1(cw)=J2(w) (13.196)
and hence that one can solve an elastic net problem using a lasso solver on modiﬁed data.
Exercise 13.6 Shrinkage in linear regression
(Source: Jaakkola.) Consider performing linear regression with an orthonormal design matrix, so ||x:,k||2
2=
1for each column (feature) k, andxT
:,kx:,j=0, so we can estimate each parameter wkseparately.
Figure 13.24 plots ˆwkvsck=2yTx:,k, the correlation of feature kwith the response, for 3 different
esimation methods: ordinary least squares (OLS), ridge regression with parameter λ2, and lasso with
parameter λ1.
a. Unfortunately we forgot to label the plots. Which method does the solid (1), dotted (2) and dashed (3)
line correspond to? Hint: see Section 13.3.3.
b. What is the value of λ1?
c. What is the value of λ2?
Exercise 13.7 Prior for the Bernoulli rate parameter in the spike and slab model
Consider the model in Section 13.2.1. Suppose we put a prior on the sparsity rates, πj∼Beta(α 1,α2).
Derive an expression for p(γ|α)after integrating out the πj’s. Discuss some advantages and disadvantages
of this approach compared to assuming πj=π0for ﬁxedπ0.
476 Chapter 13. Sparse linear models
−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−1−0.8−0.6−0.4−0.200.20.40.60.81
ckwk1
2
3
Figure 13.24 Plot ofˆwkvs amount of correlation ckfor three different estimators.
Exercise 13.8 Deriving E step for GSM prior
Show that
E/bracketleftbigg1
τ2
j|wj/bracketrightbigg
=π/prime(wj)
|wj|(13.197)
whereπ(wj)=−logp(wj)andp(wj)=intN(wj|0,τ2
j)p(τ2
j)dτ2
j. Hint 1:
1
τ2
jN(wj|0,τ2
j)∝1
τ2
jexp(−w2
j
2τ2
j) (13.198)
=−1
|wj|−2wj
2τ2
jexp(−w2
j
2τ2
j) (13.199)
=−1
|wj|d
d|wj|N(wj|0,τ2
j) (13.200)
Hint 2:
d
d|wj|p(wj)=1
p(wj)d
d|wj|logp(wj) (13.201)
Exercise 13.9 EM for sparse probit regression with Laplace prior
Derive an EM algorithm for ﬁtting a binary probit classiﬁer (Section 9.4) using a Laplace prior on the
weights. (If you get stuck, see (Figueiredo 2003; Ding and Harrison 2010).)
Exercise 13.10 GSM representation of group lasso
Consider the prior τ2
j∼Ga(δ,ρ2/2), ignoring the grouping issue for now. The marginal distribution
induced on the weights by a Gamma mixing distribution is called the normal Gamma distribution and is
13.8. Sparse coding * 477
given by
NG(w j|δ,ρ)=/integraldisplay
N(wj|0,τ2
j)Ga(τ2
j|δ,ρ2/2)dτ2
j (13.202)
=1
Z|wj|δ−1/2Kδ−1
2(ρ|wj|) (13.203)
1/Z=ρδ+1
2√π2δ−1/2ρ(δ)(13.204)
whereKα(x)is the modiﬁed Bessel function of the second kind (the besselk function in Matlab).
Now suppose we have the following prior on the variances
p(σ2
1:D)=G/productdisplay
g=1p(σ21:d
g),p(σ21:d
g)=/productdisplay
j∈gGa(τ2
j|δg,ρ2/2) (13.205)
The corresponding marginal for each group of weights has the form
p(wg)∝|ug|δg−dg/2Kδg−dg/2(ρug) (13.206)
where
ug/defines/radicalBigg/summationdisplay
j∈gw2
g,j=||wg||2 (13.207)
Now suppose δg=(dg+1)/2,s oδg−dg/2=1
2. Conveniently, we have K1
2(z)=/radicalbigπ
2zexp(−z). Show
that the resulting MAP estimate is equivalent to group lasso.
Exercise 13.11 Projected gradient descent for /lscript1regularized least squares
Consider the BPDN problem argminθRSS(θ)+λ||θ||1. By using the split variable trick introducted in
Section 7.4 (i.e., by deﬁning θ=[θ+,θ−]), rewrite this as a quadratic program with a simple bound
constraint. Then sketch how to use projected gradient descent to solve this problem. (If you get stuck,
consult (Figueiredo et al. 2007).)
Exercise 13.12 Subderivative of the hinge loss function
Letf(x)=( 1−x)+be the hinge loss function, where (z)+=m a x ( 0 ,z). What are ∂f(0),∂f(1), and
∂f(2)?
Exercise 13.13 Lower bounds to convex functions
Letfbe a convex function. Explain how to ﬁnd a global affine lower bound to fat an arbitrary point
x∈dom(f).

14 Kernels
14.1 Introduction
So far in this book, we have been assuming that each object that we wish to classify or cluster
or process in anyway can be represented as a ﬁxed-size feature vector, typically of the formx
i∈RD. However, for certain kinds of objects, it is not clear how to best represent them
as ﬁxed-sized feature vectors. For example, how do we represent a text document or proteinsequence, which can be of variable length? or a molecular structure, which has complex 3dgeometry? or an evolutionary tree, which has variable size and shape?
One approach to such problems is to deﬁne a generative model for the data, and use the
inferred latent representation and/or the parameters of the model as features, and then to plugthese features in to standard methods. For example, in Chapter 28, we discuss deep learning,which is essentially an unsupervised way to learn good feature representations.
Another approach is to assume that we have some way of measuring the similarity between
objects, that doesn’t require preprocessing them into feature vector format. For example, whencomparing strings, we can compute the edit distance between them. Let κ(x,x
/prime)≥0be some
measure of similarity between objects x,x/prime∈X,w h e r eXis some abstract space; we will call κ
akernel function. Note that the word “kernel” has several meanings; we will discuss a different
interpretation in Section 14.7.1.
In this chapter, we will discuss several kinds of kernel functions. We then describe some
algorithms that can be written purely in terms of kernel function computations. Such methodscan be used when we don’t have access to (or choose not to look at) the “inside” of the objectsxthat we are processing.
14.2 Kernel functions
We deﬁne a kernel function to be a real-valued function of two arguments, κ(x,x/prime)∈R,f o r
x,x/prime∈X. Typically the function is symmetric (i.e., κ(x,x/prime)=κ(x/prime,x)), and non-negative (i.e.,
κ(x,x/prime)≥0), so it can be interpreted as a measure of similarity, but this is not required. We
give several examples below.
480 Chapter 14. Kernels
14.2.1 RBF kernels
Thesquared exponential kernel (SE kernel) or Gaussian kernel is deﬁned by
κ(x,x/prime)=e x p/parenleftbigg
−1
2(x−x/prime)TΣ−1(x−x/prime)/parenrightbigg
(14.1)
IfΣis diagonal, this can be written as
κ(x,x/prime)=e x p⎛
⎝−1
2D/summationdisplay
j=11
σ2
j(xj−x/prime
j)2⎞
⎠ (14.2)
We can interpret the σjas deﬁning the characteristic length scale of dimension j.I fσj=∞,
the corresponding dimension is ignored; hence this is known as the ARD kernel.I f Σis
spherical, we get the isotropic kernel
κ(x,x/prime)=e x p/parenleftbigg
−||x−x/prime||2
2σ2/parenrightbigg
(14.3)
Hereσ2is known as the bandwidth. Equation 14.3 is an example of a a radial basis function
orRBFkernel, since it is only a function of ||x−x/prime||.
14.2.2 Kernels for comparing documents
When performing document classiﬁcation or retrieval, it is useful to have a way of comparing
two documents, xiandxi/prime. If we use a bag of words representation, where xijis the number
of times words joccurs in document i, we can use the cosine similarity, which is deﬁned by
κ(xi,xi/prime)=xT
ixi/prime
||xi||2||xi/prime||2(14.4)
This quantity measures the cosine of the angle between xiandxi/primewhen interpreted as vectors.
Sincexiis a count vector (and hence non-negative), the cosine similarity is between 0 and 1,
where 0 means the vectors are orthogonal and therefore have no words in common.
Unfortunately, this simple method does not work very well, for two main reasons. First, if xi
has any word in common with xi/prime, it is deemed similar, even though some popular words, such
as “the” or “and” occur in many documents, and are therefore not discriminative. (These are
known as stop words.) Second, if a discriminative word occurs many times in a document, the
similarity is artiﬁcially boosted, even though word usage tends to be bursty, meaning that oncea word is used in a document it is very likely to be used again (see Section 3.5.5).
Fortunately, we can signiﬁcantly improve performance using some simple preprocessing. The
idea is to replace the word count vector with a new feature vector called the TF-IDFrepresenta-
tion, which stands for “term frequency inverse document frequency”. We deﬁne this as follows.First, the term frequency is deﬁned as a log-transform of the count:
tf(x
ij)/defineslog(1+xij) (14.5)
This reduces the impact of words that occur many times within one document. Second, theinverse document frequency is deﬁned as
idf(j)/defineslogN
1+/summationtextN
i=1I(xij>0)(14.6)
14.2. Kernel functions 481
whereNis the total number of documents, and the denominator counts how many documents
contain term j. Finally, we deﬁne
tf-idf(xi)/defines[tf(xij)×idf(j)]V
j=1 (14.7)
(There are several other ways to deﬁne the tf and idf terms, see (Manning et al. 2008) for details.)
We then use this inside the cosine similarity measure. That is, our new kernel has the form
κ(xi,xi/prime)=φ(xi)Tφ(xi/prime)
||φ(xi)||2||φ(xi/prime)||2(14.8)
whereφ(x)=tf-idf(x). This gives good results for information retrieval (Manning et al. 2008).
A probabilistic interpretation of the tf-idf kernel is given in (Elkan 2005).
14.2.3 Mercer (positive deﬁnite) kernels
Some methods that we will study require that the kernel function satisfy the requirement thattheGram matrix, deﬁned by
K=⎛
⎜⎝κ(x
1,x1)···κ(x1,xN)
...
κ(xN,x1)···κ(xN,xN)⎞
⎟⎠ (14.9)
be positive deﬁnite for any set of inputs {xi}N
i=1. We call such a kernel a Mercer kernel,o r
positive deﬁnite kernel. It can be shown (Schoelkopf and Smola 2002) that the Gaussian kernel
is a Mercer kernel as is the cosine similarity kernel (Sahami and Heilman 2006).
The importance of Mercer kernels is the following result, known as Mercer’s theorem. If the
Gram matrix is positive deﬁnite, we can compute an eigenvector decomposition of it as follows
K=UTΛU (14.10)
whereΛis a diagonal matrix of eigenvalues λi>0. Now consider an element of K:
kij=(Λ1
2U:,i)T(Λ1
2U:j) (14.11)
Let us deﬁne φ(xi)=Λ1
2U:i. Then we can write
kij=φ(xi)Tφ(xj) (14.12)
Thus we see that the entries in the kernel matrix can be computed by performing an innerproduct of some feature vectors that are implicitly deﬁned by the eigenvectors U. In general, if
the kernel is Mercer, then there exists a function φmapping x∈XtoR
Dsuch that
κ(x,x/prime)=φ(x)Tφ(x/prime) (14.13)
whereφdepends on the eigen functions ofκ(soDis a potentially inﬁnite dimensional space).
For example, consider the (non-stationary) polynomial kernel κ(x,x/prime)=(γxTx/prime+r)M,
wherer>0. One can show that the corresponding feature vector φ(x)will contain all terms
up to degree M. For example, if M=2,γ=r=1andx,x/prime∈R2,w eh a v e
(1+xTx/prime)2=( 1 + x1x/prime
1+x2x/prime2)2(14.14)
=1 + 2 x1x/prime1+2x2x/prime2+(x1x1)2+(x2x/prime2)2+2x1x/prime1x2x/prime2(14.15)
482 Chapter 14. Kernels
This can be written as φ(x)Tφ(x/prime),w h e r e
φ(x)=[ 1,√
2x1,√
2x2,x2
1,x22,√
2x1x2]T(14.16)
So using this kernel is equivalent to working in a 6 dimensional feature space. In the case of
a Gaussian kernel, the feature map lives in an inﬁnite dimensional space. In such a case, it isclearly infeasible to explicitly represent the feature vectors.
An example of a kernel that is not a Mercer kernel is the so-called sigmoid kernel, deﬁned
by
κ(x,x
/prime)=t a n h ( γxTx/prime+r) (14.17)
(Note that this uses the tanhfunction even though it is called a sigmoid kernel.) This kernel
was inspired by the multi-layer perceptron (see Section 16.5), but there is no real reason to useit. (For a true “neural net kernel”, which is positive deﬁnite, see Section 15.4.5.)
In general, establishing that a kernel is a Mercer kernel is difficult, and requires techniques
from functional analysis. However, one can show that it is possible to build up new Mercerkernels from simpler ones using a set of standard rules. For example, if κ
1andκ2are both
Mercer, so is κ(x,x/prime)=κ1(x,x/prime)+κ2(x,x/prime). See e.g., (Schoelkopf and Smola 2002) for details.
14.2.4 Linear kernels
Deriving the feature vector implied by a kernel is in general quite difficult, and only possible ifthe kernel is Mercer. However, deriving a kernel from a feature vector is easy: we just use
κ(x,x
/prime)=φ(x)Tφ(x/prime)=/angbracketleftφ(x),φ(x/prime)/angbracketright (14.18)
Ifφ(x)=x,w eg e tt h elinear kernel, deﬁned by
κ(x,x/prime)=xTx/prime(14.19)
This is useful if the original data is already high dimensional, and if the original features areindividually informative, e.g., a bag of words representation where the vocabulary size is large,or the expression level of many genes. In such a case, the decision boundary is likely to berepresentable as a linear combination of the original features, so it is not necessary to work insome other feature space.
Of course, not all high dimensional problems are linearly separable. For example, images are
high dimensional, but individual pixels are not very informative, so image classiﬁcation typicallyrequires non-linear kernels (see e.g., Section 14.2.7).
14.2.5 Matern kernels
TheMatern kernel, which is commonly used in Gaussian process regression (see Section 15.2),
has the following form
κ(r)=21−ν
Γ(ν)/parenleftBigg√
2νr
/lscript/parenrightBiggν
Kν/parenleftBigg√
2νr
/lscript/parenrightBigg
(14.20)
14.2. Kernel functions 483
wherer=||x−x/prime||,ν>0,/lscript>0, and Kνis a modiﬁed Bessel function. As ν→∞, this
approaches the SE kernel. If ν=1
2, the kernel simpliﬁes to
κ(r)=e x p (−r//lscript) (14.21)
IfD=1, and we use this kernel to deﬁne a Gaussian process (see Chapter 15), we get the
Ornstein-Uhlenbeck process, which describes the velocity of a particle undergoing Brownian
motion (the corresponding function is continuous but not differentiable, and hence is very“jagged”).
14.2.6 String kernels
The real power of kernels arises when the inputs are structured objects. As an example, we nowdescribe one way of comparing two variable length strings using a string kernel. We follow the
presentation of (Rasmussen and Williams 2006, p100) and (Hastie et al. 2009, p668).
Consider two strings x, andx
/primeof lengths D,D’, each deﬁned over the alphabet A.
For example, consider two amino acid sequences, deﬁned over the 20 letter alphabet A=
{A,R,N,D,C,E,Q,G,H,I,L,K,M,F,P,S,T,W,Y,V }.L e txbe the following sequence
of length 110
IPTSALVKETLALLSTHRTLLIANETLRIPVPVHKNHQLCTEEIFQGIGTLESQTVQGGTV
ERLFKNLSLIKKYIDGQKKKCGEERRRVNQFLDY LQEFLGVMNTEWI
and letx/primebe the following sequence of length 153
PHRRDLCSRSIWLARKIRSDLTALTESYVKHQGLWSELTEAER LQENLQAYRTFHVLLA
RLLEDQQVHFTPTEGDFHQAIHTLLLQVAAFAYQIEELMILLEYKIPRNEADGMLFEKKLWGLKV LQE
LSQWTVRSIHDLRFISSHQTGIP
These strings have the substring LQEin common. We can deﬁne the similarity of two strings
to be the number of substrings they have in common.
More formally and more generally, let us say that sis a substring of xif we can write x=usv
for some (possibly empty) strings u,sandv. Now let φs(x)denote the number of times that
substring sappears in string x. We deﬁne the kernel between two strings xandx/primeas
κ(x,x/prime)=/summationdisplay
s∈A∗wsφs(x)φs(x/prime) (14.22)
wherews≥0andA∗is the set of all strings (of any length) from the alphabet A(this is known
as the Kleene star operator). This is a Mercer kernel, and be computed in O(|x|+|x/prime|)time
(for certain settings of the weights {ws}) using suffix trees (Leslie et al. 2003; Vishwanathan and
Smola 2003; Shawe-Taylor and Cristianini 2004).
There are various cases of interest. If we set ws=0for|s|>1we get a bag-of-characters
kernel. This deﬁnes φ(x)to be the number of times each character in Aoccurs in x.I fw e
requiresto be bordered by white-space, we get a bag-of-words kernel, where φ(x)counts how
many times each possible word occurs. Note that this is a very sparse vector, since most words
484 Chapter 14. Kernels
optimal partial 
matching
matching
Figure 14.1 Illustration of a pyramid match kernel computed from two images. Used with kind permission
of Kristen Grauman.
will not be present. If we only consider strings of a ﬁxed length k, we get the k-spectrum
kernel. This has been used to classify proteins into SCOP superfamilies (Leslie et al. 2003). For
example if k=3,w eh a v e φLQE(x)=1andφLQE(x/prime)=2for the two strings above.
Various extensions are possible. For example, we can allow character mismatches (Leslie et al.
2003). And we can generalize string kernels to compare trees, as described in (Collins and Duffy
2002). This is useful for classifying (or ranking) parse trees, evolutionary trees, etc.
14.2.7 Pyramid match kernels
In computer vision, it is common to create a bag-of-words representation of an image by
computing a feature vector (often using SIFT (Lowe 1999)) from a variety of points in the image,
commonly chosen by an interest point detector. The feature vectors at the chosen places are
then vector-quantized to create a bag of discrete symbols.
One way to compare two variable-sized bags of this kind is to use a pyramid match kernel
(Grauman and Darrell 2007). The basic idea is illustrated in Figure 14.1. Each feature set is
mapped to a multi-resolution histogram. These are then compared using weighted histogram
intersection. It turns out that this provides a good approximation to the similarity measure one
would obtain by performing an optimal bipartite match at the ﬁnest spatial resolution, and then
summing up pairwise similarities between matched points. However, the histogram method is
faster and is more robust to missing and unequal numbers of points. This is a Mercer kernel.
14.2. Kernel functions 485
14.2.8 Kernels derived from probabilistic generative models
Suppose we have a probabilistic generative model of feature vectors, p(x|θ). Then there are
several ways we can use this model to deﬁne kernel functions, and thereby make the model
suitable for discriminative tasks. We sketch two approaches below.
14.2.8.1 Probability product kernels
One approach is to deﬁne a kernel as follows:
κ(xi,xj)=/integraldisplay
p(x|xi)ρp(x|xj)ρdx (14.23)
whereρ>0, and p(x|xi)is often approximated by p(x|ˆθ(xi)),w h e r e ˆθ(xi)is a parameter
estimate computed using a single data vector. This is called a probability product kernel
(Jebara et al. 2004).
Although it seems strange to ﬁt a model to a single data point, it is important to bear in
mind that the ﬁtted model is only being used to see how similar two objects are. In particular,if we ﬁt the model to x
iand then the model thinks xjis likely, this means that xiandxjare
similar. For example, suppose p(x|θ)=N(μ,σ2I),w h e r eσ2is ﬁxed. If ρ=1, and we use
ˆμ(xi)=xiandˆμ(xj)=xj, we ﬁnd (Jebara et al. 2004, p825) that
κ(xi,xj)=1
(4πσ2)D/2exp/parenleftbigg
−1
4σ2||xi−xj||2/parenrightbigg
(14.24)
which is (up to a constant factor) the RBF kernel.
It turns out that one can compute Equation 14.23 for a variety of generative models, including
ones with latent variables, such as HMMs. This provides one way to deﬁne kernels on variablelength sequences. Furthermore, this technique works even if the sequences are of real-valuedvectors, unlike the string kernel in Section 14.2.6. See (Jebara et al. 2004) for further details.
14.2.8.2 Fisher kernels
A more efficient way to use generative models to deﬁne kernels is to use a Fisher kernel
(Jaakkola and Haussler 1998) which is deﬁned as follows:
κ(x,x
/prime)=g(x)TF−1g(x/prime) (14.25)
wheregis the gradient of the log likelihood, or score vector, evaluated at the MLE ˆθ
g(x)/defines∇θlogp(x|θ)/vextendsingle/vextendsingleˆθ(14.26)
andFis the Fisher information matrix, which is essentially the Hessian:
F=∇∇logp(x|θ)/vextendsingle/vextendsingle
ˆθ(14.27)
Note that ˆθis a function of all the data, so the similarity of xandx/primeis computed in the context
of all the data as well. Also, note that we only have to ﬁt one model.
The intuition behind the Fisher kernel is the following: let g(x)be the direction (in parameter
space) in which xwould like the parameters to move (from ˆθ) so as to maximize its own
486 Chapter 14. Kernels
(a)0 1 2 3 4 5 6−101234567poly10
(b)0 1 2 3 4 5 6−101234567rbf prototypes
(c)
Figure 14.2 (a) xor truth table. (b) Fitting a linear logistic regression classiﬁer using degree 10 polynomial
expansion. (c) Same model, but using an RBF kernel with centroids speciﬁed by the 4 black crosses. Figure
generated by logregXorDemo .
likelihood; call this the directional gradient. Then we say that two vectors xandx/primeare similar
if their directional gradients are similar wrt the the geometry encoded by the curvature of the
likelihood function (see Section 7.5.3).
Interestingly, it was shown in (Saunders et al. 2003) that the string kernel of Section 14.2.6
is equivalent to the Fisher kernel derived from an L’th order Markov chain (see Section 17.2).
Also, it was shown in (Elkan 2005) that a kernel deﬁned by the inner product of TF-IDF vectors
(Section 14.2.2) is approximately equal to the Fisher kernel for a certain generative model of text
based on the compound Dirichlet multinomial model (Section 3.5.5).
14.3 Using kernels inside GLMs
In this section, we discuss one simple way to use kernels for classiﬁcation and regression. We
will see other approaches later.
14.3.1 Kernel machines
We deﬁne a kernel machine to be a GLM where the input feature vector has the form
φ(x)=[κ(x,μ1),...,κ(x,μK)] (14.28)
whereμk∈Xa r eas e to f Kcentroids .I fκis an RBF kernel, this is called an RBF network .
We discuss ways to choose the μkparameters below. We will call Equation 14.28 a kernelised
feature vector . Note that in this approach, the kernel need not be a Mercer kernel.
We can use the kernelized feature vector for logistic regression by deﬁning p(y|x,θ)=
Ber(wTφ(x)). This provides a simple way to deﬁne a non-linear decision boundary. As an
example, consider the data coming from the exclusive or orxorfunction. This is a binary-
valued function of two binary inputs. Its truth table is shown in Figure 14.2(a). In Figure 14.2(b),
we have show some data labeled by the xor function, but we have jitteredthe points to make
the picture clearer.1We see we cannot separate the data even using a degree 10 polynomial.
1. Jittering is a common visualization trick in statistics, wherein points in a plot/display that would otherwise land on
top of each other are dispersed with uniform additive noise.
14.3. Using kernels inside GLMs 487
0 5 10 15 20−1001020
0 5 10 15 2000.20.40.60.8
2 4 6 8 105
10
15
20
0 5 10 15 20−1001020
0 5 10 15 2000.010.020.030.04
2 4 6 8 105
10
15
20
0 5 10 15 20−1001020
0 5 10 15 207.27.47.67.88x 10−3
2 4 6 8 105
10
15
20
Figure 14.3 RBF basis in 1d. Left column: ﬁtted function. Middle column: basis functions evaluated on
a grid. Right column: design matrix. Top to bottom we show different bandwidths: τ=0.1,τ=0.5,
τ=5 0. Figure generated by linregRbfDemo .
However, using an RBF kernel and just 4 prototypes easily solves the problem as shown in
Figure 14.2(c).
We can also use the kernelized feature vector inside a linear regression model by deﬁning
p(y|x,θ)=N(wTφ(x),σ2). For example, Figure 14.3 shows a 1d data set ﬁt with K=1 0
uniformly spaced RBF prototypes, but with the bandwidth ranging from small to large. Small
values lead to very wiggly functions, since the predicted function value will only be non-zero for
pointsxthat are close to one of the prototypes μk. If the bandwidth is very large, the design
matrix reduces to a constant matrix of 1’s, since each point is equally close to every prototype;
hence the corresponding function is just a straight line.
14.3.2 L1VMs, RVMs, and other sparse vector machines
The main issue with kernel machines is: how do we choose the centroids μk? If the input is
low-dimensional Euclidean space, we can uniformly tile the space occupied by the data with
prototypes, as we did in Figure 14.2(c). However, this approach breaks down in higher numbers
of dimensions because of the curse of dimensionality. If μk∈RD, we can try to perform
numerical optimization of these parameters (see e.g., (Haykin 1998)), or we can use MCMC
inference, (see e.g., (Andrieu et al. 2001; Kohn et al. 2001)), but the resulting objective function
/ posterior is highly multimodal. Furthermore, these techniques is hard to extend to structured
input spaces, where kernels are most useful.
Another approach is to ﬁnd clusters in the data and then to assign one prototype per cluster
488 Chapter 14. Kernels
center (many clustering algorithms just need a similarity metric as input). However, the regions
of space that have high density are not necessarily the ones where the prototypes are mostuseful for representing the output, that is, clustering is an unsupervised task that may not yielda representation that is useful for prediction. Furthermore, there is the need to pick the numberof clusters.
A simpler approach is to make each example x
ibe a prototype, so we get
φ(x)=[κ(x,x1),...,κ(x,xN)] (14.29)
Now we see D=N, so we have as many parameters as data points. However, we can use any
of the sparsity-promoting priors for wdiscussed in Chapter 13 to efficiently select a subset of
the training exemplars. We call this a sparse vector machine.
The most natural choice is to use /lscript1regularization (Krishnapuram et al. 2005). (Note that in
the multi-class case, it is necessary to use group lasso, since each exemplar is associated with C
weights, one per class.) We call this L1VM, which stands for “/lscript 1-regularized vector machine”. By
analogy, we deﬁne the use of an /lscript2regularizer to be a L2VMor “/lscript2-regularized vector machine”;
this of course will not be sparse.
We can get even greater sparsity by using ARD/SBL, resulting in a method called the rele-
vance vector machine orRVM(Tipping 2001). One can ﬁt this model using generic ARD/SBL
algorithms, although in practice the most common method is the greedy algorithm in (Tippingand Faul 2003) (this is the algorithm implemented in Mike Tipping’s code, which is bundled withPMTK).
Another very popular approach to creating a sparse kernel machine is to use a support
vector machine orSVM. This will be discussed in detail in Section 14.5. Rather than using a
sparsity-promoting prior, it essentially modiﬁes the likelihood term, which is rather unnaturalfrom a Bayesian point of view. Nevertheless, the effect is similar, as we will see.
In Figure 14.4, we compare L2VM, L1VM, RVM and an SVM using the same RBF kernel on a
binary classiﬁcation problem in 2d. For simplicity, λwas chosen by hand for L2VM and L1VM;
for RVMs, the parameters are estimated using empirical Bayes; and for the SVM, we use CV topickC=1/λ, since SVM performance is very sensitive to this parameter (see Section 14.5.3).
We see that all the methods give similar performance. However, RVM is the sparsest (and hencefastest at test time), then L1VM, and then SVM. RVM is also the fastest to train, since CV for anSVM is slow. (This is despite the fact that the RVM code is in Matlab and the SVM code is inC.) This result is fairly typical.
In Figure 14.5, we compare L2VM, L1VM, RVM and an SVM using an RBF kernel on a 1d
regression problem. Again, we see that predictions are quite similar, but RVM is the sparsest,then L2VM, then SVM. This is further illustrated in Figure 14.6.
14.4 The kernel trick
Rather than deﬁning our feature vector in terms of kernels, φ(x)=[κ(x,x1),...,κ(x,xN)],
we can instead work with the original feature vectors x, but modify the algorithm so that it
replaces all inner products of the form /angbracketleftx,x/prime/angbracketrightwith a call to the kernel function, κ(x,x/prime). This
is called the kernel trick. It turns out that many algorithms can be kernelized in this way. We
give some examples below. Note that we require that the kernel be a Mercer kernel for this trickto work.
14.4. The kernel trick 489
−2 −1 0 1 2 3−3−2−10123logregL2, nerr=174
(a)−2 −1 0 1 2 3−3−2−10123logregL1, nerr=169
(b)
−2 −1 0 1 2 3−3−2−10123RVM, nerr=173
(c)−2 −1 0 1 2 3−3−2−10123SVM, nerr=173
(d)
Figure 14.4 Example of non-linear binary classiﬁcation using an RBF kernel with bandwidth σ=0.3. (a)
L2VM with λ=5. (b) L1VM with λ=1. (c) RVM. (d) SVM with C=1/λchosen by cross validation.
Black circles denote the support vectors. Figure generated by kernelBinaryClassifDemo .
14.4.1 Kernelized nearest neighbor classiﬁcation
Recall that in a 1NN classiﬁer (Section 1.4.2), we just need to compute the Euclidean distance of
a test vector to all the training points, ﬁnd the closest one, and look up its label. This can bekernelized by observing that
||x
i−xi/prime||2
2=/angbracketleftxi,xi/angbracketright+/angbracketleftxi/prime,xi/prime/angbracketright−2/angbracketleftxi,xi/prime/angbracketright (14.30)
This allows us to apply the nearest neighbor classiﬁer to structured data objects.
14.4.2 Kernelized K-medoids clustering
K-means clustering (Section 11.4.2.5) uses Euclidean distance to measure dissimilarity, which is
not always appropriate for structured objects. We now describe how to develop a kernelized
490 Chapter 14. Kernels
−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−0.4−0.200.20.40.60.811.2linregL2
(a)−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−0.4−0.200.20.40.60.811.2linregL1
(b)
−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−0.4−0.200.20.40.60.811.2RVM
(c)−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−0.4−0.200.20.40.60.811.2SVM
(d)
Figure 14.5 Example of kernel based regression on the noisy sinc function using an RBF kernel with
bandwidth σ=0.3. (a) L2VM with λ=0.5. (b) L1VM with λ=0.5. (c) RVM. (d) SVM regression with
C=1/λchosen by cross validation, and /epsilon1=0.1(the default for SVMlight). Red circles denote the
retained training exemplars. Figure generated by kernelRegrDemo .
version of the algorithm.
The ﬁrst step is to replace the K-means algorithm with the K-medoids algorothm. This is
similar to K-means, but instead of representing each cluster’s centroid by the mean of all data
vectors assigned to this cluster, we make each centroid be one of the data vectors themselves.Thus we always deal with integer indexes, rather than data objects. We assign objects to theirclosest centroids as before. When we update the centroids, we look at each object that belongsto the cluster, and measure the sum of its distances to all the others in the same cluster; wethen pick the one which has the smallest such sum:
m
k=a r g m i n
i:zi=k/summationdisplay
i/prime:zi/prime=kd(i,i/prime) (14.31)
14.4. The kernel trick 491
0 20 40 60 80 100−0.06−0.04−0.0200.020.040.06weights for linregL2
(a)0 20 40 60 80 100−0.06−0.04−0.0200.020.040.060.080.10.12weights for linregL1
(b)
0 20 40 60 80 100−0.200.20.40.60.81weights for RVM
(c)0 20 40 60 80 100−1.5−1−0.500.511.5weights for SVM
(d)
Figure 14.6 Coefficient vectors of length N= 100for the models in Figure 14.6. Figure generated by
kernelRegrDemo .
where
d(i,i/prime)/defines||xi−xi/prime||2
2 (14.32)
This takes O(n2
k)work per cluster, whereas K-means takes O(nkD)to update each cluster. The
pseudo-code is given in Algorithm 5. This method can be modiﬁed to derive a classiﬁer, by
computing the nearest medoid for each class. This is known as nearest medoid classiﬁcation
(Hastie et al. 2009, p671).
This algorithm can be kernelized by using Equation 14.30 to replace the distance computation,
d(i,i/prime).
492 Chapter 14. Kernels
Algorithm 14.1: K-medoids algorithm
1initialize m1:Kas a random subset of size Kfrom{1,...,N };
2repeat
3zi=a r g m i nkd(i,mk)fori=1:N;
4mk←argmini:zi=k/summationtext
i/prime:zi/prime=kd(i,i/prime)fork=1:K;
5until converged ;
14.4.3 Kernelized ridge regression
Applying the kernel trick to distance-based methods was straightforward. It is not so obvious
how to apply it to parametric models such as ridge regression. However, it can be done, as wenow explain. This will serve as a good “warm up” for studying SVMs.
14.4.3.1 The primal problem
Letx∈R
Dbe some feature vector, and Xbe the corresponding N×Ddesign matrix. We
want to minimize
J(w)=(y−Xw)T(y−Xw)+λ||w||2(14.33)
The optimal solution is given by
w=(XTX+λID)−1XTy=(/summationdisplay
ixixT
i+λID)−1XTy (14.34)
14.4.3.2 The dual problem
Equation 14.34 is not yet in the form of inner products. However, using the matrix inversion
lemma (Equation 4.107) we rewrite the ridge estimate as follows
w=XT(XXT+λIN)−1y (14.35)
which takes O(N3+N2D)time to compute. This can be advantageous if Dis large. Further-
more, we see that we can partially kernelize this, by replacing XXTwith the Gram matrix K.
But what about the leading XTterm?
Let us deﬁne the following dual variables:
α/defines(K+λIN)−1y (14.36)
Then we can rewrite the primal variables as follows
w=XTα=N/summationdisplay
i=1αixi (14.37)
This tells us that the solution vector is just a linear sum of the Ntraining vectors. When we
plug this in at test time to compute the predictive mean, we get
ˆf(x)=wTx=N/summationdisplay
i=1αixT
ix=N/summationdisplay
i=1αiκ(x,xi) (14.38)
14.4. The kernel trick 493
−1 0 1−0.500.511.5Eigenvalue=22.558
−1 0 1−0.500.511.5Eigenvalue=20.936
−1 0 1−0.500.511.5Eigenvalue=4.648
−1 0 1−0.500.511.5Eigenvalue=3.988
−1 0 1−0.500.511.5Eigenvalue=3.372
−1 0 1−0.500.511.5Eigenvalue=2.956
−1 0 1−0.500.511.5Eigenvalue=2.760
−1 0 1−0.500.511.5Eigenvalue=2.211
Figure 14.7 Visualization of the ﬁrst 8 kernel principal component basis functions derived from some 2d
data. We use an RBF kernel with σ2=0.1. Figure generated by kpcaScholkopf , written by Bernhard
Scholkopf.
So we have succesfully kernelized ridge regression by changing from primal to dual variables.
This technique can be applied to many other linear models, such as logistic regression.
14.4.3.3 Computational cost
The cost of computing the dual variables αisO(N3), whereas the cost of computing the primal
variables wisO(D3). Hence the kernel method can be useful in high dimensional settings,
even if we only use a linear kernel (c.f., the SVD trick in Equation 7.44). However, predictionusing the dual variables takes O(ND)time, while prediction using the primal variables only
takesO(D)time. We can speedup prediction by making αsparse, as we discuss in Section 14.5.
14.4.4 Kernel PCA
In Section 12.2, we saw how we could compute a low-dimensional linear embedding of somedata using PCA. This required ﬁnding the eigenvectors of the sample covariance matrix S=
494 Chapter 14. Kernels
1
N/summationtextN
i=1xixT
i=( 1/N)XTX. However, we can also compute PCA by ﬁnding the eigenvectors
of the inner product matrix XXT, as we show below. This will allow us to produce a nonlinear
embedding, using the kernel trick, a method known as kernel PCA (Schoelkopf et al. 1998).
First, letUbe an orthogonal matrix containing the eigenvectors of XXTwith corresponding
eigenvalues in Λ. By deﬁnition we have (XXT)U=UΛ. Pre-multiplying by XTgives
(XTX)(XTU)=(XTU)Λ (14.39)
from which we see that the eigenvectors of XTX(and hence of S)a r eV=XTU, with eigen-
values given by Λas before. However, these eigenvectors are not normalized, since ||vj||2=
uTjXXTuj=λjuTjuj=λj. So the normalized eigenvectors are given by Vpca=XTUΛ−1
2.
This is a useful trick for regular PCA if D>N, sinceXTXhas sizeD×D, whereas XXT
has sizeN×N. It will also allow us to use the kernel trick, as we now show.
Now letK=XXTbe the Gram matrix. Recall from Mercer’s theorem that the use of a kernel
implies some underlying feature space, so we are implicitly replacing xiwithφ(xi)=φi.L e t
Φbe the corresponding (notional) design matrix, and Sφ=1
N/summationtext
iφiφT
ibe the corresponding
(notional) covariance matrix in feature space. The eigenvectors are given by Vkpca=ΦTUΛ−1
2,
whereUandΛcontain the eigenvectors and eigenvalues of K. Of course, we can’t actually
compute Vkpca, sinceφiis potentially inﬁnite dimensional. However, we can compute the
projection of a test vector x∗onto the feature space as follows:
φT∗Vkpca=φT∗ΦUΛ−1
2=kT
∗UΛ−1
2 (14.40)
wherek∗=[κ(x∗,x1),...,κ(x∗,xN)].
There is one ﬁnal detail to worry about. So far, we have assumed the projected data has
zero mean, which is not the case in general. We cannot simply subtract off the mean in
feature space. However, there is a trick we can use. Deﬁne the centered feature vector as
˜φi=φ(xi)−1
N/summationtextN
j=1φ(xj). The Gram matrix of the centered feature vectors is given by
˜Kij=˜φT
i˜φj (14.41)
=φT
iφj−1
NN/summationdisplay
k=1φTiφk−1
NN/summationdisplay
k=1φTjφk+1
N2N/summationdisplay
k=1M/summationdisplay
l=1φTkφl (14.42)
=κ(xi,xj)−1
NN/summationdisplay
k=1κ(xi,xk)−1
NN/summationdisplay
k=1κ(xj,xk)+1
N2N/summationdisplay
k=1M/summationdisplay
l=1κ(xk,xl)(14.43)
This can be expressed in matrix notation as follows:
˜K=HKH (14.44)
whereH/definesI−1
N1N1T
N. is thecentering matrix. We can convert all this algebra into the
pseudocode shown in Algorithm 9.
Whereas linear PCA is limited to using L≤Dcomponents, in kPCA, we can use up to N
components, since the rank of ΦisN×D∗,w h e r eD∗is the (potentially inﬁnite) dimensionality
of embedded feature vectors. Figure 14.7 gives an example of the method applied to some
D=2dimensional data using an RBF kernel. We project points in the unit grid onto the ﬁrst
14.4. The kernel trick 495
Algorithm 14.2: Kernel PCA
1Input:Kof sizeN×N,K∗of sizeN∗×N, num. latent dimensions L;
2O=1N1T
N/N;
3˜K=K−OK−KO+OKO;
4[U,Λ]=eig( ˜K);
5fori=1:Ndo
6vi=ui/√λi
7O∗=1N∗1TN/N;
8˜K∗=K∗−O∗K∗−K∗O∗+O∗K∗O∗;
9Z=˜K∗V(:,1:L)
−0.6 −0.4 −0.2 0 0.2 0.4 0.6 0.8−0.8−0.6−0.4−0.200.20.40.6pca
(a)−0.8 −0.6 −0.4 −0.2 0 0.2 0.4 0.6 0.8−0.8−0.6−0.4−0.200.20.40.6kpca
(b)
Figure 14.8 2d visualization of some 2d data. (a) PCA projection. (b) Kernel PCA projection. Figure
generated by kpcaDemo2 , based on code by L.J.P. van der Maaten.
8 components and visualize the corresponding surfaces using a contour plot. We see that the
ﬁrst two component separate the three clusters, and following components split the clusters.
Although the features learned by kPCA can be useful for classiﬁcation (Schoelkopf et al. 1998),
they are not necessarily so useful for data visualization. For example, Figure 14.8 shows theprojection of the data from Figure 14.7 onto the ﬁrst 2 principal bases computed using PCA andkPCA. Obviously PCA perfectly represents the data. kPCA represents each cluster by a differentline.
Of course, there is no need to project 2d data back into 2d. So let us consider a different
data set. We will use a 12 dimensional data set representing the three known phases of ﬂowin an oil pipeline. (This data, which is widely used to compare data visualization methods, issynthetic, and comes from (Bishop and James 1993).) We project this into 2d using PCA andkPCA (with an RBF kernel). The results are shown in Figure 14.9. If we perform nearest neighborclassiﬁcation in the low-dimensional space, kPCA makes 13 errors and PCA makes 20 (Lawrence
496 Chapter 14. Kernels
−2 −1 0 1 2−32.5−21.5−10.500.5
(a)0 0.05 0.1 0.15 0.20.050.1.150.2.250.3
(b)
Figure 14.9 2d representation of 12 dimensional oil ﬂow data. The different colors/symbols represent the
3 phases of oil ﬂow. (a) PCA. (b) Kernel PCA with Gaussian kernel. Compare to Figure 15.10(b). From Figure
1 of (Lawrence 2005). Used with kind permission of Neil Lawrence.
2005). Nevertheless, the kPCA projection is rather unnatural. In Section 15.5, we will discuss
how to make kernelized versions of probabilistic PCA.
Note that there is a close connection between kernel PCA and a technique known as mul-
tidimensional scaling or MDS. This methods ﬁnds a low-dimensional embedding such thatEuclidean distance in the embedding space approximates the original dissimilarity matrix. Seee.g., (Williams 2002) for details.
14.5 Support vector machines (SVMs)
In Section 14.3.2, we saw one way to derive a sparse kernel machine, namely by using a GLMwith kernel basis functions, plus a sparsity-promoting prior such as /lscript
1or ARD. An alternative
approach is to change the objective function from negative log likelihood to some other lossfunction, as we discussed in Section 6.5.5. In particular, consider the /lscript
2regularized empirical
risk function
J(w,λ)=N/summationdisplay
i=1L(yi,ˆyi)+λ||w||2(14.45)
whereˆyi=wTxi+w0. (So far this is in the original feature space; we introduce kernels in a
moment.) If Lis quadratic loss, this is equivalent to ridge regression, and if Lis the log-loss
deﬁned in Equation 6.73, this is equivalent to logistic regression.
In the ridge regression case, we know that the solution to this has the form ˆw=(XTX+
λI)−1XTy, and plug-in predictions take the form ˆw0+ˆwTx. As we saw in Section 14.4.3,
we can rewrite these equations in a way that only involves inner products of the form xTx/prime,
which we can replace by calls to a kernel function, κ(x,x/prime). This is kernelized, but not sparse.
However, if we replace the quadratic/ log-loss with some other loss function, to be explainedbelow, we can ensure that the solution is sparse, so that predictions only depend on a subsetof the training data, known as support vectors. This combination of the kernel trick plus a
modiﬁed loss function is known as a support vector machine orSVM. This technique was
14.5. Support vector machines (SVMs) 497
−3 −2 −1 0 1 2 3−0.500.511.522.533.544.55
  
L2
ε−insensitive
huber
(a)xy(x)
y−/epsilon1yy+/epsilon1
ξ∗>0ξ>0
(b)
Figure 14.10 (a) Illustration of /lscript2, Huber and /epsilon1-insensitive loss functions, where /epsilon1=1.5. Figure generated
byhuberLossDemo . (b) Illustration of the /epsilon1-tube used in SVM regression. Points above the tube have
ξi>0andξ∗
i=0. Points below the tube have ξi=0andξ∗
i>0. Points inside the tube have
ξi=ξ∗
i=0. Based on Figure 7.7 of (Bishop 2006a).
originally designed for binary classiﬁcation, but can be extended to regression and multi-class
classiﬁcation as we explain below.
Note that SVMs are very unnatural from a probabilistic point of view. First, they encode
sparsity in the loss function rather than the prior. Second, they encode kernels by using analgorithmic trick, rather than being an explicit part of the model. Finally, SVMs do not result inprobabilistic outputs, which causes various difficulties, especially in the multi-class classiﬁcationsetting (see Section 14.5.2.4 for details).
It is possible to obtain sparse, probabilistic, multi-class kernel-based classiﬁers, which work as
well or better than SVMs, using techniques such as the L1VM or RVM, discussed in Section 14.3.2.However, we include a discussion of SVMs, despite their non-probabilistic nature, for two mainreasons. First, they are very popular and widely used, so all students of machine learning shouldknow about them. Second, they have some computational advantages over probabilistic methodsin the structured output case; see Section 19.7.
14.5.1 SVMs for regression
The problem with kernelized ridge regression is that the solution vector wdepends on all the
training inputs. We now seek a method to produce a sparse estimate.
Vapnik (Vapnik et al. 1997) proposed a variant of the Huber loss function (Section 7.4) called
theepsilon insensitive loss function, deﬁned by
L/epsilon1(y,ˆy)/defines/braceleftbigg0if|y−ˆy|</epsilon1
|y−ˆy|−/epsilon1otherwise(14.46)
This means that any point lying inside an /epsilon1-tubearound the prediction is not penalized, as in
Figure 14.10.
The corresponding objective function is usually written in the following form
J=CN/summationdisplay
i=1L/epsilon1(yi,ˆyi)+1
2||w||2(14.47)
498 Chapter 14. Kernels
whereˆyi=f(xi)=wTxi+w0andC=1/λis a regularization constant. This objective is
convex and unconstrained, but not differentiable, because of the absolute value function in the
loss term. As in Section 13.4, where we discussed the lasso problem, there are several possiblealgorithms we could use. One popular approach is to formulate the problem as a constrainedoptimization problem. In particular, we introduce slack variables to represent the degree to
which each point lies outside the tube:
y
i≤f(xi)+/epsilon1+ξ+
i (14.48)
yi≥f(xi)−/epsilon1−ξ−
i (14.49)
Given this, we can rewrite the objective as follows:
J=CN/summationdisplay
i=1(ξ+
i+ξ−
i)+1
2||w||2(14.50)
This is a quadratic function of w, and must be minimized subject to the linear constraints
in Equations 14.48-14.49, as well as the positivity constraints ξ+
i≥0andξ−
i≥0. This is a
standard quadratic program in 2N+D+1variables.
One can show (see e.g., (Schoelkopf and Smola 2002)) that the optimal solution has the form
ˆw=/summationdisplay
iαixi (14.51)
whereαi≥0. Furthermore, it turns out that the αvector is sparse, because we don’t care
about errors which are smaller than /epsilon1. Thexifor which αi>0are called the support vectors;
thse are points for which the errors lie on or outside the /epsilon1tube.
Once the model is trained, we can then make predictions using
ˆy(x)=ˆw0+ˆwTx (14.52)
Plugging in the deﬁnition of ˆwwe get
ˆy(x)=ˆw0+/summationdisplay
iαixT
ix (14.53)
Finally, we can replace xT
ixwithκ(xi,x)to get a kernelized solution:
ˆy(x)=ˆw0+/summationdisplay
iαiκ(xi,x) (14.54)
14.5.2 SVMs for classiﬁcation
We now discuss how to apply SVMs to classiﬁcation. We ﬁrst focus on the binary case, and
then discuss the multi-class case in Section 14.5.2.4.
14.5.2.1 Hinge loss
In Section 6.5.5, we showed that the negative log likelihood of a logistic regression model,
Lnll(y,η)=−logp(y|x,w)=l o g ( 1+ e−yη) (14.55)
14.5. Support vector machines (SVMs) 499
was a convex upper bound on the 0-1 risk of a binary classiﬁer, where η=f(x)=wTx+w0
is the log odds ratio, and we have assumed the labels are y∈{1,−1}rather than {0,1}.I n
this section, we replace the NLL loss with the hinge loss, deﬁned as
Lhinge(y,η)=m a x ( 0 ,1−yη)=( 1 −yη)+ (14.56)
Hereη=f(x)is our “conﬁdence” in choosing label y=1; however, it need not have any
probabilistic semantics. See Figure 6.7 for a plot. We see that the function looks like a door
hinge, hence its name. The overall objective has the form
min
w,w01
2||w||2+CN/summationdisplay
i=1(1−yif(xi))+ (14.57)
Once again, this is non-differentiable, because of the max term. However, by introducing slackvariables ξ
i, one can show that this is equivalent to solving
min
w,w0,ξ1
2||w||2+CN/summationdisplay
i=1ξis.t.ξi≥0,yi(xT
iw+w0)≥1−ξi,i=1:N (14.58)
This is a quadratic program in N+D+1variables, subjet to O(N)constraints. We
can eliminate the primal variables w,w0andξi, and just solve the Ndual variables, which
correspond to the Lagrange multipliers for the constraints. Standard solvers take O(N3)time.
However, specialized algorithms, which avoid the use of generic QP solvers, have been developed
for this problem, such as the sequential minimal optimization orSMOalgorithm (Platt 1998).
In practice this can take O(N2). However, even this can be too slow if Nis large. In such
settings, it is common to use linear SVMs, which take O(N)time to train (Joachims 2006; Bottou
et al. 2007).
One can show that the solution has the form
ˆw=/summationdisplay
iαixi (14.59)
whereαi=λiyiand where αis sparse (because of the hinge loss). The xifor which αi>0are
called support vectors; these are points which are either incorrectly classiﬁed, or are classiﬁedcorrectly but are on or inside the margin (we disuss margins below). See Figure 14.12(b) for anillustration.
At test time, prediction is done using
ˆy(x)=s g n (f(x)) = sgn/parenleftbig
ˆw
0+ˆwTx/parenrightbig
(14.60)
Using Equation 14.59 and the kernel trick we have
ˆy(x)=s g n/parenleftBigg
ˆw0+N/summationdisplay
i=1αiκ(xi,x)/parenrightBigg
(14.61)
This takes O(sD) time to compute, where s≤Nis the number of support vectors. This
depends on the sparsity level, and hence on the regularizer C.
500 Chapter 14. Kernels
Figure 14.11 Illustration of the large margin principle. Left: a separating hyper-plane with large margin.
Right: a separating hyper-plane with small margin.
R1
R0y=0y>0
y<0
wx
r=f(x)
/bardblw/bardbl
x⊥
−w0
/bardblw/bardbl
(a)y=0
y=1y=−1
ξ> 1
ξ< 1
ξ=0ξ=0
(b)
Figure 14.12 (a) Illustration of the geometry of a linear decision boundary in 2d. A point xis classiﬁed
as belonging in decision region R1iff(x)>0, otherwise it belongs in decision region R2;h e r ef(x)
is known as a discriminant function . The decision boundary is the set of points such that f(x)=0.
wis a vector which is perpendicular to the decision boundary. The term w0controls the distance of
the decision boundary from the origin. The signed distance of xfrom its orthogonal projection onto the
decision boundary, x⊥, is given by f(x)/||w||. Based on Figure 4.1 of (Bishop 2006a). (b) Illustration of
the soft margin principle. Points with circles around them are support vectors. We also indicate the value
of the corresponding slack variables. Based on Figure 7.3 of (Bishop 2006a).
14.5. Support vector machines (SVMs) 501
14.5.2.2 The large margin principle
In this section, we derive Equation 14.58 form a completely different perspective. Recall that our
goal is to derive a discriminant function f(x)which will be linear in the feature space implied
by the choice of kernel. Consider a point xin this induced space. Referring to Figure 14.12(a),
we see that
x=x⊥+rw
||w||(14.62)
whereris the distance of xfrom the decision boundary whose normal vector is w, andx⊥is
the orthogonal projection of xonto this boundary. Hence
f(x)=wTx+w0=(wTx⊥+w0)+rwTw
||w||(14.63)
Nowf(x⊥)=0so0=wTx⊥+w0. Hencef(x)=rwTw√
wTw, andr=f(x)
||w||.
We would like to make this distance r=f(x)/||w||as large as possible, for reasons illustrated
in Figure 14.11. In particular, there might be many lines that perfectly separate the training data(especially if we work in a high dimensional feature space), but intuitively, the best one to pickis the one that maximizes the margin, i.e., the perpendicular distance to the closest point. Inaddition, we want to ensure each point is on the correct side of the boundary, hence we wantf(x
i)yi>0. So our objective becomes
max
w,w0N
min
i=1yi(wTxi+w0)
||w||(14.64)
Note that by rescaling the parameters using w→kwandw0→kw0, we do not change the
distance of any point to the boundary, since the kfactor cancels out when we divide by ||w||.
Therefore let us deﬁne the scale factor such that yifi=1for the point that is closest to the
decision boundary. We therefore want to optimize
min
w,w01
2||w||2s.t.yi(wTxi+w0)≥1,i=1:N (14.65)
(The fact of1
2is added for convenience and doesn’t affect the optimal parameters.) The
constraint says that we want all points to be on the correct side of the decision boundary witha margin of at least 1. For this reason, we say that an SVM is an example of a large margin
classiﬁer.
If the data is not linearly separable (even after using the kernel trick), there will be no feasible
solution in which y
ifi≥1for alli. We therefore introduce slack variables ξi≥0such that
ξi=0if the point is on or inside the correct margin boundary, and ξi=|yi−fi|otherwise. If
0<ξi≤1the point lies inside the margin, but on the correct side of the decision boundary.
Ifξi>1, the point lies on the wrong side of the decision boundary. See Figure 14.12(b).
We replace the hard constraints that yifi≥0with thesoft margin constraints thatyifi≥
1−ξi. The new objective becomes
min
w,w0,ξ1
2||w||2+CN/summationdisplay
i=1ξis.t.ξi≥0,yi(xT
iw+w0)≥1−ξi (14.66)
502 Chapter 14. Kernels
0.4 0.6 0.8 1 1.2−6−4−20246Correct log−odds
RVM y(x)
SVM y(x)
Figure 14.13 Log-odds vs xfor 3 different methods. Based on Figure 10 of (Tipping 2001). Used with kind
permission of Mike Tipping.
which is the same as Equation 14.58. Since ξi>1means point iis misclassiﬁed, we can
interpret/summationtext
iξias an upper bound on the number of misclassiﬁed points.
The parameter Cis a regularization parameter that controls the number of errors we are
willing to tolerate on the training set. It is common to deﬁne this using C=1/(νN),w h e r e
0<ν≤1controls the fraction of misclassiﬁed points that we allow during the training phase.
This is called a ν-SVM classiﬁer. This is usually set using cross-validation (see Section 14.5.3).
14.5.2.3 Probabilistic output
An SVM classiﬁer produces a hard-labeling, ˆy(x) = sign(f (x)). However, we often want a
measure of conﬁdence in our prediction. One heuristic approach is to interpret f(x)as the
log-odds ratio, logp(y=1|x)
p(y=0|x). We can then convert the output of an SVM to a probability using
p(y=1|x,θ)=σ(af(x)+b) (14.67)
wherea,bcan be estimated by maximum likelihood on a separate validation set. (Using the
training set to estimate aandbleads to severe overﬁtting.) This technique was ﬁrst proposed in
(Platt 2000).
However, the resulting probabilities are not particularly well calibrated, since there is nothing
in the SVM training procedure that justiﬁes interpreting f(x)as a log-odds ratio. To illustrate
this, consider an example from (Tipping 2001). Suppose we have 1d data where p(x|y=0 )=
Unif(0,1)andp(x|y=1 )=U n i f( 0 .5,1.5). Since the class-conditional distributions overlap in
the middle, the log-odds of class 1 over class 0 should be zero in [0.5,1.0], and inﬁnite outside
this region. We sampled 1000 points from the model, and then ﬁt an RVM and an SVM with
a Gaussian kenel of width 0.1. Both models can perfectly capture the decision boundary, andachieve a generalizaton error of 25%, which is Bayes optimal in this problem. The probabilisticoutput from the RVM is a good approximation to the true log-odds, but this is not the case forthe SVM, as shown in Figure 14.13.
14.5. Support vector machines (SVMs) 503
?
R1 R2
R3 C1
NotC1C2
NotC2
(a)?R1
R2R3C1 C3
C2
C3C1
C2
(b)
Figure 14.14 (a) The one-versus-rest approach. The green region is predicted to be both class 1 and class
2. (b) The one-versus-one approach. The label of the green region is ambiguous. Based on Figure 4.2 of
(Bishop 2006a).
14.5.2.4 SVMs for multi-class classiﬁcation
In Section 8.3.7, we saw how we could “upgrade” a binary logistic regression model to the multi-
class case, by replacing the sigmoid function with the softmax, and the Bernoulli distributionwith the multinomial. Upgrading an SVM to the multi-class case is not so easy, since the outputsare not on a calibrated scale and hence are hard to compare to each other.
The obvious approach is to use a one-versus-the-rest approach (also called one-vs-all), in
which we train Cbinary classiﬁers, f
c(x), where the data from class cis treated as positive,
and the data from all the other classes is treated as negative. However, this can result in regionsof input space which are ambiguously labeled, as shown in Figure 14.14(a).
A common alternative is to pick ˆy(x) = argmax
cfc(x). However, this technique may
not work either, since there is no guarantee that the different fcfunctions have comparable
magnitudes. In addition, each binary subproblem is likely to suffer from the class imbalance
problem. To see this, suppose we have 10 equally represented classes. When training f1,w e
will have 10% positive examples and 90% negative examples, which can hurt performance. It ispossible to devise ways to train all Cclassiﬁers simultaneously (Weston and Watkins 1999), but
the resulting method takes O(C
2N2)time, instead of the usual O(CN2)time.
Another approach is to use the one-versus-one or OVO approach, also called all pairs,i n
which we train C(C−1)/2classiﬁers to discriminate all pairs fc,c/prime. We then classify a point into
the class which has the highest number of votes. However, this can also result in ambiguities,as shown in Figure 14.14(b). Also, it takes O(C
2N2)time to train and O(C2Nsv)to test each
data point, where Nsvis the number of support vectors.2See also (Allwein et al. 2000) for an
approach based on error-correcting output codes.
It is worth remembering that all of these difficulties, and the plethora of heuristics that have
been proposed to ﬁx them, fundamentally arise because SVMs do not model uncertainty usingprobabilities, so their output scores are not comparable across classes.
2. We can reduce the test time by structuring the classes into a DAG (directed acyclic graph), and performing O(C)
pairwise comparisons (Platt et al. 2000). However, the O(C2)factor in the training time is unavoidable.
504 Chapter 14. Kernels
10−2100102104
10−11001010.10.20.30.40.5
C γcv error
(a)10−210−11001011021031040.20.250.30.35
Ccv errorγ = 5.0
(b)
Figure 14.15 (a) A cross validation estimate of the 0-1 error for an SVM classiﬁer with RBF kernel with
different precisions γ=1/(2σ2)and different regularizer λ=1/C, applied to a synthetic data set drawn
from a mixture of 2 Gaussians. (b) A slice through this surface for γ=5The red dotted line is the Bayes
optimal error, computed using Bayes rule applied to the model used to generate the data. Based on Figure
12.6 of (Hastie et al. 2009). Figure generated by svmCgammaDemo .
14.5.3 Choosing C
SVMs for both classiﬁcation and regression require that you specify the kernel function and the
parameter C. Typically Cis chosen by cross-validation. Note, however, that Cinteracts quite
strongly with the kernel parameters. For example, suppose we are using an RBF kernel withprecision γ=
1
2σ2.I fγ=5, corresponding to narrow kernels, we need heavy regularization,
and hence small C(soλ=1/Cis big). If γ=1, a larger value of Cshould be used. So we
see thatγandCare tightly coupled. This is illustrated in Figure 14.15, which shows the CV
estimate of the 0-1 risk as a function of Candγ.
The authors of libsvm recommend (Hsu et al. 2009) using CV over a 2d grid with values C∈
{2−5,2−3,...,215}andγ∈{2−15,2−13,...,23}. In addition, it is important to standardize
the data ﬁrst, for a spherical Gaussian kernel to make sense.
To choose Cefficiently, one can develop a path following algorithm in the spirit of lars
(Section 13.3.4). The basic idea is to start with λlarge, so that the margin 1/||w(λ)||is wide,
and hence all points are inside of it and have αi=1. By slowly decreasing λ, a small set of
points will move from inside the margin to outside, and their αivalues will change from 1 to 0,
as they cease to be support vectors. When λis maximal, the function is completely smoothed,
and no support vectors remain. See (Hastie et al. 2004) for the details.
14.5.4 Summary of key points
Summarizing the above discussion, we recognize that SVM classiﬁers involve three key ingre-dients: the kernel trick, sparsity, and the large margin principle. The kernel trick is necessaryto prevent underﬁtting, i.e., to ensure that the feature vector is sufficiently rich that a linearclassiﬁer can separate the data. (Recall from Section 14.2.3 that any Mercer kernel can be viewedas implicitly deﬁning a potentially high dimensional feature vector.) If the original features arealready high dimensional (as in many gene expression and text classiﬁcation problems), it suf-ﬁces to use a linear kernel, κ(x,x
/prime)=xTx/prime, which is equivalent to working with the original
features.
14.6. Comparison of discriminative kernel methods 505
Method Opt. wOpt. kernel Sparse Prob. Multiclass Non-Mercer Section
L2VM Convex EB No Yes Yes Yes 14.3.2
L1VM Convex CV Yes Yes Yes Yes 14.3.2RVM Not convex EB Yes Yes Yes Yes 14.3.2SVM Convex CV Yes No Indirectly No 14.5GP N/A EB No Yes Yes No 15
Table 14.1 Comparison of various kernel based classiﬁers. EB = empirical Bayes, CV = cross validation.
See text for details.
The sparsity and large margin principles are necessary to prevent overﬁtting, i.e., to ensure
that we do not use all the basis functions. These two ideas are closely related to each other,and both arise (in this case) from the use of the hinge loss function. However, there are othermethods of achieving sparsity (such as /lscript
1), and also other methods of maximizing the margin
(such as boosting). A deeper discussion of this point takes us outside of the scope of this book.See e.g., (Hastie et al. 2009) for more information.
14.5.5 A probabilistic interpretation of SVMs
In Section 14.3, we saw how to use kernels inside GLMs to derive probabilistic classiﬁers, such asthe L1VM and RVM. And in Section 15.3, we will discuss Gaussian process classiﬁers, which alsouse kernels. However, all of these approaches use a logistic or probit likelihood, as opposed tothe hinge loss used by SVMs. It is natural to wonder if one can interpret the SVM more directlyas a probabilistic model. To do so, we must interpret Cg(m)as a negative log likelihood, where
g(m)=( 1 −m)
+,w h e r em=yf(x)is the margin. Hence p(y=1|f)=e x p ( −Cg(f))
andp(y=−1|f)=e x p ( −Cg(−f)). By summing over both values of y, we require that
exp(−Cg(f))+exp(−Cg (−f))be a constant independent of f. But it turns out this is not
possible for any C>0(Sollich 2002).
However, if we are willing to relax the sum-to-one condition, and work with a pseudo-
likelihood, we canderive a probabilistic interpretation of the hinge loss (Polson and Scott 2011).
In particular, one can show that
exp(−2(1−yixT
iw)+)=/integraldisplay∞
01√2πλiexp/parenleftbigg
−1
2(1+λi−yixT
iw)2
λi/parenrightbigg
dλi (14.68)
Thus the exponential of the negative hinge loss can be represented as a Gaussian scale mixture.
This allows one to ﬁt an SVM using EM or Gibbs sampling, where λiare the latent variables. This
in turn opens the door to Bayesian methods for setting the hyper-parameters for the prior onw. See (Polson and Scott 2011) for details. (See also (Franc et al. 2011) for a different probabilistic
interpretation of SVMs.)
14.6 Comparison of discriminative kernel methods
We have mentioned several different methods for classiﬁcation and regression based on kernels,which we summarize in Table 14.1. (GP stands for “Gaussian process”, which we discuss inChapter 15.) The columns have the following meaning:
506 Chapter 14. Kernels
• Optimize w: a key question is whether the objective J(w)=−logp(D|w)−logp(w)
is convex or not. L2VM, L1VM and SVMs have convex objectives. RVMs do not. GPs are
Bayesian methods that do not perform parameter estimation.
• Optimize kernel: all the methods require that one “tune” the kernel parameters, such as the
bandwidth of the RBF kernel, as well as the level of regularization. For methods based onGaussians, including L2VM, RVMs and GPs, we can use efficient gradient based optimizers tomaximize the marginal likelihood. For SVMs, and L1VM, we must use cross validation, whichis slower (see Section 14.5.3).
• Sparse: L1VM, RVMs and SVMs are sparse kernel methods, in that they only use a subset of
the training examples. GPs and L2VM are not sparse: they use all the training examples. Theprinciple advantage of sparsity is that prediction at test time is usually faster. In addition,one can sometimes get improved accuracy.
• Probabilistic: All the methods except for SVMs produce probabilistic output of the form
p(y|x). SVMs produce a “conﬁdence” value that can be converted to a probability, but such
probabilities are usually very poorly calibrated (see Section 14.5.2.3).
• Multiclass: All the methods except for SVMs naturally work in the multiclass setting, by using
a multinoulli output instead of Bernoulli. The SVM can be made into a multiclass classiﬁer,but there are various difficulties with this approach, as discussed in Section 14.5.2.4.
• Mercer kernel: SVMs and GPs require that the kernel is positive deﬁnite; the other techniques
do not.
Apart from these differences, there is the natural question: which method works best? In
a small experiment
3, we found that all of these methods had similar accuracy when averaged
over a range of problems, provided they have the same kernel, and provided the regularizationconstants are chosen appropriately.
Given that the statistical performance is roughly the same, what about the computational
performance? GPs and L2VM are generally the slowest, taking O(N
3)time, since they don’t
exploit sparsity (although various speedups are possible, see Section 15.6). SVMs also takeO(N
3)time to train (unless we use a linear kernel, in which case we only need O(N)time
(Joachims 2006)). However, the need to use cross validation can make SVMs slower than RVMs.L1VM should be faster than an RVM, since an RVM requires multiple rounds of /lscript
1minimization
(see Section 13.7.4.3). However, in practice it is common to use a greedy method to train RVMs,which is faster than /lscript
1minimization. This is reﬂected in our empirical results.
The conclusion of all this is as follows: if speed matters, use an RVM, but if well-calibrated
probabilistic output matters (e.g., for active learning or control problems), use a GP. The onlycircumstances under which using an SVM seems sensible is the structured output case, wherelikelihood-based methods can be slow. (We attribute the enormous popularity of SVMs notto their superiority, but to ignorance of the alternatives, and also to the lack of high qualitysoftware implementing the alternatives.)
Section 16.7.1 gives a more extensive experimental comparison of supervised learning methods,
including SVMs and various non kernel methods.
3. See http://pmtk3 .googlecode .com/svn/trunk/docs/tutorial/html/tutKernelClassif .html.
14.7. Kernels for building generative models 507
−1.5 −1 −0.5 0 0.5 1 1.500.10.20.30.40.50.60.70.80.9
  
Boxcar
Epanechnikov
Tricube
Gaussian
Figure 14.16 A comparison of some popular smoothing kernels. The boxcar kernel has compact support
but is not smooth. The Epanechnikov kernel has compact support but is not differentiable at its boundary.
The tri-cube has compact support and two continuous derivatives at the boundary of its support. TheGaussian is differentiable, but does not have compact support. Based on Figure 6.2 of (Hastie et al. 2009).Figure generated by smoothingKernelPlot .
14.7 Kernels for building generative models
There is a different kind of kernel known as a smoothing kernel which can be used to create
non-parametric density estimates. This can be used for unsupervised density estimation, p(x),
as well as for creating generative models for classiﬁcation and regression by making models ofthe form p(y,x).
14.7.1 Smoothing kernels
Asmoothing kernel is a function of one argument which satisﬁes the following properties:/integraldisplay
κ(x)dx=1,/integraldisplay
xκ(x)dx=0,/integraldisplay
x2κ(x)dx >0 (14.69)
A simple example is the Gaussian kernel,
κ(x)/defines1
(2π)1
2e−x2/2(14.70)
We can control the width of the kernel by introducing a bandwidth parameter h:
κh(x)/defines1
hκ(x
h) (14.71)
We can generalize to vector valued inputs by deﬁning an RBF kernel:
κh(x)=κh(||x||) (14.72)
In the case of the Gaussian kernel, this becomes
κh(x)=1
hD(2π)D/2D/productdisplay
j=1exp(−1
2h2x2
j) (14.73)
508 Chapter 14. Kernels
Although Gaussian kernels are popular, they have unbounded support. An alternative kernel,
with compact support, is the Epanechnikov kernel, deﬁned by
κ(x)/defines3
4(1−x2)I(|x|≤1) (14.74)
This is plotted in Figure 14.16. Compact support can be useful for efficiency reasons, since one
can use fast nearest neighbor methods to evaluate the density.
Unfortunately, the Epanechnikov kernel is not differentiable at the boundary of its support.
An alterative is the tri-cube kernel, deﬁned as follows:
κ(x)/defines70
81(1−|x|3)3I(|x|≤1) (14.75)
This has compact support and has two continuous derivatives at the boundary of its support.See Figure 14.16.
Theboxcar kernel is simply the uniform distribution:
κ(x)/definesI(|x|≤1) (14.76)
We will use this kernel below.
14.7.2 Kernel density estimation (KDE)
Recall the Gaussian mixture model from Section 11.2.1. This is a parametric density estimator fordata in R
D. However, it requires specifying the number Kand locations μkof the clusters. An
alternative to estimating the μkis to allocate one cluster center per data point, so μi=xi.I n
this case, the model becomes
p(x|D)=1
NN/summationdisplay
i=1N(x|xi,σ2I) (14.77)
We can generalize the approach by writing
ˆp(x)=1
NN/summationdisplay
i=1κh(x−xi) (14.78)
This is called a Parzen window density estimator,o r kernel density estimator (KDE), and
is a simple non-parametric density model. The advantage over a parametric model is that nomodel ﬁtting is required (except for tuning the bandwidth, usually done by cross-validation). andthere is no need to pick K. The disadvantage is that the model takes a lot of memory to store,
and a lot of time to evaluate. It is also of no use for clustering tasks.
Figure 14.17 illustrates KDE in 1d for two kinds of kernel. On the top, we use a boxcar kernel,
κ(x)=I(−1≤z≤1). The result is equivalent to a histogram estimate of the density, since
we just count how many data points land within an interval of size haroundx
i. On the bottom,
we use a Gaussian kernel, which results in a smoother ﬁt.
The usual way to pick his to minimize an estimate (such as cross validation) of the frequentist
risk (see e.g., (Bowman and Azzalini 1997)). In Section 25.2, we discuss a Bayesian approach tonon-parametric density estimation, based on Dirichlet process mixture models, which allows us
14.7. Kernels for building generative models 509
−5 0 5 1000.050.10.150.20.250.30.35unif, h=1.000
(a)−5 0 5 1000.020.040.060.080.10.120.14unif, h=2.000
(b)
−5 0 5 1000.020.040.060.080.10.120.140.16gauss, h=1.000
(c)−5 0 5 1000.010.020.030.040.050.06gauss, h=2.000
(d)
Figure 14.17 A nonparametric (Parzen) density estimator in 1D estimated from 6 data points, denoted
by x. Top row: uniform kernel. Bottom row: Gaussian kernel. Rows represent increasingly large band-
width parameters. Based on http://en .wikipedia .org/wiki/Kernel_density_estimation . Figure
generated by parzenWindowDemo2 .
to inferh. DP mixtures can also be more efficient than KDE, since they do not need to store
all the data. See also Section 15.2.4 where we discuss an empirical Bayes approach to estimating
kernel parameters in a Gaussian process model for classiﬁcation/ regression.
14.7.3 From KDE to KNN
We can use KDE to deﬁne the class conditional densities in a generative classiﬁer. This turnsout to provide an alternative derivation of the nearest neighbors classiﬁer, which we introducedin Section 1.4.2. To show this, we follow the presentation of (Bishop 2006a, p125). In kdewith a boxcar kernel, we ﬁxed the bandwidth and count how many data points fall within thehyper-cube centered on a datapoint. Suppose that, instead of ﬁxing the bandwidth h, we instead
510 Chapter 14. Kernels
−2 −1.5 −1 −0.5 0 0.5 1 1.5 2−0.4−0.200.20.40.60.811.2Gaussian kernel regression
  
true
data
estimate
Figure 14.18 An example of kernel regression in 1d using a Gaussian kernel. Figure generated by
kernelRegressionDemo , based on code by Yi Cao.
allow the bandwidth or volume to be different for each data point. Speciﬁcally, we will “grow”
a volume around xuntil we encounter Kdata points, regardless of their class label. Let the
resulting volume have size V(x)(this was previously hD), and let there be Nc(x)examples
from class cin this volume. Then we can estimate the class conditional density as follows:
p(x|y=c,D)=Nc(x)
NcV(x)(14.79)
whereNcis the total number of examples in class cin the whole data set. The class prior can
be estimated by
p(y=c|D)=Nc
N(14.80)
Hence the class posterior is given by
p(y=c|x,D)=Nc(x)
NcV(x)Nc
N/summationtext
c/primeNc/prime(x)
Nc/primeV(x)Nc/prime
N=Nc(x)/summationtext
c/primeNc/prime(x)=Nc(x)
K(14.81)
where we used the fact that/summationtext
cNc(x)=K, since we choose a total of Kpoints (regardless of
class) around every point. This is equivalent to Equation 1.2, since Nc(x)=/summationtext
i∈NK(x,D)I(yi=
c).
14.7.4 Kernel regression
In Section 14.7.2, we discussed the use of kernel density estimation or KDE for unsupervisedlearning. We can also use KDE for regression. The goal is to compute the conditional expectation
f(x)=E[y|x]=/integraldisplay
yp(y|x)dy=/integraltext
yp(x,y)dy
/integraltext
p(x,y)dy(14.82)
14.7. Kernels for building generative models 511
We can use KDE to approximate the joint density p(x,y)as follows:
p(x,y)≈1
NN/summationdisplay
i=1κh(x−xi)κh(y−yi) (14.83)
Hence
f(x)=1
N/summationtextN
i=1κh(x−xi)/integraltext
yκh(y−yi)dy
1
N/summationtextNi=1κh(x−xi)/integraltext
κh(y−yi)dy(14.84)
=/summationtextNi=1κh(x−xi)yi/summationtextNi=1κh(x−xi)(14.85)
To derive this result, we used two properties of smoothing kernels. First, that they integrate to
one, i.e.,/integraltext
κh(y−yi)dy=1. And second, the fact that/integraltext
yκh(y−yi)dy=yi. This follows by
deﬁningx=y−yiand using the zero mean property of smoothing kernels:
/integraldisplay
(x+yi)κh(x)dx=/integraldisplay
xκh(x)dx+yi/integraldisplay
κh(x)dx=0+yi=yi (14.86)
We can rewrite the above result as follows:
f(x)=N/summationdisplay
i=1wi(x)yi (14.87)
wi(x)/definesκh(x−xi)/summationtextN
i/prime=1κh(x−xi/prime)(14.88)
We see that the prediction is just a weighted sum of the outputs at the training points, where
the weights depend on how similar xis to the stored training points. This method is called
kernel regression, kernel smoothing, or the Nadaraya-Watson model. See Figure 14.18 for an
example, where we use a Gaussian kernel.
Note that this method only has one free parameter, namely h. One can show (Bowman and
Azzalini 1997) that for 1d data, if the true density is Gaussian and we are using Gaussian kernels,the optimal bandwidth his given by
h=/parenleftbigg4
3N/parenrightbigg1/5
ˆσ (14.89)
We can compute a robust approximation to the standard deviation by ﬁrst computing the mean
absolute deviation
MAD=median(|x−median(x)|) (14.90)
and then using
ˆσ=1.4826MAD=1
0.6745MAD (14.91)
The code used to produce Figure 14.18 estimated hxandhyseparately, and then set h=/radicalbig
hxhy.
512 Chapter 14. Kernels
Although these heuristics seem to work well, their derivation rests on some rather dubious
assumptions (such as Gaussianity of the true density). Furthermore, these heuristics are limited
to tuning just a single parameter. In Section 15.2.4 we discuss an empirical Bayes approach toestimating multiple kernel parameters in a Gaussian process model for classiﬁcation/ regression,which can handle many tuning parameters, and which is based on much more transparentprinciples (maximizing the marginal likelihood).
14.7.5 Locally weighted regression
If we deﬁne κh(x−xi)=κ(x,xi), we can rewrite the prediction made by kernel regression as
follows
ˆf(x∗)=N/summationdisplay
i=1yiκ(x∗,xi)/summationtextN
i/prime=1κ(x∗,xi/prime)(14.92)
Note that κ(x,xi)need not be a smoothing kernel. If it is not, we no longer need the
normalization term, so we can just write
ˆf(x∗)=N/summationdisplay
i=1yiκ(x∗,xi) (14.93)
This model is essentially ﬁtting a constant function locally. We can improve on this by ﬁtting a
linear regression model for each point x∗by solving
min
β(x∗)N/summationdisplay
i=1κ(x∗,xi)[yi−β(x∗)Tφ(xi)]2(14.94)
whereφ(x)=[ 1,x]. This is called locally weighted regression. An example of such a method
isLOESS,a k aLOWESS, which stands for “locally-weighted scatterplot smoothing” (Cleveland
and Devlin 1988). See also (Edakunni et al. 2010) for a Bayesian version of this model.
We can compute the paramters β(x∗)for each test case by solving the following weighted
least squares problem:
β(x∗)=(ΦTD(x∗)Φ)−1ΦTD(x∗)y (14.95)
whereΦis anN×(D+1 )design matrix and D=d i a g (κ(x∗,xi)). The corresponding
prediction has the form
ˆf(x∗)=φ(x∗)Tβ(x∗)=(ΦTD(x∗)Φ)−1ΦTD(x∗)y=N/summationdisplay
i=1wi(x∗)yi (14.96)
The term wi(x∗), which combines the local smoothing kernel with the effect of linear regression,
is called the equivalent kernel. See also Section 15.4.2.
Exercises
Exercise 14.1 Fitting an SVM classiﬁer by hand
(Source: Jaakkola.) Consider a dataset with 2 points in 1d: (x1=0,y1=−1)and(x2=√
2,y2=1 ).
Consider mapping each point to 3d using the feature vector φ(x)=[ 1,√
2x,x2]T. (This is equivalent to
14.7. Kernels for building generative models 513
using a second order polynomial kernel.) The max margin classiﬁer has the form
min||w||2s.t. (14.97)
y1(wTφ(x1)+w0)≥1 (14.98)
y2(wTφ(x2)+w0)≥1 (14.99)
a. Write down a vector that is parallel to the optimal vector w. Hint: recall from Figure 7.8 (12Apr10
version) that wis perpendicular to the decision boundary between the two points in the 3d feature
space.
b. What is the value of the margin that is achieved by this w? Hint: recall that the margin is the distance
from each support vector to the decision boundary. Hint 2: think about the geometry of 2 points in
space, with a line separating one from the other.
c. Solve for w, using the fact the margin is equal to 1/||w||.
d. Solve for w0using your value for wand Equations 14.97 to 14.99. Hint: the points will be on the
decision boundary, so the inequalities will be tight.
e. Write down the form of the discriminant function f(x)=w0+wTφ(x)as an explicit function of x.
Exercise 14.2 Linear separability
(Source: Koller..) Consider ﬁtting an SVM with C>0to a dataset that is linearly separable. Is the resulting
decision boundary guaranteed to separate the classes?

15 Gaussian processes
15.1 Introduction
In supervised learning, we observe some inputs xiand some outputs yi. We assume that
yi=f(xi), for some unknown function f, possibly corrupted by noise. The optimal approach
is to infer a distribution over functions given the data, p(f|X,y), and then to use this to make
predictions given new inputs, i.e., to compute
p(y∗|x∗,X,y)=/integraldisplay
p(y∗|f,x∗)p(f|X,y)df (15.1)
Up until now, we have focussed on parametric representations for the function f, so that
instead of inferring p(f|D), we infer p(θ|D). In this chapter, we discuss a way to perform
Bayesian inference over functions themselves.
Our approach will be based on Gaussian processes orGPs. A GP deﬁnes a prior over
functions, which can be converted into a posterior over functions once we have seen some data.
Although it might seem difficult to represent a distribution over a function, it turns out that weonly need to be able to deﬁne a distribution over the function’s values at a ﬁnite, but arbitrary,set of points, say x
1,...,xN. A GP assumes that p(f(x1),...,f(xN))is jointly Gaussian, with
some mean μ(x)and covariance Σ(x)given byΣij=κ(xi,xj),w h e r eκis a positive deﬁnite
kernel function (see Section 14.2 information on kernels). The key idea is that if xiandxjare
deemed by the kernel to be similar, then we expect the output of the function at those pointsto be similar, too. See Figure 15.1 for an illustration.
It turns out that, in the regression setting, all these computations can be done in closed form,
inO(N
3)time. (We discuss faster approximations in Section 15.6.) In the classiﬁcation setting,
we must use approximations, such as the Gaussian approximation, since the posterior is nolonger exactly Gaussian.
GPs can be thought of as a Bayesian alternative to the kernel methods we discussed in Chap-
ter 14, including L1VM, RVM and SVM. Although those methods are sparser and therefore faster,they do not give well-calibrated probabilistic outputs (see Section 15.4.4 for further discussion).Having properly tuned probabilistic output is important in certain applications, such as onlinetracking for vision and robotics (Ko and Fox 2009), reinforcement learning and optimal control(Engel et al. 2005; Deisenroth et al. 2009), global optimization of non-convex functions (Mockuset al. 1996; Lizotte 2008; Brochu et al. 2009), experiment design (Santner et al. 2003), etc.
516 Chapter 15. Gaussian processes
x1 x2 x⋆f1 f2 f⋆y1 y2 y⋆
Figure 15.1 A Gaussian process for 2 training points and 1 testing point, represented as a mixed directed
and undirected graphical model representing p(y,f|x)=N(f|0,K(x))/producttext
ip(yi|fi). The hidden nodes
fi=f(xi)represent the value of the function at each of the data points. These hidden nodes are fully
interconnected by undirected edges, forming a Gaussian graphical model; the edge strengths represent the
covariance terms Σij=κ(xi,xj). If the test point x∗is similar to the training points x1andx2, then
the predicted output y∗will be similar to y1andy2.
Our presentation is closely based on (Rasmussen and Williams 2006), which should be con-
sulted for futher details. See also (Diggle and Ribeiro 2007), which discusses the related approach
known as kriging, which is widely used in the spatial statistics literature.
15.2 GPs for regression
In this section, we discuss GPs for regression. Let the prior on the regression function be a GP,denoted by
f(x)∼GP(m(x),κ(x,x
/prime)) (15.2)
wherem(x)is the mean function and κ(x,x/prime)is the kernel or covariance function, i.e.,
m(x)=E [f(x)] (15.3)
κ(x,x/prime)=E/bracketleftbig
(f(x)−m(x))(f(x/prime)−m(x/prime))T/bracketrightbig
(15.4)
We obviously require that κ()be a positive deﬁnite kernel. For any ﬁnite set of points, this
process deﬁnes a joint Gaussian:
p(f|X)=N(f|μ,K) (15.5)
whereKij=κ(xi,xj)andμ=(m(x1),...,m(xN)).
Note that it is common to use a mean function of m(x)=0, since the GP is ﬂexible enough
to model the mean arbitrarily well, as we will see below. However, in Section 15.2.6 we willconsider parametric models for the mean function, so the GP just has to model the residualerrors. This semi-parametric approach combines the interpretability of parametric models withthe accuracy of non-parametric models.
15.2. GPs for regression 517
−5 0 5−2−1.5−1−0.500.511.52
(a)−5 0 5−2−1.5−1−0.500.511.522.5
(b)
Figure 15.2 Left: some functions sampled from a GP prior with SE kernel. Right: some samples from a GP
posterior, after conditioning on 5 noise-free observations. The shaded area represents E[f(x)]±2std(f(x).
Based on Figure 2.2 of (Rasmussen and Williams 2006). Figure generated by gprDemoNoiseFree .
15.2.1 Predictions using noise-free observations
Suppose we observe a training set D={(xi,fi),i=1:N},w h e r efi=f(xi)is the noise-free
observation of the function evaluated at xi. Given a test set X∗of sizeN∗×D, we want to
predict the function outputs f∗.
If we ask the GP to predict f(x)for a value of xthat it has already seen, we want the GP to
return the answer f(x)with no uncertainty. In other words, it should act as an interpolator
of the training data. This will only happen if we assume the observations are noiseless. We will
consider the case of noisy observations below.
Now we return to the prediction problem. By deﬁnition of the GP, the joint distribution has
the following form
/parenleftbiggf
f∗/parenrightbigg
∼N/parenleftbigg/parenleftbiggμ
μ∗/parenrightbigg
,/parenleftbiggKK ∗
KT
∗K∗∗/parenrightbigg/parenrightbigg
(15.6)
whereK=κ(X,X)isN×N,K∗=κ(X,X∗)isN×N∗, andK∗∗=κ(X∗,X∗)isN∗×N∗.
By the standard rules for conditioning Gaussians (Section 4.3), the posterior has the following
form
p(f∗|X∗,X,f)=N (f∗|μ∗,Σ∗) (15.7)
μ∗=μ(X∗)+KT
∗K−1(f−μ(X)) (15.8)
Σ∗=K∗∗−KT∗K−1K∗ (15.9)
This process is illustrated in Figure 15.2. On the left we show sample samples from the prior,
p(f|X), where we use a squared exponential kernel, aka Gaussian kernel or RBF kernel. In
1d, this is given by
κ(x,x/prime)=σ2
fexp(−1
2/lscript2(x−x/prime)2) (15.10)
Here/lscriptcontrols the horizontal length scale over which the function varies, and σ2
fcontrols the
vertical variation. (We discuss how to estimate such kernel parameters below.) On the right we
518 Chapter 15. Gaussian processes
show samples from the posterior, p(f∗|X∗,X,f). We see that the model perfectly interpolates
the training data, and that the predictive uncertainty increases as we move further away from
the observed data.
One application of noise-free GP regression is as a computationally cheap proxy for the
behavior of a complex simulator, such as a weather forecasting program. (If the simulator isstochastic, we can deﬁne fto be its mean output; note that there is still no observation noise.)
One can then estimate the effect of changing simulator parameters by examining their effecton the GP’s predictions, rather than having to run the simulator many times, which may beprohibitively slow. This strategy is known as DACE, which stands for design and analysis ofcomputer experiments (Santner et al. 2003).
15.2.2 Predictions using noisy observations
Now let us consider the case where what we observe is a noisy version of the underlyingfunction, y=f(x)+/epsilon1,w h e r e/epsilon1∼N(0,σ
2
y). In this case, the model is not required to
interpolate the data, but it must come “close” to the observed data. The covariance of theobserved noisy responses is
cov[y
p,yq]=κ(xp,xq)+σ2
yδpq (15.11)
whereδpq=I(p=q). In other words
cov[y|X]=K+σ2
yIN/definesKy (15.12)
The second matrix is diagonal because we assumed the noise terms were independently addedto each observation.
The joint density of the observed data and the latent, noise-free function on the test points
is given by
/parenleftbiggy
f
∗/parenrightbigg
∼N/parenleftbigg
0,/parenleftbiggKyK∗
KT
∗K∗∗/parenrightbigg/parenrightbigg
(15.13)
where we are assuming the mean is zero, for notational simplicity. Hence the posterior predictive
density is
p(f∗|X∗,X,y)=N (f∗|μ∗,Σ∗) (15.14)
μ∗=KT
∗K−1
yy (15.15)
Σ∗=K∗∗−KT∗K−1
yK∗ (15.16)
In the case of a single test input, this simpliﬁes as follows
p(f∗|x∗,X,y)=N (f∗|kT∗K−1
yy,k∗∗−kT∗K−1
yk∗) (15.17)
wherek∗=[κ(x∗,x1),...,κ(x∗,xN)]andk∗∗=κ(x∗,x∗). Another way to write the
posterior mean is as follows:
f∗=kT∗K−1
yy=N/summationdisplay
i=1αiκ(xi,x∗) (15.18)
whereα=K−1
yy. We will revisit this expression later.
15.2. GPs for regression 519
−8 −6 −4 −2 0 2 4 6 8−3−2−10123
(a)−8 −6 −4 −2 0 2 4 6 8−3−2−10123
(b)
−8 −6 −4 −2 0 2 4 6 8−3−2−10123
(c)
Figure 15.3 Some 1d GPs with SE kernels but different hyper-parameters ﬁt to 20 noisy observations. The
kernel has the form in Equation 15.19. The hyper-parameters (/lscript,σf,σy)are as follows: (a) (1,1,0.1) (b) (0.3,
0.1.08, 0.00005), (c) (3.0, 1.16, 0.89). Based on Figure 2.5 of (Rasmussen and Williams 2006). Figure generated
bygprDemoChangeHparams , written by Carl Rasmussen.
15.2.3 Effect of the kernel parameters
The predictive performance of GPs depends exclusively on the suitability of the chosen kernel.
Suppose we choose the following squared-exponential (SE) kernel for the noisy observations
κy(xp,xq)=σ2
fexp(−1
2/lscript2(xp−xq)2)+σ2
yδpq (15.19)
Here/lscriptis the horizontal scale over which the function changes, σ2
fcontrols the vertical scale of
the function, and σ2
yis the noise variance. Figure 15.3 illustrates the effects of changing these
parameters. We sampled 20 noisy data points from the SE kernel using (/lscript,σf,σy)=( 1,1,0.1),
and then made predictions various parameters, conditional on the data. In Figure 15.3(a), we use(/lscript,σ
f,σy)=( 1,1,0.1), and the result is a good ﬁt. In Figure 15.3(b), we reduce the length scale
to/lscript=0.3(the other parameters were optimized by maximum (marginal) likelihood, a technique
we discuss below); now the function looks more “wiggly”. Also, the uncertainty goes up faster,since the effective distance from the training points increases more rapidly. In Figure 15.3(c), weincrease the length scale to /lscript=3; now the function looks smoother.
520 Chapter 15. Gaussian processes
−202
−202−2−1012
input x1 input x2output y
(a)−202
−202−2−1012
input x1 input x2output y
(b)
−202
−202−2−1012
input x1 input x2output y
(c)
Figure 15.4 Some 2d functions sampled from a GP with an SE kernel but different hyper-parameters. The
kernel has the form in Equation 15.20 where (a) M=I, (b)M= diag(1 ,3)−2, (c)M=( 1,−1;−1,1)+
diag(6,6)−2. Based on Figure 5.1 of (Rasmussen and Williams 2006). Figure generated by gprDemoArd ,
written by Carl Rasmussen.
We can extend the SE kernel to multiple dimensions as follows:
κy(xp,xq)=σ2
fexp(−1
2(xp−xq)TM(xp−xq))+σ2
yδpq (15.20)
We can deﬁne the matrix Min several ways. The simplest is to use an isotropic matrix,
M1=/lscript−2I. See Figure 15.4(a) for an example. We can also endow each dimension with its
own characteristic length scale, M2=d i a g (/lscript)−2. If any of these length scales become large,
the corresponding feature dimension is deemed “irrelevant”, just as in ARD (Section 13.7). In
Figure 15.4(b), we use M=M2with/lscript=( 1,3), so the function changes faster along the x1
direction than the x2direction.
We can also create a matrix of the form M3=ΛΛT+diag(/lscript)−2,w h e r eΛis aD×Kmatrix,
whereK<D. (Rasmussen and Williams 2006, p107) calls this the factor analysis distance
function, by analogy to the fact that factor analysis (Section 12.1) approximates a covariancematrix as a low rank matrix plus a diagonal matrix. The columns of Λcorrespond to relevant
directions in input space. In Figure 15.4(c), we use /lscript= (6;6)andΛ=( 1 ;−1), so the function
changes mostly rapidly in the direction which is perpendicular to (1,1).
15.2. GPs for regression 521
15.2.4 Estimating the kernel parameters
To estimate the kernel parameters, we could use exhaustive search over a discrete grid of values,
with validation loss as an objective, but this can be quite slow. (This is the approach used totune kernels used by SVMs.) Here we consider an empirical Bayes approach, which will allow usto use continuous optimization methods, which are much faster. In particular, we will maximizethe marginal likelihood
1
p(y|X)=/integraldisplay
p(y|f,X)p(f|X)df (15.21)
Sincep(f|X)=N(f|0,K), andp(y|f)=/producttext
iN(yi|fi,σ2
y), the marginal likelihood is given by
logp(y|X)=l o g N(y|0,Ky)=−1
2yK−1
yy−1
2log|Ky|−N
2log(2π) (15.22)
The ﬁrst term is a data ﬁt term, the second term is a model complexity term, and the third termis just a constant. To understand the tradeoff between the ﬁrst two terms, consider a SE kernelin 1D, as we vary the length scale /lscriptand hold σ
2
yﬁxed. Let J(/lscript)=−logp(y|X,/lscript). For short
length scales, the ﬁt will be good, so yTK−1
yywill be small. However, the model complexity
will be high: Kwill be almost diagonal (as in Figure 14.3, top right), since most points will not
be considered “near” any others, so the log|Ky|will be large. For long length scales, the ﬁt will
be poor but the model complexity will be low: Kwill be almost all 1’s (as in Figure 14.3, bottom
right), so log|Ky|will be small.
We now discuss how to maximize the marginal likelhiood. Let the kernel parameters (also
called hyper-parameters) be denoted by θ. One can show that
∂
∂θjlogp(y|X)=1
2yTK−1
y∂Ky
∂θjK−1
yy−1
2tr(K−1
y∂Ky
∂θj) (15.23)
=1
2tr/parenleftbigg
(ααT−K−1
y)∂Ky
∂θj/parenrightbigg
(15.24)
whereα=K−1
yy. It takes O(N3)time to compute K−1
y, and then O(N2)time per hyper-
parameter to compute the gradient.
The form of∂Ky
∂θjdepends on the form of the kernel, and which parameter we are taking
derivatives with respect to. Often we have constraints on the hyper-parameters, such as σ2
y≥0.
In this case, we can deﬁne θ= log(σ2
y), and then use the chain rule.
Given an expression for the log marginal likelihood and its derivative, we can estimate the
kernel parameters using any standard gradient-based optimizer. However, since the objective isnot convex, local minima can be a problem, as we illustrate below.
15.2.4.1 Example
ConsiderFigure15.5. WeusetheSEkernelinEquation15.19with σ
2
f=1, andplot logp(y|X,/lscript,σ2
y)
(whereXandyare the 7 data points shown in panels b and c) as we vary /lscriptandσ2
y. The two
1. The reason it is called the marginal likelihood, rather than just likelihood, is because we have marginalized out the
latent Gaussian vector f. This moves us up one level of the Bayesian hierarchy, and reduces the chances of overﬁtting
(the number of kernel parameters is usually fairly small compared to a standard parametric model).
522 Chapter 15. Gaussian processes
10010110−1100
characteristic len gthscalenoise standard deviation
(a)−5 0 5−2−1012
input, xoutput, y
(b)
−5 0 5−2−1012
input, xoutput, y
(c)
Figure 15.5 Illustration of local minima in the marginal likelihood surface. (a) We plot the log marginal
likelihood vs σ2
yand/lscript, for ﬁxed σ2
f=1, using the 7 data points shown in panels b and c. (b) The function
corresponding to the lower left local minimum, (/lscript,σ2
n)≈(1,0.2). This is quite “wiggly” and has low
noise. (c) The function corresponding to the top right local minimum, (/lscript,σ2
n)≈(10,0.8). This is quite
smooth and has high noise. The data was generated using (/lscript,σ2
n)=( 1,0.1). Source: Figure 5.5 of
(Rasmussen and Williams 2006). Figure generated by gprDemoMarglik , written by Carl Rasmussen.
local optima are indicated by +. The bottom left optimum corresponds to a low-noise, short-
length scale solution (shown in panel b). The top right optimum corresponds to a high-noise,long-length scale solution (shown in panel c). With only 7 data points, there is not enoughevidence to conﬁdently decide which is more reasonable, although the more complex model(panel b) has a marginal likelihood that is about 60% higher than the simpler model (panel c).With more data, the MAP estimate should come to dominate.
Figure 15.5 illustrates some other interesting (and typical) features. The region where σ
2
y≈1
(top of panel a) corresponds to the case where the noise is very high; in this regime, the marginallikelihood is insensitive to the length scale (indicated by the horizontal contours), since all thedata is explained as noise. The region where /lscript≈0.5(left hand side of panel a) corresponds to
the case where the length scale is very short; in this regime, the marginal likelihood is insensitiveto the noise level, since the data is perfectly interpolated. Neither of these regions would bechosen by a good optimizer.
15.2. GPs for regression 523
log(length−scale)log(magn itude)
z1z2
2.8 3 3.2 3.4−3−2.5−2−1.5−1−0.5
(a)log(length−scale)log(magn itude)
2.8 3 3.2 3.4−3−2.5−2−1.5−1−0.5
(b)
log(length−scale)log(magn itude)
2.8 3 3.2 3.4−3−2.5−2−1.5−1−0.5
(c)
Figure 15.6 Three different approximations to the posterior over hyper-parameters: grid-based, Monte
Carlo, and central composite design. Source: Figure 3.2 of (Vanhatalo 2010). Used with kind permission
of Jarno Vanhatalo.
15.2.4.2 Bayesian inference for the hyper-parameters
An alternative to computing a point estimate of the hyper-parameters is to compute their poste-
rior. Letθrepresent all the kernel parameters, as well as σ2
y. If the dimensionality of θis small,
we can compute a discrete grid of possible values, centered on the MAP estimate ˆθ(computed
as above). We can then approximate the posterior over the latent variables using
p(f|D)∝S/summationdisplay
s=1p(f|D,θs)p(θs|D)δs (15.25)
whereδsdenotes the weight for grid point s.
In higher dimensions, a regular grid suffers from the curse of dimensionality. An obvious
alternative is Monte Carlo, but this can be slow. Another approach is to use a form of quasi-Monte Carlo, whereby we place grid points at the mode, and at a distance ±1sd from the mode
along each dimension, for a total of 2|θ|+1points. This is called a central composite design
(Rue et al. 2009). (This is also used in the unscented Kalman ﬁlter, see Section 18.5.2.) To makethis Gaussian-like approximation more reasonable, we often log-transform the hyper-parameters.See Figure 15.6 for an illustration.
524 Chapter 15. Gaussian processes
15.2.4.3 Multiple kernel learning
A quite different approach to optimizing kernel parameters known as multiple kernel learning.
The idea is to deﬁne the kernel as a weighted sum of base kernels, κ(x,x/prime)=/summationtext
jwjκj(x,x/prime),
and then to optimize the weights wjinstead of the kernel parameters themselves. This is
particularly useful if we have different kinds of data which we wish to fuse together. See
e.g., (Rakotomamonjy et al. 2008) for an approach based on risk-minimization and convexoptimization, and (Girolami and Rogers 2005) for an approach based on variational Bayes.
15.2.5 Computational and numerical issues *
The predictive mean is given by f∗=kT
∗K−1
yy. For reasons of numerical stability, it is unwise
to directly invert Ky. A more robust alternative is to compute a Cholesky decomposition,
Ky=LLT. We can then compute the predictive mean and variance, and the log marginal
likelihood, as shown in the pseudo-code in Algorithm 6 (based on (Rasmussen and Williams
2006, p19)). It takes O(N3)time to compute the Cholesky decomposition, and O(N2)time to
solve forα=K−1
yy=L−TL−1y. We can then compute the mean using kT
∗αinO(N)time
and the variance using k∗∗−kT∗L−TL−1k∗inO(N2)time for each test case.
An alternative to Cholesky decomposition is to solve the linear system Kyα=yusing
conjugate gradients (CG). If we terminate this algorithm after kiterations, it takes O(kN2)time.
If we run for k=N, it gives the exact solution in O(N3)time. Another approach is to
approximate the matrix-vector multiplies needed by CG using the fast Gauss transform. (Yang
et al. 2005); however, this doesn’t scale to high-dimensional inputs. See also Section 15.6 for adiscussion of other speedup techniques.
Algorithm 15.1: GP regression
1L=cholesky( K+σ2
yI);
2α=LT\(L\y);
3E[f∗]=kT
∗α;
4v=L\k∗;
5var[f∗]=κ(x∗,x∗)−vTv;
6logp(y|X)=−1
2yTα−/summationtext
ilogLii−N
2log(2π)
15.2.6 Semi-parametric GPs *
Sometimes it is useful to use a linear model for the mean of the process, as follows:
f(x)=βTφ(x)+r(x) (15.26)
wherer(x)∼GP(0,κ(x,x/prime))models the residuals. This combines a parametric and a non-
parametric model, and is known as a semi-parametric model.
If we assume β∼N(b,B), we can integrate these parameters out to get a new GP (O’Hagan
1978):
f(x)∼GP/parenleftbig
φ(x)Tb,κ(x,x/prime)+φ(x)TBφ(x/prime)/parenrightbig
(15.27)
15.3. GPs meet GLMs 525
logp(yi|fi)∂
∂filogp(yi|fi)∂2
∂f2
ilogp(yi|fi)
logsigm(y ifi)ti−πi −πi(1−πi)
logΦ(y ifi)yiφ(fi)
Φ(yifi)−φ2
i
Φ(yifi)2−yifiφ(fi)
Φ(yifi)
Table 15.1 Likelihood, gradient and Hessian for binary logistic/ probit GP regression. We assume yi∈
{−1,+1}and deﬁne ti=(yi+1)/2∈{0,1}andπi= sigm(f i)for logistic regression, and πi=Φ (fi)
for probit regression. Also, φandΦare the pdf and cdf of N(0,1). From (Rasmussen and Williams 2006,
p43).
Integrating out β, the corresponding predictive distribution for test inputs X∗has the following
form (Rasmussen and Williams 2006, p28):
p(f∗|X∗,X,y)=N (f∗,cov[f∗]) (15.28)
f∗=ΦT
∗β+KT
∗K−1
y(y−Φβ) (15.29)
β=(ΦTK−1
yΦ+B−1)−1(ΦK−1
yy+B−1b) (15.30)
cov[f∗]=K ∗∗−KT∗K−1
yK∗+RT(B−1+ΦK−1
yΦT)−1R (15.31)
R=Φ∗−ΦK−1
yΦ∗ (15.32)
The predictive mean is the output of the linear model plus a correction term due to the GP, and
the predictive covariance is the usual GP covariance plus an extra term due to the uncertaintyinβ.
15.3 GPs meet GLMs
In this section, we extend GPs to the GLM setting, focussing on the classiﬁcation case. As withBayesian logistic regression, the main difficulty is that the Gaussian prior is not conjugate tothe bernoulli/ multinoulli likelihood. There are several approximations one can adopt: Gaussianapproximation (Section 8.4.3), expectation propagation (Kuss and Rasmussen 2005; Nickisch andRasmussen 2008), variational (Girolami and Rogers 2006; Opper and Archambeau 2009), MCMC(Neal 1997; Christensen et al. 2006), etc. Here we focus on the Gaussian approximation, since itis the simplest and fastest.
15.3.1 Binary classiﬁcation
In the binary case, we deﬁne the model as p(yi|xi)=σ(yif(xi)), where, following (Rasmussen
and Williams 2006), we assume yi∈{ −1,+1}, and we let σ(z) = sigm(z )(logistic regression)
orσ(z)=Φ (z)(probit regression). As for GP regression, we assume f∼GP(0,κ).
15.3.1.1 Computing the posterior
Deﬁne the log of the unnormalized posterior as follows:
/lscript(f)=l o gp(y|f)+logp(f|X)=l o g p(y|f)−1
2fTK−1f−1
2log|K|−N
2log2π(15.33)
526 Chapter 15. Gaussian processes
LetJ(f)/defines−/lscript(f)be the function we want to minimize. The gradient and Hessian of this are
given by
g=−∇logp(y|f)+K−1f (15.34)
H=−∇∇logp(y|f)+K−1=W+K−1(15.35)
Note that W/defines−∇∇logp(y|f)is a diagonal matrix because the data are iid (conditional on
f). Expressions for the gradient and Hessian of the log likelihood for the logit and probit case
are given in Sections 8.3.1 and 9.4.1, and summarized in Table 15.1.
We can use IRLS to ﬁnd the MAP estimate. The update has the form
fnew=f−H−1g=f+(K−1+W)−1(∇logp(y|f)−K−1f) (15.36)
=(K−1+W)−1(Wf+∇logp(y|f)) (15.37)
At convergence, the Gaussian approximation of the posterior takes the following form:
p(f|X,y)≈N(ˆf,(K−1+W)−1) (15.38)
15.3.1.2 Computing the posterior predictive
We now compute the posterior predictive. First we predict the latent function at the test case
x∗. For the mean we have
E[f∗|x∗,X,y]=/integraldisplay
E[f∗|f,x∗,X,y]p(f|X,y)df (15.39)
=/integraldisplay
kT
∗K−1fp(f|X,y)df (15.40)
=kT∗K−1E[f|X,y]≈kT∗K−1ˆf (15.41)
where we used Equation 15.8 to get the mean of f∗given noise-free f.
To compute the predictive variance, we use the rule of iterated variance:
var[f∗]=E [var[f∗|f]]+v ar[ E[f∗|f]] (15.42)
where all probabilities are conditioned on x∗,X,y. From Equation 15.9 we have
E[var[f∗|f]] =E/bracketleftbig
k∗∗−kT∗K−1k∗/bracketrightbig
=k∗∗−kT∗K−1k∗ (15.43)
From Equation 15.9 we have
var[E[f∗|f] ]=v a r/bracketleftbig
k∗K−1f/bracketrightbig
=kT∗K−1cov[f]K−1k∗ (15.44)
Combining these we get
var[f∗]=k ∗∗−kT∗(K−1−K−1cov[f]K−1)k∗ (15.45)
From Equation 15.38 we have cov[f]≈(K−1+W)−1. Using the matrix inversion lemma we
get
var[f∗]≈k∗∗−kT∗K−1k∗+kT∗K−1(K−1+W)−1K−1k∗ (15.46)
=k∗∗−kT∗(K+W−1)−1k∗ (15.47)
15.3. GPs meet GLMs 527
So in summary we have
p(f∗|x∗,X,y)=N(E[f∗],var[f∗]) (15.48)
To convert this in to a predictive distribution for binary responses, we use
π∗=p(y∗=1|x∗,X,y)≈/integraldisplay
σ(f∗)p(f∗|x∗,X,y)df∗ (15.49)
This can be approximated using any of the methods discussed in Section 8.4.4, where we
discussed Bayesian logistic regression. For example, using the probit approximation of Sec-tion 8.4.4.2, we have π
∗≈sigm(κ(v)E[f∗]),w h e r ev = var[f ∗]andκ2(v)=( 1+ πv/8)−1.
15.3.1.3 Computing the marginal likelihood
We need the marginal likelihood in order to optimize the kernel parameters. Using the Laplaceapproximation in Equation 8.54 we have
logp(y|X)≈/lscript(ˆf)−1
2log|H|+const (15.50)
Hence
logp(y|X)≈logp(y|ˆf)−1
2ˆfTK−1ˆf−1
2log|K|−1
2log|K−1+W| (15.51)
Computing the derivatives∂logp(y|X,θ)
∂θjis more complex than in the regression case, since ˆf
andW, as well as K, depend on θ. Details can be found in (Rasmussen and Williams 2006,
p125).
15.3.1.4 Numerically stable computation *
To implement the above equations in a numerically stable way, it is best to avoid inverting K
orW. (Rasmussen and Williams 2006, p45) suggest deﬁning
B=IN+W1
2KW1
2 (15.52)
which has eigenvalues bounded below by 1 (because of the I) and above by 1+N
4maxijKij
(becausewii=πi(1−π)≤0.25), and hence can be safely inverted.
One can use the matrix inversion lemma to show
(K−1+W)−1=K−KW1
2B−1W1
2K (15.53)
Hence the IRLS update becomes
fnew=(K−1+W)−1(Wf+∇logp(y|f))/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
b(15.54)
=K(I−W1
2B−1W1
2K)b (15.55)
=K(b−W1
2LT\(L\(W1
2Kb)))/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
a(15.56)
528 Chapter 15. Gaussian processes
whereB=LLTis a Cholesky decomposition of B. The ﬁtting algorithm takes in O(TN3)
time and O(N2)space, where Tis the number of Newton iterations.
At convergence we have a=K−1ˆf, so we can evaluate the log marginal likelihood (Equa-
tion 15.51) using
logp(y|X)=l o gp(y|ˆf)−1
2aTˆf−/summationdisplay
ilogLii (15.57)
where we exploited the fact that
|B|=|K||K−1+W|=|IN+W1
2KW1
2| (15.58)
We now compute the predictive distribution. Rather than using E[f∗]=kT
∗K−1ˆf, we exploit
the fact that at the mode, ∇/lscript=0,s oˆf=K(∇logp(y|ˆf)). Hence we can rewrite the predictive
mean as follows:2
E[f∗]=kT
∗∇logp(y|ˆf) (15.59)
To compute the predictive variance, we exploit the fact that
(K+W−1)−1=W1
2W−1
2(K+W−1)−1W−1
2W1
2=W1
2B−1W1
2 (15.60)
to get
var[f∗]=k∗∗−kT∗W1
2(LLT)−1W1
2k∗=k∗∗−vTv (15.61)
wherev=L\(W1
2k∗). We can then compute π∗.
The whole algorithm is summarized in Algorithm 16, based on (Rasmussen and Williams 2006,
p46). Fitting takes O(N3)time, and prediction takes O(N2N∗)time, where N∗is the number
of test cases.
15.3.1.5 Example
In Figure 15.7, we show a synthetic binary classiﬁcation problem in 2d. We use an SE kernel. On
the left, we show predictions using hyper-parameters set by hand; we use a short length scale,hence the very sharp turns in the decision boundary. On the right, we show the predictionsusing the learned hyper-parameters; the model favors a more parsimonious explanation of thedata.
15.3.2 Multi-class classiﬁcation
In this section, we consider a model of the form p(yi|xi)=C a t ( yi|S(fi)),w h e r e fi=
(fi1,...,f iC), and we assume f.c∼GP(0,κc). Thus we have one latent function per class,
which are a priori independent, and which may use different kernels. As before, we will usea Gaussian approximation to the posterior. (A similar model, but using the multinomial probitfunction instead of the multinomial logit, is described in (Girolami and Rogers 2006).)
2. We see that training points that are well-predicted by the model, for which ∇ilogp(yi|fi)≈0, do not contribute
strongly to the prediction at test points; this is similar to the behavior of support vectors in an SVM (see Section 14.5).
15.3. GPs meet GLMs 529
Algorithm 15.2: GP binary classiﬁcation using Gaussian approximation
1// First compute MAP estimate using IRLS;
2f=0;
3repeat
4W=−∇∇logp(y|f);
5B=IN+W1
2KW1
2;
6L=cholesky(B);
7b=Wf+∇logp(y|f);
8a=b−W1
2LT\(L\(W1
2Kb));
9f=Ka;
10until converged ;
11logp(y|X)=l o gp(y|f)−1
2aTf−/summationtext
ilogLii;
12// Now perform prediction ;
13E[f∗]=kT
∗∇logp(y|f);
14v=L\(W1
2k∗);
15var[f∗]=k∗∗−vTv;
16p(y∗=1 )=/integraltext
sigm(z)N(z|E[f∗],var[f∗])dz;
SE kernel, l=0.500, σ2=10.000
−4 −3 −2 −1 0 1 2 3 4−4−3−2−101234
0.10.20.30.40.50.60.70.80.9
(a)SE kernel, l=1.280, σ2=14.455
−4 −3 −2 −1 0 1 2 3 4−4−3−2−101234
0.10.20.30.40.50.60.70.80.9
(b)
Figure 15.7 Contours of the posterior predictive probability for the red circle class generated by a GP with
an SE kernel. Thick black line is the decision boundary if we threshold at a probability of 0.5. (a) Manual
parameters, short length scale. (b) Learned parameters, long length scale. Figure generated by gpcDemo2d ,
based on code by Carl Rasmussen.
530 Chapter 15. Gaussian processes
15.3.2.1 Computing the posterior
The unnormalized log posterior is given by
/lscript(f)=−1
2fTK−1f+yTf−N/summationdisplay
i=1log/parenleftBiggC/summationdisplay
c=1expfic/parenrightBigg
−1
2log|K|−CN
2log2π(15.62)
where
f=(f11,...,f N1,f12,...,f N2,···,f1C,...,f NC)T(15.63)
andyis a dummy encoding of the yi’s which has the same layout as f. Also,Kis a block
diagonal matrix containing Kc,w h e r eKc=[κc(xi,xj)]models the correlation of the c’th
latent function.
The gradient and Hessian are given by
∇/lscript=−K−1f+y−π (15.64)
∇∇/lscript=−K−1−W (15.65)
whereW/definesdiag(π)−ΠΠT,w h e r eΠis aCN×Nmatrix obtained by stacking diag(π :c)
vertically. (Compare these expressions to standard logistic regression in Section 8.3.7.)
We can use IRLS to compute the mode. The Newton step has the form
fnew=(K−1+W)−1(Wf+y−π) (15.66)
Naively implementing this would take O(C3N3)time. However, we can reduce this to O(CN3),
as shown in (Rasmussen and Williams 2006, p52).
15.3.2.2 Computing the posterior predictive
We can compute the posterior predictive in a manner analogous to Section 15.3.1.2. For the
mean of the latent response we have
E[f∗c]=kc(x∗)TK−1
cˆfc=kc(x∗)T(yc−ˆπc) (15.67)
We can put this in vector form by writing
E[f∗]=Q∗T(y−ˆπ) (15.68)
where
Q∗=⎛
⎜⎝k1(x∗)...0
...
0...kC(x∗)⎞
⎟⎠ (15.69)
Using a similar argument to Equation 15.47, we can show that the covariance of the latent
response is given by
cov[f∗]=Σ +QT
∗K−1(K−1+W)−1K−1Q∗ (15.70)
=d i a g ( k(x∗,x∗))−QT∗(K+W−1)−1Q∗ (15.71)
15.3. GPs meet GLMs 531
whereΣis aC×Cdiagonal matrix with Σcc=κc(x∗,x∗)−kT
c(x∗)K−1
ckc(x∗), and
k(x∗,x∗)=[κc(x∗,x∗)].
To compute the posterior predictive for the visible response, we need to use
p(y|x∗,X,y)≈/integraldisplay
Cat(y|S(f∗))N(f∗|E[f∗],cov[f∗])df∗ (15.72)
We can use any of deterministic approximations to the softmax function discussed in Sec-
tion 21.8.1.1 to compute this. Alternatively, we can just use Monte Carlo.
15.3.2.3 Computing the marginal likelihood
Using arguments similar to the binary case, we can show that
logp(y|X)≈−1
2ˆfTK−1ˆf+yTˆf−N/summationdisplay
i=1log/parenleftBiggC/summationdisplay
c=1expˆfic/parenrightBigg
−1
2log|ICN+W1
2KW1
2|(15.73)
This can be optimized numerically in the usual way.
15.3.2.4 Numerical and computational issues
One can implement model ﬁtting in O(TCN3)time and O(CN2)space, where Tis the
number of Newton iterations, using the techniques described in (Rasmussen and Williams 2006,p50). Prediction takes O(CN
3+CN2N∗)time, where N∗is the number of test cases.
15.3.3 GPs for Poisson regression
In this section, we illustrate GPs for Poisson regression. An interesting application of this is tospatialdisease mapping. For example, (Vanhatalo et al. 2010) discuss the problem of modeling
the relative risk of heart attack in different regions in Finland. The data consists of the heartattacks in Finland from 1996-2000 aggregated into 20km x 20km lattice cells. The model hasthe following form:
y
i∼Poi(eiri) (15.74)
whereeiis the known expected number of deaths (related to the population of cell iand the
overall death rate), and riis therelative risk of celliwhich we want to infer. Since the
data counts are small, we regularize the problem by sharing information with spatial neighbors.Hence we assume f/defineslog(r)∼GP(0,κ), where we use a Matern kernel with ν=3/2, and a
length scale and magnitude that are estimated from data.
Figure 15.8 gives an example of the kind of output one can obtain from this method, based
on data from 911 locations. On the left we plot the posterior mean relative risk (RR), and on theright, the posterior variance. We see that the RR is higher in Eastern Finland, which is consistentwith other studies. We also see that the variance in the North is higher, since there are fewerpeople living there.
532 Chapter 15. Gaussian processes
0 10 20 300102030405060Posterior mean of the relative risk, FIC
  
0.70.80.911.11.21.31.4
(a)0 10 20 300102030405060Posterior variance of the relative risk, FIC
  
0.0050.010.0150.020.0250.030.035
(b)
Figure 15.8 We show the relative risk of heart disease in Finland using a Poisson GP. Left: posterior mean.
Right: posterior variance. Figure generated by gpSpatialDemoLaplace , written by Jarno Vanhatalo.
15.4 Connection with other methods
There are variety of other methods in statistics and machine learning that are closely related to
GP regression/ classiﬁcation. We give a brief review of some of these below.
15.4.1 Linear models compared to GPs
Consider Bayesian linear regression for D-dimensional features, where the prior on the weights
isp(w)=N(0,Σ). The posterior predictive distribution is given by the following;
p(f∗|x∗,X,y)=N(μ,σ2) (15.75)
μ=1
σ2yxT
∗A−1XTy (15.76)
σ2=xT
∗A−1x∗ (15.77)
whereA=σ−2
yXTX+Σ−1. One can show that we can rewrite the above distribution as
follows
μ=xT
∗ΣXT(K+σ2
yI)−1y (15.78)
σ2=xT
∗Σx∗−xT
∗ΣXT(K+σ2I)−1XΣx∗ (15.79)
where we have deﬁned K=XΣXT, which is of size N×N. Since the features only ever
appear in the form XΣXT,xT
∗ΣXTorxT
∗Σx∗, we can kernelize the above expression by
deﬁningκ(x,x/prime)=xTΣx/prime.
Thus we see that Bayesian linear regression is equivalent to a GP with covariance function
κ(x,x/prime)=xTΣx/prime. Note, however, that this is a degenerate covariance function, since it has at
mostDnon-zero eigenvalues. Intuitively this reﬂects the fact that the model can only represent
a limited number of functions. This can result in underﬁtting, since the model is not ﬂexible
enough to capture the data. What is perhaps worse, it can result in overconﬁdence, since the
15.4. Connection with other methods 533
model’s prior is so impoverished that its posterior will become too concentrated. So not only is
the model wrong, it think it’s right!
15.4.2 Linear smoothers compared to GPs
Alinear smoother is a regression function which is a linear function of the training outputs:
ˆf(x∗)=/summationdisplay
iwi(x∗)yi (15.80)
wherewi(x∗)is called the weight function (Silverman 1984). (Do not confuse this with a linear
model, where the output is a linear function of the input vector.)
There are a variety of linear smoothers, such as kernel regression (Section 14.7.4), locally
weighted regression (Section 14.7.5), smoothing splines (Section 15.4.6), and GP regression. To seethat GP regession is a linear smoother, note that the mean of the posterior predictive distributiono faG Pi sg i v e nb y
f(x∗)=kT
∗(K+σ2
yIN)−1y=N/summationdisplay
i=1yiwi(x∗) (15.81)
wherewi(x∗)=[ (K+σ2
yIN)−1k∗]i.
In kernel regression, we derive the weight function from a smoothing kernel rather than a
Mercer kernel, so it is clear that the weight function will then have local support. In the case
of a GP, things are not as clear, since the weight function depends on the inverse of K.F o r
certain GP kernel functions, we can analytically derive the form of wi(x); this is known as the
equivalent kernel (Silverman 1984). One can show that/summationtextN
i=1wi(x∗)=1, although we may
havewi(x∗)<0, so we are computing a linear combination but not a convex combination of
theyi’s. More interestingly, wi(x∗)is a local function, even if the original kernel used by the GP
is not local. Futhermore the effective bandwidth of the equivalent kernel of a GP automatically
decreases as the sample size Nincreases, whereas in kernel smoothing, the bandwidth hneeds
to be set by hand to adapt to N. See e.g., (Rasmussen and Williams 2006, Sec 2.6,Sec 7.1) for
details.
15.4.2.1 Degrees of freedom of linear smoothers
It is clear why this method is called “linear”, but why is it called a “smoother”? This is bestexplained in terms of GPs. Consider the prediction on the training set:
f=K(K+σ2
y)−1y (15.82)
Now letKhave the eigendecomposition K=/summationtextN
i=1λiuiuT
i. SinceKis real and symmetric
positive deﬁnite, the eigenvalues λiare real and non-negative, and the eigenvectors uiare
orthonormal. Now let y=/summationtextN
i=1γiui,w h e r eγi=uT
iy. Then we can rewrite the above
equation as follows:
f=N/summationdisplay
i=1γiλi
λi+σ2yui (15.83)
534 Chapter 15. Gaussian processes
This is the same as Equation 7.47, except we are working with the eigenvectors of the Gram
matrixKinstead of the data matrix X. In any case, the interpretation is similar: ifλi
λi+σ2
y/lessmuch1,
then the corresponding basis function uiwill not have much inﬂuence. Consequently the high-
frequency components in yare smoothed out. The effective degrees of freedom of the linear
smoother is deﬁned as
dof/definestr(K(K+σ2
yI)−1)=N/summationdisplay
i=1λi
λi+σ2y(15.84)
This speciﬁes how “wiggly” the curve is.
15.4.3 SVMs compared to GPs
We saw in Section 14.5.2 that the SVM objective for binary classiﬁcation is given by Equation 14.57
J(w)=1
2||w||2+CN/summationdisplay
i=1(1−yifi)+ (15.85)
We also know from Equation 14.59 that the optimal solution has the form w=/summationtext
iαixi,
so||w||2=/summationtext
i,jαiαjxT
ixj. Kernelizing we get ||w||2=αKα. From Equation 14.61, and
absorbing the ˆw0term into one of the kernels, we have f=Kα,s o||w||2=fTK−1f. Hence
the SVM objective can be rewritten as
J(f)=1
2fTf+CN/summationdisplay
i=1(1−yifi)+ (15.86)
Compare this to MAP estimation for GP classiﬁer:
J(f)=1
2fTf−N/summationdisplay
i=1logp(yi|fi) (15.87)
It is tempting to think that we can “convert” an SVM into a GP by ﬁguring out what likelihood
would be equivalent to the hinge loss. However, it turns out there is no such likelihood (Sollich2002), although there is a pseudo-likelihood that matches the SVM (see Section 14.5.5).
From Figure 6.7 we saw that the hinge loss and the logistic loss (as well as the probit loss)
are quite similar to each other. The main difference is that the hinge loss is strictly 0 for errorslarger than 1. This gives rise to a sparse solution. In Section 14.3.2, we discussed other waysto derive sparse kernel machines. We discuss the connection between these methods and GPsbelow.
15.4.4 L1VM and RVMs compared to GPs
Sparse kernel machines are just linear models with basis function expansion of the form φ(x)=
[κ(x,x1),...,κ(x,xN)]. From Section 15.4.1, we know that this is equivalent to a GP with the
following kernel:
κ(x,x/prime)=D/summationdisplay
j=11
αjφj(x)φj(x/prime) (15.88)
15.4. Connection with other methods 535
wherep(w)=N(0,diag(α−1
j)). This kernel function has two interesting properties. First, it
is degenerate, meaning it has at most Nnon-zero eigenvalues, so the joint distribution p(f,f∗)
will be highly constrained. Second, the kernel depends on the training data. This can cause the
model to be overconﬁdent when extrapolating beyond the training data. To see this, considera pointx
∗far outside the convex hull of the data. All the basis functions will have values
close to 0, so the prediction will back off to the mean of the GP. More worryingly, the variancewill back off to the noise variance. By contrast, when using a non-degenerate kernel function,the predictive variance increases as we move away from the training data, as desired. See(Rasmussen and Quiñonero-Candela 2005) for further discussion.
15.4.5 Neural networks compared to GPs
In Section 16.5, we will discuss neural networks, which are a nonlinear generalization of GLMs.In the binary classiﬁcation case, a neural network is deﬁned by a logistic regression modelapplied to a logistic regression model:
p(y|x,θ)=B e r/parenleftbig
y|sigm/parenleftbig
w
Tsigm(Vx)/parenrightbig/parenrightbig
(15.89)
It turns out there is an interesting connection between neural networks and Gaussian processes,as ﬁrst pointed out by (Neal 1996).
To explain the connection, we follow the presentation of (Rasmussen and Williams 2006, p91).
Consider a neural network for regression with one hidden layer. This has the form
p(y|x,θ)=N(y|f(x;θ),σ
2) (15.90)
where
f(x)=b+H/summationdisplay
j=1vjg(x;uj) (15.91)
wherebis the offset of bias term, vjis the output weight from hidden unit jto the response
y,ujare the inputs weights to unit jfrom the input x, andg()is the hidden unit activation
function. This is typically the sigmoid or tanh function, but can be any smooth function.
Let us use the following priors on the weights: where b∼N(0,σ2
b)v∼/producttext
jN(vj|0,σ2
w),
u∼/producttext
jp(uj)for some unspeciﬁed p(uj). Denoting all the weights by θwe have
Eθ[f(x) ]=0 (15.92)
Eθ[f(x)f(x/prime)] =σ2
b+/summationdisplay
jσ2
vEv[g(x;uj)g(x/prime;uj)] (15.93)
=σ2
b+Hσ2
vEu[g(x;u)g(x/prime;u)] (15.94)
where the last equality follows since the Hhidden units are iid. If we let σ2
vscale asω2/H
(since more hidden units will increase the input to the ﬁnal node, so we should scale downthe magnitude of the weights), then the last term becomes ω
2Eu[g(x;u)g(x/prime;u)]. This is a
sum over Hiid random variables. Assuming that gis bounded, we can apply the central limit
theorem. The result is that as H→∞, we get a Gaussian process.
536 Chapter 15. Gaussian processes
−0.5
−0.50
00.50.5
0.950.95
input, xinput, xʼ
−4 0 4−404
(a)−4 0 4−101
input, xoutput, f(x)σ = 10
σ = 3
σ = 1
(b)
Figure 15.9 (a) Covariance function κNN(x,x/prime)forσ0=1 0,σ=1 0. (b) Samples from from a GP with
this kernel, using various values of σ. Figure generated by gpnnDemo , written by Chris Williams.
If we use as activation / transfer function g(x;u)=erf(u0+/summationtextD
j=1ujxj), where erf( z)=
2/√π/integraltextz
0e−t2dt, and we choose u∼N(0,Σ), then (Williams 1998) showed that the covariance
kernel has the form
κNN(x,x/prime)=2
πsin−1/parenleftBigg
2˜xTΣ˜x/prime
/radicalbig
(1+2˜xTΣ˜x)(1+2(˜x/prime)TΣ˜x/prime)/parenrightBigg
(15.95)
where˜x=( 1,x1,...,x D). This is a true “neural network” kernel, unlike the “sigmoid” kernel
κ(x,x/prime)=t a n h ( a+bxTx/prime), which is not positive deﬁnite.
Figure 15.9(a) illustrates this kernel when D=2andΣ= diag(σ2
0,σ2). Figure 15.9(b) shows
some functions sampled from the corresponding GP. These are equivalent to functions which
are superpositions of erf( u0+ux)whereu0anduare random. As σ2increases, the variance
ofuincreases, so the function varies more quickly. Unlike the RBF kernel, functions sampled
from this kernel do not tend to 0 away from the data, but rather they tend to remain at thesame value they had at the “edge” of the data.
Now suppose we use an RBF network, which is equivalent to a hidden unit activation function
of the form g(x;u) = exp( −|x−u|
2/(2σ2
g)).I fu∼N(0,σ2
uI), one can show that the
coresponding kernel is equivalent to the RBF or SE kernel.
15.4.6 Smoothing splines compared to GPs *
Smoothing splines are a widely used non-parametric method for smoothly interpolating data
(Green and Silverman 1994). They are are a special case of GPs, as we will see. They are usuallyused when the input is 1 or 2 dimensional.
15.4.6.1 Univariate splines
The basic idea is to ﬁt a function fby minimizing the discrepancy to the data plus a smoothing
term that penalizes functions that are “too wiggly”. If we penalize the m’th derivative of the
15.4. Connection with other methods 537
function, the objective becomes
J(f)=N/summationdisplay
i=1(f(xi)−yi)2+λ/integraldisplay
(dm
dxmf(x))2dx (15.96)
One can show (Green and Silverman 1994) that the solution is a piecewise polynomial where
the polynomials have order 2m−1in the interior bins [xi−1,xi](denotedI), and order m−1
in the two outermost intervals (−∞,x1]and[xN,∞):
f(x)=m−1/summationdisplay
j=0βjxj+I(x∈I)/parenleftBiggN/summationdisplay
i=1αi(x−xi)2m−1
+/parenrightBigg
+I(x/negationslash∈I)/parenleftBiggN/summationdisplay
i=1αi(x−xi)m−1
+/parenrightBigg
(15.97)
For example, if m=2, we get the (natural) cubic spline
f(x)=β 0+β1x+I(x∈I)/parenleftBiggN/summationdisplay
i=1αi(x−xi)3
+/parenrightBigg
+I(x/negationslash∈I)/parenleftBiggN/summationdisplay
i=1αi(x−xi)+/parenrightBigg
(15.98)
which is a series of truncated cubic polynomials, whose left hand sides are located at each of the
Ntraining points. (The fact that the model is linear on the edges prevents it from extrapolating
too wildly beyond the range of the data; if we drop this requirement, we get an “unrestricted”spline.)
We can clearly ﬁt this model using ridge regression: ˆw=(Φ
TΦ+λIN)−1ΦTy, where the
columns of Φare 1,xiand(x−xi)3
+fori=2:N−1and(x−xi)+fori=1ori=N.
However, we can also derive an O(N)time method (Green and Silverman 1994, Sec 2.3.3).
15.4.6.2 Regression splines
In general, we can place the polynomials at a ﬁxed set of Klocations known as knots, denoted
ξk. The result is called a regression spline. This is a parametric model, which uses basis
function expansion of the following form (where we drop the interior/ exterior distinction for
simplicity):
f(x)=β 0+β1x+K/summationdisplay
k=1αj(x−ξk)3
+ (15.99)
Choosing the number and locations of the knots is just like choosing the number and values of
the support vectors in Section 14.3.2. If we impose an /lscript2regularizer on the regression coefficients
αj, the method is known as penalized splines. See Section 9.6.1 for a practical example of
penalized splines.
15.4.6.3 The connection with GPs
One can show (Rasmussen and Williams 2006, p139) that the cubic spline is the MAP estimateof the following function
f(x)=β
0+β1x+r(x) (15.100)
538 Chapter 15. Gaussian processes
wherep(βj)∝1(so that we don’t penalize the zero’th and ﬁrst derivatives of f), andr(x)∼
GP(0,σ2
fκsp(x,x/prime)),w h e r e
κsp(x,x/prime)/defines/integraldisplay1
0(x−u)+(x/prime−u)+du (15.101)
Note that the kernel in Equation 15.101 is rather unnatural, and indeed posterior samples from
the resulting GP are rather unsmooth. However, the posterior mode/mean is smooth. This shows
that regularizers don’t always make good priors.
15.4.6.4 2d input (thin-plate splines)
One can generalize cubic splines to 2d input by deﬁning a regularizer of the following form:
/integraldisplay/integraldisplay/bracketleftBigg/parenleftbigg∂2f(x)
∂x2
1/parenrightbigg2
+2/parenleftbigg∂2f(x)
∂x1∂x2/parenrightbigg2
+/parenleftbigg∂2f(x)
∂x22/parenrightbigg2/bracketrightBigg
dx1dx2 (15.102)
One can show that the solution has the form
f(x)=β 0+βT
1x+N/summationdisplay
i=1αiφi(x) (15.103)
whereφi(x)=η(||x−xi||), andη(z)=z2logz2. This is known as a thin plate spline. This
is equivalent to MAP estimation with a GP whose kernel is deﬁned in (Williams and Fitzgibbon
2006).
15.4.6.5 Higher-dimensional inputs
It is hard to analytically solve for the form of the optimal solution when using higher-orderinputs. However, in the parametric regression spline setting, where we forego the regularizer onf, we have more freedom in deﬁning our basis functions. One way to handle multiple inputs is
to use atensor product basis, deﬁned as the cross product of 1d basis functions. For example,
for 2d input, we can deﬁne
f(x
1,x2)=β 0+/summationdisplay
mβ1m(x1−ξ1m)++/summationdisplay
mβ2m(x2−ξ2m)+ (15.104)
+/summationdisplay
mβ12m(x1−ξ1m)+(x2−ξ2m)+ (15.105)
It is clear that for high-dimensional data, we cannot allow higher-order interactions, because
there will be too many parameters to ﬁt. One approach to this problem is to use a searchprocedure to look for useful interaction terms. This is known as MARS, which stands for“multivariate adaptive regression splines”. See Section 16.3.3 for details.
15.4.7 RKHS methods compared to GPs *
We can generalize the idea of penalizing derivatives of functions, as used in smoothing splines,to ﬁt functions with a more general notion of smoothness. Recall from Section 14.2.3 that
15.4. Connection with other methods 539
Mercer’s theorem says that any positive deﬁnite kernel function can be represented in terms of
eigenfunctions:
κ(x,x/prime)=∞/summationdisplay
i=1λiφi(x)φi(x/prime) (15.106)
Theφiform an orthormal basis for a function space:
Hk={f:f(x)=∞/summationdisplay
i=1fiφi(x),∞/summationdisplay
i=1f2
i/λi<∞} (15.107)
Now deﬁne the inner product between two functions f(x)=/summationtext∞
i=1fiφi(x)andg(x)=/summationtext∞i=1giφi(x)in this space as follows:
/angbracketleftf,g/angbracketrightH/defines∞/summationdisplay
i=1figi
λi(15.108)
In Exercise 15.1, we show that this deﬁnition implies that
/angbracketleftκ(x1,·),κ(x2,·)/angbracketrightH=κ(x1,x2) (15.109)
This is called the reproducing property, and the space of functions Hkis called a reproducing
kernel Hilbert space orRKHS.
Now consider an optimization problem of the form
J(f)=1
2σ2yN/summationdisplay
i=1(yi−f(xi))2+1
2||f||2
H (15.110)
where||f||Jis thenorm of a function:
||f||H=/angbracketleftf,f/angbracketrightH=∞/summationdisplay
i=1f2
i
λi(15.111)
The intuition is that functions that are complex wrt the kernel will have large norms, because
they will need many eigenfunctions to represent them. We want to pick a simple function thatprovides a good ﬁt to the data.
One can show (see e.g., (Schoelkopf and Smola 2002)) that the solution must have the form
f(x)=N/summationdisplay
i=1αiκ(x,xi) (15.112)
This is known as the representer theorem, and holds for other convex loss functions besides
squared error.
We can solve for the αby substituting in f(x)=/summationtextN
i=1αiκ(x,xi)and using the reproducing
property to get
J(α)=1
2σ2y|y−Kα|2+1
2αTKα (15.113)
540 Chapter 15. Gaussian processes
Minimizing wrt αwe ﬁnd
ˆα=(K+σ2
yI)−1(15.114)
and hence
ˆf(x∗)=/summationdisplay
iˆαiκ(x∗,xi)=kT
∗(K+σ2
yI)−1y (15.115)
This is identical to Equation 15.18, the posterior mean of a GP predictive distribution. Indeed,
since the mean and mode of a Gaussian are the same, we can see that linear regresson with anRKHS regularizer is equivalent to MAP estimation with a GP. An analogous statement holds forthe GP logistic regression case, which also uses a convex likelihood / loss function.
15.5 GP latent variable model
In Section 14.4.4, we discussed kernel PCA, which applies the kernel trick to regular PCA. Inthis section, we discuss a different way to combine kernels with probabilistic PCA. The resultingmethod is known as the GP-LVM, which stands for “Gaussian process latent variable model”
(Lawrence 2005).
To explain the method, we start with PPCA. Recall from Section 12.2.4 that the PPCA model is
as follows:
p(z
i)=N (zi|0,I) (15.116)
p(yi|zi,θ)=N (yi|Wz i,σ2I) (15.117)
We can ﬁt this model by maximum likelihood, by integrating out the ziand maximizing W
(andσ2). The objective is given by
p(Y|W,σ2)=( 2π)−DN/ 2|C|−N/2exp/parenleftbigg
−1
2tr(C−1YTY)/parenrightbigg
(15.118)
where C=WWT+σ2I. As we showed in Theorem 12.2.2, the MLE for this can be computed
in terms of the eigenvectors of YTY.
Now we consider the dual problem, whereby we maximize Zand integrate out W. We will
use a prior of the form p(W)=/producttext
jN(wj|0,I). The corresponding likelihood becomes
p(Y|Z,σ2)=D/productdisplay
d=1N(y:,d|0,ZZT+σ2I) (15.119)
=( 2π)−DN/ 2|Kz|−D/2exp/parenleftbigg
−1
2tr(K−1
zYYT)/parenrightbigg
(15.120)
where Kz=ZZT+σ2I. Based on our discussion of the connection between the eigenvalues
ofYYTand of YTYin Section 14.4.4, it should come as no surprise that we can also solve
the dual problem using eigenvalue methods (see (Lawrence 2005) for the details).
If we use a linear kernel, we recover PCA. But we can also use a more general kernel:
Kz=K+σ2I,w h e r e Kis the Gram matrix for Z. The MLE for ˆZwill no longer be available
15.5. GP latent variable model 541
0 0.05 0.1 0.15 0.20.050.1.150.2.250.3
(a)−0.8−0.6−0.4 −0.2 0 0.2 0.4 0.60.60.40.200.20.4
(b)
Figure 15.10 2d representation of 12 dimensional oil ﬂow data. The different colors/symbols represent
the 3 phases of oil ﬂow. (a) Kernel PCA with Gaussian kernel. (b) GP-LVM with Gaussian kernel. The
shading represents the precision of the posterior, where lighter pixels have higher precision. From Figure 1
of (Lawrence 2005). Used with kind permission of Neil Lawrence.
via eigenvalue methods; instead we must use gradient-based optimization. The objective is given
by
/lscript=−D
2log|Kz|−1
2tr(K−1
zYYT) (15.121)
and the gradient is given by
∂/lscript
∂Zij=∂/lscript
∂Kz∂Kz
∂Zij(15.122)
where
∂/lscript
∂Kz=K−1
zYYTK−1
z−DK−1
z (15.123)
The form of∂Kz
∂Zijwill of course depend on the kernel used. (For example, with a linear kernel,
whereKz=ZZT+σ2I,w eh a v e∂Kz
∂Z=Z.) We can then pass this gradient to any standard
optimizer, such as conjugate gradient descent.
Let us now compare GP-LVM to kernel PCA. In kPCA, we learn a kernelized mapping from
the observed space to the latent space, whereas in GP-LVM, we learn a kernelized mapping from
the latent space to the observed space. Figure 15.10 illustrates the results of applying kPCA and
GP-LVM to visualize the 12 dimensional oil ﬂow data shown in In Figure 14.9(a). We see that the
embedding produced by GP-LVM is far better. If we perform nearest neighbor classiﬁcation in
the latent space, GP-LVM makes 4 errors, while kernel PCA (with the same kernel but separately
optimized hyper-parameters) makes 13 errors, and regular PCA makes 20 errors.
GP-LVM inherits the usual advantages of probabilistic generative models, such as the ability
to handle missing data and data of different types, the ability to use gradient-based methods
(instead of grid search) to tune the kernel parameters, the ability to handle prior information,
542 Chapter 15. Gaussian processes
etc. For a discussion of some other probabilistic methods for (spectral) dimensionality reduction,
see (Lawrence 2012).
15.6 Approximation methods for large datasets
The principal drawback of GPs is that they take O(N3)time to use. This is because of the
need to invert (or compute the Cholesky decomposition of) the N×Nkernel matrix K.A
variety of approximation methods have been devised which take O(M2N)time, where Mis a
user-speciﬁable parameter. For details, see (Quinonero-Candela et al. 2007).
Exercises
Exercise 15.1 Reproducing property
Prove Equation 15.109.
16 Adaptive basis function models
16.1 Introduction
In Chapters 14 and 15, we discussed kernel methods, which provide a powerful way to create non-
linear models for regression and classiﬁcation. The prediction takes the form f(x)=wTφ(x),
where we deﬁne
φ(x)=[κ(x,μ1),...,κ(x,μN)] (16.1)
and where μkare either all the training data or some subset. Models of this form essen-
tially perform a form of template matching, whereby they compare the input xto the stored
prototypes μk.
Although this can work well, it relies on having a good kernel function to measure the
similarity between data vectors. Often coming up with a good kernel function is quite difficult.For example, how do we deﬁne the similarity between two images? Pixel-wise comparison ofintensities (which is what a Gaussian kernel corresponds to) does not work well. Although it ispossible (and indeed common) to hand-engineer kernels for speciﬁc tasks (see e.g., the pyramidmatch kernel in Section 14.2.7), it would be more interesting if we could learn the kernel.
In Section 15.2.4, we discussed a way to learn the parameters of a kernel function, by maxi-
mizing the marginal likelihood. For example, if we use the ARD kernel,
κ(x,x
/prime)=θ0exp⎛
⎝−1
2D/summationdisplay
j=1θj(xj−x/prime
j)2⎞
⎠ (16.2)
we can can estimate the θj, and thus perform a form of nonlinear feature selection. However,
such methods can be computationally expensive. Another approach, known as multiple kernel
learning (see e.g., (Rakotomamonjy et al. 2008)) uses a convex combination of base kernels,κ(x,x
/prime)=/summationtext
jwjκj(x,x/prime), and then estimates the mixing weights wj. But this relies on
having good base kernels (and is also computationally expensive).
An alternative approach is to dispense with kernels altogether, and try to learn useful features
φ(x)directly from the input data. That is, we will create what we call an adaptive basis-
function model (ABM), which is a model of the form
f(x)=w0+M/summationdisplay
m=1wmφm(x) (16.3)
544 Chapter 16. Adaptive basis function models
whereφm(x)is them’th basis function, which is learned from data. This framework covers all
of the models we will discuss in this chapter.
Typically the basis functions are parametric, so we can write φm(x)=φ(x;vm),w h e r evm
are the parameters of the basis function itself. We will use θ=(w0,w1:M,{vm}M
m=1)to
denote the entire parameter set. The resulting model is not linear-in-the-parameters anymore,
so we will only be able to compute a locally optimal MLE or MAP estimate of θ. Nevertheless,
such models often signiﬁcantly outperform linear models, as we will see.
16.2 Classiﬁcation and regression trees (CART)
Classiﬁcation and regression trees orCARTmodels, also called decision trees (not to be
confused with the decision trees used in decision theory) are deﬁned by recursively partitioningthe input space, and deﬁning a local model in each resulting region of input space. This can berepresented by a tree, with one leaf per region, as we explain below.
16.2.1 Basics
To explain the CART approach, consider the tree in Figure 16.1(a). The ﬁrst node asks if x1is
less than some threshold t1. If yes, we then ask if x2is less than some other threshold t2.I f
yes, we are in the bottom left quadrant of space, R1. If no, we ask if x1is less than t3. And
so on. The result of these axis parallel splits is to partition 2d space into 5 regions, as shown
in Figure 16.1(b). We can now associate a mean response with each of these regions, resulting inthe piecewise constant surface shown in Figure 16.1(c).
We can write the model in the following form
f(x)=E[y|x]=M/summationdisplay
m=1wmI(x∈Rm)=M/summationdisplay
m=1wmφ(x;vm) (16.4)
whereRmis them’th region, wmis the mean response in this region, and vmencodes the
choice of variable to split on, and the threshold value, on the path from the root to the m’th leaf.
This makes it clear that a CART model is just a an adaptive basis-function model, where thebasis functions deﬁne the regions, and the weights specify the response value in each region.We discuss how to ﬁnd these basis functions below.
We can generalize this to the classiﬁcation setting by storing the distribution over class labels
in each leaf, instead of the mean response. This is illustrated in Figure 16.2. This model canbe used to classify the data in Figure 1.1. For example, we ﬁrst check the color of the object.If it is blue, we follow the left branch and end up in a leaf labeled “4,0”, which means wehave 4 positive examples and 0 negative examples which match this criterion. Hence we predictp(y=1|x)=4/4ifxis blue. If it is red, we then check the shape: if it is an ellipse, we
end up in a leaf labeled “1,1”, so we predict p(y=1|x)=1/2. If it is red but not an ellipse,
we predict p(y=1|x)=0/2; If it is some other colour, we check the size: if less than 10,
we predict p(y=1|x)=4/4, otherwise p(y=1|x)=0/5. These probabilities are just the
empirical fraction of positive examples that satisfy each conjunction of feature values, whichdeﬁnes a path from the root to a leaf.
16.2. Classiﬁcation and regression trees (CART) 545
X1≤t1
X2≤t2
R1X1≤t3
R4 R5X2≤t4
R2 R3
(a)0246810
02468102345678910
(b)
Figure 16.1 A simple regression tree on two inputs. Based on Figure 9.2 of (Hastie et al. 2009). Figure
generated by regtreeSurfaceDemo .
1,1 0,2shape4,0color
size<10
4,0 0,5ellipse otherblueredother
yes no
Figure 16.2 A simple decision tree for the data in Figure 1.1. A leaf labeled as (n1,n0)means that
there are n1positive examples that match this path, and n0negative examples. In this tree, most of
the leaves are “pure”, meaning they only have examples of one class or the other; the only exception is
leaf representing red ellipses, which has a label distribution of (1,1). We could distinguish positive from
negative red ellipses by adding a further test based on size. However, it is not always desirable to constructtrees that perfectly model the training data, due to overﬁtting.
16.2.2 Growing a tree
Finding the optimal partitioning of the data is NP-complete (Hyaﬁl and Rivest 1976), so it is
common to use the greedy procedure shown in Algorithm 6 to compute a locally optimal MLE.This method is used by CART, (Breiman et al. 1984) C4.5(Quinlan 1993), and ID3(Quinlan 1986),
which are three popular implementations of the method. (See dtfitfor a simple Matlab
implementation.)
The split function chooses the best feature, and the best value for that feature, as follows:
(j
∗,t∗) = arg min
j∈{1,...,D }min
t∈Tjcost({xi,yi:xij≤t})+cost( {xi,yi:xij>t}) (16.5)
546 Chapter 16. Adaptive basis function models
Algorithm 16.1: Recursive procedure to grow a classiﬁcation/ regression tree
1function ﬁtTree(node, D, depth) ;
2node.prediction = mean(y i:i∈D) // or class label distribution ;
3(j∗,t∗,DL,DR)=split(D);
4ifnot worthSplitting(depth, cost, DL,DR)then
5return node
6else
7node.test = λx.xj∗<t∗// anonymous function;
8node.left = ﬁtTree(node, DL, depth+1);
9node.right = ﬁtTree(node, DR, depth+1);
10return node;
where the cost function for a given dataset will be deﬁned below. For notational simplicity, we
have assumed all inputs are real-valued or ordinal, so it makes sense to compare a feature xij
to a numeric value t. The set of possible thresholds Tjfor feature jcan be obtained by sorting
the unique values of xij. For example, if feature 1 has the values {4.5,−12,72,−12}, then we
setT1={−12,4.5,72}. In the case of categorical inputs, the most common approach is to
consider splits of the form xij=ckandxij/negationslash=ck, for each possible class label ck. Although
we could allow for multi-way splits (resulting in non-binary trees), this would result in data
fragmentation, meaning too little data might “fall” into each subtree, resulting in overﬁtting.
The function that checks if a node is worth splitting can use several stopping heuristics, such
as the following:
• is the reduction in cost too small? Typically we deﬁne the gain of using a feature to be a
normalized measure of the reduction in cost:
Δ/definescost(D)−/parenleftbigg|DL|
|D|cost(DL)+|DR|
|D|cost(DR)/parenrightbigg
(16.6)
• has the tree exceeded the maximum desired depth?
• is the distribution of the response in either DLorDRsufficiently homogeneous (e.g., all
labels are the same, so the distribution is pure)?
• is the number of examples in either DLorDRtoo small?
All that remains is to specify the cost measure used to evaluate the quality of a proposed
split. This depends on whether our goal is regression or classiﬁcation. We discuss both cases
below.
16.2.2.1 Regression cost
In the regression setting, we deﬁne the cost as follows:
cost(D)=/summationdisplay
i∈D(yi−y)2(16.7)
16.2. Classiﬁcation and regression trees (CART) 547
wherey=1
|D|/summationtext
i∈Dyiis the mean of the response variable in the speciﬁed set of data.
Alternatively, we can ﬁt a linear regression model for each leaf, using as inputs the features that
were chosen on the path from the root, and then measure the residual error.
16.2.2.2 Classiﬁcation cost
In the classiﬁcation setting, there are several ways to measure the quality of a split. First, weﬁt a multinoulli model to the data in the leaf satisfying the test X
j<tby estimating the
class-conditional probabilities as follows:
ˆπc=1
|D|/summationdisplay
i∈DI(yi=c) (16.8)
whereDis the data in the leaf. Given this, there are several common error measures for
evaluating a proposed partition:
•Misclassiﬁcation rate. We deﬁne the most probable class label as ˆyc=a r g m a xcˆπc. The
corresponding error rate is then
1
|D|/summationdisplay
i∈DI(yi/negationslash=ˆy)=1−ˆπˆy (16.9)
•Entropy,o rdeviance:
H(ˆπ)=−C/summationdisplay
c=1ˆπclogˆπc (16.10)
Note that minimizing the entropy is equivalent to maximizing the information gain (Quinlan
1986) between test Xj<tand the class label Y, deﬁned by
infoGain( Xj<t ,Y)/definesH(Y)−H(Y|Xj<t) (16.11)
=/parenleftBigg
−/summationdisplay
cp(y=c)logp(y=c)/parenrightBigg
(16.12)
+/parenleftBigg/summationdisplay
cp(y=c|Xj<t)logp(c|Xj<t)/parenrightBigg
(16.13)
sinceˆπcis an MLE for the distribution p(c|Xj<t).1
1. IfXjis categorical, and we use tests of the form Xj=k, then taking expectations over values of Xjgives
the mutual information between XjandY:E[infoGain(X j,Y)] =/summationtext
kp(Xj=k)infoGain(X j=k,Y)=
H(Y)−H(Y|Xj)=I(Y;Xj).
548 Chapter 16. Adaptive basis function models
0 0.2 0.4 0.6 0.8 100.050.10.150.20.250.30.350.40.450.5
  
Error rate
Gini
Entropy
Figure 16.3 Node impurity measures for binary classiﬁcation. The horizontal axis corresponds to p, the
probability of class 1. The entropy measure has been rescaled to pass through (0.5,0.5). Based on Figure
9.3 of (Hastie et al. 2009). Figure generated by giniDemo .
•Gini index
C/summationdisplay
c=1ˆπc(1−ˆπc)=/summationdisplay
cˆπc−/summationdisplay
cˆπ2
c=1−/summationdisplay
cˆπ2
c (16.14)
This is the expected error rate. To see this, note that ˆπcis the probability a random entry in
the leaf belongs to class c, and(1−ˆπcis the probability it would be misclassiﬁed.
In the two-class case, where p=πm(1), the misclassiﬁcation rate is 1−max(p,1−p), the
entropy is H2(p), and the Gini index is 2p(1−p). These are plotted in Figure 16.3. We see
that the cross-entropy and Gini measures are very similar, and are more sensitive to changes in
class probability than is the misclassiﬁcation rate. For example, consider a two-class problemwith 400 cases in each class. Suppose one split created the nodes (300,100) and (100,300), whilethe other created the nodes (200,400) and (200,0). Both splits produce a misclassiﬁcation rate of0.25. However, the latter seems preferable, since one of the nodes is pure, i.e., it only contains
one class. The cross-entropy and Gini measures will favor this latter choice.
16.2.2.3 Example
As an example, consider two of the four features from the 3-class iris dataset, shown in Fig-ure 16.4(a). The resulting tree is shown in Figure 16.5(a), and the decision boundaries are shownin Figure 16.4(b). We see that the tree is quite complex, as are the resulting decision boundaries.In Figure 16.5(b), we show that the CV estimate of the error is much higher than the training seterror, indicating overﬁtting. Below we discuss how to perform a tree-pruning stage to simplifythe tree.
16.2. Classiﬁcation and regression trees (CART) 549
4 4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
Sepal lengthSepal width
  
setosa
versicolor
virginica
(a)4 4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
xyunpruned decision tree
  
versicolor
setosa
virginica
(b)
Figure 16.4 (a) Iris data. We only show the ﬁrst two features, sepal length and sepal width, and ignore
petal length and petal width. (b) Decision boundaries induced by the decision tree in Figure 16.5(a).
versicolor setosa
setosa virginica
versicolor versicolor
versicolor versicolor
versicolor virginica virginica
virginica versicolor
versicolor virginica
virginica versicolor versicolor virginicaSL < 5.45   
W < 2.8   SL < 6.15   
SW < 3.45   SL < 7.05   
SL < 5.75   SW < 2.4   
SW < 3.1   SL < 6.95   
SW < 2.95   SW < 3.15   
SL < 6.55   
SW < 2.95   SL < 6.65   
SL < 6.45   SW < 2.65   
SW < 2.85   SW < 2.9     SL >= 5.45
  SW >= 2.8   SL >= 6.15
  SW >= 3.45   SL >= 7.05
  SL >= 5.75   SW >= 2.4
  SW >= 3.1   SL >= 6.95
  SW >= 2.95   SW >= 3.15
  SL >= 6.55
  SW >= 2.95   SL >= 6.65
  SL >= 6.45   SW >= 2.65
  SW >= 2.85   SW >= 2.9
(a)0 5 10 15 200.10.20.30.40.50.60.70.8
Number of terminal nodesCost (misclassification error)
  
Cross−validation
Training set
Min + 1 std. err.
Best choice
(b)
Figure 16.5 (a) Unpruned decision tree for Iris data. (b) Plot of misclassiﬁcation error rate vs depth of
tree. Figure generated by dtreeDemoIris .
16.2.3 Pruning a tree
To prevent overﬁtting, we can stop growing the tree if the decrease in the error is not sufficient
to justify the extra complexity of adding an extra subtree. However, this tends to be too myopic.For example, on the xor data in Figure 14.2(c), it would might never make any splits, since eachfeature on its own has little predictive power.
The standard approach is therefore to grow a “full” tree, and then to perform pruning. This
can be done using a scheme that prunes the branches giving the least increase in the error. See(Breiman et al. 1984) for details.
To determine how far to prune back, we can evaluate the cross-validated error on each such
subtree, and then pick the tree whose CV error is within 1 standard error of the minimum. Thisis illustrated in Figure 16.4(b). The point with the minimum CV error corresponds to the simpletree in Figure 16.6(a).
550 Chapter 16. Adaptive basis function models
versicolor setosa virginica
versicolor setosaSL < 5.45   
SW < 2.8   SL < 6.15   
SW < 3.45     SL >= 5.45
  SW >= 2.8   SL >= 6.15
  SW >= 3.45
(a)4 4.5 5 5.5 6 6.5 7 7.5 822.533.544.5
xypruned decision tree
  
versicolor
setosa
virginica
(b)
Figure 16.6 Pruned decision tree for Iris data. Figure generated by dtreeDemoIris .
16.2.4 Pros and cons of trees
CART models are popular for several reasons: they are easy to interpret2, they can easily handle
mixed discrete and continuous inputs, they are insensitive to monotone transformations of the
inputs (because the split points are based on ranking the data points), they perform automaticvariable selection, they are relatively robust to outliers, they scale well to large data sets, andthey can be modiﬁed to handle missing inputs.
3
However, CART models also have some disadvantages. The primary one is that they do
not predict very accurately compared to other kinds of model. This is in part due to thegreedy nature of the tree construction algorithm. A related problem is that trees are unstable:
small changes to the input data can have large effects on the structure of the tree, due to thehierarchical nature of the tree-growing process, causing errors at the top to affect the rest of thetree. In frequentist terminology, we say that trees are high variance estimators. We discuss asolution to this below.
16.2.5 Random forests
One way to reduce the variance of an estimate is to average together many estimates. Forexample, we can train Mdifferent trees on different subsets of the data, chosen randomly with
2. We can postprocess the tree to derive a series of logical rulessuch as “If x1<5.45then ...” (Quinlan 1990).
3. The standard heuristic for handling missing inputs in decision trees is to look for a series of ”backup” variables,
which can induce a similar partition to the chosen variable at any given split; these can be used in case the chosen
variable is unobserved at test time. These are called surrogate splits. This method ﬁnds highly correlated features,
and can be thought of as learning a local joint model of the input. This has the advantage over a generative modelof not modeling the entire joint distribution of inputs, but it has the disadvantage of being entirely ad hoc. A simpler
approach, applicable to categorical variables, is to code “missing” as a new value, and then to treat the data as fully
observed.
16.2. Classiﬁcation and regression trees (CART) 551
replacement, and then compute the ensemble
f(x)=M/summationdisplay
m=11
Mfm(x) (16.15)
wherefmis them’th tree. This technique is called bagging(Breiman 1996), which stands for
“bootstrap aggregating”.
Unfortunately, simply re-running the same learning algorithm on different subsets of the data
can result in highly correlated predictors, which limits the amount of variance reduction that is
possible. The technique known as random forests (Breiman 2001a) tries to decorrelate the base
learners by learning trees based on a randomly chosen subset of input variables, as well as arandomly chosen subset of data cases. Such models often have very good predictive accuracy(Caruana and Niculescu-Mizil 2006), and have been widely used in many applications (e.g., forbody pose recognition using Microsoft’s popular kinect sensor (Shotton et al. 2011)).
Bagging is a frequentist concept. It is also possible to adopt a Bayesian approach to learning
trees. Inparticular, (Chipmanetal.1998;Denisonetal.1998;Wuetal.2007)performapproximateinference over the space of trees (structure and parameters) using MCMC. This reduces thevariance of the predictions. We can also perform Bayesian inference over the space of ensemblesof trees, which tends to work much better. This is known as Bayesian adaptive regression
treesorBART(Chipman et al. 2010). Note that the cost of these sampling-based Bayesian
methods is comparable to the sampling-based random forest method. That is, both approachesare farily slow to train, but produce high quality classiﬁers.
Unfortunately, methods that use multiple trees (whether derived from a Bayesian or frequen-
tist standpoint) lose their nice interpretability properties. Fortunately, various post-processingmeasures can be applied, as discussed in Section 16.8.
16.2.6 CART compared to hierarchical mixture of experts *
An interesting alternative to a decision tree is known as the hierarchical mixture of experts.Figure 11.7(b) gives an illustration where we have two levels of experts. This can be thought ofas a probabilistic decision tree of depth 2, since we recursively partition the space, and applya different expert to each partition. Hastie et al. (Hastie et al. 2009, p331) write that “TheHME approach is a promising competitor to CART trees”. Some of the advantages include thefollowing:
• The model can partition the input space using any set of nested linear decision boundaries.
By contrast, standard decision trees are constrained to use axis-parallel splits.
• The model makes predictions by averaging over all experts. By contrast, in a standard
decision tree, predictions are made only based on the model in the corresponding leaf. Since
leaves often contain few training examples, this can result in overﬁtting.
• Fitting an HME involves solving a smooth continuous optimization problem (usually using
EM), which is likely to be less prone to local optima than the standard greedy discreteoptimization methods used to ﬁt decision trees. For similar reasons, it is computationallyeasier to “be Bayesian” about the parameters of an HME (see e.g., (Peng et al. 1996; Bishop
552 Chapter 16. Adaptive basis function models
and Svensén 2003)) than about the structure and parameters of a decision tree (see e.g., (Wu
et al. 2007)).
16.3 Generalized additive models
A simple way to create a nonlinear model with multiple inputs is to use a generalized additive
model(Hastie and Tibshirani 1990), which is a model of the form
f(x)=α+f1(x1)+···+fD(xD) (16.16)
Here each fjcan be modeled by some scatterplot smoother, and f(x)can be mapped to p(y|x)
using a link function, as in a GLM (hence the term generalized additive model).
If we use regression splines (or some other ﬁxed basis function expansion approach) for the
fj, then each fj(xj)can be written as βT
jφj(xj), so the whole model can be written as
f(x)=βTφ(x),w h e r eφ(x)=[ 1,φ1(x1),...,φD(xD)]. However, it is more common to use
smoothing splines (Section 15.4.6) for the fj. In this case, the objective (in the regression setting)
becomes
J(α,f1,...,f D)=N/summationdisplay
i=1⎛
⎝yi−α−D/summationdisplay
j=1fj(xij)⎞⎠2
+D/summationdisplay
j=1λj/integraldisplay
f/prime/prime
j(tj)2dtj (16.17)
whereλjis the strength of the regularizer for fj.
16.3.1 Backﬁtting
We now discuss how to ﬁt the model using MLE. The constant αis not uniquely identiﬁable,
since we can always add or subtract constants to any of the fjfunctions. The convention is to
assume/summationtextN
i=1fj(xij)=0for allj. In this case, the MLE for αis justˆα=1
N/summationtextNi=1yi.
To ﬁt the rest of the model, we can center the responses (by subtracting ˆα), and then
iteratively update each fjin turn, using as a target vector the residuals obtained by omitting
termfj:
ˆfj:=smoother( {yi−/summationdisplay
k/negationslash=jˆfk(xik)}N
i=1) (16.18)
We should then ensure the output is zero mean using
ˆfj:=ˆfj−1
NN/summationdisplay
i=1ˆfj(xij) (16.19)
This is called the backﬁtting algorithm (Hastie and Tibshirani 1990). If Xhas full column rank,
then the above objective is convex (since each smoothing spline is a linear operator, as shown
in Section 15.4.2), so this procedure is guaranteed to converge to the global optimum.
In the GLM case, we need to modify the method somewhat. The basic idea is to replace the
weighted least squares step of IRLS (see Section 8.3.4) with a weighted backﬁtting algorithm. Inthe logistic regression case, each response has weight s
i=μi(1−μi)associated with it, where
μi=s i g m (ˆα+/summationtextD
j=1ˆfj(xij)).)
16.3. Generalized additive models 553
16.3.2 Computational efficiency
Each call to the smoother takes O(N)time, so the total cost is O(NDT),w h e r eTis the
number of iterations. If we have high-dimensional inputs, ﬁtting a GAM is expensive. One
approach is to combine it with a sparsity penalty, see e.g., the SpAM(sparse additive model)
approach of (Ravikumar et al. 2009). Alternatively, we can use a greedy approach, such asboosting (see Section 16.4.6)
16.3.3 Multivariate adaptive regression splines (MARS)
We can extend GAMs by allowing for interaction effects. In general, we can create an ANOVAdecomposition:
f(x)=β
0+D/summationdisplay
j=1fj(xj)+/summationdisplay
j,kfjk(xj,xk)+/summationdisplay
j,k,lfjkl(xj,xk,xl)+··· (16.20)
Of course, we cannot allow for too many higher-order interactions, because there will be toomany parameters to ﬁt.
It is common to use greedy search to decide which variables to add. The multivariate
adaptive regression splines orMARSalgorithm is one example of this (Hastie et al. 2009,
Sec9.4). It ﬁts models of the form in Equation 16.20, where it uses a tensor product basis ofregression splines to represent the multidimensional regression functions. For example, for 2dinput, we might use
f(x
1,x2)=β 0+/summationdisplay
mβ1m(x1−t1m)+
+/summationdisplay
mβ2m(t2m−x2)++/summationdisplay
mβ12m(x1−t1m)+(t2m−x2)+ (16.21)
To create such a function, we start with a set of candidate basis functions of the form
C={(xj−t)+,(t−xj)+:t∈{x1j,...,x Nj},j=1,...,D} (16.22)
These are 1d linear splines where the knots are at all the observed values for that variable. Weconsider splines sloping up in both directions; this is called a reﬂecting pair. See Figure 16.7(a).
LetMrepresent the current set of basis functions. We initialize by using M={1}.W e
consider creating a new basis function pair by multplying an h
m∈Mwith one of the reﬂecting
pairs inC. For example, we might initially get
f(x)=2 5−4(x1−5)++20(5−x1)+ (16.23)
obtained by multiplying h0(x)=1with a reﬂecting pair involving x1with knot t=5. This
pair is added to M. See Figure 16.7(b). At the next step, we might create a model such as
f(x)== 2 −2(x1−5)++3(5−x1)+
−(x2−10)+×(5−x1)+−1.2(10−x2)+×(5−x1)+ (16.24)
obtained by multiplying (5−x1)+fromMby the new reﬂecting pair (x2−10)+and(10−x2)+.
This new function is shown in Figure 16.7(c).
554 Chapter 16. Adaptive basis function models
0 5 10 15 20051015
(a)0 5 10 15 20−40−20020406080100120
(b)05101520
05101520−60−40−20020
(c)
Figure 16.7 (a) Linear spline function with a knot at 5. Solid blue: (x−5)+. Dotted red: (5−x)+. (b) A
MARS model in 1d given by Equation 16.23. (c) A simple MARS model in 2d given by Equation 16.24. Figure
generated by marsDemo .
We proceed in this way until the model becomes very large. (We may impose an upper
bound on the order of interactions.) Then we prune backwards, at each step eliminating the
basis function that causes the smallest increase in the residual error, until the CV error stopsimproving.
The whole procedure is closely related to CART. To see this, suppose we replace the piecewise
linear basis functions by step functions I(x
j>t)andI(xj<t). Multiplying by a pair of
reﬂected step functions is equivalent to splitting a node. Now suppose we impose the constraintthat once a variable is involved in a multiplication by a candidate term, that variable getsreplaced by the interaction, so the original variable is no longer available. This ensures that avariable can not be split more than once, thus guaranteeing that the resulting model can berepresented as a tree. In this case, the MARS growing strategy is the same as the CART growingstrategy.
16.4 Boosting
Boosting (Schapire and Freund 2012) is a greedy algorithm for ﬁtting adaptive basis-function
models of the form in Equation 16.3, where the φmare generated by an algorithm called a weak
learneror abase learner. The algorithm works by applying the weak learner sequentially to
weighted versions of the data, where more weight is given to examples that were misclassiﬁedby earlier rounds.
This weak learner can be any classiﬁcation or regression algorithm, but it is common to use a
CART model. In 1998, the late Leo Breiman called boosting, where the weak learner is a shallowdecision tree, the “best off-the-shelf classiﬁer in the world” (Hastie et al. 2009, p340). Thisis supported by an extensive empirical comparison of 10 different classiﬁers in (Caruana andNiculescu-Mizil 2006), who showed that boosted decision trees were the best both in terms ofmisclassiﬁcation error and in terms of producing well-calibrated probabilities, as judged by ROCcurves. (The second best method was random forests, invented by Breiman; see Section 16.2.5.)By contrast, single decision trees performed very poorly.
Boosting was originally derived in the computational learning theory literature (Schapire 1990;
Freund and Schapire 1996), where the focus is binary classiﬁcation. In these papers, it wasproved that one could boost the performance (on the training set) of any weak learner arbitrarily
16.4. Boosting 555
0 20 40 60 80 100 120 14000.020.040.060.080.10.120.140.16
train
test
Figure 16.8 Performance of adaboost using a decision stump as a weak learner on the data in Figure 16.10.
Training (solid blue) and test (dotted red) error vs number of iterations. Figure generated by boostingDemo ,
written by Richard Stapenhurst.
high, provided the weak learner could always perform slightly better than chance. For example,
in Figure 16.8, we plot the training and test error for boosted decision stumps on a 2d datasetshown in Figure 16.10. We see that the training set error rapidly goes to near zero. What is moresurprising is that the test set error continues to decline even after the training set error hasreached zero (although the test set error will eventually go up). Thus boosting is very resistantto overﬁtting. (Boosted decision stumps form the basis of a very successful face detector (Violaand Jones 2001), which was used to generate the results in Figure 1.6, and which is used in manydigital cameras.)
In view of its stunning empirical success, statisticians started to become interested in this
method. Breiman (Breiman 1998) showed that boosting can be interpreted as a form of gradient
descent in function space. This view was then extended in (Friedman et al. 2000), who showedhow boosting could be extended to handle a variety of loss functions, including for regression,robust regression, Poisson regression, etc. In this section, we shall present this statistical inter-pretation of boosting, drawing on the reviews in (Buhlmann and Hothorn 2007) and (Hastie et al.2009, ch10), which should be consulted for further details.
16.4.1 Forward stagewise additive modeling
The goal of boosting is to solve the following optimization problem:
min
fN/summationdisplay
i=1L(yi,f(xi)) (16.25)
andL(y,ˆy)is some loss function, and fis assumed to be an ABM model as in Equation 16.3.
Common choices for the loss function are listed in Table 16.1.
If we use squared error loss, the optimal estimate is given by
f∗(x) = argmin
f(x)=Ey|x/bracketleftbig
(Y−f(x))2/bracketrightbig
=E[Y|x] (16.26)
556 Chapter 16. Adaptive basis function models
Name Loss Derivative f∗Algorithm
Squared error1
2(yi−f(xi))2yi−f(xi) E[y|xi] L2Boosting
Absolute error |yi−f(xi)|sgn(yi−f(xi))median(y|xi)Gradient boosting
Exponential loss exp(−˜yif(xi))−˜yiexp(−˜yif(xi))1
2logπi
1−πiAdaBoost
Logloss log(1+e−˜yifi)yi−πi1
2logπi
1−πiLogitBoost
Table 16.1 Some commonly used loss functions, their gradients, their population minimizers f∗, and
some algorithms to minimize the loss. For binary classiﬁcation problems, we assume ˜yi∈{ −1,+1},
yi∈{0,1}andπi= sigm(2f (xi)). For regression problems, we assume yi∈R. Adapted from (Hastie
et al. 2009, p360) and (Buhlmann and Hothorn 2007, p483).
−2 −1.5 −1 −0.5 0 0.5 1 1.5 201234567
y− floss
  
0−1
logloss
exp
Figure 16.9 Illustration of various loss functions for binary classiﬁcation. The horizontal axis is the
marginyη, the vertical axis is the loss. The log loss uses log base 2. Figure generated by hingeLossPlot .
as we showed in Section 5.7.1.3. Of course, this cannot be computed in practice since it requires
knowing the true conditional distribution p(y|x). Hence this is sometimes called the population
minimizer, where the expectation is interpreted in a frequentist sense. Below we will see thatboosting will try to approximate this conditional expectation.
For binary classiﬁcation, the obvious loss is 0-1 loss, but this is not differentiable. Instead
it is common to use logloss, which is a convex upper bound on 0-1 loss, as we showed inSection 6.5.5. In this case, one can show that the optimal estimate is given by
f
∗(x)=1
2logp(˜y=1|x)
p(˜y=−1|x)(16.27)
where˜y∈{ −1,+1}. One can generalize this framework to the multiclass case, but we will not
discuss that here.
An alternative convex upper bound is exponential loss, deﬁned by
L(˜y,f)=e x p (−˜yf) (16.28)
See Figure 16.9 for a plot. This will have some computational advantages over the logloss,to be discussed below. It turns out that the optimal estimate for this loss is also f
∗(x)=
16.4. Boosting 557
1
2logp(˜y=1|x)
p(˜y=−1|x). To see this, we can just set the derivative of the expected loss (for each x)t o
zero:
∂
∂f(x)E/bracketleftBig
e−˜yf(x)|x/bracketrightBig
=∂
∂f(x)[p(˜y=1|x)e−f(x)+p(˜y=−1|x)ef(x)] (16.29)
=−p(˜y=1|x)e−f(x)+p(˜y=−1|x)ef(x)(16.30)
=0⇒p(˜y=1|x)
p(˜y=1−|x)=e2f(x)(16.31)
So in both cases, we can see that boosting should try to approximate (half) the log-odds ratio.
Since ﬁnding the optimal fis hard, we shall tackle it sequentially. We initialise by deﬁning
f0(x)=a r gm i n
γN/summationdisplay
i=1L(yi,f(xi;γ)) (16.32)
For example, if we use squared error, we can set f0(x)=y, and if we use log-loss or exponential
loss , we can set f0(x)=1
2logˆπ
1−ˆπ,w h e r eˆπ=1
N/summationtextN
i=1I(yi=1 ). We could also use a more
powerful model for our baseline, such as a GLM.
Then at iteration m, we compute
(βm,γm) = argmin
β,γN/summationdisplay
i=1L(yi,fm−1(xi)+βφ(xi;γ)) (16.33)
and then we set
fm(x)=fm−1(x)+βmφ(x;γm) (16.34)
The key point is that we do not go back and adjust earlier parameters. This is why the method
is calledforward stagewise additive modeling.
We continue this for a ﬁxed number of iterations M. In factMis the main tuning parameter
of the method. Often we pick it by monitoring the performance on a separate validation set, andthen stopping once performance starts to decrease; this is called early stopping. Alternatively,
we can use model selection criteria such as AIC or BIC (see e.g., (Buhlmann and Hothorn 2007)for details).
In practice, better (test set) performance can be obtained by performing “partial updates” of
the form
f
m(x)=fm−1(x)+νβ mφ(x;γm) (16.35)
Here0<ν≤1is a step-size parameter. In practice it is common to use a small value such as
ν=0.1. This is called shrinkage.
Below we discuss how to solve the suproblem in Equation 16.33. This will depend on the
form of loss function. However, it is independent of the form of weak learner.
16.4.2 L2boosting
Suppose we used squared error loss. Then at step mthe loss has the form
L(yi,fm−1(xi)+βφ(xi;γ)) = (rim−φ(xi;γ))2(16.36)
558 Chapter 16. Adaptive basis function models
(a)
 (b)
 (c)
Figure 16.10 Example of adaboost using a decision stump as a weak learner. The degree of blackness
represents the conﬁdence in the red class. The degree of whiteness represents the conﬁdence in the blue
class. The size of the datapoints represents their weight. Decision boundary is in yellow. (a) After 1
round. (b) After 3 rounds. (c) After 120 rounds. Figure generated by boostingDemo , written by Richard
Stapenhurst.
whererim/definesyi−fm−1(xi)is the current residual, and we have set β=1without loss of
generality. Hence we can ﬁnd the new basis function by using the weak learner to predict rm.
This is called L2boosting ,o rleast squares boosting (Buhlmann and Yu 2003). In Section 16.4.6,
we will see that this method, with a suitable choice of weak learner, can be made to give the
same results as LARS, which can be used to perform variable selection (see Section 13.4.2).
16.4.3 AdaBoost
Consider a binary classiﬁcation problem with exponential loss. At step mwe have to minimize
Lm(φ)=N/summationdisplay
i=1exp[−˜yi(fm−1(xi)+βφ(xi))] =N/summationdisplay
i=1wi,mexp(−β˜yiφ(xi)) (16.37)
wherewi,m/definesexp(−˜yifm−1(xi))is a weight applied to datacase i, and˜yi∈{ −1,+1}.W e
can rewrite this objective as follows:
Lm=e−β/summationdisplay
˜yi=φ(xi)wi,m+eβ/summationdisplay
˜yi/negationslash=φ(xi)wi,m (16.38)
=(eβ−e−β)N/summationdisplay
i=1wi,mI(˜yi/negationslash=φ(xi))+e−βN/summationdisplay
i=1wi,m (16.39)
Consequently the optimal function to add is
φm=a r g m i n
φwi,mI(˜yi/negationslash=φ(xi)) (16.40)
This can be found by applying the weak learner to a weighted version of the dataset, with
weightswi,m. Subsituting φmintoLmand solving for βwe ﬁnd
βm=1
2log1−errm
errm(16.41)
16.4. Boosting 559
where
errm=/summationtextN
i=1wiI(˜yi/negationslash=φm(xi))
/summationtextNi=1wi,m(16.42)
The overall update becomes
fm(x)=fm−1(x)+βmφm(x) (16.43)
With this, the weights at the next iteration become
wi,m+1=wi,me−βm˜yiφm(xi)(16.44)
=wi,meβm(2I(˜yi/negationslash=φm(xi))−1)(16.45)
=wi,me2βmI(˜yi/negationslash=φm(xi))e−βm(16.46)
where we exploited the fact that −˜yiφm(xi)=−1if˜yi=φm(xi)and−˜yiφm(xi)=+ 1
otherwise. Since e−βmwill cancel out in the normalization step, we can drop it. The result is
the algorithm shown in Algorithm 7, known Adaboost.M1.4
An example of this algorithm in action, using decision stumps as the weak learner, is given in
Figure 16.10. We see that after many iterations, we can “carve out” a complex decision boundary.
What is rather surprising is that AdaBoost is very slow to overﬁt, as is apparent in Figure 16.8.See Section 16.4.8 for a discussion of this point.
Algorithm 16.2: Adaboost.M1, for binary classiﬁcation with exponential loss
1wi=1/N;
2form=1:M do
3Fit a classiﬁer φm(x)to the training set using weights w;
4Compute err m=/summationtextN
i=1wi,mI(˜yi/negationslash=φm(xi))/summationtextN
i=1wi,m);
5Compute αm= log[(1−errm)/errm];
6Setwi←wiexp[αmI(˜yi/negationslash=φm(xi))];
7Returnf(x)=s g n/bracketleftBig/summationtextM
m=1αmφm(x)/bracketrightBig
;
16.4.4 LogitBoost
The trouble with exponential loss is that it puts a lot of weight on misclassiﬁed examples, as
is apparent from the exponential blowup on the left hand side of Figure 16.9. This makes themethod very sensitive to outliers (mislabeled examples). In addition, e
−˜yfis not the logarithm
of any pmf for binary variables ˜y∈{ −1,+1}; consequently we cannot recover probability
estimates from f(x).
4. In (Friedman et al. 2000), this is called discrete AdaBoost, since it assumes that the base classiﬁer φmreturns a
binary class label. If φmreturns a probability instead, a modiﬁed algorithm, known as real AdaBoost, can be used. See
(Friedman et al. 2000) for details.
560 Chapter 16. Adaptive basis function models
A natural alternative is to use logloss instead. This only punishes mistakes linearly, as is clear
from Figure 16.9. Furthermore, it means that we will be able to extract probabilities from the
ﬁnal learned function, using
p(y=1|x)=ef(x)
e−f(x)+ef(x)=1
1+e−2f(x)(16.47)
The goal is to minimze the expected log-loss, given by
Lm(φ)=N/summationdisplay
i=1log[1+exp(− 2˜yi(fm−1(x)+φ(xi)))] (16.48)
By performing a Newton upate on this objective (similar to IRLS), one can derive the algorithmshown in Algorithm 8. This is known as logitBoost (Friedman et al. 2000). It can be generalized
to the multi-class setting, as explained in (Friedman et al. 2000).
Algorithm 16.3: LogitBoost, for binary classiﬁcation with log-loss
1wi=1/N,πi=1/2;
2form=1:M do
3Compute the working response zi=y∗
i−πi
πi(1−πi);
4Compute the weights wi=πi(1−πi);
5φm=a r g m i nφ/summationtextN
i=1wi(zi−φ(xi))2;
6Updatef(x)←f(x)+1
2φm(x);
7Compute πi=1/(1+exp(− 2f(xi)));
8Returnf(x)=s g n/bracketleftBig/summationtextMm=1φm(x)/bracketrightBig
;
16.4.5 Boosting as functional gradient descent
Rather than deriving new versions of boosting for every different loss function, it is possible to
derive a generic version, known as gradient boosting (Friedman 2001; Mason et al. 2000). To
explain this, imagine minimizing
ˆf=a r g m i n
fL(f) (16.49)
wheref=(f(x1),...,f(xN))are the “parameters”. We will solve this stagewise, using gradient
descent. At step m,l e tg mbe the gradient of L(f)evaluated at f=fm−1:
gim=/bracketleftbigg∂L(yi,f(xi))
∂f(xi)/bracketrightbigg
f=fm−1(16.50)
Gradients of some common loss functions are given in Table 16.1. We then make the update
fm=fm−1−ρmgm (16.51)
16.4. Boosting 561
whereρmis the step length, chosen by
ρm=a r g m i n
ρL(fm−1−ρgm) (16.52)
This is called functional gradient descent.
In its current form, this is not much use, since it only optimizes fat a ﬁxed set of Npoints,
so we do not learn a function that can generalize. However, we can modify the algorithm by
ﬁtting a weak learner to approximate the negative gradient signal. That is, we use this update
γm=a r g m i n
γN/summationdisplay
i=1(−gim−φ(xi;γ))2(16.53)
The overall algorithm is summarized in Algorithm 6. (We have omitted the line search step,which is not strictly necessary, as argued in (Buhlmann and Hothorn 2007).)
Algorithm 16.4: Gradient boosting
1Initializef0(x) = argminγ/summationtextN
i=1L(yi,φ(xi;γ));
2form=1:M do
3Compute the gradient residual using rim=−/bracketleftBig
∂L(yi,f(xi))
∂f(xi)/bracketrightBig
f(xi)=fm−1(xi);
4Use the weak learner to compute γmwhich minimizes/summationtextNi=1(rim−φ(xi;γm))2;
5Updatefm(x)=fm−1(x)+νφ(x;γm);
6Returnf(x)=fM(x)
If we apply this algorithm using squared loss, we recover L2Boosting. If we apply this
algorithm to log-loss, we get an algorithm known as BinomialBoost (Buhlmann and Hothorn
2007). The advantage of this over LogitBoost is that it does not need to be able to do weighted
ﬁtting: it just applies any black-box regression model to the gradient vector. Also, it is relativelyeasy to extend to the multi-class case (see (Hastie et al. 2009, p387)). We can also apply thisalgorithm to other loss functions, such as the Huber loss (Section 7.4), which is more robust tooutliers than squared error loss.
16.4.6 Sparse boosting
Suppose we use as our weak learner the following algorithm: search over all possible variablesj=1:D, and pick the one j(m)that best predicts the residual vector:
j(m) = argmin
jN/summationdisplay
i=1(rim−ˆβjmxij)2(16.54)
ˆβjm=/summationtextN
i=1xijrim/summationtextNi=1x2
ij(16.55)
φm(x)=ˆβj(m),mxj(m) (16.56)
562 Chapter 16. Adaptive basis function models
This method, which is known as sparse boosting (Buhlmann and Yu 2006), is identical to the
matching pursuit algorithm discussed in Section 13.2.3.1.
It is clear that this will result in a sparse estimate, at least if Mis small. To see this, let us
rewrite the update as follows:
βm:=βm−1+ν(0,...,0,ˆβj(m),m,0,...,0) (16.57)
where the non-zero entry occurs in location j(m). This is known as forward stagewise linear
regression (Hastie et al. 2009, p608), which becomes equivalent to the LAR algorithm discussed
in Section 13.4.2 as ν→0. Increasing the number of steps min boosting is analogous to
decreasing the regularization penalty λ. If we modify boosting to allow some variable deletion
steps (Zhao and Yu 2007), we can make it equivalent to the LARS algorithm, which computes
the full regularization path for the lasso problem. The same algorithm can be used for sparselogistic regression, by simply modifying the residual to be the appropriate negative gradient.
Now consider a weak learner that is similar to the above, except it uses a smoothing spline
instead of linear regression when mapping from x
jto the residual. The result is a sparse
generalized additive model (see Section 16.3). It can obviously be extended to pick pairs ofvariables at a time. The resulting method often works much better than MARS (Buhlmann andYu 2006).
16.4.7 Multivariate adaptive regression trees (MART)
It is quite common to use CART models as weak learners. It is usually advisable to use a shallowtree, so that the variance is low. Even though the bias will be high (since a shallow tree is likelyto be far from the “truth”), this will compensated for in subsequent rounds of boosting.
The height of the tree is an additional tuning parameter (in addition to M, the number of
rounds of boosting, and ν, the shrinkage factor). Suppose we restrict to trees with Jleaves.
IfJ=2, we get a stump, which can only split on a single variable. If J=3, we allow for
two-variable interactions, etc. In general, it is recommended (e.g., in (Hastie et al. 2009, p363)and (Caruana and Niculescu-Mizil 2006)) to use J≈6.
If we combine the gradient boosting algorithm with (shallow) regression trees, we get a model
known as MART, which stands for “multivariate adaptive regression trees”. This actually includes
a slight reﬁnement to the basic gradient boosting algorithm: after ﬁtting a regression tree to theresidual (negative gradient), we re-estimate the parameters at the leaves of the tree to minimizethe loss:
γ
jm=a r g m i n
γ/summationdisplay
xi∈RjmL(yi,fm−1(xi)+γ) (16.58)
whereRjmis the region for leaf jin them’th tree, and γjmis the corresponding parameter (the
mean response of yfor regression problems, or the most probable class label for classiﬁcation
problems).
16.4.8 Why does boosting work so well?
We have seen that boosting works very well, especially for classiﬁers. There are two mainreasons for this. First, it can be seen as a form of /lscript
1regularization, which is known to help
16.5. Feedforward neural networks (multilayer perceptrons) 563
prevent overﬁtting by eliminating “irrelevant” features. To see this, imagine pre-computing all
possible weak-learners, and deﬁning a feature vector of the form φ(x)=[φ1(x),...,φ K(x)].
We could use /lscript1regularization to select a subset of these. Alternatively we can use boosting,
where at each step, the weak learner creates a new φkon the ﬂy. It is possible to combine
boosting and /lscript1regularization, to get an algorithm known as L1-Adaboost (Duchi and Singer
2009). Essentially this method greedily adds the best features (weak learners) using boosting,and then prunes off irrelevant ones using /lscript
1regularization.
Another explanation has to do with the concept of margin, which we introduced in Sec-
tion 14.5.2.2. (Schapire et al. 1998; Ratsch et al. 2001) proved that AdaBoost maximizes themargin on the training data. (Rosset et al. 2004) generalized this to other loss functions, such aslog-loss.
16.4.9 A Bayesian view
So far, our presentation of boosting has been very frequentist, since it has focussed on greedilyminimizing loss functions. A likelihood interpretation of the algorithm was given in (Neal andMacKay 1998; Meek et al. 2002). The idea is to consider a mixture of experts model of the form
p(y|x,θ)=
M/summationdisplay
m=1πmp(y|x,γm) (16.59)
where each expert p(y|x,γm)is like a weak learner. We usually ﬁt all Mexperts at once
using EM, but we can imagine a sequential scheme, whereby we only update the parametersfor one expert at a time. In the E step, the posterior responsibilities will reﬂect how well theexisting experts explain a given data point; if this is a poor ﬁt, these data points will havemore inﬂuence on the next expert that is ﬁtted. (This view naturally suggest a way to use aboosting-like algorithm for unsupervised learning: we simply sequentially ﬁt mixture models,instead of mixtures of experts.)
Notice that this is a rather “broken” MLE procedure, since it never goes back to update the
parameters of an old expert. Similarly, if boosting ever wants to change the weight assigned to aweak learner, the only way to do this is to add the weak learner again with a new weight. Thiscan result in unnecessarily large models. By contrast, the BART model (Chipman et al. 2006,2010) uses a Bayesian version of backﬁtting to ﬁt a small sum of weak learners (typically trees).
16.5 Feedforward neural networks (multilayer perceptrons)
Afeedforward neural network,a k a multi-layer perceptron (MLP), is a series of logistic
regression models stacked on top of each other, with the ﬁnal layer being either another logisticregression or a linear regression model, depending on whether we are solving a classiﬁcation orregression problem. For example, if we have two layers, and we are solving a regression problem,the model has the form
p(y|x,θ)=N (y|w
Tz(x),σ2) (16.60)
z(x)=g(Vx)=[g(vT
1x),...,g(vT
Hx)] (16.61)
wheregis a non-linear activation ortransfer function (commonly the logistic function),
z(x)=φ(x,V)is called the hidden layer (a deterministic function of the input), His the
564 Chapter 16. Adaptive basis function models
xn1xnixnD
zn1znjznH
yn1ynkynC
......
vij wjk
Figure 16.11 A neural network with one hidden layer.
number of hidden units, Vis the weight matrix from the inputs to the hidden nodes, and
wis the weight vector from the hidden nodes to the output. It is important that gbe non-
linear, otherwise the whole model collapses into a large linear regression model of the form
y=wT(Vx). One can show that an MLP is a universal approximator, meaning it can model
any suitably smooth function, given enough hidden units, to any desired level of accuracy(Hornik 1991).
To handle binary classiﬁcation, we pass the output through a sigmoid, as in a GLM:
p(y|x,θ)=B e r (y|sigm(w
Tz(x))) (16.62)
We can easily extend the MLP to predict multiple outputs. For example, in the regression case,we have
p(y|x,θ)=N(y|Wφ(x,V),σ
2I) (16.63)
See Figure 16.11 for an illustration. If we add mutual inhibition arcs between the output units,
ensuring that only one of them turns on, we can enforce a sum-to-one constraint, which can beused for multi-class classiﬁcation. The resulting model has the form
p(y|x,θ)=C a t ( y|S(Wz(x)) (16.64)
16.5.1 Convolutional neural networks
The purpose of the hidden units is to learn non-linear combinations of the original inputs; thisis calledfeature extraction orfeature construction. These hidden features are then passed as
input to the ﬁnal GLM. This approach is particularly useful for problems where the original inputfeatures are not very individually informative. For example, each pixel in an image is not veryinformative; it is the combination of pixels that tells us what objects are present. Conversely, fora task such as document classiﬁcation using a bag of words representation, each feature (wordcount) isinformative on its own, so extracting “higher order” features is less important. Not
suprisingly, then, much of the work in neural networks has been motivated by visual pattern
16.5. Feedforward neural networks (multilayer perceptrons) 565
Figure 16.12 The convolutional neural network from (Simard et al. 2003). Source: http://www .codep
roject.com/KB/library/NeuralNetRecognition .aspx. Used with kind permission of Mike O’Neill.
recognition (e.g., (LeCun et al. 1989)), although they have also been applied to other types of
data, including text (e.g., (Collobert and Weston 2008)).
A form of MLP which is particularly well suited to 1d signals like speech or text, or 2d signals
like images, is the convolutional neural network . This is an MLP in which the hidden units
have local receptive ﬁelds (as in the primary visual cortex), and in which the weights are tied
or shared across the image, in order to reduce the number of parameters. Intuitively, the effect
of such spatial parameter tying is that any useful features that are “discovered” in some portion
of the image can be re-used everywhere else without having to be independently learned. The
resulting network then exhibits translation invariance , meaning it can classify patterns no
matter where they occur inside the input image.
Figure 16.12 gives an example of a convolutional network, designed by Simard and colleagues
(Simard et al. 2003), with 5 layers (4 layers of adjustable parameters) designed to classify 29×29
gray-scale images of handwritten digits from the MNIST dataset (see Section 1.2.1.3). In layer 1,
we have 6 feature maps each of which has size 13×13. Each hidden node in one of these
feature maps is computed by convolving the image with a 5×5weight matrix (sometimes called
a kernel), adding a bias, and then passing the result through some form of nonlinearity. There
are therefore 13×13×6 = 1014 neurons in Layer 1, and (5×5+1)×6 = 156weights. (The
"+1" is for the bias.) If we did not share these parameters, there would be 1014×26 = 26,364
weights at the ﬁrst layer. In layer 2, we have 50 feature maps, each of which is obtained by
convolving each feature map in layer 1 with a 5×5weight matrix, adding them up, adding a
bias, and passing through a nonlinearity. There are therefore 5×5×50 = 1250 neurons in
Layer 2,(5×5+1 )×6×50 = 7800 adjustable weights (one kernel for each pair of feature
566 Chapter 16. Adaptive basis function models
maps in layers 1 and 2), and 1250×26 = 32, 500connections. Layer 3 is fully connected to
layer 2, and has 100 neurons and 100×(1250+1) = 125, 100weights. Finally, layer 4 is also
fully connected, and has 10 neurons, and 10×(100 + 1) = 1010 weights. Adding the above
numbers, there are a total of 3,215 neurons, 134,066 adjustable weights, and 184,974 connections.
This model is usually trained using stochastic gradient descent (see Section 16.5.4 for details).
A single pass over the data set is called an epoch. When Mike O’Neill did these experiments in
2006, he found that a single epoch took about 40 minutes (recall that there are 60,000 trainingexamples in MNIST). Since it took about 30 epochs for the error rate to converge, the totaltraining time was about 20 hours.
5Using this technique, he obtained a misclassiﬁcation rate on
the 10,000 test cases of about 1.40%.
To further reduce the error rate, a standard trick is to expand the training set by including
distorted versions of the original data, to encourage the network to be invariant to small changes
that don’t affect the identity of the digit. These can be created by applying a random ﬂow ﬁeldto shift pixels around. See Figure 16.13 for some examples. (If we use online training, such asstochastic gradient descent, we can create these distortions on the ﬂy, rather than having tostore them.) Using this technique, Mike O’Neill obtained a misclassiﬁcation rate on the 10,000test cases of about 0.74%, which is close to the current state of the art.
6
Yann Le Cun and colleagues (LeCun et al. 1998) obtained similar performance using a slightly
more complicated architecture shown in Figure 16.14. This model is known as LeNet5, and
historically it came before the model in Figure 16.12. There are two main differences. First,LeNet5 has a subsampling layer between each convolutional layer, which either averages or
computes the max over each small window in the previous layer, in order to reduce the size, andto obtain a small amount of shift invariance. The convolution and sub-sampling combinationwas inspired by Hubel and Wiesel’s model of simple and complex cells in the visual cortex(Hubel and Wiesel 1962), and it continues to be popular in neurally-inspired models of visualobject recognition (Riesenhuber and Poggio 1999). A similar idea ﬁrst appeared in Fukushima’sneocognitron (Fukushima 1975), though no globally supervised training algorithm was available
at that time.
The second difference between LeNet5 and the Simard architecture is that the ﬁnal layer is
actually an RBF network rather than a more standard sigmoidal or softmax layer. This modelgets a test error rate of about 0.95% when trained with no distortions, and 0.8% when trainedwith distortions. Figure 16.15 shows all 82 errors made by the system. Some are genuinelyambiguous, but several are errors that a person would never make. A web-based demo of theLeNet5 can be found at http://yann .lecun.com/exdb/lenet/index .html.
Of course, classifying isolated digits is of limited applicability: in the real world, people usually
write strings of digits or other letters. This requires both segmentation and classiﬁcation. Le Cunand colleagues devised a way to combine convolutional neural networks with a model similarto a conditional random ﬁeld (described in Section 19.6) to solve this problem. The systemwas eventually deployed by the US postal service. (See (LeCun et al. 1998) for a more detailedaccount of the system, which remains one of the best performing systems for this task.)
5. Implementation details: Mike used C++ code and a variety of speedup tricks. He was using standard 2006 era
hardware (an Intel Pentium 4 hyperthreaded processor running at 2.8GHz). See http://www .codeproject .com/KB/
library/NeuralNetRecognition .aspxfor details.
6. A list of various methods, along with their misclassiﬁcation rates on the MNIST test set, is available from http:
//yann.lecun.com/exdb/mnist/ . Error rates within 0.1–0.2% of each other are not statistically signiﬁcantly different.
16.5. Feedforward neural networks (multilayer perceptrons) 567
(a)
 (b)
(c) (d)
(e) (f)
Figure 16.13 Several synthetic warpings of a handwritten digit. Based on Figure 5.14 of (Bishop 2006a).
Figure generated by elasticDistortionsDemo , written by Kevin Swersky.
INPUT
32x32
Convolutions Subsampling ConvolutionsC1: feature maps 
6@28x28
SubsamplingS2: f. maps
6@14x14S4: f. maps 16@5x5
C5: layer
120C3: f. maps 16@10x10
F6: layer
 84
Full connection
Full connectionGaussian connectionsOUTPUT
 10
Figure 16.14 LeNet5, a convolutional neural net for classifying handwritten digits. Source: Figure 2 from
(LeCun et al. 1998) . Used with kind permission of Yann LeCun.
568 Chapter 16. Adaptive basis function models
4−>6
3−>5
8−>2
2−>1
5−>3
4−>8
2−>8
3−>5
6−>5
7−>3
9−>4
8−>0
7−>8
5−>3
8−>7
0−>6
3−>7
2−>7
8−>3
9−>4
8−>2
5−>3
4−>8
3−>9
6−>0
9−>8
4−>9
6−>1
9−>4
9−>1
9−>4
2−>0
6−>1
3−>5
3−>2
9−>5
6−>0
6−>0
6−>0
6−>8
4−>6
7−>3
9−>4
4−>6
2−>7
9−>7
4−>3
9−>4
9−>4
9−>4
8−>7
4−>2
8−>4
3−>5
8−>4
6−>5
8−>5
3−>8
3−>8
9−>8
1−>5
9−>8
6−>3
0−>2
6−>5
9−>5
0−>7
1−>6
4−>9
2−>1
2−>8
8−>5
4−>9
7−>2
7−>2
6−>5
9−>7
6−>1
5−>6
5−>0
4−>9
2−>8
Figure 16.15 These are the 82 errors made by LeNet5 on the 10,000 test cases of MNIST. Below each
image is a label of the form correct-label →estimated-label. Source: Figure 8 of (LeCun et al. 1998).
Used with kind permission of Yann LeCun. (Compare to Figure 28.4(b) which shows the results of a deep
generative model.)
16.5.2 Other kinds of neural networks
Other network topologies are possible besides the ones discussed above. For example, we can
have skip arcs that go directly from the input to the output, skipping the hidden layer; we
can have sparse connections between the layers; etc. However, the MLP always requires that
the weights form a directed acyclic graph. If we allow feedback connections, the model is
known as a recurrent neural network ; this deﬁnes a nonlinear dynamical system, but does
not have a simple probabilistic interpretation. Such RNN models are currently the best approach
for language modeling (i.e., performing word prediction in natural language) (Tomas et al. 2011),
signiﬁcantly outperforming the standard n-gram-based methods discussed in Section 17.2.2.
If we allow symmetric connections between the hidden units, the model is known as a Hop-
ﬁeld network orassociative memory ; its probabilistic counterpart is known as a Boltzmann
machine (see Section 27.7) and can be used for unsupervised learning.
16.5.3 A brief history of the ﬁeld
Neural networks have been the subject of great interest for many decades, due to the desire to
understand the brain, and to build learning machines. It is not possible to review the entire
history here. Instead, we just give a few “edited highlights”.
The ﬁeld is generally viewed as starting with McCulloch and Pitts (McCullich and Pitts 1943),
who devised a simple mathematical model of the neuron in 1943, in which they approximated the
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 569
output as a weighted sum of inputs passed through a threshold function, y=I(/summationtext
iwixi>θ),
for some threshold θ. This is similar to a sigmoidal activation function. Frank Rosenblatt
invented the perceptron learning algorithm in 1957, which is a way to estimate the parameters of
a McCulloch-Pitts neuron (see Section 8.5.4 for details). A very similar model called the adaline
(for adaptive linear element) was invented in 1960 by Widrow and Hoff.
In 1969, Minsky and Papert (Minsky and Papert 1969) published a famous book called “Percep-
trons” in which they showed that such linear models, with no hidden layers, were very limitedin their power, since they cannot classify data that is not linearly separable. This considerablyreduced interest in the ﬁeld.
In 1986, Rumelhart, Hinton and Williams (Rumelhart et al. 1986) discovered the backpropa-
gation algorithm (see Section 16.5.4), which allows one to ﬁt models with hidden layers. (Thebackpropagation algorithm was originally discovered in (Bryson and Ho 1969), and independentlyin (Werbos 1974); however, it was (Rumelhart et al. 1986) that brought the algorithm to people’sattention.) This spawned a decade of intense interest in these models.
In 1987, Sejnowski and Rosenberg (Sejnowski and Rosenberg 1987) created the famous NETtalk
system, that learned a mapping from English words to phonetic symbols which could be fedinto a speech synthesizer. An audio demo of the system as it learns over time can be found athttp://www .cnl.salk. edu/ParallelNetsPronounce/nettalk .mp3. The systems starts by
“babbling” and then gradually learns to pronounce English words. NETtalk learned a distributed
representation (via its hidden layer) of various sounds, and its success spawned a big debate in
psychology between connectionism, based on neural networks, and computationalism, based
on syntactic rules. This debate lives on to some extent in the machine learning community,wheretherearestillargumentsaboutwhetherlearningisbestperformedusinglow-level, “neural-like” representations, or using more structured models.
In 1989, Yann Le Cun and others (LeCun et al. 1989) created the famous LeNet system described
in Section 16.5.1.
In 1992, the support vector machine (see Section 14.5) was invented (Boser et al. 1992). SVMs
provide similar prediction accuracy to neural networks while being considerably easier to train(since they use a convex objective function). This spawned a decade of interest in kernel methodsin general.
7Note, however, that SVMs do not use adaptive basis functions, so they require a fair
amount of human expertise to design the right kernel function.
In 2002, Geoff Hinton invented the contrastive divergence training procedure (Hinton 2002),
which provided a way, for the ﬁrst time, to learn deep networks, by training one layer at a timein an unsupervised fashion (see Section 27.7.2.4 for details). This in turn has spawned renewedinterest in neural networks over the last few years (see Chapter 28).
16.5.4 The backpropagation algorithm
Unlike a GLM, the NLL of an MLP is a non-convex function of its parameters. Nevertheless,we can ﬁnd a locally optimal ML or MAP estimate using standard gradient-based optimizationmethods. Since MLPs have lots of parameters, they are often trained on very large data sets.
7. It became part of the folklore during the 1990s that to get published in the top machine learning conference known as
NIPS, which stands for “neural information processing systems”, it was important to ensure your paper did not contain
the word “neural network”!
570 Chapter16. Adaptivebasisfunctionmodels
−10 −5 0 5 10−1−0.8−0.6−0.4−0.200.20.40.60.81
  
tanh
sigmoid
Figure 16.16 Two possible activation functions. tanhmaps Rto[−1,+1]and is the preferred nonlin-
earity for the hidden nodes. sigmmaps Rto[0,1]and is the preferred nonlinearity for binary nodes at
the output layer. Figure generated by tanhPlot .
Consequently it is common to use ﬁrst-order online methods, such as stochastic gradient descent
(Section 8.5.2), whereas GLMs are usually ﬁt with IRLS, which is a second-order offline method.
We now discuss how to compute the gradient vector of the NLL by applying the chain rule of
calculus. The resulting algorithm is known as backpropagation, for reasons that will become
apparent.
For notational simplicity, we shall assume a model with just one hidden layer. It is helpful
to distinguish the pre- and post-synaptic values of a neuron, that is, before and after we applythe nonlinearity. Let x
nbe then’th input, an=Vxnbe the pre-synaptic hidden layer, and
zn=g(an)be the post-synaptic hidden layer, where gis sometransfer function. We typically
useg(a) = sigm( a), but we may also use g(a) = tanh( a): see Figure 16.16 for a comparison.
(When the input to sigmortanhis a vector, we assume it is applied component-wise.)
We now convert this hidden layer to the output layer as follows. Let bn=Wznbe the
pre-synaptic output layer, and ˆyn=h(bn)be the post-synaptic output layer, where his
another nonlinearity, corresponding to the canonical link for the GLM. (We reserve the notationy
n, without the hat, for the output corresponding to the n’th training case.) For a regression
model, we use h(b)=b; for binary classifcation, we use h(b)=[ s i g m ( b1),...,sigm(bc)];f o r
multi-class classiﬁcation, we use h(b)=S(b).
We can write the overall model as follows:
xnV→ang→znW→bnh→ˆyn (16.65)
The parameters of the model are θ=(V,W), the ﬁrst and second layer weight matrices. Offset
or bias terms can be accomodated by clamping an element of xnandznto 1.8
8. In the regression setting, we can easily estimate the variance of the output noise using the empirical variance of the
residual errors, ˆσ2=1
N||ˆy(ˆθ)−y||2, after training is complete. There will be one value of σ2for each output node,
if we are performing multi-target regression, as we usually assume.
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 571
In the regression case, with Koutputs, the NLL is given by the squared error:
J(θ)=−/summationdisplay
n/summationdisplay
k(ˆynk(θ)−ynk)2(16.66)
In the classiﬁcation case, with Kclasses, the NLL is given by the cross entropy
J(θ)=−/summationdisplay
n/summationdisplay
kynklogˆynk(θ) (16.67)
Our task is to compute ∇θJ. We will derive this for each nseparately; the overall gradient is
obtained by summing over n, although often we just use a mini-batch (see Section 8.5.2).
Let us start by considering the output layer weights. We have
∇wkJn=∂Jn
∂bnk∇wkbnk=∂Jn
∂bnkzn (16.68)
sincebnk=wT
kzn. Assuming his the canonical link function for the output GLM, then
Equation 9.91 tells us that
∂Jn
∂bnk/definesδw
nk=(ˆynk−ynk) (16.69)
which is the error signal. So the overall gradient is
∇wkJn=δw
nkzn (16.70)
which is the pre-synaptic input to the output layer, namely zn, times the error signal, namely
δw
nk.
For the input layer weights, we have
∇vjJn=∂Jn
∂anj∇vjanj/definesδv
njxn (16.71)
where we exploited the fact that anj=vT
jxn. All that remains is to compute the ﬁrst level
error signal δv
nj.W eh a v e
δv
nj=∂Jn
∂anj=K/summationdisplay
k=1∂Jn
∂bnk∂bnk
∂anj=K/summationdisplay
k=1δw
nk∂bnk
∂anj(16.72)
Now
bnk=/summationdisplay
jwkjg(anj) (16.73)
so
∂bnk
∂anj=wkjg/prime(anj) (16.74)
whereg/prime(a)=d
dag(a). For tanh units, g/prime(a)=d
datanh(a)=1−tanh2(a)=sech2(a), and
for sigmoid units, g/prime(a)=d
daσ(a)=σ(a)(1−σ(a)). Hence
δv
nj=K/summationdisplay
k=1δw
nkwkjg/prime(anj) (16.75)
572 Chapter16. Adaptivebasisfunctionmodels
Thus the layer 1 errors can be computed by passing the layer 2 errors back through the Wmatrix;
hencetheterm“backpropagation”. Thekeypropertyisthatwecancomputethegradientslocally:
each node only needs to know about its immediate neighbors. This is supposed to make thealgorithm “neurally plausible”, although this interpretation is somewhat controversial.
Putting it all together, we can compute all the gradients as follows: we ﬁrst perform a
forwards pass to compute a
n,zn,bnandˆyn. We then compute the error for the output layer,
δ(2)
n=ˆyn−yn, which we pass backwards through Wusing Equation 16.75 to compute the
error for the hidden layer, δ(1)n. We then compute the overall gradient as follows:
∇θJ(θ)=/summationdisplay
n[δvnxn,δwnzn] (16.76)
16.5.5 Identiﬁability
It is easy to see that the parameters of a neural network are not identiﬁable. For example, we
can change the sign of the weights going into one of the hidden units, so long as we changethe sign of all the weights going out of it; these effects cancel, since tanh is an odd function, sotanh(−a)=−tanh(a). There will be Hsuch sign ﬂip symmetries, leading to 2
Hequivalent
settings of the parameters. Similarly, we can change the identity of the hidden units withoutaffecting the likelihood. There are H!such permutations. The total number of equivalent
parameter settings (with the same likelihood) is therefore H!2
H.
In addition, there may be local minima due to the non-convexity of the NLL. This can
be a more serious problem, although with enough data, these local optima are often quite“shallow”, and simple stochastic optimization methods can avoid them. In addition, it is commonto perform multiple restarts, and to pick the best solution, or to average over the resultingpredictions. (It does not make sense to average the parameters themselves, since they are notidentiﬁable.)
16.5.6 Regularization
As usual, the MLE can overﬁt, especially if the number of nodes is large. A simple way to preventthis is called early stopping, which means stopping the training procedure when the error on
the validation set ﬁrst starts to increase. This method works because we usually initialize fromsmall random weights, so the model is initially simple (since the tanhandsigmfunctions are
nearly linear near the origin). As training progresses, the weights become larger, and the modelbecomes nonlinear. Eventually it will overﬁt.
Another way to prevent overﬁtting, that is more in keeping with the approaches used elsewhere
in this book, is to impose a prior on the parameters, and then use MAP estimation. It is standardto use aN(0,α
−1I)prior (equivalent to /lscript2regularization), where αis the precision (strength)
of the prior. In the neural networks literature, this is called weight decay, since it encourages
small weights, and hence simpler models. The penalized NLL objective becomes
J(θ)=−N/summationdisplay
n=1logp(yn|xn,θ)+α
2[/summationdisplay
ijv2
ij+/summationdisplay
jkw2
jk] (16.77)
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 573
(Note that we don’t penalize the bias terms.) The gradient of the modiﬁed objective becomes
∇θJ(θ)=[/summationdisplay
nδv
nxn+αv,/summationdisplay
nδwnzn+αw] (16.78)
as in Section 8.3.6.
If the regularization is sufficiently strong, it does not matter if we have too many hidden units
(apart from wasted computation). Hence it is advisable to set Hto be as large as you can afford
(say 10–100), and then to choose an appropriate regularizer. We can set the αparameter by
cross validation or empirical Bayes (see Section 16.5.7.5).
As with ridge regression, it is good practice to standardize the inputs to zero mean and unit
variance, so that the spherical Gaussian prior makes sense.
16.5.6.1 Consistent Gaussian priors *
One can show (MacKay 1992) that using the same regularization parameter for both the ﬁrst and
second layer weights results in the lack of a certain desirable invariance property. In particular,suppose we linearly scale and shift the inputs and/or outputs to a neural network regressionmodel. Then we would like the model to learn to predict the same function, by suitably scalingits internal weights and bias terms. However, the amount of scaling needed by the ﬁrst andsecond layer weights to compensate for a change in the inputs and/or outputs is not the same.Therefore we need to use a different regularization strength for the ﬁrst and second layer.Fortunately, this is easy to do — we just use the following prior:
p(θ)=N(W|0,1
αwI)N(V|0,1
αvI)N(b|0,1
αbI)N(c|0,1
αcI) (16.79)
wherebandcare the bias terms.9
To get a feeling for the effect of these hyper-parameters, we can sample MLP parameters
from this prior and plot the resulting random functions. Figure 16.17 shows some examples.Decreasing α
vallows the ﬁrst layer weights to get bigger, making the sigmoid-like shape of
the functions steeper. Decreasing αballows the ﬁrst layer biases to get bigger, which allows
the center of the sigmoid to shift left and right more. Decreasing αwallows the second layer
weights to get bigger, making the functions more “wiggly” (greater sensitivity to change in theinput, and hence larger dynamic range). And decreasing α
callows the second layer biases to
get bigger, allowing the mean level of the function to move up and down more. (In Chapter 15,we will see an easier way to deﬁne priors over functions.)
16.5.6.2 Weight pruning
Since there are many weights in a neural network, it is often helpful to encourage sparsity.Various ad-hoc methods for doing this, with names such as “optimal brain damage”, weredevised in the 1990s; see e.g., (Bishop 1995) for details.
9. Since we are regularizing the output bias terms, it is helpful, in the case of regression, to normalize the target
responses in the training set to zero mean, to be consistent with the fact that the prior on the output bias has zero
mean.
574 Chapter16. Adaptivebasisfunctionmodels
−1 −0.5 0 0.5 1−10−8−6−4−20246810aw1=0.010, ab1=0.100, aw2=1.000, ab2=1.000
(a)−1 −0.5 0 0.5 1−10−8−6−4−20246810aw1=0.001, ab1=0.100, aw2=1.000, ab2=1.000
(b)
−1 −0.5 0 0.5 1−10−8−6−4−20246810aw1=0.010, ab1=0.010, aw2=1.000, ab2=1.000
(c)−1 −0.5 0 0.5 1−10−8−6−4−20246810aw1=0.010, ab1=0.100, aw2=0.100, ab2=1.000
(d)
−1 −0.5 0 0.5 1−10−8−6−4−20246810aw1=0.010, ab1=0.100, aw2=1.000, ab2=0.100
(e)
Figure 16.17 The effects of changing the hyper-parameters on an MLP. (a) Default parameter values
αv=0.01,αb=0.1,αw=1,αc=1. (b) Decreasing αvby factor of 10. (c) Decreasing αbby
factor of 10. (d) Decreasing αwby factor of 10. (e) Decreasing αcby factor of 10. Figure generated by
mlpPriorsDemo .
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 575
Neural Network
y
h44 h43h42 h41h40
h34 h33h31h30
h24 h23 h21h20
h14 h13h22h32
h12 h11h10
x1x0
(a)−5 0 5−4−3−2−101234
  
Data
Deep Neural Net
(b)
Figure 16.18 (a) A deep but sparse neural network. The connections are pruned using /lscript1regularization.
At each level, nodes numbered 0 are clamped to 1, so their outgoing weights correspond to the offset/bias
terms. (b) Predictions made by the model on the training set. Figure generated by sparseNnetDemo ,
written by Mark Schmidt.
However, we can also use the more principled sparsity-promoting techniques we discussed in
Chapter 13. One approach is to use an /lscript1regularizer. See Figure 16.18 for an example. Another
approach is to use ARD; this is discussed in more detail in Section 16.5.7.5.
16.5.6.3 Soft weight sharing*
Another way to regularize the parameters is to encourage similar weights to share statistical
strength. But how do we know which parameters to group together? We can learn this, by usinga mixture model. That is, we model p(θ)as a mixture of (diagonal) Gaussians. Parameters that
are assigned to the same cluster will share the same mean and variance and thus will havesimilar values (assuming the variance for that cluster is low). This is called soft weight sharing
(Nowlan and Hinton 1992). In practice, this technique is not widely used. See e.g., (Bishop 2006a,p271) if you want to know the details.
16.5.6.4 Semi-supervised embedding *
An interesting way to regularize “deep” feedforward neural networks is to encourage the hiddenlayers to assign similar objects to similar representations. This is useful because it is often easyto obtain “side” information consisting of sets of pairs of similar and dissimilar objects. Forexample, in a video classiﬁcation task, neighboring frames can be deemed similar, but framesthat are distant in time can be deemed dis-similar (Mobahi et al. 2009). Note that this can bedone without collecting any labels.
LetS
ij=1if examples iandjare similar, and Sij=0otherwise. Let f(xi)be some
embedding of item xi, e.g.,f(xi)=z(xi,θ),w h e r ezis the hidden layer of a neural network.
Now deﬁne a loss function L(f(xi),f(xj),Sij)that depends on the embedding of two objects,
576 Chapter16. Adaptivebasisfunctionmodels
and the observed similarity measure. For example, we might want to force similar objects to
have similar embeddings, and to force the embeddings of dissimilar objects to be a minimaldistance apart:
L(f
i,fj,Sij)=/braceleftbigg
||fi−fj||2ifSij=1
max(0,m −||fi−fj||2)ifSij=0(16.80)
wheremis some minimal margin. We can now deﬁne an augmented loss function for training
the neural network:
/summationdisplay
i∈LNLL(f(xi),yi)+λ/summationdisplay
i,j∈UL(f(xi),f(xj),Sij) (16.81)
whereLis the labeled training set, Uis the unlabeled training set, and λ≥0is some tradeoff
parameter. This is called semi-supervised embedding (Weston et al. 2008).
Such an objective can be easily optimized by stochastic gradient descent. At each itera-
tion, pick a random labeled training example, (xn,yn), and take a gradient step to optimize
NLL(f(xi),yi). Then pick a random pair of similar unlabeled examples xi,xj(these can
sometimes be generated on the ﬂy rather than stored in advance), and make a gradient step tooptimize λL(f(x
i),f(xj),1), Finally, pick a random unlabeled example xk, which with high
probability is dissimilar to xi, and make a gradient step to optimize λL(f(xi),f(xk),0).
Note that this technique is effective because it can leverage massive amounts of data. In
a related approach, (Collobert and Weston 2008) trained a neural network to distinguish validEnglish sentences from invalid ones. This was done by taking all 631 million words from EnglishWikipedia (en .wikipedia .org), and then creating windows of length 11 containing neighboring
words. This constitutes the positive examples. To create negative examples, the middle word ofeach window was replaced by a random English word (this is likely to be an “invalid” sentence— either grammatically and/or semantically — with high probability). This neural network wasthen trained over the course of 1 week, and its latent representation was then used as the inputto a supervised semantic role labeling task, for which very little labeled training data is available.(See also (Ando and Zhang 2005) for related work.)
16.5.7 Bayesian inference *
Although MAP estimation is a succesful way to reduce overﬁtting, there are still some goodreasons to want to adopt a fully Bayesian approach to “ﬁtting” neural networks:
• Integrating out the parameters instead of optimizing them is a much stronger form of regu-
larization than MAP estimation.
• We can use Bayesian model selection to determine things like the hyper-parameter settings
and the number of hidden units. This is likely to be much faster than cross validation,
especially if we have many hyper-parameters (e.g., as in ARD).
• Modelling uncertainty in the parameters will induce uncertainty in our predictive distribu-
tions, which is important for certain problems such as active learning and risk-averse decisionmaking.
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 577
• We can use online inference methods, such as the extended Kalman ﬁlter, to do online
learning (Haykin 2001).
One can adopt a variety of approximate Bayesian inference techniques in this context. In this
section, we discuss the Laplace approximation, ﬁrst suggested in (MacKay 1992, 1995b). One can
also use hybrid Monte Carlo (Neal 1996), or variational Bayes (Hinton and Camp 1993; Barberand Bishop 1998).
16.5.7.1 Parameter posterior for regression
We start by considering regression, following the presentation of (Bishop 2006a, sec 5.7), whichsummarizes the work of (MacKay 1992, 1995b). We will use a prior of the form p(w)=
N(w|0,(1/α)I),w h e r ewrepresents all the weights combined. We will denote the precision
of the noise by β=1/σ
2.
The posterior can be approximated as follows:
p(w|D,α,β)∝exp(−E(w)) (16.82)
E(w)/definesβED(w)+αE W(w) (16.83)
ED(w)/defines1
2N/summationdisplay
n=1(yn−f(xn,w))2(16.84)
EW(w)/defines1
2wTw (16.85)
whereEDis the data error, EWis the prior error, and Eis the overall error (negative log
prior plus log likelihood). Now let us make a second-order Taylor series approximation of E(w)
around its minimum (the MAP estimate)
E(w)≈E(wMP)+1
2(w−wMP)TA(w−wMP) (16.86)
whereAis the Hessian of E:
A=∇∇E(wMP)=βH+αI (16.87)
whereH=∇∇ED(wMP)is the Hessian of the data error. This can be computed exactly
inO(d2)time, where dis the number of parameters, using a variant of backpropagation (see
(Bishop 2006a, sec 5.4) for details). Alternatively, if we use a quasi-Newton method to ﬁndthe mode, we can use its internally computed (low-rank) approximation to H. (Note that
diagonal approximations of Hare usually very inaccurate.) In either case, using this quadratic
approximation, the posterior becomes Gaussian:
p(w|α,β,D)≈N(w|w
MP,A−1) (16.88)
578 Chapter16. Adaptivebasisfunctionmodels
16.5.7.2 Parameter posterior for classiﬁcation
The classiﬁcation case is the same as the regression case, except β=1andEDis a cross-
entropy error of the form
ED(w)/definesN/summationdisplay
n=1[ynlnf(xn,w)+(1−yn)lnf(xn,w)] (16.89)
(16.90)
16.5.7.3 Predictive posterior for regression
The posterior predictive density is given by
p(y|x,D,α,β)=/integraldisplay
N(y|f(x,w),1/β)N(w|wMP,A−1)dw (16.91)
This is not analytically tractable because of the nonlinearity of f(x,w). Let us therefore
construct a ﬁrst-order Taylor series approximation around the mode:
f(x,w)≈f(x,wMP)+gT(w−wMP) (16.92)
where
g=∇wf(x,w)|w=wMP (16.93)
We now have a linear-Gaussian model with a Gaussian prior on the weights. From Equation 4.126
we have
p(y|x,D,α,β)≈N(y|f(x,wMP),σ2(x)) (16.94)
where the predictive variance depends on the input xas follows:
σ2(x)=β−1+gTA−1g (16.95)
The error bars will be larger in regions of input space where we have little training data. SeeFigure 16.19 for an example.
16.5.7.4 Predictive posterior for classiﬁcation
In this section, we discuss how to approximate p(y|x,D)in the case of binary classiﬁcation.
The situation is similar to the case of logistic regression, discussed in Section 8.4.4, except inaddition the posterior predictive mean is a non-linear function of w. Speciﬁcally, we have
μ=E[y|x,w]=s i g m ( a(x,w)),w h e r e a(x,w)is the pre-synaptic output of the ﬁnal layer.
Let us make a linear approximation to this:
a(x,w)≈a
MP(x)+gT(w−wMP) (16.96)
whereaMP(x)=a(x,wMP)andg=∇xa(x,wMP)can be found by a modiﬁed version of
backpropagation. Clearly
p(a|x,D)≈N(a(x,wMP),g(x)TA−1g(x)) (16.97)
16.5. Feedforwardneuralnetworks(multilayerperceptrons) 579
0 0.2 0.4 0.6 0.8 1−1.5−1−0.500.511.5
InputTarget
  
data
function
network
error bars
(a)0 0.2 0.4 0.6 0.8 1−1.5−1−0.500.511.5
  
Data
Function
Prediction
Samples
(b)
Figure 16.19 The posterior predictive density for an MLP with 3 hidden nodes, trained on 16 data points.
The dashed green line is the true function. (a) Result of using a Laplace approximation, after performing
empirical Bayes to optimize the hyperparameters. The solid red line is the posterior mean prediction,and the dotted blue lines are 1 standard deviation above and below the mean. Figure generated bymlpRegEvidenceDemo . (b) Result of using hybrid Monte Carlo, using the same trained hyperparameters
as in (a). The solid red line is the posterior mean prediction, and the dotted blue lines are samples fromthe posterior predictive. Figure generated by mlpRegHmcDemo , written by Ian Nabney.
Hence the posterior predictive for the output is
p(y=1|x,D)=/integraldisplay
sigm(a)p(a|x,D)da≈sigm(κ(σ2
a)bTwMP) (16.98)
whereκis deﬁned by Equation 8.70, which we repeat here for convenience:
κ(σ2)/defines(1+πσ2/8)−1
2 (16.99)
Of course, a simpler (and potentially more accurate) alternative to this is to draw a few samples
from the Gaussian posterior and to approximate the posterior predictive using Monte Carlo.
In either case, the effect of taking uncertainty of the parameters into account, as in Sec-
tion 8.4.4, is to “moderate” the conﬁdence of the output; the decision boundary itself is unaf-
fected, however.
16.5.7.5 ARD for neural networks
Once we have made the Laplace approximation to the posterior, we can optimize the marginallikelihood wrt the hyper-parameters αusing the same ﬁxed-point equations as in Section 13.7.4.2.
Typically we use one hyper-parameter for the weight vector leaving each node, to achieve aneffect similar to group lasso (Section 13.5.1). That is, the prior has the form
p(θ)=
D/productdisplay
i=1N(v:,i|0,1
αv,iI)H/productdisplay
j=1N(w:,j|0,1
αw,jI) (16.100)
If we ﬁnd αv,i=∞, then input feature iis irrelevant, and its weight vector v:,iis pruned out.
Similarly, if we ﬁnd αw,j=∞, then hidden feature jis irrelevant. This is known as automatic
580 Chapter16. Adaptivebasisfunctionmodels
relevancy determination or ARD, which was discussed in detail in Section 13.7. Applying this to
neural networks gives us an efficient means of variable selection in non-linear models.
The software package NETLABcontains a simple example of ARD applied to a neural network,
called demard. This demo creates some data according to a nonlinear regression function
f(x1,x2,x3)=s i n ( 2 πx1)+/epsilon1,w h e r ex2is a noisy copy of x1. We see that x2andx3are
irrelevant for predicting the target. However, x2is correlated with x1, which is relevant. Using
ARD, the ﬁnal hyper-parameters are as follows:
α=[ 0.2,21.4,249001.8] (16.101)
This clearly indicates that feature 3 is irrelevant, feature 2 is only weakly relevant, and feature 1is very relevant.
16.6 Ensemble learning
Ensemble learning refers to learning a weighted combination of base models of the form
f(y|x,π)=/summationdisplay
m∈Mwmfm(y|x) (16.102)
where the wmare tunable parameters. Ensemble learning is sometimes called a committee
method, since each base model fmgets a weighted “vote”.
Clearly ensemble learning is closely related to learning adaptive-basis function models. In
fact, one can argue that a neural net is an ensemble method, where fmrepresents the m’th
hidden unit, and wmare the output layer weights. Also, we can think of boosting as kind of
ensemble learning, where the weights on the base models are determined sequentially. Belowwe describe some other forms of ensemble learning.
16.6.1 Stacking
An obvious way to estimate the weights in Equation 16.102 is to use
ˆw=a r g m i n
wN/summationdisplay
i=1L(yi,M/summationdisplay
m=1wmfm(x)) (16.103)
However, this will result in overﬁtting, with wmbeing large for the most complex model. A
simple solution to this is to use cross-validation. In particular, we can use the LOOCV estimate
ˆw=a r g m i n
wN/summationdisplay
i=1L(yi,M/summationdisplay
m=1wmˆf−i
m(x)) (16.104)
whereˆf−i
m(x)is the predictor obtained by training on data excluding (xi,yi). This is known
asstacking, which stands for “stacked generalization” (Wolpert 1992). This technique is more
robust to the case where the “true” model is not in the model class than standard BMA (Clarke2003). This approach was used by the Netﬂix team known as “The Ensemble”, which tied thesubmission of the winning team (BellKor’s Pragmatic Chaos) in terms of accuracy (Sill et al.2009). Stacking has also been used for problems such as image segmentation and labeling.
16.6. Ensemblelearning 581
ClassC1C2C3C4C5C6···C15
0 110000 ···1
1 001111 ···0
...
90 1 1 1 0 0 ···0
Table 16.2 Part of a 15-bit error-correcting output code for a 10-class problem. Each row deﬁnes a
two-class problem. Based on Table 16.1 of (Hastie et al. 2009).
16.6.2 Error-correcting output codes
An interesting form of ensemble learning is known as error-correcting output codes orECOC
(Dietterich and Bakiri 1995), which can be used in the context of multi-class classiﬁcation. The
idea is that we are trying to decode a symbol (namely the class label) which has Cpossible
states. We could use a bit vector of length B=⌈log2C⌉to encode the class label, and train
Bseparate binary classiﬁers to predict each bit. However, by using more bits, and by designing
the codewords to have maximal Hamming distance from each other, we get a method that ismore resistant to individual bit-ﬂipping errors (misclassiﬁcation). For example, in Table 16.2, weuseB=1 5bits to encode a C=1 0class problem. The minimum Hamming distance between
any pair of rows is 7. The decoding rule is
ˆc(x)=m i n
cB/summationdisplay
b=1|Ccb−ˆpb(x)| (16.105)
whereCcbis theb’th bit of the codeword for class c. (James and Hastie 1998) showed that a
random code worked just as well as the optimal code: both methods work by averaging theresults of multiple classiﬁers, thereby reducing variance.
16.6.3 Ensemble learning is not equivalent to Bayes model averaging
In Section 5.3, we discussed Bayesian model selection. An alternative to picking the best model,and then using this to make predictions, is to make a weighted average of the predictions madeby each model, i.e., we compute
p(y|x,D)=/summationdisplay
m∈Mp(y|x,m,D)p(m|D) (16.106)
This is called Bayes model averaging (BMA), and can sometimes give better performance than
using any single model (Hoeting et al. 1999). Of course, averaging over all models is typicallycomputationally infeasible (analytical integration is obviously not possible in a discrete space,although one can sometimes use dynamic programming to perform the computation exactly,e.g., (Meila and Jaakkola 2006)). A simple approximation is to sample a few models from theposterior. An even simpler approximation (and the one most widely used in practice) is to justuse the MAP model.
It is important to note that BMA is not equivalent to ensemble learning (Minka 2000c). This
latter technique corresponds to enlarging the model space, by deﬁning a single new model
582 Chapter16. Adaptivebasisfunctionmodels
model 1st2nd3rd4th5th6th7th8th9th10th
bst-dt 0.580 0.228 0.160 0.023 0.009 0.000 0.000 0.000 0.000 0.000
rf 0.390 0.525 0.084 0.001 0.000 0.000 0.000 0.000 0.000 0.000
bag-dt 0.030 0.232 0.571 0.150 0.017 0.000 0.000 0.000 0.000 0.000
svm 0.000 0.008 0.148 0.574 0.240 0.029 0.001 0.000 0.000 0.000
ann 0.000 0.007 0.035 0.230 0.606 0.122 0.000 0.000 0.000 0.000
knn 0.000 0.000 0.000 0.009 0.114 0.592 0.245 0.038 0.002 0.000
bst-stmp 0.000 0.000 0.002 0.013 0.014 0.257 0.710 0.004 0.000 0.000
dt 0.000 0.000 0.000 0.000 0.000 0.000 0.004 0.616 0.291 0.089
logreg 0.000 0.000 0.000 0.000 0.000 0.000 0.040 0.312 0.423 0.225
nb 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.030 0.284 0.686
Table 16.3 Fraction of time each method achieved a speciﬁed rank, when sorting by mean performance
across 11 datasets and 8 metrics. Based on Table 4 of (Caruana and Niculescu-Mizil 2006). Used with kind
permission of Alexandru Niculescu-Mizil.
which is a convex combination of base models, as follows:
p(y|x,π)=/summationdisplay
m∈Mπmp(y|x,m) (16.107)
In principle, we can now perform Bayesian inference to compute p(π|D); we then make pre-
dictions using p(y|x,D)=/integraltext
p(y|x,π)p(π|D)dπ. However, it is much more common to use
point estimation methods for π,a sw es a wa b o v e .
16.7 Experimental comparison
We have described many different methods for classiﬁcation and regression. Which one should
you use? That depends on which inductive bias you think is most appropriate for your domain.Usually this is hard to assess, so it is common to just try several different methods, andsee how they perform empirically. Below we summarize two such comparisons that werecarefully conducted (although the data sets that were used are relatively small). See the websitemlcomp.orgfor a distributed way to perform large scale comparisons of this kind. Of course,
we must always remember the no free lunch theorem (Section 1.4.9), which tells us that there isno universally best learning method.
16.7.1 Low-dimensional features
In 2006, Rich Caruana and Alex Niculescu-Mizil (Caruana and Niculescu-Mizil 2006) conducteda very extensive experimental comparison of 10 different binary classiﬁcation methods, on 11different data sets. The 11 data sets all had 5000 training cases, and had test sets containing∼10,000examples on average. The number of features ranged from 9 to 200, so this is much
lower dimensional than the NIPS 2003 feature selection challenge. 5-fold cross validation wasused to assess average test error. (This is separate from any internal CV a method may need touse for model selection.)
16.7. Experimentalcomparison 583
The methods they compared are as follows (listed in roughly decreasing order of performance,
as assessed by Table 16.3):
• BST-DT: boosted decision trees
• RF: random forest• BAG-DT: bagged decision trees• SVM: support vector machine• ANN: artiﬁcial neural network• KNN: K-nearest neighbors• BST-STMP: boosted stumps• DT: decision tree• LOGREG: logistic regression• NB: naive Bayes
They used 8 different performance measures, which can be divided into three groups. Thresh-
old metrics just require a point estimate as output. These include accuracy, F-score (Sec-
tion 5.7.2.3), etc. Ordering/ ranking metrics measure how well positive cases are ordered beforethe negative cases. These include area under the ROC curve (Section 5.7.2.1), average precision,and the precision/recall break even point. Finally, the probability metrics included cross-entropy(log-loss) and squared error, (y−ˆp)
2. Methods such as SVMs that do not produce calibrated
probabilities were post-processed using Platt’s logistic regression trick (Section 14.5.2.3), or usingisotonic regression. Performance measures were standardized to a 0:1 scale so they could becompared.
Obviously the results vary by dataset and by metric. Therefore just averaging the performance
does not necessarily give reliable conclusions. However, one can perform a bootstrap analysis,which shows how robust the conclusions are to such changes. The results are shown inTable 16.3. We see that most of the time, boosted decision trees are the best method, followedby random forests, bagged decision trees, SVMs and neural networks. However, the followingmethods all did relatively poorly: KNN, stumps, single decision trees, logistic regression andnaive Bayes.
These results are generally consistent with conventional wisdom of practioners in the ﬁeld.
Of course, the conclusions may change if there the features are high dimensional and/ or thereare lots of irrelevant features (as in Section 16.7.2), or if there is lots of noise, etc.
16.7.2 High-dimensional features
In 2003, the NIPS conference ran a competition where the goal was to solve binary classiﬁcationproblems with large numbers of (mostly irrelevant) features, given small training sets. (Thiswas called a “feature selection” challenge, but performance was measured in terms of predictiveaccuracy, not in terms of the ability to select features.) The ﬁve datasets that were used aresummarized in Table 16.4. The term proberefers to artiﬁcal variables that were added to the
problem to make it harder. These have no predictive power, but are correlated with the originalfeatures.
Results of the competition are discussed in (Guyon et al. 2006). The overall winner was an
approach based on Bayesian neural networks (Neal and Zhang 2006). In a follow-up study
584 Chapter16. Adaptivebasisfunctionmodels
Dataset Domain Type D %probes NtrainNvalNtest
Aracene Mass spectrometry Dense 10,000 30 100 100 700
Dexter Text classiﬁcation Sparse 20,000 50 300 300 2000Dorothea Drug discovery Sparse 100,000 50 800 350 800Gisette Digit recognition Dense 5000 30 6000 1000 6500Madelon Artiﬁcial Dense 500 96 2000 600 1800
Table 16.4 Summary of the data used in the NIPS 2003 “feature selection” challenge. For the Dorothea
datasets, the features are binary. For the others, the features are real-valued.
Screened features ARD
Method Avg rank Avg time Avg rank Avg time
HMC MLP 1.5 384 (138) 1.6 600 (186)
Boosted MLP 3.8 9.4 (8.6) 2.2 35.6 (33.5)
Bagged MLP 3.6 3.5 (1.1) 4.0 6.4 (4.4)
Boosted trees 3.4 3.03 (2.5) 4.0 34.1 (32.4)
Random forests 2.7 1.9 (1.7) 3.2 11.2 (9.3)
Table 16.5 Performance of different methods on the NIPS 2003 “feature selection” challenge. (HMC
stands for hybrid Monte Carlo; see Section 24.5.4.) We report the average rank (lower is better) across the
5 datasets. We also report the average training time in minutes (standard error in brackets). The MCMCand bagged MLPs use two hidden layers of 20 and 8 units. The boosted MLPs use one hidden layer with 2or 4 hidden units. The boosted trees used depths between 2 and 9, and shrinkage between 0.001 and 0.1.Each tree was trained on 80% of the data chosen at random at each step (so-called stochastic gradient
boosting). From Table 11.3 of (Hastie et al. 2009).
(Johnson 2009), Bayesian neural nets (MLPs with 2 hidden layers) were compared to several other
methods based on bagging and boosting. Note that all of these methods are quite similar: ineach case, the prediction has the form
ˆf(x
∗)=M/summationdisplay
m=1wmE[y|x∗,θm] (16.108)
The Bayesian MLP was ﬁt by MCMC (hybrid Monte Carlo), so we set wm=1/Mand setθm
to a draw from the posterior. In bagging, we set wm=1/Mandθmis estimated by ﬁtting
the model to a bootstrap sample from the data. In boosting, we set wm=1and theθmare
estimated sequentially.
To improve computational and statistical performance, some feature selection was performed.
Two methods were considered: simple uni-variate screening using T-tests, and a method basedon MLP+ARD. Results of this follow-up study are shown in Table 16.5. We see that Bayesian MLPsare again the winner. In second place are either random forests or boosted MLPs, dependingon the preprocessing. However, it is not clear how statistically signiﬁcant these differences are,since the test sets are relatively small.
In terms of training time, we see that MCMC is much slower than the other methods. It would
be interesting to see how well deterministic Bayesian inference (e.g., Laplace approximation)would perform. (Obviously it will be much faster, but the question is: how much would one lose
16.8. Interpretingblack-boxmodels 585
0.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x1partial dependence
0.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x20.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x30.2 0.4 0.6 0.8 1.08 1 01 21 41 61 82 0
x40.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x5
0.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x6partial dependence
0.2 0.4 0.6 0.8 1.08 1 01 21 41 61 82 0
x70.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x80.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x90.2 0.4 0.6 0.88 1 01 21 41 61 82 0
x10
Figure 16.20 Partial dependence plots for the 10 predictors in Friedman’s synthetic 5-dimensional re-
gression problem. Source: Figure 4 of (Chipman et al. 2010) . Used with kind permission of Hugh
Chipman.
in statistical performance?)
16.8 Interpreting black-box models
Linear models are popular in part because they are easy to interpet. However, they often are
poor predictors, which makes them a poor proxy for “nature’s mechanism”. Thus any conclusionsabout the importance of particular variables should only be based on models that have goodpredictive accuracy (Breiman 2001b). (Interestingly, many standard statistical tests of “goodnessof ﬁt” do not test the predictive accuracy of a model.)
In this chapter, we studied black-box models, which do have good predictive accuracy.
Unfortunately, they are hard to interpret directly. Fortunately, there are various heuristics we canuse to “probe” such models, in order to assess which input variables are the most important.
As a simple example, consider the following non-linear function, ﬁrst proposed (Friedman
1991) to illustrate the power of MARS:
f(x)=1 0s i n ( πx
1x2)+20(x3−0.5)2+10x4+5x5+/epsilon1 (16.109)
where/epsilon1∼N(0,1). We see that the output is a complex function of the inputs. By augmenting
thexvector with additional irrelevant random variables, all drawn uniform on [0,1], we can
create a challenging feature selection problem. In the experiments below, we add 5 extra dummyvariables.
586 Chapter16. Adaptivebasisfunctionmodels
1111
1
1 1 1 1 1
2468 1 00.00 0.05 0.10 0.15 0.20 0.25usage2
222
2
2 2 2 2 23333
3
3 33 3 34
444
4
4444 45555
5
5 5 555
Figure 16.21 Average usage of each variable in a BART model ﬁt to data where only the ﬁrst 5 features are
relevant. The different coloured lines correspond to different numbers of trees in the ensemble. Source:
Figure 5 of (Chipman et al. 2010) . Used with kind permission of Hugh Chipman.
One useful way to measure the effect of a set sof variables on the output is to compute a
partial dependence plot (Friedman 2001). This is a plot of f(xs)vsxs,w h e r ef(xs)is deﬁned
as the response to xswith the other predictors averaged out:
f(xs)=1
NN/summationdisplay
i=1f(xs,xi,−s) (16.110)
Figure 16.20 shows an example where we use sets corresponding to each single variable. The data
was generated from Equation 16.109, with 5 irrelevant variables added. We then ﬁt a BART model(Section 16.2.5) and computed the partial dependence plots. We see that the predicted responseis invariant for s∈{6,...,10}, indicating that these variables are (marginally) irrelevant. The
response is roughly linear in x
4andx5, and roughly quadratic in x3. (The error bars are obtained
by computing empirical quantiles of f(x,θ)based on posterior samples of θ; alternatively, we
can use bootstrap.)
Another very useful summary computes the relative importance of predictor variables.
This can be thought of as a nonlinear, or even “model free”, way of performing variable selection,although the technique is restricted to ensembles of trees. The basic idea, originally proposedin (Breiman et al. 1984), is to count how often variable jis used as a node in any of the trees.
In particular, let v
j=1
M/summationtextM
m=1I(j∈Tm)be the proportion of all splitting rules that use xj,
whereTmis them’th tree. If we can sample the posterior of trees, p(T1:M|D), we can easily
compute the posterior for vj. Alternatively, we can use bootstrap.
Figure 16.21 gives an example, using BART. We see that the ﬁve relevant variables are chosen
much more than the ﬁve irrelevant variables. As we increase the number Mof trees, all the
variables are more likely to be chosen, reducing the sensitivity of this method, but for small M,
the method is farily diagnostic.
16.8. Interpretingblack-boxmodels 587
Exercises
Exercise 16.1 Nonlinear regression for inverse dynamics
In this question, we ﬁt a model which can predict what torques a robot needs to apply in order to make
its arm reach a desired point in space. The data was collected from a SARCOS robot arm with 7 degrees of
freedom. The input vector x∈R21encodes the desired position, velocity and accelaration of the 7 joints.
The output vector y∈R7encodes the torques that should be applied to the joints to reach that point.
The mapping from xtoyis highly nonlinear.
We have N=4 8,933training points and Ntest=4,449testing points. For simplicity, we following
standard practice and focus on just predicting a scalar output, namely the torque for the ﬁrst joint.
Download the data from http://www .gaussianprocess .org/gpml . Standardize the inputs so they
have zero mean and unit variance on the training set, and center the outputs so they have zero mean
on the training set. Apply the corresponding transformations to the test data. Below we will describevarious models which you should ﬁt to this transformed data. Then make predictions and compute thestandardized mean squared error on the test set as follows:
SMSE=
1
Ntest/summationtextNtest
i=1(yi−ˆyi)2
σ2(16.111)
whereσ2=1
Ntrain/summationtextNtrain
i=1(yi−y)2is the variance of the output computed on the training set.
a. The ﬁrst method you should try is standard linear regression. Turn in your numbers and code.
(According to (Rasmussen and Williams 2006, p24), you should be able to achieve a SMSE of 0.075
using this method.)
b. Now try running K-means clustering (using cross validation to pick K). Then ﬁt an RBF network to
the data, using the μkestimated by K-means. Use CV to estimate the RBF bandwidth. What SMSE do
you get? Turn in your numbers and code. (According to (Rasmussen and Williams 2006, p24), Gaussianprocess regression can get an SMSE of 0.011, so the goal is to get close to that.)
c. Now try ﬁtting a feedforward neural network. Use CV to pick the number of hidden units and the
strength of the /lscript
2regularizer. What SMSE do you get? Turn in your numbers and code.

17 Markov and hidden Markov models
17.1 Introduction
In this chapter, we discuss probabilistic models for sequences of observations, X1,...,X T,o f
arbitrary length T. Such models have applications in computational biology, natural language
processing, time series forecasting, etc. We focus on the case where we the observations occur
at discrete “time steps”, although “time” may also refer to locations within a sequence.
17.2 Markov models
Recall from Section 10.2.2 that the basic idea behind a Markov chain is to assume that Xt
captures all the relevant information for predicting the future (i.e., we assume it is a sufficientstatistic). If we assume discrete time steps, we can write the joint distribution as follows:
p(X
1:T)=p(X1)p(X2|X1)p(X3|X2)...=p(X1)T/productdisplay
t=2p(Xt|Xt−1) (17.1)
This is called a Markov chain orMarkov model.
If we assume the transition function p(Xt|Xt−1)is independent of time, then the chain is
calledhomogeneous, stationary,o r time-invariant. This is an example of parameter tying,
since the same parameter is shared by multiple variables. This assumption allows us to modelan arbitrary number of variables using a ﬁxed number of parameters; such models are calledstochastic processes.
If we assume that the observed variables are discrete, so X
t∈{1,...,K}, this is called a
discrete-state or ﬁnite-state Markov chain. We will make this assumption throughout the rest ofthis section.
17.2.1 Transition matrix
WhenXtis discrete, so Xt∈{1,...,K}, the conditional distribution p(Xt|Xt−1)can be
written as a K×Kmatrix, known as the transition matrix A,w h e r e Aij=p(Xt=
j|Xt−1=i)is the probability of going from state ito statej. Each row of the matrix sums to
one,/summationtext
jAij=1, so this is called a stochastic matrix.
590 Chapter17. MarkovandhiddenMarkovmodels
1 2α
β1−α1−β
(a)1 2 3A12 A23A11 A22 A33
(b)
Figure 17.1 State transition diagrams for some simple Markov chains. Left: a 2-state chain. Right: a
3-state left-to-right chain.
A stationary, ﬁnite-state Markov chain is equivalent to a stochastic automaton. It is common
to visualize such automata by drawing a directed graph, where nodes represent states and arrows
represent legal transitions, i.e., non-zero elements of A. This is known as a state transition
diagram. The weights associated with the arcs are the probabilities. For example, the following2-state chain
A=/parenleftbigg1−αα
β1−β/parenrightbigg
(17.2)
is illustrated in Figure 17.1(left). The following 3-state chain
A=⎛
⎝A
11A120
0A22A23
001⎞⎠ (17.3)
is illustrated in Figure 17.1(right). This is called a left-to-right transition matrix, and is com-
monly used in speech recognition (Section 17.6.2).
TheA
ijelement of the transition matrix speciﬁes the probability of getting from itojin
one step. The n-step transition matrix A(n)is deﬁned as
Aij(n)/definesp(Xt+n=j|Xt=i) (17.4)
which is the probability of getting from itojin exactly nsteps. Obviously A(1) =A. The
Chapman-Kolmogorov equations state that
Aij(m+n)=K/summationdisplay
k=1Aik(m)Akj(n) (17.5)
In words, the probability of getting from itojinm+nsteps is just the probability of getting
fromitokinmsteps, and then from ktojinnsteps, summed up over all k. We can write
the above as a matrix multiplication
A(m+n)=A(m)A(n) (17.6)
Hence
A(n)=AA(n−1) =AAA(n−2) =···=An(17.7)
Thus we can simulate multiple steps of a Markov chain by “powering up” the transition matrix.
17.2. Markovmodels 591
SAYS IT’S NOT IN THE CARDS LEGENDARY RECONNAISSANCE BY ROLLIE
DEMOCRACIES UNSUSTAINABLE COULD STRIKE REDLINING VISITS TO PROFIT
BOOKING WAIT HERE AT MADISON SQUARE GARDEN COUNTY COURTHOUSE WHERE HE
HAD BEEN DONE IN THREE ALREADY IN ANY WAY IN WHICH A TEACHER
Table 17.1 Example output from an 4-gram word model, trained using backoff smoothing on the Broadcast
News corpus. The ﬁrst 4 words are speciﬁed by hand, the model generates the 5th word, and then the
results are fed back into the model. Source: http://www .fit.vutbr .cz/~imikolov/rnnlm/gen-4gra
m.txt.
17.2.2 Application: Language modeling
One important application of Markov models is to make statistical language models, which are
probability distributions over sequences of words. We deﬁne the state space to be all the words
in English (or some other language). The marginal probabilities p(Xt=k)are called unigram
statistics. If we use a ﬁrst-order Markov model, then p(Xt=k|Xt−1=j)is called a bigram
model. If we use a second-order Markov model, then p(Xt=k|Xt−1=j,Xt−2=i)is
called atrigram model. And so on. In general these are called n-gram models. For example,
Figure 17.2 shows 1-gram and 2-grams counts for the letters{a,...,z,−} (where - represents
space) estimated from Darwin’s OnTheOriginOfSpecies.
Language models can be used for several things, such as the following:
•Sentence completion A language model can predict the next word given the previous
words in a sentence. This can be used to reduce the amount of typing required, which isparticularly important for disabled users (see e.g., David Mackay’s Dasher system
1), or uses of
mobile devices.
•Data compression Any density model can be used to deﬁne an encoding scheme, by
assigning short codewords to more probable strings. The more accurate the predictive model,the fewer the number of bits it requires to store the data.
•Text classiﬁcation Any density model can be used as a class-conditional density and hence
turned into a (generative) classiﬁer. Note that using a 0-gram class-conditional density (i.e.,only unigram statistics) would be equivalent to a naive Bayes classiﬁer (see Section 3.5).
•Automatic essay writing One can sample from p(x
1:t)to generate artiﬁcial text. This is
one way of assessing the quality of the model. In Table 17.1, we give an example of textgenerated from a 4-gram model, trained on a corpus with 400 million words. ((Tomas et al.2011) describes a much better language model, based on recurrent neural networks, whichgenerates much more semantically plausible text.)
1.http://www .inference .phy.cam.ac.uk/dasher/
592 Chapter17. MarkovandhiddenMarkovmodels
 1   0.16098   _
 2   0.06687   a
 3   0.01414   b
 4   0.02938   c
 5   0.03107   d
 6   0.11055   e
 7   0.02325   f
 8   0.01530   g
 9   0.04174   h
10   0.06233   i
11   0.00060   j
12   0.00309   k
13   0.03515   l
14   0.02107   m
15   0.06007   n
16   0.06066   o
17   0.01594   p
18   0.00077   q
19   0.05265   r
20   0.05761   s
21   0.07566   t
22   0.02149   u
23   0.00993   v
24   0.01341   w
25   0.00208   x
26   0.01381   y
27   0.00039   zUnigrams_abcdefghijklmnopqrstuvwxyz
_
a
b
c
d
e
f
g
h
i
j
k
l
m
n
o
p
q
r
s
t
u
v
w
x
y
zBigrams
Figure 17.2 Unigram and bigram counts from Darwin’s OnTheOriginOfSpecies. The 2D picture on the
right is a Hinton diagram of the joint distribution. The size of the white squares is proportional to the
value of the entry in the corresponding vector/ matrix. Based on (MacKay 2003, p22). Figure generated byngramPlot .
17.2.2.1 MLE for Markov language models
We now discuss a simple way to estimate the transition matrix from training data. The proba-
bility of any particular sequence of length Tis given by
p(x1:T|θ)=π (x1)A(x1,x2)...A(xT−1,xT) (17.8)
=K/productdisplay
j=1(πj)I(x1=j)T/productdisplay
t=2K/productdisplay
j=1K/productdisplay
k=1(Ajk)I(xt=k,xt−1=j)(17.9)
Hence the log-likelihood of a set of sequences D=(x1,...,xN),w h e r exi=(xi1,...,x i,Ti)
is a sequence of length Ti, is given by
logp(D|θ)=N/summationdisplay
i=1logp(xi|θ)=/summationdisplay
jN1
jlogπj+/summationdisplay
j/summationdisplay
kNjklogAjk (17.10)
where we deﬁne the following counts:
N1
j/definesN/summationdisplay
i=1I(xi1=j),Njk/definesN/summationdisplay
i=1Ti−1/summationdisplay
t=1I(xi,t=j,xi,t+1=k) (17.11)
17.2. Markovmodels 593
Hence we can write the MLE as the normalized counts:
ˆπj=N1
j/summationtext
jN1
j,ˆAjk=Njk/summationtext
kNjk(17.12)
These results can be extended in a straightforward way to higher order Markov models.
However, the problem of zero-counts becomes very acute whenever the number of states K,
and/or the order of the chain, n, is large. An n-gram models has O(Kn)parameters. If we have
K∼50,000words in our vocabulary, then a bi-gram model will have about 2.5 billion free
parameters, corresponding to all possible word pairs. It is very unlikely we will see all of these
in our training data. However, we do not want to predict that a particular word string is totallyimpossible just because we happen not to have seen it in our training text — that would be asevere form of overﬁtting.
2
A simple solution to this is to use add-one smoothing, where we simply add one to all the
empirical counts before normalizing. The Bayesian justiﬁcation for this is given in Section 3.3.4.1.However add-one smoothing assumes all n-grams are equally likely, which is not very realistic.A more sophisticated Bayesian approach is discussed in Section 17.2.2.2.
An alternative to using smart priors is to gather lots and lots of data. For example, Google
has ﬁt n-gram models (for n=1:5) based on one trillion words extracted from the web. Their
data, which is over 100GB when uncompressed, is publically available.
3An example of their
data, for a set of 4-grams, is shown below.
serve as the incoming 92
serve as the incubator 99
serve as the independent 794
serve as the index 223
serve as the indication 72
serve as the indicator 120
serve as the indicators 45
serve as the indispensable 111
serve as the indispensible 40
serve as the individual 234
...
Although such an approach, based on “brute force and ignorance”, can be successful, it is
rather unsatisfying, since it is clear that this is not how humans learn (see e.g., (Tenenbaum
and Xu 2000)). A more reﬁned Bayesian approach, that needs much less data, is described inSection 17.2.2.2.
17.2.2.2 Empirical Bayes version of deleted interpolation
A common heuristic used to ﬁx the sparse data problem is called deleted interpolation (Chen
and Goodman 1996). This deﬁnes the transition matrix as a convex combination of the bigram
2. A famous example of an improbable, but syntactically valid, English word string, due to Noam Chomsky, is “colourless
green ideas sleep furiously”. We would not want our model to predict that this string is impossible. Even ungrammatical
constructs should be allowed by our model with a certain probability, since people frequently violate grammatical rules,
especially in spoken language.
3. See http://googleresearch .blogspot .com/2006/08/all-our-n-gram-are-belong-to-you .htmlfor de-
tails.
594 Chapter17. MarkovandhiddenMarkovmodels
frequencies fjk=Njk/Njand the unigram frequencies fk=Nk/N:
Ajk=( 1−λ)fjk+λfk (17.13)
The term λis usually set by cross validation. There is also a closely related technique called
backoff smoothing; the idea is that if fjkis too small, we “back off” to a more reliable estimate,
namelyfk.
We will now show that the deleted interpolation heuristic is an approximation to the predic-
tions made by a simple hierarchical Bayesian model. Our presentation follows (McKay and Peto
1995). First, let us use an independent Dirichlet prior on each row of the transition matrix:
Aj∼Dir(α0m1,...,α 0mK)=D i r (α0m)=D i r ( α) (17.14)
whereAjis rowjof the transition matrix, mis the prior mean (satisfying/summationtext
kmk=1) and
α0is the prior strength. We will use the same prior for each row: see Figure 17.3.
The posterior is given by Aj∼Dir(α+Nj),w h e r eNj=(Nj1,...,N jK)is the vector
that records the number of times we have transitioned out of state jto each of the other states.
From Equation 3.51, the posterior predictive density is
p(Xt+1=k|Xt=j,D)=Ajk=Njk+αmk
Nj+α0=fjkNj+αmk
Nj+α0=( 1−λj)fjk+λjmk(17.15)
whereAjk=E[Ajk|D,α]and
λj=α
Nj+α0(17.16)
This is very similar to Equation 17.13 but not identical. The main difference is that the Bayesian
model uses a context-dependent weight λjto combine mkwith the empirical frequency fjk,
rather than a ﬁxed weight λ. This is like adaptive deleted interpolation. Furthermore, rather
than backing off to the empirical marginal frequencies fk, we back off to the model parameter
mk.
The only remaining question is: what values should we use for αandm? Let’s use empirical
Bayes. Since we assume each row of the transition matrix is a priori independent given α, the
marginal likelihood for our Markov model is found by applying Equation 5.24 to each row:
p(D|α)=/productdisplay
jB(Nj+α)
B(α)(17.17)
whereNj=(Nj1,...,N jK)are the counts for leaving state jandB(α)is the generalized
beta function.
We can ﬁt this using the methods discussed in (Minka 2000e). However, we can also use the
following approximation (McKay and Peto 1995, p12):
mk∝| {j:Njk>0}| (17.18)
This says that the prior probability of word kis given by the number of different contexts in
which it occurs, rather than the number of times it occurs. To justify the reasonableness of thisresult, Mackay and Peto (McKay and Peto 1995) give the following example.
17.2. Markovmodels 595
Figure 17.3 A Markov chain in which we put a different Dirichlet prior on every row of the transition
matrixA, but the hyperparameters of the Dirichlet are shared.
Imagine, you see, that the language, you see, has, you see, a
frequently occuring couplet ’you see’, you see, in which the second
word of the couplet, see, follows the first word, you, with very high
probability, you see. Then the marginal statistics, you see, are going
to become hugely dominated, you see, by the words you and see, with
equal frequency, you see.
If we use the standard smoothing formula, Equation 17.13, then P(you |novel) and P(see |novel),
for some novel context word not seen before, would turn out to be the same, since the marginal
frequencies of ’you’ and ’see’ are the same (11 times each). However, this seems unreasonable.
’You’ appears in many contexts, so P(you |novel) should be high, but ’see’ only follows ’you’, so
P(see|novel) should be low. If we use the Bayesian formula Equation 17.15, we will get this effect
for free, since we back off to mknotfk, andmkwill be large for ’you’ and small for ’see’ by
Equation 17.18.
Unfortunately, although elegant, this Bayesian model does not beat the state-of-the-art lan-
guage model, known as interpolated Kneser-Ney (Kneser and Ney 1995; Chen and Goodman
1998). However, in (Teh 2006), it was shown how one can build a non-parametric Bayesian
model which outperforms interpolated Kneser-Ney, by using variable-length contexts. In (Wood
et al. 2009), this method was extended to create the “sequence memoizer”, which is currently
(2010) the best-performing language model.4
17.2.2.3 Handling out-of-vocabulary words
While the above smoothing methods handle the case where the counts are small or even zero,
none of them deal with the case where the test set may contain a completely novel word. In
particular, they all assume that the words in the vocabulary (i.e., the state space of Xt)i sﬁ x e d
and known (typically it is the set of unique words in the training data, or in some dictionary).
4. Interestingly, these non-parametric methods are based on posterior inference using MCMC (Section 24.1) and/or
particle ﬁltering (Section 23.5), rather than optimization methods such as EB. Despite this, they are quite efficient.
596 Chapter17. MarkovandhiddenMarkovmodels
1 2 31.0 0.5
0.51.0
(a)12340.9
0.90.5 0.51.0 0.1 0.1
(b)
Figure 17.4 Some Markov chains. (a) A 3-state aperiodic chain. (b) A reducible 4-state chain.
Even if all Ajk’s are non-zero, none of these models will predict a novel word outside of this set,
and hence will assign zero probability to a test sentence with an unfamiliar word. (Unfamiliar
words are bound to occur, because the set of words is an open class. For example, the set ofproper nouns (names of people and places) is unbounded.)
A standard heuristic to solve this problem is to replace all novel words with the special symbol
unk, which stands for “unknown”. A certain amount of probability mass is held aside for thisevent.
AmoreprincipledsolutionwouldbetouseaDirichletprocess, whichcangenerateacountably
inﬁnite state space, as the amount of data increases (see Section 25.2.2). If all novel words are“accepted” as genuine words, then the system has no predictive power, since any misspellingwill be considered a new word. So the novel word has to be seen frequently enough to warrantbeing added to the vocabulary. See e.g., (Friedman and Singer 1999; Griffiths and Tenenbaum2001) for details.
17.2.3 Stationary distribution of a Markov chain *
We have been focussing on Markov models as a way of deﬁning joint probability distributionsover sequences. However, we can also interpret them as stochastic dynamical systems, wherewe “hop” from one state to another at each time step. In this case, we are often interested in thelong term distribution over states, which is known as the stationary distribution of the chain.
In this section, we discuss some of the relevant theory. Later we will consider two importantapplications: Google’s PageRank algorithm for ranking web pages (Section 17.2.4), and the MCMCalgorithm for generating samples from hard-to-normalize probability distributions (Chapter 24).
17.2.3.1 What is a stationary distribution?
LetA
ij=p(Xt=j|Xt−1=i)be the one-step transition matrix, and let πt(j)=p(Xt=j)
be the probability of being in state jat timet. It is conventional in this context to assume that
πis arowvector. If we have an initial distribution over states of π0, then at time 1 we have
π1(j)=/summationdisplay
iπ0(i)Aij (17.19)
or, in matrix notation,
π1=π0A (17.20)
17.2. Markovmodels 597
We can imagine iterating these equations. If we ever reach a stage where
π=πA (17.21)
then we say we have reached the stationary distribution (also called the invariant distribution
orequilibrium distribution). Once we enter the stationary distribution, we will never leave.
For example, consider the chain in Figure 17.4(a). To ﬁnd its stationary distribution, we write
/parenleftbigπ1π2π3/parenrightbig
=/parenleftbigπ1π2π3/parenrightbig⎛
⎝1−A12−A13 A12 A13
A21 1−A21−A23 A23
A31 A32 1−A31−A32⎞⎠(17.22)
so
π
1=π1(1−A12−A12)+π2A21+π3A31 (17.23)
or
π1(A12+A13)=π2A21+π3A31 (17.24)
In general, we have
πi/summationdisplay
j/negationslash=iAij=/summationdisplay
j/negationslash=iπjAji (17.25)
In other words, the probability of being in state itimes the net ﬂow out of state imust equal
the probability of being in each other state jtimes the net ﬂow from that state into i. These
are called the global balance equations. We can then solve these equations, subject to the
constraint that/summationtext
jπj=1.
17.2.3.2 Computing the stationary distribution
To ﬁnd the stationary distribution, we can just solve the eigenvector equation ATv=v, and
then to set π=vT,w h e r evis an eigenvector with eigenvalue 1. (We can be sure such an
eigenvector exists, since Ais a row-stochastic matrix, so A1=1; also recall that the eigenvalues
ofAandATare the same.) Of course, since eigenvectors are unique only up to constants of
proportionality, we must normalize vat the end to ensure it sums to one.
Note, however, that the eigenvectors are only guaranteed to be real-valued if the matrix is
positive,Aij>0(and hence Aij<1, due to the sum-to-one constraint). A more general
approach, which can handle chains where some transition probabilities are 0 or 1 (such as
Figure 17.4(a)), is as follows (Resnick 1992, p138). We have Kconstraints from π(I−A)=0K×1
and 1 constraint from π1K×1=0. Since we only have Kunknowns, this is overconstrained.
So let us replace any column (e.g., the last) of I−Awith1, to get a new matrix, call it M.
Next we deﬁne r=[ 0,0,...,1], where the 1 in the last position corresponds to the column of
all 1s inM. We then solve πM=r. For example, for a 3 state chain we have to solve this
linear system:
/parenleftbig
π1π2π3/parenrightbig⎛
⎝1−A11−A121
−A211−A221
−A31−A321⎞⎠=/parenleftbig001/parenrightbig
(17.26)
598 Chapter17. MarkovandhiddenMarkovmodels
For the chain in Figure 17.4(a) we ﬁnd π=[ 0.4,0.4,0.2]. We can easily verify this is correct,
sinceπ=πA. See mcStatDist for some Matlab code.
Unfortunately, not all chains have a stationary distribution. as we explain below.
17.2.3.3 When does a stationary distribution exist? *
Consider the 4-state chain in Figure 17.4(b). If we start in state 4, we will stay there forever, since
4i sa nabsorbing state. Thus π=( 0,0,0,1)is one possible stationary distribution. However,
if we start in 1 or 2, we will oscillate between those two states for ever. So π=( 0.5,0.5,0,0)
is another possible stationary distribution. If we start in state 3, we could end up in either ofthe above stationary distributions.
We see from this example that a necessary condition to have a unique stationary distribution
is that the state transition diagram be a singly connected component, i.e., we can get from anystate to any other state. Such chains are called irreducible.
Now consider the 2-state chain in Figure 17.1(a). This is irreducible provided α,β >0.
Supposeα=β=0.9. It is clear by symmetry that this chain will spend 50% of its time in
each state. Thus π=( 0.5,0.5). But now suppose α=β=1. In this case, the chain will
oscillate between the two states, but the long-term distribution on states depends on where youstart from. If we start in state 1, then on every odd time step (1,3,5,...) we will be in state 1; butif we start in state 2, then on every odd time step we will be in state 2.
This example motivates the following deﬁnition. Let us say that a chain has a limiting
distribution ifπ
j= limn→∞An
ijexists and is independent of i, for allj. If this holds, then
the long-run distribution over states will be independent of the starting state:
P(Xt=j)=/summationdisplay
iP(X0=i)Aij(t)→πjast→∞ (17.27)
Let us now characterize when a limiting distribution exists. Deﬁne the periodof stateito be
d(i)=gcd{t :Aii(t)>0} (17.28)
where gcd stands for greatest common divisor, i.e., the largest integer that divides all the
members of the set. For example, in Figure 17.4(a), we have d(1) =d(2) =gcd(2,3,4,6,...)=1
andd(3) =gcd(3,5,6,...)=1 .W es a yas t a t e iisaperiodic ifd(i)=1. (A sufficient condition
to ensure this is if state ihas a self-loop, but this is not a necessary condition.) We say a chain
is aperiodic if all its states are aperiodic. One can show the following important result:
Theorem 17.2.1. Every irreducible (singly connected), aperiodic ﬁnite state Markov chain has a
limitingdistribution,whichisequalto π,itsuniquestationarydistribution.
A special case of this result says that every regular ﬁnite state chain has a unique stationary
distribution, where a regularchain is one whose transition matrix satisﬁes An
ij>0for some
integernand alli,j, i.e., it is possible to get from any state to any other state in nsteps.
Consequently, after nsteps, the chain could be in any state, no matter where it started. One
can show that sufficient conditions to ensure regularity are that the chain be irreducible (singly
connected) and that every state have a self-transition.
To handle the case of Markov chains whose state-space is not ﬁnite (e.g, the countable set of
all integers, or all the uncountable set of all reals), we need to generalize some of the earlier
17.2. Markovmodels 599
deﬁnitions. Since the details are rather technical, we just brieﬂy state the main results without
proof. See e.g., (Grimmett and Stirzaker 1992) for details.
For a stationary distribution to exist, we require irreducibility (singly connected) and aperiod-
icity, as before. But we also require that each state is recurrent. (A chain in which all states
are recurrent is called a recurrent chain.) Recurrent means that you will return to that statewith probability 1. As a simple example of a non-recurrent state (i.e., a transient state), consider
Figure 17.4(b): states 3 is transient because one immediately leaves it and either spins aroundstate 4 forever, or oscillates between states 1 and 2 forever. There is no way to return to state 3.
It is clear that any ﬁnite-state irreducible chain is recurrent, since you can always get back to
where you started from. But now consider an example with an inﬁnite state space. Suppose weperform a random walk on the integers, X={...,−2,−1,0,1,2,...}.L e tA
i,i+1=pbe the
probability of moving right, and Ai,i−1=1−pbe the probability of moving left. Suppose we
start atX1=0.I fp>0.5, we will shoot off to +∞; we are not guaranteed to return. Similarly,
ifp<0.5, we will shoot off to −∞. So in both cases, the chain is not recurrent, even though
it is irreducible.
It should be intuitively obvious that we require all states to be recurrent for a stationary
distribution to exist. However, this is not sufficient. To see this, consider the random walkon the integers again, and suppose p=0.5. In this case, we can return to the origin an
inﬁnite number of times, so the chain is recurrent. However, it takes inﬁnitely long to doso. This prohibits it from having a stationary distribution. The intuitive reason is that thedistribution keeps spreading out over a larger and larger set of the integers, and never convergesto a stationary distribution. More formally, we deﬁne a state to be non-null recurrent if the
expected time to return to this state is ﬁnite. A chain in which all states are non-null is called anon-null chain.
For brevity, we we say that a state is ergodicif it is aperiodic, recurrent and non-null, and
we say a chain is ergodic if all its states are ergodic.
We can now state our main theorem:
Theorem 17.2.2. Every irreducible (singly connected), ergodic Markov chain has a limiting distri-
bution,whichisequalto π,itsuniquestationarydistribution.
This generalizes Theorem 17.2.1, since for irreducible ﬁnite-state chains, all states are recurrent
and non-null.
17.2.3.4 Detailed balance
Establishing ergodicity can be difficult. We now give an alternative condition that is easier toverify.
We say that a Markov chain Aistime reversible if there exists a distribution πsuch that
π
iAij=πjAji (17.29)
These are called the detailed balance equations. This says that the ﬂow from itojmust
equal the ﬂow from jtoi, weighted by the appropriate source probabilities.
We have the following important result.
Theorem 17.2.3. If a Markov chain with transition matrix Ais regular and satisﬁes detailed
balancewrtdistribution π,thenπisastationarydistributionofthechain.
600 Chapter17. MarkovandhiddenMarkovmodels
X1
X2
X3X4
X5 X6
Figure 17.5 A very small world wide web. Figure generated by pagerankDemo , written by Tim Davis.
Proof.To see this, note that
/summationdisplay
iπiAij=/summationdisplay
iπjAji=πj/summationdisplay
iAji=πj (17.30)
and hence π=Aπ.
Note that this condition is sufficient but not necessary (see Figure 17.4(a) for an example of a
chain with a stationary distribution which does not satisfy detailed balance).
In Section 24.1, we will discuss Markov chain Monte Carlo or MCMC methods. These take
as input a desired distribution πand construct a transition matrix (or in general, a transition
kernel)Awhich satisﬁes detailed balance wrt π. Thus by sampling states from such a chain,
we will eventually enter the stationary distribution, and will visit states with probabilities given
byπ.
17.2.4 Application: Google’s PageRank algorithm for web page ranking *
The results in Section 17.2.3 form the theoretical underpinnings to Google’s PageRank algorithm,
which is used for information retrieval on the world-wide web. We sketch the basic idea below;see (Byran and Leise 2006) for a more detailed explanation.
We will treat the web as a giant directed graph, where nodes represent web pages (documents)
and edges represent hyper-links.
5We then perform a process called web crawling. We start at
a few designated root nodes, such as dmoz. org, the home of the Open Directory Project, and
then follows the links, storing all the pages that we encounter, until we run out of time.
Next, all of the words in each web page are entered into a data structure called an inverted
index. That is, for each word, we store a list of the documents where this word occurs. (Inpractice, we store a list of hash codes representing the URLs.) At test time, when a user enters
5. In 2008, Google said it had indexed 1 trillion (1012)unique URLs. If we assume there are about 10 URLs per page
(on average), this means there were about 100 billion unique web pages. Estimates for 2010 are about 121 billion unique
web pages. Source: thenextweb .com/shareables/2011/01/11/infographic-how-big-is-the-internet .
17.2. Markovmodels 601
a query, we can just look up all the documents containing each word, and intersect these
lists (since queries are deﬁned by a conjunction of search terms). We can get a reﬁned searchby storing the location of each word in each document. We can then test if the words in adocument occur in the same order as in the query.
Let us give an example, from http://en .wikipedia .org/wiki/Inverted_index .W e
have 3 documents, T
0= “it is what it is”, T1= “what is it” and T2= “it is a banana”. Then
we can create the following inverted index, where each pair represents a document and wordlocation:
"a": {(2, 2)}
"banana": {(2, 3)}"is": {(0, 1), (0, 4), (1, 1), (2, 1)}"it": {(0, 0), (0, 3), (1, 2), (2, 0)}"what": {(0, 2), (1, 0)}
For example, we see that the word “what” occurs at location 2 (counting from 0) in document
0, and location 0 in document 1. Suppose we search for “what is it”. If we ignore word order,we retrieve the following documents:
{T
0,T1}∩{T0,T1,T2}∩{T0,T1,T2}={T0,T1} (17.31)
If we require that the word order matches, only document T1would be returned. More generally,
we can allow out-of-order matches, but can give “bonus points” to documents whose word ordermatches the query’s word order, or to other features, such as if the words occur in the title ofa document. We can then return the matching documents in decreasing order of their score/relevance. This is called document ranking.
So far, we have described the standard process of information retrieval. But the link structure
of the web provides an additional source of information. The basic idea is that some web pagesare more authoritative than others, so these should be ranked higher (assuming they matchthe query). A web page is an authority if it is linked to by many other pages. But to protectagainst the effect of so-called link farms, which are dummy pages which just link to a given
site to boost its apparent relevance, we will weight each incoming link by the source’s authority.Thus we get the following recursive deﬁnition for the authoritativeness of page j, also called its
PageRank:
π
j=/summationdisplay
iAijπi (17.32)
whereAijis the probability of following a link from itoj. We recognize Equation 17.32 as the
stationary distribution of a Markov chain.
In the simplest setting, we deﬁne Ai.as a uniform distribution over all states that iis
connected to. However, to ensure the distribution is unique, we need to make the chain into aregular chain. This can be done by allowing each state ito jump to any other state (including
itself) with some small probability. This effectively makes the transition matrix aperiodic andfully connected (although the adjacency matrix G
ijof the web itself is highly sparse).
We discuss efficient methods for computing the leading eigenvector of this giant matrix below.
But ﬁrst, let us give an example of the PageRank algorithm. Consider the small web in Figure 17.5.
602 Chapter17. MarkovandhiddenMarkovmodels
0 100 200 300 400 5000
50
100
150
200
250
300
350
400
450
500
nz = 2636
(a)0 100 200 300 400 50000.0020.0040.0060.0080.010.0120.0140.0160.0180.02
(b)
Figure 17.6 (a) Web graph of 500 sites rooted at www.harvard .edu. (b) Corresponding page rank vector.
Figure generated by pagerankDemoPmtk , Based on code by Cleve Moler (Moler 2004).
We ﬁnd that the stationary distribution is
π=( 0.3209,0.1706,0.1065,0.1368,0.0643,0.2008) (17.33)
So a random surfer will visit site 1 about 32% of the time. We see that node 1 has a higher
PageRank than nodes 4 or 6, even though they all have the same number of in-links. This isbecause being linked to from an inﬂuential nodehelps increase your PageRank score more thanbeing linked to by a less inﬂuential node.
As a slightly larger example, Figure 17.6(a) shows a web graph, derived from the root of
harvard.edu. Figure 17.6(b) shows the corresponding PageRank vector.
17.2.4.1 Efficiently computing the PageRank vector
LetG
ij=1iff there is a link from jtoi. Now imagine performing a random walk on
this graph, where at every time step, with probability p=0.85you follow one of the outlinks
uniformly at random, and with probability 1−pyou jump to a random node, again chosen
uniformly at random. If there are no outlinks, you just jump to a random page. (These randomjumps, including self-transitions, ensure the chain is irreducible (singly connected) and regular.Hence we can solve for its unique stationary distribution using eigenvector methods.) Thisdeﬁnes the following transition matrix:
M
ij=/braceleftbiggpGij/cj+δifcj/negationslash=0
1/n ifcj=0(17.34)
wherenis the number of nodes, δ=( 1−p)/nis the probability of jumping from one page
to another without following a link and cj=/summationtext
iGijrepresents the out-degree of page j. (If
n=4·109andp=0.85, then δ=3.75·10−11.) HereMis a stochastic matrix in which
columnssum to one. Note that M=ATin our earlier notation.
We can represent the transition matrix compactly as follows. Deﬁne the diagonal matrix D
with entries
djj=/braceleftbigg
1/cjifcj/negationslash=0
0ifcj=0(17.35)
17.3. HiddenMarkovmodels 603
Deﬁne the vector zwith components
zj=/braceleftbigg
δifcj/negationslash=0
1/nifcj=0(17.36)
Then we can rewrite Equation 17.34 as follows:
M=pGD+1zT(17.37)
The matrix Mis not sparse, but it is a rank one modiﬁcation of a sparse matrix. Most of the
elements of Mare equal to the small constant δ. Obviously these do not need to be stored
explicitly.
Our goal is to solve v=Mv,w h e r ev=πT. One efficient method to ﬁnd the leading
eigenvector of a large matrix is known as the power method. This simply consists of repeated
matrix-vector multiplication, followed by normalization:
v∝Mv=pGDv+1zTv (17.38)
It is possible to implement the power method without using any matrix multiplications, by
simply sampling from the transition matrix and counting how often you visit each state. This is
essentially a Monte Carlo approximation to the sum implied by v=Mv. Applying this to the
data in Figure 17.6(a) yields the stationary distribution in Figure 17.6(b). This took 13 iterations toconverge, starting from a uniform distribution. (See also the function pagerankDemo ,b yT i m
Davis, for an animation of the algorithm in action, applied to the small web example.) To handlechanging web structure, we can re-run this algorithm every day or every week, starting voff at
the old distribution (Langville and Meyer 2006).
For details on how to perform this Monte Carlo power method in a parallel distributed
computing environment, see e.g., (Rajaraman and Ullman 2010).
17.2.4.2 Web spam
PageRank is not foolproof. For example, consider the strategy adopted by JC Penney, a depart-ment store in the USA. During the Christmas season of 2010, it planted many links to its homepage on 1000s of irrelevant web pages, thus increasing its ranking on Google’s search engine(Segal 2011). Even though each of these source pages has low PageRank, there were so manyof them that their effect added up. Businesses call this search engine optimization; Google
calls itweb spam . When Google was notiﬁed of this scam (by the NewYorkTimes ), it manually
downweighted JC Penney, since such behavior violates Google’s code of conduct. The resultwas that JC Penney dropped from rank 1 to rank 65, essentially making it disappear from view.Automatically detecting such scams relies on various techniques which are beyond the scope ofthis chapter.
17.3 Hidden Markov models
As we mentioned in Section 10.2.2, a hidden Markov model orHMMconsists of a discrete-time,
discrete-state Markov chain, with hidden states zt∈{1,...,K}, plus an observation model
604 Chapter17. MarkovandhiddenMarkovmodels
−20 −15 −10 −5 0 5 10 15 20−10−505101520
12 3 4567
89
101112
13
14
151617
18
1920
(a)2 4 6 8 10 12 14 16 18 2011.21.41.61.822.22.42.62.83
(b)
Figure 17.7 (a) Some 2d data sampled from a 3 state HMM. Each state emits from a 2d Gaussian. (b) The
hidden state sequence. Based on Figure 13.8 of (Bishop 2006b). Figure generated by hmmLillypadDemo .
p(xt|zt). The corresponding joint distribution has the form
p(z1:T,x1:T)=p( z1:T)p(x1:T|z1:T)=/bracketleftBigg
p(z1)T/productdisplay
t=2p(zt|zt−1)/bracketrightBigg/bracketleftBiggT/productdisplay
t=1p(xt|zt)/bracketrightBigg
(17.39)
The observations in an HMM can be discrete or continuous. If they are discrete, it is common
for the observation model to be an observation matrix:
p(xt=l|zt=k,θ)=B(k,l) (17.40)
If the observations are continuous, it is common for the observation model to be a conditionalGaussian:
p(x
t|zt=k,θ)=N(xt|μk,Σk) (17.41)
Figure 17.7 shows an example where we have 3 states, each of which emits a different Gaussian.The resulting model is similar to a Gaussian mixture model, except the cluster membershiphas Markovian dynamics. (Indeed, HMMs are sometimes called Markov switching models
(Fruhwirth-Schnatter 2007).) We see that we tend to get multiple observations in the samelocation, and then a sudden jump to a new cluster.
17.3.1 Applications of HMMs
HMMs can be used as black-box density models on sequences. They have the advantageover Markov models in that they can represent long-range dependencies between observations,mediated via the latent variables. In particular, note that they do not assume the Markovproperty holds for the observations themselves. Such black-box models are useful for time-series prediction (Fraser 2008). They can also be used to deﬁne class-conditional densitiesinside a generative classiﬁer.
However, it is more common to imbue the hidden states with some desired meaning, and to
then try to estimate the hidden states from the observations, i.e., to compute p(z
t|x1:t)if we are
17.3. HiddenMarkovmodels 605
x x ...x
A G ---C
A- AG- C
AG- AA-
- - AAAC
A G ---Cbat
rat
cat
gnat
goat
2. . . 13
(a)
M
0M End Begin MMMIIIIDDD
1 02 3 4
(b)
Figure 17.8 (a) Some DNA sequences. (b) State transition diagram for a proﬁle HMM. Source: Figure 5.7
of (Durbin et al. 1998). Used with kind permission of Richard Durbin.
in an online scenario, or p(zt|x1:T)if we are in an offline scenario (see Section 17.4.1 for further
discussion of the differences between these two approaches). Below we give some examples of
applications which use HMMs in this way:
•Automatic speech recognition.H e r e xtrepresents features extracted from the speech
signal, and ztrepresents the word that is being spoken. The transition model p(zt|zt−1)
represents the language model, and the observation model p(xt|zt)represents the acoustic
model. See e.g., (Jelinek 1997; Jurafsky and Martin 2008) for details.
•Activity recognition.H e r e xtrepresents features extracted from a video frame, and ztis
the class of activity the person is engaged in (e.g., running, walking, sitting, etc.) See e.g.,
(Szeliski 2010) for details.
•Part of speech tagging.H e r e xtrepresents a word, and ztrepresents its part of speech
(noun, verb, adjective, etc.) See Section 19.6.2.1 for more information on POS tagging and
606 Chapter17. MarkovandhiddenMarkovmodels
related tasks.
•Gene ﬁnding.H e r e xtrepresents the DNA nucleotides (A,C,G,T), and ztrepresents whether
we are inside a gene-coding region or not. See e.g., (Schweikerta et al. 2009) for details.
•Protein sequence alignment.H e r e xtrepresents an amino acid, and ztrepresents whether
this matches the latent consensus sequence at this location. This model is called a proﬁle
HMMand is illustrated in Figure 17.8. The HMM has 3 states, called match, insert and delete.
Ifztis a match state, then xtis equal to the t’th value of the consensus. If ztis an insert
state, then xtis generated from a uniform distribution that is unrelated to the consensus
sequence. If ztis a delete state, then xt=−. In this way, we can generate noisy copies of
the consensus sequence of different lengths. In Figure 17.8(a), the consensus is “AGC”, and
we see various versions of this below. A path through the state transition diagram, shownin Figure 17.8(b), speciﬁes how to align a sequence to the consensus, e.g., for the gnat, themost probable path is D,D,I,I,I,M . This means we delete the A and G parts of the
consensus sequence, we insert 3 A’s, and then we match the ﬁnal C. We can estimate themodel parameters by counting the number of such transitions, and the number of emissionsfrom each kind of state, as shown in Figure 17.8(c). See Section 17.5 for more information ontraining an HMM, and (Durbin et al. 1998) for details on proﬁle HMMs.
Note that for some of these tasks, conditional random ﬁelds, which are essentially discrimi-
native versions of HMMs, may be more suitable; see Chapter 19 for details.
17.4 Inference in HMMs
We now discuss how to infer the hidden state sequence of an HMM, assuming the parametersare known. Exactly the same algorithms apply to other chain-structured graphical models, suchas chain CRFs (see Section 19.6.1). In Chapter 20, we generalize these methods to arbitrarygraphs. And in Section 17.5.2, we show how we can use the output of inference in the contextof parameter estimation.
17.4.1 Types of inference problems for temporal models
There are several different kinds of inferential tasks for an HMM (and SSM in general). Toillustrate the differences, we will consider an example called the occasionally dishonest casino,
from (Durbin et al. 1998). In this model, x
t∈{1,2,...,6}represents which dice face shows
up, andztrepresents the identity of the dice that is being used. Most of the time the casino
uses a fair dice, z=1, but occasionally it switches to a loaded dice, z=2, for a short period.
Ifz=1the observation distribution is a uniform multinoulli over the symbols {1,...,6}.I f
z=2, the observation distribution is skewed towards face 6 (see Figure 17.9). If we sample from
this model, we may observe data such as the following:
Listing 17.1 Example output of casinoDemo
Rolls: 664153216162115234653214356634261655234232315142464156663246
Die: LLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLFFFFFFFFFFFFFFFFFFLLLLLLLL
Here “rolls” refers to the observed symbol and “die” refers to the hidden state (L is loaded and
F is fair). Thus we see that the model generates a sequence of symbols, but the statistics of the
17.4. InferenceinHMMs 607

 


Figure 17.9 An HMM for the occasionally dishonest casino. The blue arrows visualize the state transition
diagramA. Based on (Durbin et al. 1998, p54).
0 50 100 150 200 250 30000.51
roll numberp(loaded)filtered
(a)0 50 100 150 200 250 30000.51
roll numberp(loaded)smoothed
(b)0 50 100 150 200 250 30000.51
roll numberMAP state (0=fair,1=loaded)Viterbi
(c)
Figure 17.10 Inference in the dishonest casino. Vertical gray bars denote the samples that we generated
using a loaded die. (a) Filtered estimate of probability of using a loaded dice. (b) Smoothed estimates. (c)
MAP trajectory. Figure generated by casinoDemo .
distribution changes abruptly every now and then. In a typical application, we just see the rolls
and want to infer which dice is being used. But there are different kinds of inference, which wesummarize below.
•Filtering means to compute the belief state p(z
t|x1:t)online, or recursively, as the data
streams in. This is called “ﬁltering” because it reduces the noise more than simply estimating
the hidden state using just the current estimate, p(zt|xt). We will see below that we can
perform ﬁltering by simply applying Bayes rule in a sequential fashion. See Figure 17.10(a) foran example.
•Smoothing means to compute p(z
t|x1:T)offline, given all the evidence. See Figure 17.10(b)
for an example. By conditioning on past and future data, our uncertainty will be signiﬁcantlyreduced. To understand this intuitively, consider a detective trying to ﬁgure out who com-mitted a crime. As he moves through the crime scene, his uncertainty is high until he ﬁndsthe key clue; then he has an “aha” moment, his uncertainty is reduced, and all the previouslyconfusing observations are, in hindsight, easy to explain.
608 Chapter17. MarkovandhiddenMarkovmodels
ILOWHULQJ
SUHGLFWLRQ
IL[HGODJ
VPRRWKLQJ
IL[HGODJ
VPRRWKLQJ
RIIOLQHW
W
W
WK
7O
Figure 17.11 The main kinds of inference for state-space models. The shaded region is the interval for
which we have data. The arrow represents the time step at which we want to perform inference. tis the
current time, Tis the sequence length, /lscriptis the lag and his the prediction horizon. See text for details.
•Fixed lag smoothing is an interesting compromise between online and offline estimation; it
involves computing p(zt−/lscript|x1:t),w h e r e/lscript>0is called the lag. This gives better performance
than ﬁltering, but incurs a slight delay. By changing the size of the lag, one can trade off
accuracy vs delay.
•Prediction Instead of predicting the past given the future, as in ﬁxed lag smoothing, we
might want to predict the future given the past, i.e., to compute p(zt+h|x1:t),w h e r eh>0
is called the prediction horizon. For example, suppose h=2; then we have
p(zt+2|x1:t)=/summationdisplay
zt+1/summationdisplay
ztp(zt+2|zt+1)p(zt+1|zt)p(zt|x1:t) (17.42)
It is straightforward to perform this computation: we just power up the transition matrix andapply it to the current belief state. The quantity p(z
t+h|x1:t)is a prediction about future
hidden states; it can be converted into a prediction about future observations using
p(xt+h|x1:t)=/summationdisplay
zt+hp(xt+h|zt+h)p(zt+h|x1:t) (17.43)
This is the posterior predictive density, and can be used for time-series forecasting (see(Fraser 2008) for details). See Figure 17.11 for a sketch of the relationship between ﬁltering,smoothing, and prediction.
•MAP estimation This means computing argmax
z1:Tp(z1:T|x1:T), which is a most prob-
able state sequence. In the context of HMMs, this is known as Viterbi decoding (see
17.4. InferenceinHMMs 609
Section 17.4.4). Figure 17.10 illustrates the difference between ﬁltering, smoothing and MAP
decoding for the occasionally dishonest casino HMM. We see that the smoothed (offline)estimate is indeed smoother than the ﬁltered (online) estimate. If we threshold the estimatesat 0.5 and compare to the true sequence, we ﬁnd that the ﬁltered method makes 71 errorsout of 300, and the smoothed method makes 49/300; the MAP path makes 60/300 errors. It isnot surprising that smoothing makes fewer errors than Viterbi, since the optimal way to min-imize bit-error rate is to threshold the posterior marginals (see Section 5.7.1.1). Nevertheless,for some applications, we may prefer the Viterbi decoding, as we discuss in Section 17.4.4.
•Posterior samples If there is more than one plausible interpretation of the data, it can be
useful to sample from the posterior, z
1:T∼p(z1:T|x1:T). These sample paths contain much
more information than the sequence of marginals computed by smoothing.
•Probability of the evidence We can compute the probability of the evidence, p(x1:T),
by summing up over all hidden paths, p(x1:T)=/summationtext
z1:Tp(z1:T,x1:T). This can be used to
classify sequences (e.g., if the HMM is used as a class conditional density), for model-basedclustering, for anomaly detection, etc.
17.4.2 The forwards algorithm
We now describe how to recursively compute the ﬁltered marginals, p(zt|x1:t)in an HMM.
The algorithm has two steps. First comes the prediction step, in which we compute the
one-step-ahead predictive density; this acts as the new prior for time t:
p(zt=j|x1:t−1)=/summationdisplay
ip(zt=j|zt−1=i)p(zt−1=i|x1:t−1) (17.44)
Next comes the update step, in which we absorb the observed data from time tusing Bayes
rule:
αt(j)/definesp(zt=j|x1:t)=p(zt=j|xt,x1:t−1) (17.45)
=1
Ztp(xt|zt=j,x1:t−1)p(zt=j|x1:t−1) (17.46)
where the normalization constant is given by
Zt/definesp(xt|x1:t−1)=/summationdisplay
jp(zt=j|x1:t−1)p(xt|zt=j) (17.47)
This process is known as the predict-update cycle. The distribution p(zt|x1:t)is called the
(ﬁltered)belief state at timet, and is a vector of Knumbers, often denoted by αt. In matrix-
vector notation, we can write the update in the following simple form:
αt∝ψt⊙(ΨTαt−1) (17.48)
whereψt(j)=p(xt|zt=j)is the local evidence at time t,Ψ(i,j)=p(zt=j|zt−1=i)is
the transition matrix, and u⊙vis theHadamard product, representing elementwise vector
multiplication. See Algorithm 6 for the pseudo-code, and hmmFilter for some Matlab code.
610 Chapter17. MarkovandhiddenMarkovmodels
In addition to computing the hidden states, we can use this algorithm to compute the log
probability of the evidence:
logp(x1:T|θ)=T/summationdisplay
t=1logp(xt|x1:t−1)=T/summationdisplay
t=1logZt (17.49)
(We need to work in the log domain to avoid numerical underﬂow.)
Algorithm 17.1: Forwards algorithm
1Input: Transition matrices ψ(i,j)=p(zt=j|zt−1=i), local evidence vectors
ψt(j)=p(xt|zt=j), initial state distribution π(j)=p(z1=j);
2[α1,Z1]=normalize( ψ1⊙π);
3fort=2:Tdo
4[αt,Zt]=normalize( ψt⊙(ΨTαt−1));
5Returnα1:Tandlogp(y1:T)=/summationtext
tlogZt;
6Subroutine: [v,Z]=normalize( u):Z=/summationtext
juj;vj=uj/Z;
17.4.3 The forwards-backwards algorithm
In Section 17.4.2, we explained how to compute the ﬁltered marginals p(zt=j|x1:t)using
online inference. We now discuss how to compute the smoothed marginals, p(zt=j|x1:T),
using offline inference.
17.4.3.1 Basic idea
The key decomposition relies on the fact that we can break the chain into two parts, the past
and the future, by conditioning on zt:
p(zt=j|x1:T)∝p(zt=j,xt+1:T|x1:t)∝p(zt=j|x1:t)p(xt+1:T|zt=j,x1:t)(17.50)
Letαt(j)/definesp(zt=j|x1:t)be the ﬁltered belief state as before. Also, deﬁne
βt(j)/definesp(xt+1:T|zt=j) (17.51)
as the conditional likelihood of future evidence given that the hidden state at time tisj.
(Note that this is not a probability distribution over states, since it does not need to satisfy/summationtext
jβt(j)=1.) Finally, deﬁne
γt(j)/definesp(zt=j|x1:T) (17.52)
as the desired smoothed posterior marginal. From Equation 17.50, we have
γt(j)∝αt(j)βt(j) (17.53)
17.4. InferenceinHMMs 611
We have already described how to recursively compute the α’s in a left-to-right fashion in
Section 17.4.2. We now describe how to recursively compute the β’s in a right-to-left fashion. If
we have already computed βt, we can compute βt−1as follows:
βt−1(i)=p( xt:T|zt−1=i) (17.54)
=/summationdisplay
jp(zt=j,xt,xt+1:T|zt−1=i) (17.55)
=/summationdisplay
jp(xt+1:T|zt=j,zt−1=i,xt)p(zt=j,xt|zt−1=i) (17.56)
=/summationdisplay
jp(xt+1:T|zt=j)p(xt|zt=j,zt−1=i)p(zt=j|zt−1=i) (17.57)
=/summationdisplay
jβt(j)ψt(j)ψ(i,j) (17.58)
We can write the resulting equation in matrix-vector form as
βt−1=Ψ(ψt⊙βt) (17.59)
The base case is
βT(i)=p(xT+1:T|zT=i)=p(∅|zT=i)=1 (17.60)
which is the probability of a non-event.
Having computed the forwards and backwards messages, we can combine them to compute
γt(j)∝αt(j)βt(j). The overall algorithm is known as the forwards-backwards algorithm.
The pseudo code is very similar to the forwards case; see hmmFwdBack for an implementation.
We can think of this algorithm as passing “messages” from left to right, and then from right
to left, and then combining them at each node. We will generalize this intuition in Section 20.2,
when we discuss belief propagation.
17.4.3.2 Two-slice smoothed marginals
When we estimate the parameters of the transition matrix using EM (see Section 17.5), we willneed to compute the expected number of transitions from state ito statej:
N
ij=T−1/summationdisplay
t=1E[I(zt=i,zt+1=j)|x1:T]=T−1/summationdisplay
t=1p(zt=i,zt+1=j|x1:T) (17.61)
The term p(zt=i,zt+1=j|x1:T)is called a (smoothed) two-slice marginal, and can be
computed as follows
ξt,t+1(i,j)/definesp(zt=i,zt+1=j|x1:T) (17.62)
∝p(zt|x1:t)p(zt+1|zt,xt+1:T) (17.63)
∝p(zt|x1:t)p(xt+1:T|zt,zt+1)p(zt+1|zt) (17.64)
∝p(zt|x1:t)p(xt+1|zt+1)p(xt+2:T|zt+1)p(zt+1|zt) (17.65)
=αt(i)φt+1(j)βt+1(j)ψ(i,j) (17.66)
612 Chapter17. MarkovandhiddenMarkovmodels
In matrix-vector form, we have
ξt,t+1∝Ψ⊙(αt(φt+1⊙βt+1)T) (17.67)
For another interpretation of these equations, see Section 20.2.4.3.
17.4.3.3 Time and space complexity
It is clear that a straightforward implementation of FB takes O(K2T)time, since we must
perform a K×Kmatrix multiplication at each step. For some applications, such as speech
recognition, Kis very large, so the O(K2)term becomes prohibitive. Fortunately, if the
transition matrix is sparse, we can reduce this substantially. For example, in a left-to-right
transition matrix, the algorithm takes O(TK)time.
In some cases, we can exploit special properties of the state space, even if the transition
matrix is not sparse. In particular, suppose the states represent a discretization of an underlyingcontinuous state-space, and the transition matrix has the form ψ(i,j)∝exp(−σ
2|zi−zj|),
whereziis the continuous vector represented by state i. Then one can implement the forwards-
backwards algorithm in O(TKlogK)time. This is very useful for models with large state
spaces. See Section 22.2.6.1 for details.
In some cases, the bottleneck is memory, not time. The expected sufficient statistics needed
by EM are/summationtext
tξt−1,t(i,j); this takes constant space (independent of T); however, to compute
them, we need O(KT)working space, since we must store αtfort=1,...,Tuntil we do the
backwards pass. It is possible to devise a simple divide-and-conquer algorithm that reduces thespace complexity from O(KT)toO(KlogT)at the cost of increasing the running time from
O(K
2T)toO(K2TlogT): see (Binder et al. 1997; Zweig and Padmanabhan 2000) for details.
17.4.4 The Viterbi algorithm
TheViterbialgorithm (Viterbi 1967) can be used to compute the most probable sequence of
states in a chain-structured graphical model, i.e., it can compute
z∗=a r gm a x
z1:Tp(z1:T|x1:T) (17.68)
This is equivalent to computing a shortest path through the trellis diagram in Figure 17.12,
where the nodes are possible states at each time step, and the node and edge weights are logprobabilities. That is, the weight of a path z
1,z2,...,z Tis given by
logπ1(z1)+logφ1(z1)+T/summationdisplay
t=2[logψ(zt−1,zt)+logφt(zt)] (17.69)
17.4.4.1 MAP vs MPE
Before discussing how the algorithm works, let us make one important remark: the (jointly)most
probablesequenceofstatesisnotnecessarilythesameasthesequenceof(marginally)mostprobablestates. The former is given by Equation 17.68, and is what Viterbi computes, whereas the latter isgiven by the maximizer of the posterior marginals or MPM:
ˆz= (argmax
z1p(z1|x1:T),...,argmax
zTp(zT|x1:T)) (17.70)
17.4. InferenceinHMMs 613


1



   7
67$7(
2%6(59$7,21


Figure 17.12 The trellis of states vs time for a Markov chain. Based on (Rabiner 1989).
As a simple example of the difference, consider a chain with two time steps, deﬁning the
following joint:
X1=0X1=1
X2=00.04 0.3 0.34
X2=10.36 0.3 0.66
0.4 0.6
The joint MAP estimate is (0,1), whereas the sequence of marginal MPMs is (1,1).
The advantage of the joint MAP estimate is that is is always globally consistent. For example,
suppose we are performing speech recognition and someones says “recognize speech”. This
could be mis-heard as “wreck a nice beach”. Locally it may appear that “beach” is the mostprobable interpretation of that particular window of sound, but when we add the requirementthat the data be explained by a single linguistically plausible path, this interpretation becomesless likely.
On the other hand, the MPM estimates can be more robust (Marroquin et al. 1987). To see
why, note that in Viterbi, when we estimate z
t, we “max out” the other variables:
z∗
t=a r gm a x
ztmax
z1:t−1,zt+1:Tp(z1:t−1,zt,zt+1:T|x1:T) (17.71)
whereas we when we use forwards-backwards, we sum out the other variables:
p(zt|x1:T)=/summationdisplay
z1:t−1,zt+1:Tp(z1:t−1,zt,zt+1:T|x1:T) (17.72)
This makes the MPM in Equation 17.70 more robust, since we estimate each node averaging overits neighbors, rather than conditioning on a speciﬁc value of its neighbors.
6
6. In general, we may want to mix max and sum. For example, consider a joint distribution where we observe
614 Chapter17. MarkovandhiddenMarkovmodels
17.4.4.2 Details of the algorithm
It is tempting to think that we can implement Viterbi by just replacing the sum-operator in
forwards-backwards with a max-operator. The former is called the sum-product, and the
latter the max-product algorithm. If there is a unique mode, running max-product and then
computing using Equation 17.70 will give the same result as using Equation 17.68 (Weiss andFreeman 2001b), but in general, it can lead to incorrect results if there are multiple equallyprobably joint assignments. The reasons is that each node breaks ties independently and hencemay do so in a manner that is inconsistent with its neighbors. The Viterbi algorithm is thereforenot quite as simple as replacing sum with max. In particular, the forwards pass does use max-product, but the backwards pass uses a traceback procedure to recover the most probable path
through the trellis of states. Essentially, once z
tpicks its most probable state, the previous nodes
condition on this event, and therefore they will break ties consistently.
In more detail, deﬁne
δt(j)/definesmax
z1,...,zt−1p(z1:t−1,zt=j|x1:t) (17.73)
This is the probability of ending up in state jat timet, given that we take the most probable
path. The key insight is that the most probable path to state jat timetmust consist of the
most probable path to some other state iat timet−1, followed by a transition from itoj.
Hence
δt(j)=m a x
iδt−1(i)ψ(i,j)φt(j) (17.74)
We also keep track of the most likely previous state, for each possible state that we end up in:
at(j) = argmax
iδt−1(i)ψ(i,j)φt(j) (17.75)
That is,at(j)tells us the most likely previous state on the most probable path to zt=j.W e
initialize by setting
δ1(j)=πjφ1(j) (17.76)
and we terminate by computing the most probable ﬁnal state z∗
T:
z∗
T=a r gm a x
iδT(i) (17.77)
We can then compute the most probable sequence of states using traceback:
z∗
t=at+1(z∗
t+1) (17.78)
As usual, we have to worry about numerical underﬂow. We are free to normalize the δtterms
at each step; this will not affect the maximum. However, unlike the forwards-backwards case,
vand we want to query q;l e tnbe the remaining nuisance variables. We deﬁne the MAP estimate as x∗
q=
argmax xq/summationtext
xnp(xq,xn|xv), where we max over xqand sum over xn. By contrast, we deﬁne the MPEor
most probable explanation as (x∗q,x∗n) = argmax xq,xnp(xq,xn|xv), where we max over both xqandxn. This
terminology is due to (Pearl 1988), although it is not widely used outside the Bayes net literatire. Obviously MAP=MPE if
n=∅. However, if n/negationslash=∅, then summing out the nuisance variables can give different results than maxing them out.
Summing out nuisance variables is more sensible, but computationally harder, because of the need to combine max and
sum operations (Lerner and Parr 2001).
17.4. InferenceinHMMs 615
&   
&   
&   
&   
&   
&   
&   
(a)6
6
6
6

6
6
6
6

6
6
6
6
 
 
 
 

(b)
Figure 17.13 Illustration of Viterbi decoding in a simple HMM for speech recognition. (a) A 3-state HMM
for a single phone. We are visualizing the state transition diagram. We assume the observations have been
vector quantized into 7 possible symbols, C1,...,C 7. Each state z1,z2,z3has a different distribution over
these symbols. Based on Figure 15.20 of (Russell and Norvig 2002). (b) Illustration of the Viterbi algorithm
applied to this model, with data sequence C1,C3,C4,C6. The columns represent time, and the rows
represent states. An arrow from state iatt−1to statejattis annotated with two numbers: the ﬁrst
is the probability of the i→jtransition, and the second is the probability of generating observation xt
from state j. The bold lines/ circles represent the most probable sequence of states. Based on Figure 24.27
of (Russell and Norvig 1995).
we can also easily work in the log domain. The key difference is that logmax = maxlog ,
whereaslog/summationtext/negationslash=/summationtextlog. Hence we can use
logδt(j)/definesmax
z1:t−1logp(z1:t−1,zt=j|x1:t) (17.79)
=m a x
ilogδt−1(i)+logψ(i,j)+logφt(j) (17.80)
In the case of Gaussian observation models, this can result in a signiﬁcant (constant factor)
speedup, since computing logp(xt|zt)can be much faster than computing p(xt|zt)for a high-
dimensional Gaussian. This is one reason why the Viterbi algorithm is widely used in the E step
of EM (Section 17.5.2) when training large speech recognition systems based on HMMs.
17.4.4.3 Example
Figure 17.13 gives a worked example of the Viterbi algorithm, based on (Russell et al. 1995).
Suppose we observe the discrete sequence of observations x1:4=(C1,C3,C4,C6), representing
codebook entries in a vector-quantized version of a speech signal. The model starts in state
z1. The probability of generating C1inz1is 0.5, so we have δ1(1) = 0.5, andδ1(i)=0for
all other states. Next we can self-transition to z1with probability 0.3, or transition to z2with
proabability 0.7. If we end up in z1, the probability of generating C3is 0.3; if we end up in z2,
616 Chapter17. MarkovandhiddenMarkovmodels
the probability of generating C3is 0.2. Hence we have
δ2(1) = δ1(1)ψ(1,1)φ2(1) = 0.5·0.3·0.3=0.045 (17.81)
δ2(2) = δ1(1)ψ(1,2)φ2(2) = 0.5·0.7·0.2=0.07 (17.82)
Thus state 2 is more probable at t=2; see the second column of Figure 17.13(b). In time step
3, we see that there are two paths into z2,f r o mz1and from z2. The bold arrow indicates that
the latter is more probable. Hence this is the only one we have to remember. The algorithm
continues in this way until we have reached the end of the sequence. One we have reached theend, we can follow the black arrows back to recover the MAP path (which is 1,2,2,3).
17.4.4.4 Time and space complexity
The time complexity of Viterbi is clearly O(K
2T)in general, and the space complexity
isO(KT), both the same as forwards-backwards. If the transition matrix has the form
ψ(i,j)∝exp(−σ2||zi−zj||2),w h e r eziis the continuous vector represented by state i,w e
can implement Viterbi in O(TK)time, instead of O(TKlogK)needed by forwards-backwards.
See Section 22.2.6.1 for details.
17.4.4.5 N-best list
The Viterbi algorithm returns one of the most probable paths. It can be extended to return thetopNpaths (Schwarz and Chow 1990; Nilsson and Goldberger 2001). This is called the N-best
list. Once can then use a discriminative method to rerank the paths based on global featuresderived from the fully observed state sequence (as well as the visible features). This techniqueis widely used in speech recognition. For example, consider the sentence “recognize speech”. Itis possible that the most probable interpretation by the system of this acoustic signal is “wrecka nice speech”, or maybe “wreck a nice beach”. Maybe the correct interpretation is much lowerdown on the list. However, by using a re-ranking system, we may be able to improve the scoreof the correct interpretation based on a more global context.
One problem with the N-best list is that often the top Npaths are very similar to each other,
rather than representing qualitatively different interpretations of the data. Instead we might wantto generate a more diverse set of paths to more accurately represent posterior uncertainty. Oneway to do this is to sample paths from the posterior, as we discuss below. For some other waysto generate diverse MAP estimates, see e.g., (Yadollahpour et al. 2011; Kulesza and Taskar 2011).
17.4.5 Forwards ﬁltering, backwards sampling
It is often useful to sample paths from the posterior:
zs
1:T∼p(z1:T|x1:T) (17.83)
We can do this is as follow: run forwards backwards, to compute the two-slice smoothed posteri-
ors,p(zt−1,t|x1:T); next compute the conditionals p(zt|zt−1,x1:T)by normalizing; sample from
the initial pair of states, z∗
1,2∼p(z1,2|x1:T); ﬁnally, recursively sample z∗
t∼p(zt|z∗
t−1,x1:T).
Note that the above solution requires a forwards-backwards pass, and then an additional
forwards sampling pass. An alternative is to do the forwards pass, and then perform sampling
17.5. LearningforHMMs 617
in the backwards pass. The key insight into how to do this is that we can write the joint from
right to left using
p(z1:T|x1:T)=p(zT|x1:T)1/productdisplay
t=T−1p(zt|zt+1,x1:T) (17.84)
We can then sample ztgiven future sampled states using
zs
t∼p(zt|zt+1:T,x1:T)=p(zt|zt+1,zt+2:T,x1:t,xt+1:T)=p(zt|zs
t+1,x1:t)(17.85)
The sampling distribution is given by
p(zt=i|zt+1=j,x1:t)=p( zt|zt+1,x1:t,xt+1) (17.86)
=p(zt+1,zt|x1:t+1)
p(zt+1|x1:t+1)(17.87)
∝p(xt+1|zt+1,zt,x1:t)p(zt+1,zt|x1:t)
p(zt+1|x1:t+1)(17.88)
=p(xt+1|zt+1)p(zt+1|zt,x1:t)p(zt|x1:t)
p(zt+1|x1:t+1)(17.89)
=φt+1(j)ψ(i,j)αt(i)
αt+1(j)(17.90)
The base case is
zs
T∼p(zT=i|x1:T)=αT(i) (17.91)
This algorithm forms the basis of blocked-Gibbs sampling methods for parameter inference,
as we will see below.
17.5 Learning for HMMs
We now discuss how to estimate the parameters θ=(π,A,B),w h e r eπ(i)=p(z1=i)is
the initial state distribution, A(i,j)=p(zt=j|zt−1=i)is the transition matrix, and Bare
the parameters of the class-conditional densities p(xt|zt=j). We ﬁrst consider the case where
z1:Tis observed in the training set, and then the harder case where z1:Tis hidden.
17.5.1 Training with fully observed data
If we observe the hidden state sequences, we can compute the MLEs for Aandπexactly as in
Section 17.2.2.1. If we use a conjugate prior, we can also easily compute the posterior.
The details on how to estimate Bdepend on the form of the observation model. The
situation is identical to ﬁtting a generative classiﬁer. For example, if each state has a multinoullidistribution associated with it, with parameters B
jl=p(Xt=l|zt=j),w h e r el∈{1,...,L}
represents the observed symbol, the MLE is given by
ˆBjl=NX
jl
Nj,NX
jl/definesN/summationdisplay
i=1Ti/summationdisplay
t=1I(zi,t=j,xi,t=l) (17.92)
618 Chapter17. MarkovandhiddenMarkovmodels
This result is quite intuitive: we simply add up the number of times we are in state jand we
see a symbol l, and divide by the number of times we are in state j.
Similarly, if each state has a Gaussian distribution associated with it, we have (from Sec-
tion 4.2.4) the following MLEs:
ˆμk=xk
Nk,ˆΣk=(xx)T
k−NkˆμkˆμT
k
Nk(17.93)
where the sufficient statistics are given by
xk/definesN/summationdisplay
i=1Ti/summationdisplay
t=1I(zi,t=k)xi,t (17.94)
(xx)T
k/definesN/summationdisplay
i=1Ti/summationdisplay
t=1I(zi,t=k)xi,txTi,t(17.95)
Analogous results can be derived for other kinds of distributions. One can also easily extend all
of these results to compute MAP estimates, or even full posteriors over the parameters.
17.5.2 EM for HMMs (the Baum-Welch algorithm)
If theztvariables are not observed, we are in a situation analogous to ﬁtting a mixture model.
The most common approach is to use the EM algorithm to ﬁnd the MLE or MAP parameters,although of course one could use other gradient-based methods (see e.g., (Baldi and Chauvin1994)). In this Section, we derive the EM algorithm. When applied to HMMs, this is also knownas theBaum-Welch algorithm (Baum et al. 1970).
17.5.2.1 E step
It is straightforward to show that the expected complete data log likelihood is given by
Q(θ,θ
old)=K/summationdisplay
k=1E/bracketleftbig
N1
k/bracketrightbig
logπk+K/summationdisplay
j=1K/summationdisplay
k=1E[Njk]logAjk (17.96)
+N/summationdisplay
i=1Ti/summationdisplay
t=1K/summationdisplay
k=1p(zt=k|xi,θold)logp(xi,t|φk) (17.97)
where the expected counts are given by
E/bracketleftbig
N1
k/bracketrightbig
=N/summationdisplay
i=1p(zi1=k|xi,θold) (17.98)
E[Njk]=N/summationdisplay
i=1Ti/summationdisplay
t=2p(zi,t−1=j,zi,t=k|xi,θold) (17.99)
E[Nj]=N/summationdisplay
i=1Ti/summationdisplay
t=1p(zi,t=j|xi,θold) (17.100)
17.5. LearningforHMMs 619
These expected sufficient statistics can be computed by running the forwards-backwards algo-
rithm on each sequence. In particular, this algorithm computes the following smoothed nodeand edge marginals:
γ
i,t(j)/definesp(zt=j|xi,1:Ti,θ) (17.101)
ξi,t(j,k)/definesp(zt−1=j,zt=k|xi,1:Ti,θ) (17.102)
17.5.2.2 M step
Based on Section 11.3, we have that the M step for Aandπis to just normalize the expected
counts:
ˆAjk=E[Njk]/summationtext
k/primeE[Njk/prime],ˆπk=E/bracketleftbig
N1
k/bracketrightbig
N(17.103)
This result is quite intuitive: we simply add up the expected number of transitions from jtok,
and divide by the expected number of times we transition from jto anything else.
For a multinoulli observation model, the expected sufficient statistics are
E[Mjl]=N/summationdisplay
i=1Ti/summationdisplay
t=1γi,t(j)I(xi,t=l)=N/summationdisplay
i=1/summationdisplay
t:xi,t=lγi,t(j) (17.104)
The M step has the form
ˆBjl=E[Mjl]
E[Nj](17.105)
This result is quite intuitive: we simply add up the expected number of times we are in state j
and we see a symbol l, and divide by the expected number of times we are in state j.
For a Gaussian observation model, the expected sufficient statistics are given by
E[xk]=N/summationdisplay
i=1Ti/summationdisplay
t=1γi,t(k)xi,t (17.106)
E/bracketleftbig
(xx)T
k/bracketrightbig
=N/summationdisplay
i=1Ti/summationdisplay
t=1γi,t(k)xi,txTi,t(17.107)
The M step becomes
ˆμk=E[xk]
E[Nk],ˆΣk=E/bracketleftbig
(xx)T
k/bracketrightbig
−E[Nk]ˆμkˆμT
k
E[Nk](17.108)
This can (and should) be regularized in the same way we regularize GMMs.
17.5.2.3 Initialization
As usual with EM, we must take care to ensure that we initialize the parameters carefully, to
minimize the chance of getting stuck in poor local optima. There are several ways to do this,such as
620 Chapter17. MarkovandhiddenMarkovmodels
• Use some fully labeled data to initialize the parameters.
• Initially ignore the Markov dependencies, and estimate the observation parameters using the
standard mixture model estimation methods, such as K-means or EM.
• Randomly initialize the parameters, use multiple restarts, and pick the best solution.
Techniques such as deterministic annealing (Ueda and Nakano 1998; Rao and Rose 2001)
can help mitigate the effect of local minima. Also, just as K-means is often used to initialize
EM for GMMs, so it is common to initialize EM for HMMs using Viterbi training, which
means approximating the posterior over paths with the single most probable path. (This is notnecessarily a good idea, since initially the parameters are often poorly estimated, so the Viterbipath will be fairly arbitrary. A safer option is to start training using forwards-backwards, and toswitch to Viterbi near convergence.)
17.5.3 Bayesian methods for “ﬁtting” HMMs *
EM returns a MAP estimate of the parameters. In this section, we brieﬂy discuss some methodsfor Bayesian parameter estimation in HMMs. (These methods rely on material that we will coverlater in the book.)
One approach is to use variational Bayes EM (VBEM), which we discuss in general terms in
Section 21.6. The details for the HMM case can be found in (MacKay 1997; Beal 2003), butthe basic idea is this: The E step uses forwards-backwards, but where (roughly speaking) weplug in the posterior mean parameters instead of the MAP estimates. The M step updates theparameters of the conjugate posteriors, instead of updating the parameters themselves.
An alternative to VBEM is to use MCMC. A particularly appealing algorithm is block Gibbs
sampling, which we discuss in general terms in Section 24.2.8. The details for the HMM casecan be found in (Fruhwirth-Schnatter 2007), but the basic idea is this: we sample z
1:Tgiven
the data and parameters using forwards-ﬁltering, backwards-sampling, and we then sample theparameters from their posteriors, conditional on the sampled latent paths. This is simple toimplement, but one does need to take care of unidentiﬁability (label switching), just as withmixture models (see Section 11.3.1).
17.5.4 Discriminative training
Sometimes HMMs are used as the class conditional density inside a generative classiﬁer. In thiscase,p(x|y=c,θ)can be computed using the forwards algorithm. We can easily maximize the
joint likelihood/producttext
N
i=1p(xi,yi|θ)by using EM (or some other method) to ﬁt the HMM for each
class-conditional density separately.
However, we might like to ﬁnd the parameters that maximize the conditional likelihood
N/productdisplay
i=1p(yi|xi,θ)=/productdisplay
ip(yi|θ)p(xi|yi,θ)/summationtext
cp(yi=c|θ)p(xi|c,θ)(17.109)
This is more expensive than maximizing the joint likelihood, since the denominator couples all C
class-conditional HMMs together. Furthermore, EM can no longer be used, and one must resort
17.6. GeneralizationsofHMMs 621
to generic gradient based methods. Nevertheless, discriminative training can result in improved
accuracies. The standard practice in speech recognition is to initially train the generative modelsseparately using EM, and then to ﬁne tune them discriminatively (Jelinek 1997).
17.5.5 Model selection
In HMMs, the two main model selection issues are: how many states, and what topology to usefor the state transition diagram. We discuss both of these issues below.
17.5.5.1 Choosing the number of hidden states
Choosing the number of hidden states Kin an HMM is analogous to the problem of choosing
the number of mixture components. Here are some possible solutions:
• Use grid-search over a range of K’s, using as an objective function cross-validated likelihood,
the BIC score, or a variational lower bound to the log-marginal likelihood.
• Use reversible jump MCMC. See (Fruhwirth-Schnatter 2007) for details. Note that this is very
slow and is not widely used.
• Use variational Bayes to “extinguish” unwanted components, by analogy to the GMM case
discussed in Section 21.6.1.6. See (MacKay 1997; Beal 2003) for details.
• Use an “inﬁnite HMM”, which is based on the hierarchical Dirichlet process. See e.g., (Beal
et al. 2002; Teh et al. 2006) for details.
17.5.5.2 Structure learning
The term structure learning in the context of HMMs refers to learning a sparse transition
matrix. That is, we want to learn the structure of the state transition diagram, not the structure
of the graphical model (which is ﬁxed). A large number of heuristic methods have been proposed.Most alternate between parameter estimation and some kind of heuristic split merge method
(see e.g., (Stolcke and Omohundro 1992)).
Alternatively, one can pose the problem as MAP estimation using a minimum entropy prior,
of the form
p(A
i,:)∝exp(− H(Ai,:)) (17.110)
This prior prefers states whose outgoing distribution is nearly deterministic, and hence has lowentropy (Brand 1999). The corresponding M step cannot be solved in closed form, but numericalmethods can be used. The trouble with this is that we might prune out all incoming transitionsto a state, creating isolated “islands” in state-space. The inﬁnite HMM presents an interestingalternative to these methods. See e.g., (Beal et al. 2002; Teh et al. 2006) for details.
17.6 Generalizations of HMMs
Many variants of the basic HMM model have been proposed. We brieﬂy discuss some of thembelow.
622 Chapter17. MarkovandhiddenMarkovmodels
Dt−1 DtDt+1
Qt−1 QtQt−1
Xt−1 XtXt+1
Figure 17.14 Encoding a hidden semi-Markov model as a DGM. Dtare deterministic duration counters.
17.6.1 Variable duration (semi-Markov) HMMs
In a standard HMM, the probability we remain in state ifor exactly dsteps is
p(ti=d)=( 1−Aii)Ad
ii∝exp(dlogAii) (17.111)
whereAiiis the self-loop probability. This is called the geometric distribution. However, this
kind of exponentially decaying function of dis sometimes unrealistic.
To allow for more general durations, one can use a semi-Markov model. It is called semi-
Markov because to predict the next state, it is not sufficient to condition on the past state: we
also need to know how long we’ve been in that state. When the state space is not observeddirectly, the result is called a hidden semi-Markov model (HSMM), a variable duration HMM,
or anexplicit duration HMM.
HSMMs are widely used in many gene ﬁnding programs, since the length distribution of
exons and introns is not geometric (see e.g., (Schweikerta et al. 2009)), and in some chip-Seqdata analysis programs (see e.g., (Kuan et al. 2009)).
HSMMs are useful not only because they can model the waiting time of each state more
accurately, but also because they can model the distribution of a whole batch of observations atonce, instead of assuming all observations are conditionally iid. That is, they can use likelihoodmodels of the form p(x
t:t+l|zt=k,dt=l), which generate lcorrelated observations if the
duration in state kis forltime steps. This is useful for modeling data that is piecewise linear,
or shows other local trends (Ostendorf et al. 1996).
17.6.1.1 HSMM as augmented HMMs
One way to represent a HSMM is to use the graphical model shown in Figure 17.14. (In thisﬁgure, we have assumed the observations are iid within each state, but this is not required,as mentioned above.) The D
t∈{0,1,...,D}node is a state duration counter, where Dis
the maximum duration of any state. When we ﬁrst enter state j, we sample Dtfrom the
duration distribution for that state, Dt∼pj(·). Thereafer, Dtdeterministically counts down
17.6. GeneralizationsofHMMs 623
1 2 3 41−p 1−p 1−pp p p p
(a)0 100 200 300 400 500 60000.0020.0040.0060.0080.010.012
  
n=1
n=2
n=5
(b)
Figure 17.15 (a) A Markov chain with n=4repeated states and self loops. (b) The resulting distribution
over sequence lengths, for p=0.99and various n. Figure generated by hmmSelfLoopDist .
untilDt=0. WhileDt>0, the state ztis not allowed to change. When Dt=0, we make a
stochastic transition to a new state.
More precisely, we deﬁne the CPDs as follows:
p(Dt=d/prime|Dt−1=d,zt=j)=⎧
⎨
⎩pj(d/prime)ifd=0
1ifd/prime=d−1andd≥1
0otherwise(17.112)
p(zt=k|zt−1=j,Dt−1=d)=⎧
⎨
⎩1ifd>0andj=k
Ajkifd=0
0otherwise(17.113)
Note that pj(d)could be represented as a table (a non-parametric approach) or as some kind
of parametric distribution, such as a Gamma distribution. If pj(d)is a geometric distribution,
this emulates a standard HMM.
One can perform inference in this model by deﬁning a mega-variable Yt=(Dt,zt). However,
this is rather inefficient, since Dtis deterministic. It is possible to marginalize Dtout, and derive
special purpose inference procedures. See (Guedon 2003; Yu and Kobayashi 2006) for details.
Unfortunately, all these methods take O(TK2D)time, where Tis the sequence length, Kis
the number of states, and Dis the maximum duration of any state.
17.6.1.2 Approximations to semi-Markov models
A more efficient, but less ﬂexible, way to model non-geometric waiting times is to replace eachstate with nnew states, each with the same emission probabilities as the original state. For
example, consider the model in Figure 17.15(a). Obviously the smallest sequence this can generateis of length n=4. Any path of length dthrough the model has probability p
d−n(1−p)n;
multiplying by the number of possible paths we ﬁnd that the total probability of a path of lengthdis
p(d)=/parenleftbiggd−1
n−1/parenrightbigg
p
d−n(1−p)n(17.114)
624 Chapter17. MarkovandhiddenMarkovmodels
need on the words
phones
sub-
phonesaa n end n iy d dh
nax
iyend
end
end end
Figure 17.16 An example of an HHMM for an ASR system which can recognize 3 words. The top level
represents bigram word probabilities. The middle level represents the phonetic spelling of each word. The
bottom level represents the subphones of each phone. (It is traditional to represent a phone as a 3 stateHMM, representing the beginning, middle and end.) Based on Figure 7.5 of (Jurafsky and Martin 2000).
This is equivalent to the negative binomial distribution. By adjusting nand the self-loop
probabilities pof each state, we can model a wide range of waiting times: see Figure 17.15(b).
LetEbe the number of expansions of each state needed to approximate pj(d). Forwards-
backwards on this model takes O(T(KE)Fin)time, where Finis the average number of
predecessor states, compared to O(TK(Fin+D))for the HSMM. For typical speech recognition
applications, Fin∼3,D∼50,K∼106,T∼105. (Similar ﬁgures apply to problems such
as gene ﬁnding, which also often uses HSMMs.) Since Fin+D/greatermuchEFin, the expanded state
method is much faster than an HSMM. See (Johnson 2005) for details.
17.6.2 Hierarchical HMMs
Ahierarchical HMM (HHMM) (Fine et al. 1998) is an extension of the HMM that is designed to
model domains with hierarchical structure. Figure 17.16 gives an example of an HHMM used in
automatic speech recognition. The phone and subphone models can be “called” from differenthigher level contexts. We can always “ﬂatten” an HHMM to a regular HMM, but a factoredrepresentation is often easier to interpret, and allows for more efficient inference and modelﬁtting.
HHMMs have been used in many application domains, e.g., speech recognition (Bilmes 2001),
gene ﬁnding (Hu et al. 2000), plan recognition (Bui et al. 2002), monitoring transportationpatterns (Liao et al. 2007), indoor robot localization (Theocharous et al. 2004), etc. HHMMs areless expressive than stochastic context free grammars (SCFGs), since they only allow hierarchiesof bounded depth, but they support more efficient inference. In particular, inference in SCFGs(using the inside outside algorithm, (Jurafsky and Martin 2008)) takes O(T
3)whereas inference
in an HHMM takes O(T)time (Murphy and Paskin 2001).
We can represent an HHMM as a directed graphical model as shown in Figure 17.17. Q/lscript
t
represents the state at time tand level /lscript. A state transition at level /lscriptis only “allowed” if the
17.6. GeneralizationsofHMMs 625
F1
1 F1
2 F1
3
Q1
1 Q12 Q13
F2
1 F2
2 F2
3
Q2
1 Q22 Q23
F3
1 F3
2 F3
3
Q3
1 Q32 Q33
Y1 Y2 Y3
Figure 17.17 An HHMM represented as a DGM. Q/lscript
tis the state at time t,l e v e l/lscript;F/lscript
t=1if the HMM at
level/lscripthas ﬁnished (entered its exit state), otherwise F/lscript
t=0. Shaded nodes are observed; the remaining
nodes are hidden. We may optionally clamp F/lscript
T=1,w h e r eTis the length of the observation sequence,
to ensure all models have ﬁnished by the end of the sequence. Source: Figure 2 of (Murphy and Paskin
2001).
chain at the level below has “ﬁnished”, as determined by the F/lscript−1
tnode. (The chain below
ﬁnishes when it chooses to enter its end state.) This mechanism ensures that higher level chains
evolve more slowly than lower level chains, i.e., lower levels are nested within higher levels.
A variable duration HMM can be thought of as a special case of an HHMM, where the top
level is a deterministic counter, and the bottom level is a regular HMM, which can only changestates once the counter has “timed out”. See (Murphy and Paskin 2001) for further details.
17.6.3 Input-output HMMs
It is straightforward to extend an HMM to handle inputs, as shown in Figure 17.18(a). This deﬁnesa conditional density model for sequences of the form
p(y
1:T,z1:T|u1:T,θ) (17.115)
whereutis the input at time t; this is sometimes called a control signal. If the inputs and
outputs are continuous, a typical parameterization would be
p(zt|xt,zt−1=i,θ)=C a t ( zt|S(Wiut)) (17.116)
p(yt|xt,zt=j,θ)=N (yt|Vjut,Σj) (17.117)
Thus the transition matrix is a logistic regression model whose parameters depend on theprevious state. The observation model is a Gaussian whose parameters depend on the current
626 Chapter17. MarkovandhiddenMarkovmodels
yt−1 ytzt−1 ztut−1 ut
(a)x1x2 xTz1z2 zT
(b) (c)
Figure 17.18 (a) Input-output HMM. (b) First-order auto-regressive HMM. (c) A second-order buried Markov
model. Depending on the value of the hidden variables, the effective graph structure between the com-
ponents of the observed variables (i.e., the non-zero elements of the regression matrix and the precisionmatrix) can change, although this is not shown.
state. The whole model can be thought of as a hidden version of a maximum entropy Markov
model (Section 19.6.1).
Conditional on the inputs u1:Tand the parameters θ, one can apply the standard forwards-
backwards algorithm to estimate the hidden states. It is also straightforward to derive an EMalgorithm to estimate the parameters (see (Bengio and Frasconi 1996) for details).
17.6.4 Auto-regressive and buried HMMs
The standard HMM assumes the observations are conditionally independent given the hiddenstate. In practice this is often not the case. However, it is straightforward to have direct arcs fromx
t−1toxtas well as from zttoxt, as in Figure 17.18(b). This is known as an auto-regressive
HMM,o raregime switching Markov model. For continuous data, the observation modelbecomes
p(x
t|xt−1,zt=j,θ)=N(xt|Wjxt−1+μj,Σj) (17.118)
This is a linear regression model, where the parameters are chosen according to the currenthidden state. We can also consider higher-order extensions, where we condition on the last L
observations:
p(x
t|xt−L:t−1,zt=j,θ)=N(xt|L/summationdisplay
/lscript=1Wj,/lscriptxt−/lscript+μj,Σj) (17.119)
Such models are widely used in econometrics (Hamilton 1990). Similar models can be deﬁnedfor discrete observations.
The AR-HMM essentially combines two Markov chains, one on the hidden variables, to capture
long range dependencies, and one on the observed variables, to capture short range dependen-cies (Berchtold 1999). Since the Xnodes are observed, the connections between them only
17.6. GeneralizationsofHMMs 627
x1 x2 x3z3,1 z3,2 z3,3z2,1 z2,2 z2,3z1,1 z1,2 z1,3
(a)x31 x32 x33z31 z32 z33x21 x22 x23z21 z22 z23x11 x12 x13z11 z12 z13
(b)
Figure 17.19 (a) A factorial HMM with 3 chains. (b) A coupled HMM with 3 chains.
change the computation of the local evidence; inference can still be performed using the stan-
dard forwards-backwards algorithm. Parameter estimation using EM is also straightforward: theE step is unchanged, as is the M step for the transition matrix. If we assume scalar observationsfor notational simplicty, the M step involves minimizing
/summationdisplay
tE/bracketleftbigg1
σ2(st)(yt−yT
t−L:t−1w(st))2+logσ2(st)/bracketrightbigg
(17.120)
Focussing on the wterms, we see that this requires solving Kweighted least squares problems:
J(w1:K)=/summationdisplay
j/summationdisplay
tγt(j)
σ2(j)(yt−yT
t−L:t−1wj)2(17.121)
whereγt(j)=p(zt=k|x1:T)is the smoothed posterior marginal. This is a weighted linear
regression problem, where the design matrix has a Toeplitz form. This subproblem can be solvedefficiently using the Levinson-Durbin method (Durbin and Koopman 2001).
Buried Markov models generalize AR-HMMs by allowing the dependency structure between
the observable nodes to change based on the hidden state, as in Figure 17.18(c). Such a modelis called a dynamic Bayesian multi net, since it is a mixture of different networks. In the
linear-Gaussian setting, we can change the structure of the of x
t−1→xtarcs by using sparse
regression matrices, Wj, and we can change the structure of the connections within the
components of xtby using sparse Gaussian graphical models, either directed or undirected. See
(Bilmes 2000) for details.
17.6.5 Factorial HMM
An HMM represents the hidden state using a single discrete random variable zt∈{1,...,K}.
To represent 10 bits of information would require K=210= 1024states. By contrast, consider
adistributed representation of the hidden state, where each zc,t∈{0,1}represents the c’th
628 Chapter17. MarkovandhiddenMarkovmodels
bit of the t’th hidden state. Now we can represent 10 bits using just 10 binary variables, as
illustrated in Figure 17.19(a). This model is called a factorial HMM (Ghahramani and Jordan
1997). The hope is that this kind of model could capture different aspects of a signal, e.g., one
chain would represent speaking style, another the words that are being spoken.
Unfortunately, conditioned on xt, all the hidden variables are correlated (due to explaining
away the common observed child xt). This make exact state estimation intractable. However,
we can derive efficient approximate inference algorithms, as we discuss in Section 21.4.1.
17.6.6 Coupled HMM and the inﬂuence model
If we have multiple related data streams, we can use a coupled HMM (Brand 1996), as illustrated
in Figure 17.19(b). This is a series of HMMs where the state transitions depend on the states ofneighboring chains. That is, we represent the joint conditional distribution as
p(z
t|zt−1)=/productdisplay
cp(zct|zt−1) (17.122)
p(zct|zt−1)=p( zct|zc,t−1,zc−1,t−1,zc+1,t−1) (17.123)
This has been used for various tasks, such as audio-visual speech recognition (Neﬁan et al.
2002) and modeling freeway traffic ﬂows (Kwon and Murphy 2000).
The trouble with the above model is that it requires O(CK4)parameters to specify, if there
areCchains with Kstates per chain, because each state depends on its own past plus the
past of its two neighbors. There is a closely related model, known as the inﬂuence model
(Asavathiratham 2000), which uses fewer parameters. It models the joint conditional distributionas
p(z
ct|zt−1)=C/summationdisplay
c/prime=1αc,c/primep(zct|zc/prime,t−1) (17.124)
where/summationtext
c/primeαc,c/prime=1for eachc. That is, we use a convex combination of pairwise transition
matrices. The αc,c/primeparameter speciﬁes how much inﬂuence chain chas on chain c/prime. This
model only takes O(C2+CK2)parameters to specify. Furthermore, it allows each chain to
be inﬂuenced by all the other chains, not just its nearest neighbors. (Hence the correspondinggraphical model is similar to Figure 17.19(b), except that each node has incoming edges fromall the previous nodes.) This has been used for various tasks, such as modeling conversationalinteractions between people (Basu et al. 2001).
Unfortunately, inference in both of these models takes O(T(K
C)2)time, since all the chains
become fully correlated even if the interaction graph is sparse. Various approximate inferencemethods can be applied, as we discuss later.
17.6.7 Dynamic Bayesian networks (DBNs)
Adynamic Bayesian network is just a way to represent a stochastic process using a directed
graphical model.7Note that the network is not dynamic (the structure and parameters are ﬁxed),
7. The acronym DBNcan stand for either “dynamic Bayesian network” or “deep belief network” (Section 28.1) depending
on the context. Geoff Hinton (who invented the term “deep belief network”) has suggested the acronyms DyBNand
DeeBNto avoid this ambiguity.
17.6. GeneralizationsofHMMs 629
1471917162023212527
6
12
13
10
8
4
132826222418
15
119
5
2SensorValid1
FYdotDiff1
FcloseSlow1Xdot0 Xdot1
InLane0 InLane1LeftClr0 LeftClr1
RightClr0 RightClr1
LatAction0 LatAction1
FwdAction0 FwdAction1
Ydot0 Ydot1
Stopped0 Stopped1BXdot1
EngStatus0 EngStatus1 BcloseFast1
FrontBackStatus0 FrontBackStatus1 BYdotDiff1Fclr1
Bclr1XdotSens1
YdotSens1LeftClrSens1
RightClrSens1
TurnSignal1
FYdotDiffSens1
FclrSens1
BXdotSens1
BclrSens1
BYdotDiffSens1
slice ts lice t+1 evidence
Figure 17.20 The BATnet DBN. The transient nodes are only shown for the second slice, to minimize
clutter. The dotted lines can be ignored. Used with kind permission of Daphne Koller.
rather it is a network representation of a dynamical system. All of the HMM variants we have
seen above could be considered to be DBNs. However, we prefer to reserve the term “DBN”for graph structures that are more “irregular” and problem-speciﬁc. An example is shown inFigure 17.20, which is a DBN designed to monitor the state of a simulated autonomous carknown as the “Bayesian Automated Taxi”, or “BATmobile” (Forbes et al. 1995).
Deﬁning DBNs is straightforward: you just need to specify the structure of the ﬁrst time-slice,
the structure between two time-slices, and the form of the CPDs. Learning is also easy. Themain problem is that exact inference can be computationally expensive, because all the hiddenvariables become correlated over time (this is known as entanglement — see e.g., (Koller and
Friedman 2009, Sec. 15.2.4) for details). Thus a sparse graph does not necessarily result intractable exact inference. However, later we will see algorithms that can exploit the graphstructure for efficient approximate inference.
Exercises
Exercise 17.1 Derivation of Qfunction for HMM
Derive Equation 17.97.
Exercise 17.2 Two ﬁlter approach to smoothing in HMMs
Assuming that Πt(i)=p(St=i)>0for alliandt, derive a recursive algorithm for updating rt(i)=
p(St=i|xt+1:T). Hint: it should be very similar to the standard forwards algorithm, but using a time-
reversed transition matrix. Then show how to compute the posterior marginals γt(i)=p(St=i|x1:T)
630 Chapter17. MarkovandhiddenMarkovmodels
from the backwards ﬁltered messages rt(i), the forwards ﬁltered messages αt(i), and the stationary
distribution Πt(i).
Exercise 17.3 EM for for HMMs with mixture of Gaussian observations
Consider an HMM where the observation model has the form
p(xt|zt=j,θ)=/summationdisplay
kwjkN(xt|μjk,Σjk) (17.125)
• Draw the DGM.
• Derive the E step.• Derive the M step.
Exercise 17.4 EM for for HMMs with tied mixtures
In many applications, it is common that the observations are high-dimensional vectors (e.g., in speech
recognition, x
tis often a vector of cepstral coefficients and their derivatives, so xt∈R39), so estimating a
full covariance matrix for KMvalues (where Mis the number of mixture components per hidden state),
as in Exercise 17.3, requires a lot of data. An alternative is to use just MGaussians, rather than MK
Gaussians, and to let the state inﬂuence the mixing weights but not the means and covariances. This is
called asemi-continuous HMM ortied-mixture HMM.
• Draw the corresponding graphical model.
• Derive the E step.• Derive the M step.
18 State space models
18.1 Introduction
Astate space model orSSMis just like an HMM, except the hidden states are continuous. The
model can be written in the following generic form:
zt=g(ut,zt−1,/epsilon1t) (18.1)
yt=h(zt,ut,δt) (18.2)
whereztis the hidden state, utis an optional input or control signal, ytis the observation, g
is thetransition model, his theobservation model, /epsilon1tis the system noise at time t, andδt
is the observation noise at time t. We assume that all parameters of the model, θ, are known;
if not, they can be included into the hidden state, as we discuss below.
OneoftheprimarygoalsinusingSSMsistorecursivelyestimatethebeliefstate, p(zt|y1:t,u1:t,θ).
(Note: we will often drop the conditioning on uandθfor brevity.) We will discuss algorithms for
this later in this chapter. We will also discuss how to convert our beliefs about the hidden state
into predictions about future observables by computing the posterior predictive p(yt+1|y1:t).
An important special case of an SSM is where all the CPDs are linear-Gaussian. In other
words, we assume
• The transition model is a linear function
zt=Atzt−1+Btut+/epsilon1t (18.3)
• The observation model is a linear function
yt=Ctzt+Dtut+δt (18.4)
• The system noise is Gaussian
/epsilon1t∼N(0,Qt) (18.5)
• The observation noise is Gaussian
δt∼N(0,Rt) (18.6)
This model is called a linear-Gaussian SSM (LG-SSM)o ralinear dynamical system (LDS).
If the parameters θt=(At,Bt,Ct,Dt,Qt,Rt)are independent of time, the model is called
stationary.
632 Chapter18. Statespacemodels
10 12 14 16 18 20 22468101214
  
observed
truth
(a)8 10 12 14 16 18 20 22 2446810121416
  
observed
filtered
(b)10 15 20 25468101214
  
observed
smoothed
(c)
Figure 18.1 Illustration of Kalman ﬁltering and smoothing. (a) Observations (green cirles) are generated
by an object moving to the right (true location denoted by black squares). (b) Filtered estimated is shown
by dotted red line. Red cross is the posterior mean, blue circles are 95% conﬁdence ellipses derived fromthe posterior covariance. For clarity, we only plot the ellipses every other time step. (c) Same as (b), butusing offline Kalman smoothing. Figure generated by kalmanTrackingDemo .
The LG-SSM is important because it supports exact inference, as we will see. In particular,
if the initial belief state is Gaussian, p(z1)=N(μ1|0,Σ1|0), then all subsequent belief states
will also be Gaussian; we will denote them by p(zt|y1:t)=N(μt|t,Σt|t). (The notation μt|τ
denotes E[zt|y1:τ], and similarly for Σt|t; thusμt|0denotes the prior for z1before we have
seen any data. For brevity we will denote the posterior belief states using μt|t=μtand
Σt|t=Σt.) We can compute these quantities efficiently using the celebrated Kalman ﬁlter,
as we show in Section 18.3.1. But before discussing algorithms, we discuss some important
applications.
18.2 Applications of SSMs
SSMs have many applications, some of which we discuss in the sections below. We mostlyfocus on LG-SSMs, for simplicity, although non-linear and/or non-Gaussian SSMs are even morewidely used.
18.2.1 SSMs for object tracking
One of the earliest applications of Kalman ﬁltering was for tracking objects, such as airplanesand missiles, from noisy measurements, such as radar. Here we give a simpliﬁed example toillustrate the key ideas. Consider an object moving in a 2D plane. Let z
1tandz2tbe the
horizontal and vertical locations of the object, and ˙z1tand˙z2tbe the corresponding velocity.
We can represent this as a state vector zt∈R4as follows:
zT
t=/parenleftbigz1tz2t˙z1t˙z2t/parenrightbig
. (18.7)
18.2. ApplicationsofSSMs 633
Let us assume that the object is moving at constant velocity, but is “perturbed” by random
Gaussian noise (e.g., due to the wind). Thus we can model the system dynamics as follows:
zt=Atzt−1+/epsilon1t (18.8)⎛
⎜⎜⎝z1t
z2t
˙z1t
˙z2t⎞
⎟⎟⎠=⎛
⎜⎜⎝10Δ0
010Δ001 0000 1⎞
⎟⎟⎠⎛
⎜⎜⎝z
1,t−1
z2,t−1
˙z1,t−1
˙z2,t−1⎞
⎟⎟⎠+⎛
⎜⎜⎝/epsilon11t
/epsilon12t
/epsilon13t
/epsilon14t⎞
⎟⎟⎠(18.9)
where/epsilon1t∼N(0,Q)is the system noise, and Δis thesampling period. This says that the
new location zj,tis the old location zj,t−1plusΔtimes the old velocity ˙zj,t−1, plus random
noise,/epsilon1jt,f o rj=1:2. Also, the new velocity ˙zj,tis the old velocity ˙zj,t−1plus random
noise,/epsilon1jt,f o rj=3:4. This is called a random accelerations model, since the object moves
according to Newton’s laws, but is subject to random changes in velocity.
Now suppose that we can observe the location of the object but not its velocity. Let yt∈R2
represent our observation, which we assume is subject to Gaussian noise. We can model this as
follows:
yt=Ctzt+δt (18.10)
/parenleftbiggy1t
y2t/parenrightbigg
=/parenleftbigg10000100/parenrightbigg⎛
⎜⎜⎝z
1t
z2t
˙z1t
˙z2t⎞
⎟⎟⎠+⎛
⎜⎜⎝δ1t
δ2t
δ3t
δ4t⎞
⎟⎟⎠(18.11)
whereδt∼N(0,R)is the measurement noise.
Finally, we need to specify our initial (prior) beliefs about the state of the object, p(z1).W e
will assume this is a Gaussian, p(z1)=N(z1|μ1|0,Σ1|0). We can represent prior ignorance by
makingΣ1|0suitably “broad”, e.g., Σ1|0=∞I. We have now fully speciﬁed the model and can
perform sequential Bayesian updating to compute p(zt|y1:t)using an algorithm known as the
Kalman ﬁlter, to be described in Section 18.3.1.
Figure 18.1(a) gives an example. The object moves to the right and generates an observation
at each time step (think of “blips” on a radar screen). We observe these blips and ﬁlter out
the noise by using the Kalman ﬁlter. At every step, we have p(zt|y1:t), from which we can
compute p(z1t,z2t|y1:t)by marginalizing out the dimensions corresponding to the velocities.
(This is easy to do since the posterior is Gaussian.) Our “best guess” about the location of theobject is the posterior mean, E[z
t|y1:t], denoted as a red cross in Figure 18.1(b). Our uncertainty
associated with this is represented as an ellipse, which contains 95% of the probability mass. Wesee that our uncertainty goes down over time, as the effects of the initial uncertainty get “washedout”. We also see that the estimated trajectory has “ﬁltered out” some of the noise. To obtainthe much smoother plot in Figure 18.1(c), we need to use the Kalman smoother, which computesp(z
t|y1:T); this depends on “future” as well as “past” data, as discussed in Section 18.3.2.
18.2.2 Robotic SLAM
Consider a robot moving around an unknown 2d world. It needs to learn a map and keeptrack of its location within that map. This problem is known as simultaneous localization and
634 Chapter18. Statespacemodels
L2Y1 Y2 YTY1 Y3
X1 X2 X3
...XTL1
Figure 18.2 Illustration of graphical model underlying SLAM. Liis the ﬁxed location of landmark i,xt
is the location of the robot, and ytis the observation. In this trace, the robot sees landmarks 1 and 2 at
time step 1, then just landmark 2, then just landmark 1, etc. Based on Figure 15.A.3 of (Koller and Friedman
2009).
Robot pose
(a) (b)
Figure 18.3 Illustration of the SLAM problem. (a) A robot starts at the top left and moves clockwise in a
circle back to where it started. We see how the posterior uncertainty about the robot’s location increases
and then decreases as it returns to a familar location, closing the loop. If we performed smoothing, this
new information would propagate backwards in time to disambiguate the entire trajectory. (b) We show the
precision matrix, representing sparse correlations between the landmarks, and between the landmarks and
the robot’s position (pose). This sparse precision matrix can be visualized as a Gaussian graphical model,
as shown. Source: Figure 15.A.3 of (Koller and Friedman 2009) . Used with kind permission of Daphne
Koller.
18.2. ApplicationsofSSMs 635
mapping,o r SLAMfor short, and is widely used in mobile robotics, as well as other applications
such as indoor navigation using cellphones (since GPS does not work inside buildings).
Let us assume we can represent the map as the 2d locations of a ﬁxed set of Klandmarks,
denote them by L1,...,LK(each is a vector in R2). For simplicity, we will assume these are
uniquely identiﬁable. Let xtrepresent the unknown location of the robot at time t. We deﬁne
the state space to be zt=(xt,L1:K); we assume the landmarks are static, so their motion
model is a constant, and they have no system noise. If ytmeasures the distance from xtto
the set of closest landmarks, then the robot can update its estimate of the landmark locations
based on what it sees. Figure 18.2 shows the corresponding graphical model for the case whereK=2, and where on the ﬁrst step it sees landmarks 1 and 2, then just landmark 2, then just
landmark 1, etc.
If we assume the observation model p(y
t|zt,L)is linear-Gaussian, and we use a Gaussian
motion model for p(xt|xt−1,ut), we can use a Kalman ﬁlter to maintain our belief state about
the location of the robot and the location of the landmarks (Smith and Cheeseman 1986; Chosetand Nagatani 2001).
Over time, the uncertainty in the robot’s location will increase, due to wheel slippage etc.,
but when the robot returns to a familiar location, its uncertainty will decrease again. This iscalledclosing the loop, and is illustrated in Figure 18.3(a), where we see the uncertainty ellipses,
representing cov[x
t|y1:t,u1:t], grow and then shrink. (Note that in this section, we assume that
a human is joysticking the robot through the environment, so u1:tis given as input, i.e., we do
not address the decision-theoretic issue of choosing where to explore.)
Since the belief state is Gaussian, we can visualize the posterior covariance matrix Σt. Ac-
tually, it is more interesting to visualize the posterior precision matrix, Λt=Σ−1
t, since that
is fairly sparse, as shown in Figure 18.3(b). The reason for this is that zeros in the precisionmatrix correspond to absent edges in the corresponding undirected Gaussian graphical model(see Section 19.4.4). Initially all the landmarks are uncorrelated (assuming we have a diagonalprior onL), so the GGM is a disconnected graph, and Λ
tis diagonal. However, as the robot
moves about, it will induce correlation between nearby landmarks. Intuitively this is because therobot is estimating its position based on distance to the landmarks, but the landmarks’ locationsare being estimated based on the robot’s position, so they all become inter-dependent. This canbe seen more clearly from the graphical model in Figure 18.2: it is clear that L
1andL2are not
d-separated by y1:t, because there is a path between them via the unknown sequence of x1:t
nodes. As a consequence of the precision matrix becoming denser, exact inference takes O(K3)
time. (This is an example of the entanglement problem for inference in DBNs.) This preventsthe method from being applied to large maps.
There are two main solutions to this problem. The ﬁrst is to notice that the correlation pattern
moves along with the location of the robot (see Figure 18.3(b)). The remaining correlationsbecome weaker over time. Consequently we can dynamically “prune out” weak edges fromthe GGM using a technique called the thin junction tree ﬁlter (Paskin 2003) (junction trees areexplained in Section 20.4).
A second approach is to notice that, conditional on knowing the robot’s path, x
1:t, the
landmark locations are independent. That is, p(L|x1:t,y1:t)=/producttextK
k=1p(Lk|x1:t,y1:t). This
forms the basis of a method known as FastSLAM, which combines Kalman ﬁltering and particle
ﬁltering, as discussed in Section 23.6.3.
(Thrun et al. 2006) provides a more detailed account of SLAM and mobile robotics.
636 Chapter18. Statespacemodels
xt−1 xtyt−1 ytθt−1 θt
(a)0 5 10 15 20 25−8−6−4−2024
timeweightsonline linear regression
  
w0
w1
w0 batch
w1 batch
(b)
Figure 18.4 (a) A dynamic generalization of linear regression. (b) Illustration of the recursive least squares
algorithm applied to the model p(y|x,θ)=N(y|w0+w1x,σ2). We plot the marginal posterior of w0
andw1vs number of data points. (Error bars represent E[wj|y1:t]±/radicalbig
var[wj|y1:t].) After seeing all
the data, we converge to the offline ML (least squares) solution, represented by the horizontal lines. Figure
generated by linregOnlineDemoKalman .
18.2.3 Online parameter learning using recursive least squares
We can perform online Bayesian inference for the parameters of various statistical models using
SSMs. In this section, we focus on linear regression; in Section 18.5.3.2, we discuss logisticregression.
The basic idea is to let the hidden state represent the regression parameters, and to let the
(time-varying) observation model represent the current data vector. In more detail, deﬁne theprior to be p(θ)=N(θ|θ
0,Σ0). (If we want to do online ML estimation, we can just set
Σ0=∞I.) Let the hidden state be zt=θ; if we assume the regression parameters do not
change, we can set At=IandQt=0I,s o
p(θt|θt−1)=N(θt|θt−1,0I)=δθt−1(θt) (18.12)
(If we do let the parameters change over time, we get a so-called dynamic linear model
(Harvey 1990; West and Harrison 1997; Petris et al. 2009).) Let Ct=xT
t, andRt=σ2, so the
(non-stationary) observation model has the form
N(yt|Ctzt,Rt)=N(yt|xT
tθt,σ2) (18.13)
Applying the Kalman ﬁlter to this model provides a way to update our posterior beliefs about
the parameters as the data streams in. This is known as the recursive least squares orRLS
algorithm.
We can derive an explicit form for the updates as follows. In Section 18.3.1, we show that the
Kalman update for the posterior mean has the form
μt=Atμt−1+Kt(yt−CtAtμt−1) (18.14)
18.2. ApplicationsofSSMs 637
whereKtis known as the Kalman gain matrix. Based on Equation 18.39, one can show that
Kt=ΣtCT
tR−1
t. In this context, we have Kt=Σtxt/σ2. Hence the update for the
parameters becomes
ˆθt=ˆθt−1+1
σ2Σt|t(yt−xT
tˆθt−1)xt (18.15)
If we approximate1
σ2Σt|t−1withηtI, we recover the least mean squares orLMSalgorithm,
discussed in Section 8.5.3. In LMS, we need to specify how to adapt the update parameter
ηtto ensure convergence to the MLE. Furthermore, the algorithm may take multiple passes
through the data. By contrast, the RLS algorithm automatically performs step-size adaptation,and converges to the optimal posterior in one pass over the data. See Figure 18.4 for an example.
18.2.4 SSM for time series forecasting *
SSMs are very well suited for time-series forecasting, as we explain below. We focus on the caseof scalar (one dimensional) time series, for simplicity. Our presentation is based on (Varian 2011).See also (Aoki 1987; Harvey 1990; West and Harrison 1997; Durbin and Koopman 2001; Petriset al. 2009; Prado and West 2010) for good books on this topic.
At ﬁrst sight, it might not be apparent why SSMs are useful, since the goal in forecasting is
to predict future visible variables, not to estimate hidden states of some system. Indeed, mostclassical methods for time series forecasting are just functions of the form ˆy
t+1=f(y1:t,θ),
where hidden variables play no role (see Section 18.2.4.4). The idea in the state-space approach totime series is to create a generative model of the data in terms of latent processes, which capturedifferent aspects of the signal. We can then integrate out the hidden variables to compute theposterior predictive of the visibles.
Since the model is linear-Gaussian, we can just add these processes together to explain the
observed data. This is called a structural time series model. Below we explain some of the
basic building blocks.
18.2.4.1 Local level model
The simplest latent process is known as the local level model, which has the form
y
t=at+/epsilon1y
t,/epsilon1yt∼N(0,R) (18.16)
at=at−1+/epsilon1a
t,/epsilon1at∼N(0,Q) (18.17)
where the hidden state is just zt=at. This model asserts that the observed data yt∈Ris
equal to some unknown level term at∈R, plus observation noise with variance R. In addition,
the levelatevolves over time subject to system noise with variance Q. See Figure 18.5 for some
examples.
638 Chapter18. Statespacemodels
at−1 at
yt
(a)0 20 40 60 80 100 120 140 160 180 200−8−6−4−20246local level, a=1.000
  
Q=0.0, R=0.1
Q=0.1, R=0.0
Q=0.1, R=0.1
(b)
Figure 18.5 (a) Local level model. (b) Sample output, for a0=1 0. Black solid line: Q=0,R=1
(deterministic system, noisy observations). Red dotted line: Q=0.1,R=0(noisy system, deterministic
observation). Blue dot-dash line: Q=0.1,R=1(noisy system and observations). Figure generated by
ssmTimeSeriesSimple .
at−1 at
bt−1 bt
yt
(a)0 10 20 30 40 50 60 70 80 90 100−1000−800−600−400−2000200local trend, a=10.000, b=1.000
  
Q=0.0, R=100.0
Q=1.0, R=0.0
Q=1.0, R=100.0
(b)
Figure 18.6 (a) Local Trend. (b) Sample output, for a0=1 0,b0=1. Color code as in Figure 18.5. Figure
generated by ssmTimeSeriesSimple .
18.2.4.2 Local linear trend
Many time series exhibit linear trends upwards or downwards, at least locally. We can model
this by letting the level atchange by an amount btat each step as follows:
yt=at+/epsilon1y
t,/epsilon1yt∼N(0,R) (18.18)
at=at−1+bt−1+/epsilon1a
t,/epsilon1at∼N(0,Qa) (18.19)
bt=bt−1+/epsilon1bt,/epsilon1bt∼N(0,Qb) (18.20)
See Figure 18.6(a). We can write this in standard form by deﬁning zt=(at,bt)and
A=/parenleftbigg11
01/parenrightbigg
,C=/parenleftbig10/parenrightbig
,Q=/parenleftbiggQa0
0Qb/parenrightbigg
(18.21)
WhenQb=0,w eh a v e bt=b0, which is some constant deﬁning the slope of the line. If in
addition we have Qa=0,w eh a v ea t=at−1+b0t. Unrolling this, we have at=a0+b0t, and
18.2. ApplicationsofSSMs 639
at−1 at
bt−1 bt
ytc1
t−1 c1
tc2
t−1 c2
tc3
t−1 c3
t-1
-1
-1
0 2 4 6 8 10 12 14 16 18 20−30−20−10010203040seasonal model, s=4, a=0.000, b=0.000
  
Q=0.0, R=1.0
Q=1.0, R=0.0
Q=1.0, R=1.0
Figure 18.7 (a) Seasonal model. (b) Sample output, for a0=b0=0,c0=( 1,1,1), with a period of 4.
Color code as in Figure 18.5. Figure generated by ssmTimeSeriesSimple .
hence E[yt|y1:t−1]=a0+tb0. This is thus a generalization of the classic constant linear trend
model, an example of which is shown in the black line of Figure 18.6(b).
18.2.4.3 Seasonality
Many time series ﬂuctuate periodically, as illustrated in Figure 18.7(b). This can be modeled by
adding a latent process consisting of a series offset terms, ct, which sum to zero (on average)
over a complete cycle of Ssteps:
ct=−S−1/summationdisplay
s=1ct−s+/epsilon1c
t,/epsilon1ct∼N(0,Qc) (18.22)
See Figure 18.7(a) for the graphical model for the case S=4(we only need 3 seasonal vari-
able because of the sum-to-zero constraint). Writing this in standard LG-SSM form is left to
Exercise 18.2.
18.2.4.4 ARMA models *
The classical approach to time-series forecasting is based on ARMAmodels. “ARMA” stands for
auto-regressive moving-average, and refers to a model of the form
xt=p/summationdisplay
i=1αixt−i+q/summationdisplay
j=1βjwt−j+vt (18.23)
wherevt,wt∼N(0,1)are independent Gaussian noise terms. If q=0,w eh a v eap u r eA R
model, where xt⊥xi|xt−1:t−p,f o ri<t−p. For example, if p=1, we have the AR(1) model
640 Chapter18. Statespacemodels
x1 x2 x3 x4
(a)w1 w3 w2
x1 x2 x3 x4
(b)
w1 w3 w2
x1 x2 x3 x4
(c)
Figure 18.8 (a) An AR(1) model. (b) An MA(1) model represented as a bi-directed graph. (c) An ARMA(1,1)
model. Source: Figure 5.14 of (Choi 2011). Used with kind permission of Myung Choi.
shown in Figure 18.8(a). (The vtnodes are implicit in the Gaussian CPD for xt.) This is just a
ﬁrst-order Markov chain. If p=0, we have a pure MA model, where xt⊥xi,f o ri<t−q.
For example, if q=1, we have the MA(1) model shown in Figure 18.8(b). Here the wtnodes are
hidden common causes, which induces dependencies between adjacent time steps. This models
short-range correlation. If p=q=1, we get the ARMA(1,1) model shown in Figure 18.8(c), which
captures correlation at short and long time scales.
It turns out that ARMA models can be represented as SSMs, as explained in (Aoki 1987; Harvey
1990; West and Harrison 1997; Durbin and Koopman 2001; Petris et al. 2009; Prado and West2010). However, the structural approach to time series is often easier to understand than theARMA approach. In addition, it allows the parameters to evolve over time, which makes themodels more adaptive to non-stationarity.
18.3 Inference in LG-SSM
In this section, we discuss exact inference in LG-SSM models. We ﬁrst consider the online case,which is analogous to the forwards algorithm for HMMs. We then consider the offline case,which is analogous to the forwards-backwards algorithm for HMMs.
18.3.1 The Kalman ﬁltering algorithm
TheKalman ﬁlter is an algorithm for exact Bayesian ﬁltering for linear-Gaussian state space
models. We will represent the marginal posterior at time tby
p(zt|y1:t,u1:t)=N(zt|μt,Σt) (18.24)
Since everything is Gaussian, we can perform the prediction and update steps in closed form,as we explain below. The resulting algorithm is the Gaussian analog of the HMM ﬁlter inSection 17.4.2.
18.3. InferenceinLG-SSM 641
18.3.1.1 Prediction step
The prediction step is straightforward to derive:
p(zt|y1:t−1,u1:t)=/integraldisplay
N(zt|Atzt−1+Btut,Qt)N(zt−1|μt−1,Σt−1)dzt−1(18.25)
=N(zt|μt|t−1,Σt|t−1) (18.26)
μt|t−1/definesAtμt−1+Btut (18.27)
Σt|t−1/definesAtΣt−1AT
t+Qt (18.28)
18.3.1.2 Measurement step
The measurement step can be computed using Bayes rule, as follows
p(zt|yt,y1:t−1,u1:t)∝p(yt|zt,ut)p(zt|y1:t−1,u1:t) (18.29)
In Section 18.3.1.6, we show that this is given by
p(zt|y1:t,ut)=N (zt|μt,Σt) (18.30)
μt=μt|t−1+Ktrt (18.31)
Σt=(I−KtCt)Σt|t−1 (18.32)
wherertis theresidual orinnovation, given by the difference between our predicted observa-
tion and the actual observation:
rt/definesyt−ˆyt (18.33)
ˆyt/definesE[yt|y1:t−1,u1:t]=Ctμt|t−1+Dtut (18.34)
andKtis theKalman gain matrix, given by
Kt/definesΣt|t−1CTtS−1
t (18.35)
where
St/definescov[rt|y1:t−1,u1:t] (18.36)
=E/bracketleftbig
(Ctzt+δt−ˆyt)(Ctzt+δt−ˆyt)T|y1:t−1,u1:t/bracketrightbig
(18.37)
=CtΣt|t−1CTt+Rt (18.38)
whereδt∼N(0,Rt)is an observation noise term which is independent of all other noise
sources. Note that by using the matrix inversion lemma, the Kalman gain matrix can also be
written as
Kt=Σt|t−1CT(CΣt|t−1CT+R)−1=(Σ−1
t|t−1+CTRC)−1CTR−1(18.39)
We now have all the quantities we need to implement the algorithm; see kalmanFilter for
some Matlab code.
Let us try to make sense of these equations. In particular, consider the equation for the
mean update: μt=μt|t−1+Ktrt. This says that the new mean is the old mean plus a
642 Chapter18. Statespacemodels
correction factor, which is Kttimes the error signal rt. The amount of weight placed on the
error signal depends on the Kalman gain matrix. If Ct=I, thenKt=Σt|t−1S−1
t, which
is the ratio between the covariance of the prior (from the dynamic model) and the covariance
of the measurement error. If we have a strong prior and/or very noisy sensors, |Kt|will be
small, and we will place little weight on the correction term. Conversely, if we have a weak priorand/or high precision sensors, then |K
t|will be large, and we will place a lot of weight on the
correction term.
18.3.1.3 Marginal likelihood
As a byproduct of the algorithm, we can also compute the log-likelihood of the sequence using
logp(y1:T|u1:T)=/summationdisplay
tlogp(yt|y1:t−1,u1:t) (18.40)
where
p(yt|y1:t−1,u1:t)=N(yt|Ctμt|t−1,St) (18.41)
18.3.1.4 Posterior predictive
The one-step-ahead posterior predictive density for the observations can be computed as follows
p(yt|y1:t−1,u1:t)=/integraldisplay
N(yt|Czt,R)N(zt|μt|t−1,Σt|t−1)dzt (18.42)
=N(yt|Cμt|t−1,CΣt|t−1CT+R) (18.43)
This is useful for time series forecasting.
18.3.1.5 Computational issues
There are two dominant costs in the Kalman ﬁlter: the matrix inversion to compute the Kalmangain matrix, K
t, which takes O(|yt|3)time; and the matrix-matrix multiply to compute Σt,
which takes O(|zt|2)time. In some applications (e.g., robotic mapping), we have |zt|/greatermuch|yt|,s o
the latter cost dominates. However, in such cases, we can sometimes use sparse approximations(see (Thrun et al. 2006)).
In cases where |y
t|/greatermuch|zt|, we can precompute Kt, since, suprisingly, it does not depend on
the actual observations y1:t(an unusual property that is speciﬁc to linear Gaussian systems).
The iterative equations for updating Σtare called the Ricatti equations, and for time invariant
systems (i.e., where θt=θ), they converge to a ﬁxed point. This steady state solution can then
be used instead of using a time-speciﬁc gain matrix.
In practice, more sophisticated implementations of the Kalman ﬁlter should be used, for rea-
sons of numerical stability. One approach is the information ﬁlter , which recursively updates
the canonical parameters of the Gaussian, Λt=Σ−1
tandηt=Λtμt, instead of the moment
parameters. Another approach is the square root ﬁlter, which works with the Cholesky de-
composition or the UtDtUtdecomposition of Σt. This is much more numerically stable than
directly updating Σt. Further details can be found at http://www .cs.unc.edu/~welch/kal
man/and in various books, such as (Simon 2006).
18.3. InferenceinLG-SSM 643
18.3.1.6 Derivation *
We now derive the Kalman ﬁlter equations. For notational simplicity, we will ignore the input
termsu1:t. From Bayes rule for Gaussians (Equation 4.125), we have that the posterior precision
is given by
Σ−1
t=Σ−1
t|t−1+CT
tR−1
tCt (18.44)
From the matrix inversion lemma (Equation 4.106) we can rewrite this as
Σt=Σt|t−1−Σt|t−1CTt(Rt+CtΣt|t−1CTt)−1CtΣt|t−1 (18.45)
=(I−KtCt)Σt|t−1 (18.46)
From Bayes rule for Gaussians (Equation 4.125), the posterior mean is given by
μt=ΣtCtR−1
tyt+ΣtΣ−1
t|t−1μt|t−1 (18.47)
We will now massage this into the form stated earlier. Applying the second matrix inversion
lemma (Equation 4.107) to the ﬁrst term of Equation 18.47 we have
ΣtCtR−1
tyt=(Σ−1
t|t−1+CT
tR−1
tCt)−1CtR−1
tyt (18.48)
=Σt|t−1CTt(Rt+CtΣt|t−1CTt)−1yt=Ktyt (18.49)
Now applying the matrix inversion lemma (Equation 4.106) to the second term of Equation 18.47
we have
ΣtΣ−1
t|t−1μt|t−1 (18.50)
=(Σ−1
t|t−1+CT
tR−1
tCt)−1Σ−1
t|t−1μt|t−1 (18.51)
=/bracketleftbig
Σt|t−1−Σt|t−1CT(Rt+CTtΣt|t−1CTt)CtΣt|t−1/bracketrightbig
Σ−1
t|t−1μt|t−1 (18.52)
=(Σt|t−1−KtCTtΣt|t−1)Σ−1
t|t−1μt|t−1 (18.53)
=μt|t−1−KtCTtμt|t−1 (18.54)
Putting the two together we get
μt=μt|t−1+Kt(yt−Ctμt|t−1) (18.55)
18.3.2 The Kalman smoothing algorithm
In Section 18.3.1, we described the Kalman ﬁlter, which sequentially computes p(zt|y1:t)for each
t. This is useful for online inference problems, such as tracking. However, in an offline setting,
we can wait until all the data has arrived, and then compute p(zt|y1:T). By conditioning
on past and future data, our uncertainty will be signiﬁcantly reduced. This is illustrated inFigure 18.1(c), where we see that the posterior covariance ellipsoids are smaller for the smoothedtrajectory than for the ﬁltered trajectory. (The ellipsoids are larger at the beginning and end ofthe trajectory, since states near the boundary do not have as many useful neighbors from whichto borrow information.)
644 Chapter18. Statespacemodels
We now explain how to compute the smoothed estimates, using an algorithm called the
RTS smoother, named after its inventors, Rauch, Tung and Striebel (Rauch et al. 1965). It is
also known as the Kalman smoothing algorithm. The algorithm is analogous to the forwards-
backwards algorithm for HMMs, although there are some small differences which we discussbelow.
18.3.2.1 Algorithm
Kalman ﬁltering can be regarded as message passing on a graph, from left to right. When themessages have reached the end of the graph, we have successfully computed p(z
T|y1:T).N o w
we work backwards, from right to left, sending information from the future back to the past,and them combining the two information sources. The question is: how do we compute thesebackwards equations? We ﬁrst give the equations, then the derivation.
We have
p(z
t|y1:T)=N (μt|T,Σt|T) (18.56)
μt|T=μt|t+Jt(μt+1|T−μt+1|t) (18.57)
Σt|T=Σt|t+Jt(Σt+1|T−Σt+1|t)JT
t (18.58)
Jt/definesΣt|tATt+1Σ−1
t+1|t(18.59)
whereJtis the backwards Kalman gain matrix. The algorithm can be initialized from μT|T
andΣT|Tfrom the Kalman ﬁlter. Note that this backwards pass does not need access to the
data, that is, it does not need y1:T. This allows us to “throw away” potentially high dimensional
observation vectors, and just keep the ﬁltered belief states, which usually requires less memory.
18.3.2.2 Derivation *
We now derive the Kalman smoother, following the presentation of (Jordan 2007, sec 15.7).
The key idea is to leverage the Markov property, which says that ztis independent of future
data,yt+1:T, as long as zt+1is known. Of course, zt+1is not known, but we have a distribution
over it. So we condition on zt+1and then integrate it out, as follows.
p(zt|y1:T)=/integraldisplay
p(zt|y1:T,zt+1)p(zt+1|y1:T)dzt+1 (18.60)
=/integraldisplay
p(zt|y1:t,yt+1:T,zt+1)p(zt+1|y1:T)dzt+1 (18.61)
By induction, assume we have already computed the smoothed distribution for t+1:
p(zt+1|y1:T)=N(zt+1|μt+1|T,Σt+1|T) (18.62)
The question is: how do we perform the integration?
First, we compute the ﬁltered two-slice distribution p(zt,zt+1|y1:t)as follows:
p(zt,zt+1|y1:t)=N/parenleftbigg/parenleftbiggzt
zt+1/parenrightbigg
|/parenleftbiggμt|t
μt+1|t/parenrightbigg/parenleftbigg
Σt|tΣt|tAT
t+1
At+1Σt|tΣt+1|t/parenrightbigg/parenrightbigg
(18.63)
18.3. InferenceinLG-SSM 645
Now we use Gaussian conditioning to compute p(zt|zt+1,y1:t)as follows:
p(zt|zt+1,y1:t)=N (zt|μt|t+Jt(zt+1−μt+1|t),Σt|t−JtΣt+1|tJT
t) (18.64)
We can compute the smoothed distribution for tusing the rules of iterated expectation and
iterated covariance. First, the mean:
μt|T=E/bracketleftbig
E[zt|zt+1,y1:T]/vextendsingle/vextendsingley1:T/bracketrightbig
(18.65)
=E/bracketleftbig
E[zt|zt+1,y1:t]/vextendsingle/vextendsingley
1:T/bracketrightbig
(18.66)
=E/bracketleftBig
μt|t+Jt(zt+1−μt+1|t)/vextendsingle/vextendsingley
1:T/bracketrightBig
(18.67)
=μt|t+Jt(μt+1|T−μt+1|t) (18.68)
Now the covariance:
Σt|T=c o v/bracketleftbig
E[zt|zt+1,y1:T]/vextendsingle/vextendsingley
1:T/bracketrightbig
+E/bracketleftbig
cov[zt|zt+1,y1:T]/vextendsingle/vextendsingley
1:T/bracketrightbig
(18.69)
=c o v [ E[zt|zt+1,y1:t]|y1:T]+E/bracketleftbig
cov[zt|zt+1,y1:t]/vextendsingle/vextendsingley
1:T/bracketrightbig
(18.70)
=c o v/bracketleftBig
μt|t+Jt(zt+1−μt+1|t)|y1:T/bracketrightBig
+E/bracketleftbig
Σt|t−JtΣt+1|tJT
t|y1:T/bracketrightbig
(18.71)
=Jtcov/bracketleftBig
zt+1−μt+1|t|y1:T/bracketrightBig
JTt+Σt|t−JtΣt+1|tJTt(18.72)
=JtΣt+1|TJTt+Σt|t−JtΣt+1|tJTt(18.73)
=Σt|t+Jt(Σt+1|T−Σt+1|t)JTt(18.74)
The algorithm can be initialized from μT|TandΣT|Tfrom the last step of the ﬁltering algo-
rithm.
18.3.2.3 Comparison to the forwards-backwards algorithm for HMMs *
Note that in both the forwards and backwards passes for LDS, we always worked with normalized
distributions, either conditioned on the past data or conditioned on all the data. Furthermore,the backwards pass depends on the results of the forwards pass. This is different from the usualpresentation of forwards-backwards for HMMs, where the backwards pass can be computedindependently of the forwards pass (see Section 17.4.3).
It turns out that we can rewrite the Kalman smoother in a modiﬁed form which makes it
more similar to forwards-backwards for HMMs. In particular, we have
p(z
t|y1:T)=/integraldisplay
p(zt|y1:t,zt+1)p(zt+1|y1:T)dzt+1 (18.75)
=/integraldisplay
p(zt,zt+1|y1:t)p(zt+1|y1:T)
p(zt+1|y1:t)dzt+1 (18.76)
Now
p(zt+1|y1:T)=p(yt+1:T|zt+1,y1:t)p(zt+1|y1:t)
p(yt+1:T|y1:t)(18.77)
so
p(zt+1|y1:T)
p(zt+1|y1:t)=p(zt+1|y1:t)p(yt+1:T|zt+1)
p(zt+1|y1:t)p(yt+1:T|y1:t)∝p(yt+1:T|zt+1) (18.78)
646 Chapter18. Statespacemodels
which is the conditional likelihood of the future data. This backwards message can be computed
independently of the forwards message. However, this approach has several disadvantages: (1)it needs access to the original observation sequence; (2) the backwards message is a likelihood,not a posterior, so it need not to integrate to 1 over z
t– in fact, it may not always be possible
to represent p(yt+1:T|zt+1)as a Gaussian with positive deﬁnite covariance (this problem does
not arise in discrete state-spaces, as used in HMMs); (3) when exact inference is not possible, itmakes more sense to try to approximate the smoothed distribution rather than the backwardslikelihood term (see Section 22.5).
There is yet another variant, known as two-ﬁlter smoothing, whereby we compute p(z
t|y1:t)
in the forwards pass as usual, and the ﬁltered posterior p(zt|yt+1:T)in the backwards pass.
These can then be easily combined to compute p(zt|y1:T). See (Kitagawa 2004; Briers et al.
2010) for details.
18.4 Learning for LG-SSM
In this section, we brieﬂy discuss how to estimate the parameters of an LG-SSM. In the controltheory community, this is known as systems identiﬁcation (Ljung 1987).
When using SSMs for time series forecasting, and also in some physical state estimation
problems, the observation matrix Cand the transition matrix Aare both known and ﬁxed, by
deﬁnition of the model. In such cases, all that needs to be learned are the noise covariances Q
andR. (The initial state estimate μ
0is often less important, since it will get “washed away” by
the data after a few time steps. This can be encouraged by setting the initial state covarianceto be large, representing a weak prior.) Although we can estimate QandRoffline, using the
methods described below, it is also possible to derive a recursive procedure to exactly computethe posterior p(z
t,R,Q|y1:t), which has the form of a Normal-inverse-Wishart; see (West and
Harrison 1997; Prado and West 2010) for details.
18.4.1 Identiﬁability and numerical stability
In the more general setting, where the hidden states have no pre-speciﬁed meaning, we need tolearnAandC. However, in this case we can set Q=Iwithout loss of generality, since an
arbitrary noise covariance can be modeled by appropriately modifying A. Also, by analogy with
factor analysis, we can require Rto be diagonal without loss of generality. Doing this reduces
the number of free parameters and improves numerical stability.
Another constraint that is useful to impose is on the eigenvalues of the dynamics matrix A.
To see why this is important, consider the case of no system noise. In this case, the hiddenstate at time tis given by
z
t=Atz1=UΛtU−1z1 (18.79)
whereUis the matrix of eigenvectors for A, andΛ=d i a g (λi)contains the eigenvalues. If
anyλi>1, then for large t,ztwill blow up in magnitude. Consequently, to ensure stability, it
is useful to require that all the eigenvalues are less than 1 (Siddiqi et al. 2007). Of course, if allthe eigenvalues are less than 1, then E[z
t]=0for larget, so the state will return to the origin.
Fortunately, when we add noise, the state become non-zero, so the model does not degenerate.
18.5. Approximateonlineinferencefornon-linear,non-GaussianSSMs 647
Below we discuss how to estimate the parameters. However, for simplicity of presentation, we
do not impose any of the constraints mentioned above.
18.4.2 Training with fully observed data
If we observe the hidden state sequences, we can ﬁt the model by computing the MLEs (or even
the full posteriors) for the parameters by solving a multivariate linear regression problem forz
t−1→ztand forzt→yt. That is, we can estimate Aby solving the least squares problem
J(A)=/summationtext2
t=1(zt−Azt−1)2, and similarly for C. We can estimate the system noise covariance
Qfrom the residuals in predicting ztfromzt−1, and estimate the observation noise covariance
Rfrom the residuals in predicting ytfromzt.
18.4.3 EM for LG-SSM
If we only observe the output sequence, we can compute ML or MAP estimates of the parameters
using EM. The method is conceptually quite similar to the Baum-Welch algorithm for HMMs(Section 17.5), except we use Kalman smoothing instead of forwards-backwards in the E step,and use different calculations in the M step. We leave the details to Exercise 18.1.
18.4.4 Subspace methods
EM does not always give satisfactory results, because it is sensitive to the initial parameterestimates. One way to avoid this is to use a different approach known as a subspace method
(Overschee and Moor 1996; Katayama 2005).
To understand this approach, let us initially assume there is no observation noise and no
system noise. In this case, we have z
t=Azt−1andyt=Czt, and hence yt=CAt−1z1.
Consequently all the observations must be generated from a dim(zt)-dimensional linear mani-
fold or subspace. We can identify this subspace using PCA (see the above references for details).Once we have an estimate of the z
t’s, we can ﬁt the model as if it were fully observed. We can
either use these estimates in their own right, or use them to initialize EM.
18.4.5 Bayesian methods for “ﬁtting” LG-SSMs
There are various offline Bayesian alternatives to the EM algorithm, including variational BayesEM (Beal 2003; Barber and Chiappa 2007) and blocked Gibbs sampling (Carter and Kohn 1994;Cappe et al. 2005; Fruhwirth-Schnatter 2007). The Bayesian approach can also be used toperform online learning, as we discussed in Section 18.2.3. Unfortunately, once we add the SSMparameters to the state space, the model is generally no longer linear Gaussian. Consequentlywe must use some of the approximate online inference methods to be discussed below.
18.5 Approximate online inference for non-linear, non-Gaussian SSMs
In Section 18.3.1, we discussed how to perform exact online inference for LG-SSMs. However,many models are non linear. For example, most moving objects do not move in straight lines.And even if they did, if we assume the parameters of the model are unknown and add them
648 Chapter18. Statespacemodels
to the state space, the model becomes nonlinear. Furthermore, non-Gaussian noise is also very
common, e.g., due to outliers, or when inferring parameters for GLMs instead of just linearregression. For these more general models, we need to use approximate inference.
The approximate inference algorithms we discuss below approximate the posterior by a Gaus-
sian. In general, if Y=f(X),w h e r eXhas a Gaussian distribution and fis a non-linear
function, there are two main ways to approximate p(Y)by a Gaussian. The ﬁrst is to use a
ﬁrst-order approximation of f. The second is to use the exact f, but to project f(X)onto the
space of Gaussians by moment matching. We discuss each of these methods in turn. (See alsoSection 23.5, where we discuss particle ﬁltering, which is a stochastic algorithm for approximateonline inference, which uses a non-parametric approximation to the posterior, which is oftenmore accurate but slower to compute.)
18.5.1 Extended Kalman ﬁlter (EKF)
In this section, we focus on non-linear models, but we assume the noise is Gaussian. That is,we consider models of the form
z
t=g(ut,zt−1)+N(0,Qt) (18.80)
yt=h(zt)+N(0,Rt) (18.81)
where the transition model gand the observation model hare nonlinear but differentiable
functions. Furthermore, we focus on the case where we approximate the posterior by a singleGaussian. (The simplest way to handle more general posteriors (e.g., multi-modal, discrete, etc).is to use particle ﬁltering, which we discuss in Section 23.5.)
Theextended Kalman ﬁlter orEKFcan be applied to nonlinear Gaussian dynamical systems
of this form. The basic idea is to linearize gandhabout the previous state estimate using
a ﬁrst order Taylor series expansion, and then to apply the standard Kalman ﬁlter equations.(The noise variance in the equations (Q andR) is not changed, i.e., the additional error due to
linearization is not modeled.) Thus we approximate the stationary non-linear dynamical systemwith a non-stationary linear dynamical system.
The intuition behind the approach is shown in Figure 18.9, which shows what happens when
we pass a Gaussian distribution p(x), shown on the bottom right, through a nonlinear function
y=g(x), shown on the top right. The resulting distribution (approximated by Monte Carlo) is
shown in the shaded gray area in the top left corner. The best Gaussian approximation to this,computed from E[g(x)]andvar[g(x)]by Monte Carlo, is shown by the solid black line. The
EKF approximates this Gaussian as follows: it linearizes the gfunction at the current mode, μ,
and then passes the Gaussian distribution p(x)through this linearized function. In this example,
the result is quite a good approximation to the ﬁrst and second moments of p(y), for much less
cost than an MC approximation.
In more detail, the method works as follows. We approximate the measurement model using
p(y
t|zt)≈N(yt|h(μt|t−1)+Ht(yt−μt|t−1),Rt) (18.82)
whereHtis the Jacobian matrix of hevaluated at the prior mode:
Hij/defines∂hi(z)
∂zj(18.83)
Ht/definesH|z=μt|t−1(18.84)
18.5. Approximateonlineinferencefornon-linear,non-GaussianSSMs 649
p(y)yp(y)
Gaussian of p(y)Mean of p(y)EKF GaussianMean of EKF
xy=g(x)Function g(x)Taylor approx.
Mean μ
g(μ)
xp(x)p(x)Mean μ
Figure 18.9 Nonlinear transformation of a Gaussian random variable. The prior p(x)is shown on the
bottom right. The function y=g(x)is shown on the top right. The transformed distribution p(y)is
shown in the top left. A linear function induces a Gaussian distribution, but a non-linear function induces
a complex distribution. The solid line is the best Gaussian approximation to this; the dotted line is the EKFapproximation to this. Source: Figure 3.4 of (Thrun et al. 2006). Used with kind permission of SebastianThrun.
Similarly, we approximate the system model using
p(zt|zt−1,ut)≈N(zt|g(ut,μt−1)+Gt(zt−1−μt−1),Qt) (18.85)
where
Gij(u)/defines∂gi(u,z)
∂zj(18.86)
Gt/definesG(ut)|z=μt−1(18.87)
soGis the Jacobian matrix of gevaluated at the prior mode.
Given this, we can then apply the Kalman ﬁlter to compute the posterior as follows:
μt|t−1=g(ut,μt−1) (18.88)
Vt|t−1=GtVt−1GT
t+Qt (18.89)
Kt=Vt|t−1HTt(HtVt|t−1HTt+Rt)−1(18.90)
μt=μt|t−1+Kt(yt−h(μt|t−1)) (18.91)
Vt=(I−KtHt)Vt|t−1 (18.92)
650 Chapter18. Statespacemodels
mean covariance sigma 
points Actual (sampling)  Sigma-Point Linearized (EKF) 
()=yf x () iiχϒ=f
transformed 
sigma points S-P 
covariance S-P 
mean 
yf x P P==( )    yAAT
x
true 
mean 
true 
covariance fx()AAT
xP
Figure 18.10 An example of the unscented transform in two dimensions. Source: (Wan and der Merwe
2001). Used with kind permission of Eric Wan.
We see that the only difference from the regular Kalman ﬁlter is that, when we compute the
state prediction, we use g(ut,μt−1)instead of Atμt−1+Btut, and when we compute the
measurement update we use h(μt|t−1)instead of Ctμt|t−1.
It is possible to improve performance by repeatedly re-linearizing the equations around μt
instead of μt|t−1; this is called the iterated EKF , and yields better results, although it is of
course slower.
There are two cases when the EKF works poorly. The ﬁrst is when the prior covariance is
large. In this case, the prior distribution is broad, so we end up sending a lot of probability
mass through different parts of the function that are far from the mean, where the function has
been linearized. The other setting where the EKF works poorly is when the function is highly
nonlinear near the current mean. In Section 18.5.2, we will discuss an algorithm called the UKF
which works better than the EKF in both of these settings.
18.5.2 Unscented Kalman ﬁlter (UKF)
Theunscented Kalman ﬁlter (UKF) is a better version of the EKF (Julier and Uhlmann 1997).
(Apparently it is so-called because it “doesn’t stink”!) The key intuition is this: it is easier
to approximate a Gaussian than to approximate a function. So instead of performing a linear
approximation to the function, and passing a Gaussian through it, instead pass a deterministically
chosen set of points, known as sigma points , through the function, and ﬁt a Gaussian to the
resulting transformed points. This is known as the unscented transform , and is sketched in
Figure 18.10. (We explain this ﬁgure in detail below.)
18.5. Approximateonlineinferencefornon-linear,non-GaussianSSMs 651
The UKF basically uses the unscented transform twice, once to approximate passing through
the system model g, and once to approximate passing through the measurement model h.W e
give the details below. Note that the UKF and EKF both perform O(d3)operations per time step
wheredis the size of the latent state-space. However, the UKF is accurate to at least second
order, whereas the EKF is only a ﬁrst order approximation (although both the EKF and UKF can
be extended to capture higher order terms). Furthermore, the unscented transform does notrequire the analytic evaluation of any derivatives or Jacobians (a so-called derivative free ﬁlter),
making it simpler to implement and more widely applicable.
18.5.2.1 The unscented transform
BeforeexplainingtheUKF,weﬁrstexplaintheunscentedtransform. Assume p(x)=N(x|μ,Σ),
and consider estimating p(y),w h e r ey=f(x)for some nonlinear function f. The unscented
transform does this as follows. First we create a set of 2d+1sigma points x
i, given by
x=/parenleftBig
μ,{μ+(/radicalbig
(d+λ)Σ):i}d
i=1,{μ−(/radicalbig
(d+λ)Σ):i}di=1/parenrightBig
(18.93)
whereλ=α2(d+κ)−dis a scaling parameter to be speciﬁed below, and the notation M:i
means the i’th column of matrix M.
These sigma points are propagated through the nonlinear function to yield yi=f(xi), and
the mean and covariance for yis computed as follows:
μy=2d/summationdisplay
i=0wi
myi (18.94)
Σy=2d/summationdisplay
i=0wi
c(yi−μy)(yi−μy)T(18.95)
where the w’s are weighting terms, given by
wi
m=λ
d+λ(18.96)
wi
c=λ
d+λ+(1−α2+β) (18.97)
wi
m=wi
c=1
2(d+λ)(18.98)
See Figure 18.10 for an illustration.
In general, the optimal values of α,βandκare problem dependent, but when d=1, they
areα=1,β=0,κ=2. Thus in the 1d case, λ=2, so the 3 sigma points are μ,μ+√
3σ
andμ−√
3σ.
18.5.2.2 The UKF algorithm
The UKF algorithm is simply two applications of the unscented tranform, one to compute
p(zt|y1:t−1,u1:t)and the other to compute p(zt|y1:t,u1:t). We give the details below.
652 Chapter18. Statespacemodels
The ﬁrst step is to approximate the predictive density p(zt|y1:t−1,u1:t)≈N(zt|μt,Σt)by
passing the old belief state N(zt−1|μt−1,Σt−1)through the system model gas follows:
z0
t−1=/parenleftBig
μt−1,{μt−1+γ(/radicalbig
Σt−1):i}di=1,{μt−1−γ(/radicalbig
Σt−1):i}di=1/parenrightBig
(18.99)
z∗it=g(ut,z0it−1) (18.100)
μt=2d/summationdisplay
i=0wi
mz∗it(18.101)
Σt=2d/summationdisplay
i=0wi
c(z∗it−μt)(z∗it−μt)+Qt (18.102)
whereγ=√
d+λ.
The second step is to approximate the likelihood p(yt|zt)≈N(yt|ˆyt,St)by passing the
priorN(zt|μt,Σt)through the observation model h:
z0t=/parenleftbigg
μt,{μt+γ(/radicalBig
Σt):i}di=1,{μt−γ(/radicalBig
Σt):i}di=1/parenrightbigg
(18.103)
y∗it=h(z0it) (18.104)
ˆyt=2d/summationdisplay
i=0wi
my∗it(18.105)
St=2d/summationdisplay
i=0wi
c(y∗it−ˆyt)(y∗it−ˆyt)T+Rt (18.106)
Finally, we use Bayes rule for Gaussians to get the posterior p(zt|y1:t,u1:t)≈N(zt|μt,Σt):
Σz,y
t=2d/summationdisplay
i=0wi
c(z∗i
t−μt)(y∗it−ˆyt)T(18.107)
Kt=Σz,y
tS−1
t (18.108)
μt=μt+Kt(yt−ˆyt) (18.109)
Σt=Σt−KtStKT
t (18.110)
18.5.3 Assumed density ﬁltering (ADF)
In this section, we discuss inference where we perform an exact update step, but then approx-
imate the posterior by a distribution of a certain convenient form, such as a Gaussian. Moreprecisely, let the unknowns that we want to infer be denoted by θ
t. Suppose that Qi sas e to f
tractable distributions, e.g., Gaussians with a diagonal covariance matrix, or a product of discretedistributions. Suppose that we have an approximate prior q
t−1(θt−1)≈p(θt−1|y1:t−1),w h e r e
qt−1∈Q. We can update this with the new measurement to get the approximate posterior
ˆp(θt)=1
Ztp(yt|θt)qt|t−1(θt) (18.111)
18.5. Approximateonlineinferencefornon-linear,non-GaussianSSMs 653
qt−1qt|t−1ˆpt
qtqt+1|tˆpt+1
qt+1PredictUpdateProject
PredictUpdate Project
(a)xt−1 xtyt−1 ytst−1 stθt−1 θt
(b)
Figure 18.11 (a) Illustration of the predict-update-project cycle of assumed density ﬁltering. (b) A dynam-
ical logistic regression model. Compare to Figure 18.4(a).
where
Zt=/integraldisplay
p(yt|θt)qt|t−1(θt)dθt (18.112)
is the normalization constant and
qt|t−1(θt)=/integraldisplay
p(θt|θt−1)qt−1(θt−1)dθt−1 (18.113)
is the one step ahead predictive distribution. If the prior is from a suitably restricted family, this
one-step update process is usually tractable. However, we often ﬁnd that the resulting posterioris no longer in our tractable family, ˆp(θ
t)/negationslash∈Q. So after updating we seek the best tractable
approximation by computing
q(θt) = argmin
q∈QKL(ˆp(θt)||q(θt)) (18.114)
This minimizes the the Kullback-Leibler divergence (Section 2.8.2) from the approximation q(θt)
to the “exact” posterior ˆp(θt), and can be thought of as projecting ˆponto the space of tractable
distributions. The whole algorithm consists of predict-update-project cycles. This is known as
assumed density ﬁltering orADF(Maybeck 1979). See Figure 18.11(a) for a sketch.
Ifqis in the exponential family, one can show that this KL minimization can be done by
moment matching. We give some examples of this below.
18.5.3.1 Boyen-Koller algorithm for online inference in DBNs
If we are performing inference in a discrete-state dynamic Bayes net (Section 17.6.7), where θtj
is thej’th hidden variable at time t, then the exact posterior p(θt)becomes intractable to
compute because of the entanglement problem. Suppose we use a fully factored approximation
of the form q(θt)=/producttextD
j=1Cat(θt,j|πt,j),w h e r eπtjk=q(θt,j=k)is the probability variable
jis in state k, andDis the number of variables. In this case, the moment matching operation
becomes
πtjk=ˆp(θt,j=k) (18.115)
654 Chapter18. Statespacemodels
This can be computed by performing a predict-update step using the factored prior, and then
computing the posterior marginals. This is known as the Boyen-Koller algorithm, named after
the authors of (Boyen and Koller 1998), who demonstrated that the error incurred by this seriesof repeated approximations remains bounded (under certain assumptions about the stochasticityof the system).
18.5.3.2 Gaussian approximation for online inference in GLMs
Now suppose q(θ
t)=/producttextD
j=1N(θt,j|μt,j,τt,j),w h e r eτt,jis the variance. Then the optimal
parameters of the tractable approximation to the posterior are
μt,j=Eˆp[θt,j],τt,j=v a rˆp[θt,j] (18.116)
This method can be used to do online inference for the parameters of many statistical models.
For example, theTrueSkill system, used in Microsoft’s Xbox to rank players over time, uses thisform of approximation (Herbrich et al. 2007). We can also apply this method to simpler models,such as GLM, which have the advantage that the posterior is log-concave. Below we explain howto do this for binary logistic regression, following the presentation of (Zoeter 2007).
The model has the form
p(y
t|xt,θt)=B e r ( yt|sigm(xT
tθt)) (18.117)
p(θt|θt−1)=N (θt|θt−1,σ2I) (18.118)
whereσ2is some process noise which allows the parameters to change slowly over time. (This
can be set to 0, as in the recursive least squares method (Section 18.2.3), if desired.) We will
assumeqt−1(θt−1)=/producttext
jN(θt−1,j|μt−1,j,τt−1,j)is the tractable prior. We can compute the
one-step-ahead predictive density qt|t−1(θt)using the standard linear-Gaussian update. So now
we concentrate on the measurement update step.
Deﬁne the deterministic quantity st=θT
txt, as shown in Figure 18.11(b). If qt|t−1(θt)=/producttext
jN(θt,j|μt|t−1,j,τt|t−1,j), then we can compute the predictive distribution for stas follows:
qt|t−1(st)=N (st|mt|t−1,vt|t−1) (18.119)
mt|t−1=/summationdisplay
jxt,jμt|t−1,j (18.120)
vt|t−1=/summationdisplay
jx2
t,jτt|t−1,j (18.121)
The posterior for stis given by
qt(st)=N (st|mt,vt) (18.122)
mt=/integraldisplay
st1
Ztp(yt|st)qt|t−1(st)dst (18.123)
vt=/integraldisplay
s2t1
Ztp(yt|st)qt|t−1(st)dst−m2t(18.124)
Zt=/integraldisplay
p(yt|st)qt|t−1(st)dst (18.125)
18.6. Hybriddiscrete/continuousSSMs 655
wherep(yt|st)=B e r ( yt|st). These integrals are one dimensional, and so can be computed
using Gaussian quadrature (see (Zoeter 2007) for details). This is the same as one step of the
UKF algorithm.
Having inferred q(st), we need to compute q(θ|st). This can be done as follows. Deﬁne δm
as the change in the mean of standδvas the change in the variance:
mt=mt|t−1+δm,vt=vt|t−1+δv (18.126)
Then one can show that the new factored posterior over the model parameters is given by
q(θt,j)=N (θt,j|μt,j,τt,j) (18.127)
μt,j=μt|t−1,j+ajδm (18.128)
τt,j=τt|t−1,j+a2
jδv (18.129)
aj/definesxt,jτt|t−1,j/summationtext
j/primex2
t,j/primeτ2
t|t−1,j(18.130)
Thus we see that the parameters which correspond to inputs with larger magnitude (big |xt,j|)
or larger uncertainty (big τt|t−1,j) get updated most, which makes intuitive sense.
In (Opper 1998) a version of this algorithm is derived using a probit likelihood (see Section 9.4).
Inthiscase, themeasurementupdatecanbedoneinclosedform, withouttheneedfornumerical
integration. In either case, the algorithm only takes O(D)operations per time step, so it can
be applied to models with large numbers of parameters. And since it is an online algorithm,it can also handle massive datasets. For example (Zhang et al. 2010) use a version of thisalgorithm to ﬁt a multi-class classiﬁer online to very large datasets. They beat alternative (nonBayesian) online learning algorithms, and sometimes even outperform state of the art batch(offline) learning methods such as SVMs (described in Section 14.5).
18.6 Hybrid discrete/continuous SSMs
Many systems contain both discrete and continuous hidden variables; these are known as hybrid
systems. For example, the discrete variables may indicate whether a measurement sensor isfaulty or not, or which “regime” the system is in. We will see some other examples below.
A special case of a hybrid system is when we combine an HMM and an LG-SSM. This is
called aswitching linear dynamical system (SLDS), a jump Markov linear system (JMLS),
or aswitching state space model (SSSM). More precisely, we have a discrete latent variable,
q
t∈{1,...,K}, a continuous latent variable, zt∈RL, an continuous observed response
yt∈RDand an optional continuous observed input or control ut∈RU. We then assume that
the continuous variables have linear Gaussian CPDs, conditional on the discrete states:
p(qt=k|qt−1=j,θ)=A ij (18.131)
p(zt|zt−1,qt=k,ut,θ)=N (zt|Akzt−1+Bkut,Qk) (18.132)
p(yt|zt,qt=k,ut,θ)=N (yt|Ckzt+Dkut,Rk) (18.133)
See Figure 18.12(a) for the DGM representation.
656 Chapter18. Statespacemodels
yt−1 ytzt−1 ztqt−1 qtut−1 ut
(a) (b)
Figure 18.12 A switching linear dynamical system. (a) Squares represent discrete nodes, circles represent
continuous nodes. (b) Illustration of how the number of modes in the belief state grows exponentially over
time. We assume there are two binary states.
18.6.1 Inference
Unfortunately inference (i.e., state estimation) in hybrid models, including the switching LG-
SSM model, is intractable. To see why, suppose qtis binary, but that only the dynamics
Adepend on qt, not the observation matrix. Our initial belief state will be a mixture of
2 Gaussians, corresponding to p(z1|y1,q1=1 )andp(z1|y1,q1=2 ). The one-step-ahead
predictive density will be a mixture of 4 Gaussians p(z2|y1,q1=1,q2=1 ),p(z2|y1,q1=
1,q2=2 ),p(z2|y1,q1=2,q2=1 ), andp(z2|y1,q1=2,q2=2 ), obtained by passing each of
the prior modes through the 2 possible transition models. The belief state at step 2 will also bea mixture of 4 Gaussians, obtained by updating each of the above distributions with y
2.A ts t e p
3, the belief state will be a mixture of 8 Gaussians. And so on. So we see there is an exponentialexplosion in the number of modes (see Figure 18.12(b)).
Various approximate inference methods have been proposed for this model, such as the
following:
• Prune off low probability trajectories in the discrete tree; this is the basis of multiple
hypothesis tracking (Bar-Shalom and Fortmann 1988; Bar-Shalom and Li 1993).
• Use Monte Carlo. Essentially we just sample discrete trajectories, and apply an analytical
ﬁlter to the continuous variables conditional on a trajectory. See Section 23.6 for details.
• Use ADF, where we approximate the exponentially large mixture of Gaussians with a smaller
mixture of Gaussians. See Section 18.6.1.1 for details.
18.6.1.1 A Gaussian sum ﬁlter for switching SSMs
AGaussian sum ﬁlter (Sorenson and Alspach 1971) approximates the belief state at each step
by a mixture of KGaussians. This can be implemented by running KKalman ﬁlters in
18.6. Hybriddiscrete/continuousSSMs 657
b1
t−1
b2
t−1    
@
@@ R
    
@
@@ R
Filter 1
Filter 2
Filter 1
Filter 2
-
-
-
-b1,1
t
b1,2
t
b2,1
t
b2,2
t@
@@ R
B
B
B
B
B
BB N 
    
Merge
Merge
-
-b1
t
b2
t
(a)
b1
t−1
b2
t−1
-
-
Merge
-
-˜b1
t−1
˜b2
t−1
-
-
Filter 1
Filter 2
-
-b1
t
b2
t
(b)
Figure 18.13 ADF for a switching linear dynamical system. (a) GPB2 method. (b) IMM method. See text
for details.
parallel. This is particularly well suited to switching SSMs. We now describe one version of this
algorithm, known as the “second order generalized pseudo Bayes ﬁlter ” (GPB2) (Bar-Shalom
and Fortmann 1988). We assume that the prior belief state bt−1is a mixture of KGaussians,
one per discrete state:
bi
t−1/definesp(zt−1,qt−1=i|y1:t−1)=πt−1,iN(zt−1|μt−1,i,Σt−1,i) (18.134)
We then pass this through the Kdifferent linear models to get
bij
t/definesp(zt,qt−1=i,qt=j|y1:t)=πtijN(zt|μt,ij,Σt,ij) (18.135)
whereπtij=πt−1,ip(qt=j|qt−1=i). Finally, for each value of j, we collapse the KGaussian
mixtures down to a single mixture to give
bj
t/definesp(zt,qt=j|y1:t)=πtjN(zt|μt,j,Σt,j) (18.136)
658 Chapter18. Statespacemodels
See Figure 18.13(a) for a sketch.
The optimal way to approximate a mixture of Gaussians with a single Gaussian is given by
q=a r gm i n qKL(q||p),w h e r ep(z)=/summationtext
kπkN(z|μk,Σk)andq(z)=N(z|μ,Σ). This can
be solved by moment matching, that is,
μ=E[z]=/summationdisplay
kπkμk (18.137)
Σ=c o v [z]=/summationdisplay
kπk/parenleftbig
Σk+(μk−μ)(μk−μ)T/parenrightbig
(18.138)
In the graphical model literature, this is called weak marginalization (Lauritzen 1992), since it
preserves the ﬁrst two moments. Applying these equations to our model, we can go from bij
tto
bjtas follows (where we drop the tsubscript for brevity):
πj=/summationdisplay
iπij (18.139)
πj|i=πij/summationtext
j/primeπij/prime(18.140)
μj=/summationdisplay
iπj|iμij (18.141)
Σj=/summationdisplay
iπj|i/parenleftbig
Σij+(μij−μj)(μij−μj)T/parenrightbig
(18.142)
This algorithm requires running K2ﬁlters at each step. A cheaper alternative is to represent
the belief state by a single Gaussian, marginalizing over the discrete switch at each step. This
is a straightforward application of ADF. An offline extension to this method, called expectation
correction, is described in (Barber 2006; Mesot and Barber 2009).
Another heuristic approach, known as interactive multiple models orIMM(Bar-Shalom and
Fortmann 1988), can be obtained by ﬁrst collapsing the prior to a single Gaussian (by momentmatching), and then updating it using Kdifferent Kalman ﬁlters, one per value of q
t. See
Figure 18.13(b) for a sketch.
18.6.2 Application: data association and multi-target tracking
Suppose we are tracking Kobjects, such as airplanes, and at time t, we observe K/primedetection
events, e.g., “blips” on a radar screen. We can have K/prime<Kdue to occlusion or missed
detections. We can have K/prime>Kdue to clutter or false alarms. Or we can have K/prime=K.I n
any case, we need to ﬁgure out the correspondence between the K/primedetections ytkand theK
objectsztj. This is called the problem of data association, and it arises in many application
domains.
Figure 18.14 gives an example in which we are tracking K=2objects. At each time step, qt
is the unknown mapping which speciﬁes which objects caused which observations. It speciﬁesthe “wiring diagram” for time slice t. The standard way to solve this problem is to compute
a weight which measures the “compatibility” between object jand measurement k, typically
based on how close kis to where the model thinks jshould be (the so-called nearest neighbor
data association heuristic). This gives us a K×K
/primeweight matrix. We can make this into a
18.6. Hybriddiscrete/continuousSSMs 659
zt−1,1
zt−1,2zt,1
zt,2zt+1,1
zt+1,2
yt−1,1
yt−1,2
yt−1,3yt,1yt+1,1
yt+1,2
qt−1 qt qt+1
Figure 18.14 A model for tracking two objects in the presence of data-assocation ambiguity. We observe
3, 1 and 2 detections in the ﬁrst three time steps.
square matrix of size N×N,w h e r eN = max(K,K/prime), by adding dummy background objects,
which can explain all the false alarms, and adding dummy observations, which can explain all
the missed detections. We can then compute the maximal weight bipartite matching using theHungarian algorithm, which takes O(N
3)time (see e.g., (Burkard et al. 2009)). Conditional
on this, we can perform a Kalman ﬁlter update, where objects that are assigned to dummyobservations do not perform a measurement update.
An extension of this method, to handle a variable and/or unknown number of objects, is
known as multi-target tracking. This requires dealing with a variable-sized state space. There
are many ways to do this, but perhaps the simplest and most robust methods are based onsequential Monte Carlo (e.g., (Ristic et al. 2004)) or MCMC (e.g., (Khan et al. 2006; Oh et al.2009)).
18.6.3 Application: fault diagnosis
Consider the model in Figure 18.15(a). This represents an industrial plant consisting of varioustanks of liquid, interconnected by pipes. In this example, we just have two tanks, for simplicity.We want to estimate the pressure inside each tank, based on a noisy measurement of the ﬂowinto and out of each tank. However, the measurement devices can sometimes fail. Furthermore,pipes can burst or get blocked; we call this a “resistance failure”. This model is widely used asa benchmark in the fault diagnosis community (Mosterman and Biswas 1999).
We can create a probabilistic model of the system as shown in Figure 18.15(b). The square
nodes represent discrete variables, such as measurement failures and resistance failures. Theremaining variables are continuous. A variety of approximate inference algorithms can be appliedto this model. See (Koller and Lerner 2001) for one approach, based on Rao-Blackwellized particleﬁltering (which is explained in Section 23.6).
660 Chapter18. Statespacemodels
(a)RF1
1 RF1
2
R1
1 R1
2
MF1
1 MF1
2
F1
1 M1
1 F1
2 M1
2
P1
1 P1
2
MF12
1 MF12
2
F12
1 M12
1 F12
2 M12
2
R12
1 R12
2
RF12
1 RF12
2
P2
1 P2
2
F2
1 M2
1 F2
2 M2
2
MF2
1 MF2
2
R2
1 R2
2
RF2
1 RF2
2
(b)
Figure 18.15 (a) The two-tank system. The goal is to infer when pipes are blocked or have burst, or
sensors have broken, from (noisy) observations of the ﬂow out of tank 1, F1o, out of tank 2, F2o,o r
between tanks 1 and 2, F12.R1ois a hidden variable representing the resistance of the pipe out of
tank 1,P1is a hidden variable representing the pressure in tank 1, etc. Source: Figure 11 of (Koller and
Lerner 2001) . Used with kind permission of Daphne Koller. (b) Dynamic Bayes net representation of the
two-tank system. Discrete nodes are squares, continuous nodes are circles. Abbreviations: R = resistance,P = pressure, F = ﬂow, M = measurement, RF = resistance failure, MF = measurement failure. Based onFigure 12 of (Koller and Lerner 2001).
18.6.4 Application: econometric forecasting
The switching LG-SSM model is widely used in econometric forecasting, where it is called
aregime switching model. For example, we can combine two linear trend models (see Sec-
tion 18.2.4.2), one in which bt>0reﬂects a growing economy, and one in which bt<0reﬂects
a shrinking economy. See (West and Harrison 1997) for further details.
Exercises
Exercise 18.1 Derivation of EM for LG-SSM
Derive the E and M steps for computing a (locally optimal) MLE for an LG-SSM model. Hint: the results
are in (Ghahramani and Hinton 1996b); your task is to derive these results.
Exercise 18.2 Seasonal LG-SSM model in standard form
Write the seasonal model in Figure 18.7(a) as an LG-SSM. Deﬁne the matrices A,C,QandR.
19Undirected graphical models (Markov
random ﬁelds)
19.1 Introduction
In Chapter 10, we discussed directed graphical models (DGMs), commonly known as Bayes nets.
However, for some domains, being forced to choose a direction for the edges, as required bya DGM, is rather awkward. For example, consider modeling an image. We might suppose thatthe intensity values of neighboring pixels are correlated. We can create a DAG model with a 2dlattice topology as shown in Figure 19.1(a). This is known as a causal MRF or aMarkov mesh
(Abend et al. 1965). However, its conditional independence properties are rather unnatural. Inparticular, the Markov blanket (deﬁned in Section 10.5) of the node X
8in the middle is the other
colored nodes (3, 4, 7, 9, 12 and 13) rather than just its 4 nearest neighbors as one might expect.
An alternative is to use an undirected graphical model (UGM), also called a Markov random
ﬁeld(MRF)o r Markov network. These do not require us to specify edge orientations, and are
much more natural for some problems such as image analysis and spatial statistics. For example,an undirected 2d lattice is shown in Figure 19.1(b); now the Markov blanket of each node is justits nearest neighbors, as we show in Section 19.2.
Roughly speaking, the main advantages of UGMs over DGMs are: (1) they are symmetric and
therefore more “natural” for certain domains, such as spatial or relational data; and (2) discrimi-nativel UGMs (aka conditional random ﬁelds, or CRFs), which deﬁne conditional densities of theformp(y|x), work better than discriminative DGMs, for reasons we explain in Section 19.6.1. The
main disadvantages of UGMs compared to DGMs are: (1) the parameters are less interpretableand less modular, for reasons we explain in Section 19.3; and (2) parameter estimation is com-putationally more expensive, for reasons we explain in Section 19.5. See (Domke et al. 2008) foran empirical comparison of the two approaches for an image processing task.
19.2 Conditional independence properties of UGMs
19.2.1 Key properties
UGMs deﬁne CI relationships via simple graph separation as follows: for sets of nodes A,B,
andC,w es a y xA⊥GxB|xCiffCseparates AfromBin the graph G. This means that,
when we remove all the nodes in C, if there are no paths connecting any node in Ato any
node inB, then the CI property holds. This is called the global Markov property for UGMs.
For example, in Figure 19.2(b), we have that {1,2}⊥{6,7}|{3,4,5}.
662 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
X1 X2 X3 X4 X5
X6 X7 X8 X9 X10
X11 X12 X13 X14 X15
X16 X17 X18 X19 X20
(a)X1 X2 X3 X4 X5
X6 X7 X8 X9 X10
X11 X12 X13 X14 X15
X16 X17 X18 X19 X20
(b)
Figure 19.1 (a) A 2d lattice represented as a DAG. The dotted red node X8is independent of all other
nodes (black) given its Markov blanket, which include its parents (blue), children (green) and co-parents
(orange). (b) The same model represented as a UGM. The red node X8is independent of the other black
nodes given its neighbors (blue nodes).
12
354
67
(a)12
354
67
(b)
Figure 19.2 (a) A DGM. (b) Its moralized version, represented as a UGM.
The set of nodes that renders a node tconditionally independent of all the other nodes in
the graph is called t’sMarkov blanket; we will denote this by mb(t). Formally, the Markov
blanket satisﬁes the following property:
t⊥V\cl(t)|mb(t) (19.1)
wherecl(t)/definesmb(t)∪{t}is theclosureof nodet. One can show that, in a UGM, a node’s
Markov blanket is its set of immediate neighbors. This is called the undirected local Markov
property. For example, in Figure 19.2(b), we have mb(5) = {2,3,4,6}.
From the local Markov property, we can easily see that two nodes are conditionally indepen-
dent given the rest if there is no direct edge between them. This is called the pairwise Markov
property. In symbols, this is written as
s⊥t|V \{s,t}⇐ ⇒G st=0 (19.2)
UsingthethreeMarkovpropertieswehavediscussed, wecanderivethefollowingCIproperties
(amongst others) from the UGM in Figure 19.2(b):
•Pairwise 1⊥7|rest
•Local1⊥rest|2,3
19.2. ConditionalindependencepropertiesofUGMs 663
GLP
p(x)>0
Figure 19.3 Relationship between Markov properties of UGMs.
12
354
(a)12
354
(b)
Figure 19.4 (a) The ancestral graph induced by the DAG in Figure 19.2(a) wrt U={2,4,5}. (b) The
moralized version of (a).
•Global1,2⊥6,7|3,4,5
It is obvious that global Markov implies local Markov which implies pairwise Markov. What is
less obvious, but nevertheless true (assuming p(x)>0for allx, i.e., that pis a positive density),
is that pairwise implies global, and hence that all these Markov properties are the same, as
illustrated in Figure 19.3 (see e.g., (Koller and Friedman 2009, p119) for a proof).1The importance
of this result is that it is usually easier to empirically assess pairwise conditional independence;such pairwise CI statements can be used to construct a graph from which global CI statementscan be extracted.
19.2.2 An undirected alternative to d-separation
We have seen that determinining CI relationships in UGMs is much easier than in DGMs, becausewe do not have to worry about the directionality of the edges. In this section, we show how todetermine CI relationships for a DGM using a UGM.
It is tempting to simply convert the DGM to a UGM by dropping the orientation of the edges,
but this is clearly incorrect, since a v-structure A→B←Chas quite different CI properties
than the corresponding undirected chain A−B−C. The latter graph incorrectly states that
A⊥C|B. To avoid such incorrect CI statements, we can add edges between the “unmarried”
parentsAandC, and then drop the arrows from the edges, forming (in this case) a fully
connected undirected graph. This process is called moralization. Figure 19.2(b) gives a larger
1. The restriction to positive densities arises because deterministic constraints can result in independencies present in
the distribution that are not explicitly represented in the graph. See e.g., (Koller and Friedman 2009, p120) for some
examples. Distributions with non-graphical CI properties are said to be unfaithful to the graph, so I(p)/negationslash=I(G).
664 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
3UREDELOLVWLF0RGHOV
*UDSKLFDO0RGHOV
'LUHFWHG 8QGLUHFWHG &KRUGDO
Figure 19.5 DGMs and UGMs can perfectly represent different sets of distributions. Some distributions
can be perfectly represented by either DGMs or UGMs; the corresponding graph must be chordal.
example of moralization: we interconnect 2 and 3, since they have a common child 5, and we
interconnect 4, 5 and 6, since they have a common child 7.
Unfortunately, moralization loses some CI information, and therefore we cannot use the
moralized UGM to determine CI properties of the DGM. For example, in Figure 19.2(a), usingd-separation, we see that 4⊥5|2. Adding a moralization arc 4−5would lose this fact (see
Figure 19.2(b)). However, notice that the 4-5 moralization edge, due to the common child 7,is not needed if we do not observe 7 or any of its descendants. This suggests the followingapproach to determining if A⊥B|C. First we form the ancestral graph of DAGGwith respect
toU=A∪B∪C. This means we remove all nodes from Gthat are not in Uor are not
ancestors of U. We then moralize this ancestral graph, and apply the simple graph separation
rules for UGMs. For example, in Figure 19.4(a), we show the ancestral graph for Figure 19.2(a)usingU={2,4,5}. In Figure 19.4(b), we show the moralized version of this graph. It is clear
that we now correctly conclude that 4⊥5|2.
19.2.3 Comparing directed and undirected graphical models
Which model has more “expressive power”, a DGM or a UGM? To formalize this question, recallthat we say that Gis an I-map of a distribution pifI(G)⊆I(p). Now deﬁne Gto be
perfect map ofpifI(G)=I(p), in other words, the graph can represent all (and only) the CI
properties of the distribution. It turns out that DGMs and UGMs are perfect maps for differentsets of distributions (see Figure 19.5). In this sense, neither is more powerful than the other asa representation language.
As an example of some CI relationships that can be perfectly modeled by a DGM but not a
UGM, consider a v-structure A→C←B. This asserts that A⊥B, andA/negationslash⊥B|C.I fw ed r o p
the arrows, we get A−C−B, which asserts A⊥B|CandA/negationslash⊥B, which is incorrect. In fact,
there is no UGM that can precisely represent all and only the two CI statements encoded by a v-structure. In general, CI properties in UGMs are monotonic, in the following sense: if A⊥B|C,
thenA⊥B|(C∪D). But in DGMs, CI properties can be non-monotonic, since conditioning
19.3. ParameterizationofMRFs 665
C
(a) (b) (c)ADB B DA
CB DA
C
Figure 19.6 A UGM and two failed attempts to represent it as a DGM. Source: Figure 3.10 of (Koller and
Friedman 2009). Used with kind permission of Daphne Koller.
on extra variables can eliminate conditional independencies due to explaining away.
As an example of some CI relationships that can be perfectly modeled by a UGM but not a
DGM, consider the 4-cycle shown in Figure 19.6(a). One attempt to model this with a DGM is
shown in Figure 19.6(b). This correctly asserts that A⊥C|B,D. However, it incorrectly asserts
thatB⊥D|A. Figure 19.6(c) is another incorrect DGM: it correctly encodes A⊥C|B,D, but
incorrectly encodes B⊥D. In fact there is no DGM that can precisely represent all and only
the CI statements encoded by this UGM.
Some distributions can be perfectly modeled by either a DGM or a UGM; the resulting graphs
are called decomposable orchordal. Roughly speaking, this means the following: if we collapse
together all the variables in each maximal clique, to make “mega-variables”, the resulting graphwill be a tree. Of course, if the graph is already a tree (which includes chains as a special case),it will be chordal. See Section 20.4.1 for further details.
19.3 Parameterization of MRFs
Although the CI properties of UGM are simpler and more natural than for DGMs, representingthe joint distribution for a UGM is less natural than for a DGM, as we see below.
19.3.1 The Hammersley-Clifford theorem
Since there is no topological ordering associated with an undirected graph, we can’t use the chainrule to represent p(y). So instead of associating CPDs with each node, we associate potential
functionso rfactors with each maximal clique in the graph. We will denote the potentialfunction for clique cbyψ
c(yc|θc). A potential function can be any non-negative function of
its arguments. The joint distribution is then deﬁned to be proportional to the product of cliquepotentials. Rather surprisingly, one can show that any positive distribution whose CI propertiescan be represented by a UGM can be represented in this way. We state this result more formallybelow.
666 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
Theorem 19.3.1 (Hammersley-Clifford). A positive distribution p(y)>0satisﬁes the CI prop-
erties of an undirected graph Giffpcan be represented as a product of factors, one per maximal
clique,i.e.,
p(y|θ)=1
Z(θ)/productdisplay
c∈Cψc(yc|θc) (19.3)
whereCisthesetofallthe(maximal)cliquesof G,andZ(θ)isthepartition function givenby
Z(θ)/defines/summationdisplay
x/productdisplay
c∈Cψc(yc|θc) (19.4)
Notethatthepartitionfunctioniswhatensurestheoveralldistributionsumsto1.2
The proof was never published, but can be found in e.g., (Koller and Friedman 2009).
For example, consider the MRF in Figure 10.1(b). If psatisﬁes the CI properties of this graph
then we can write pas follows:
p(y|θ)=1
Z(θ)ψ123(y1,y2,y3)ψ234(y2,y3,y4)ψ35(y3,y5) (19.5)
where
Z=/summationdisplay
yψ123(y1,y2,y3)ψ234(y2,y3,y4)ψ35(y3,y5) (19.6)
There is a deep connection between UGMs and statistical physics. In particular, there is a
model known as the Gibbs distribution, which can be written as follows:
p(y|θ)=1
Z(θ)exp(−/summationdisplay
cE(yc|θc)) (19.7)
whereE(yc)>0is the energy associated with the variables in clique c. We can convert this to
a UGM by deﬁning
ψc(yc|θc)=e x p (−E(yc|θc)) (19.8)
We see that high probability states correspond to low energy conﬁgurations. Models of this formare known as energy based models, and are commonly used in physics and biochemistry, as
well as some branches of machine learning (LeCun et al. 2006).
Note that we are free to restrict the parameterization to the edges of the graph, rather than
the maximal cliques. This is called a pairwise MRF. In Figure 10.1(b), we get
p(y|θ)∝ψ
12(y1,y2)ψ13(y1,y3)ψ23(y2,y3)ψ24(y2,y4)ψ34(y3,y4)ψ35(y3,y5)(19.9)
∝/productdisplay
s∼tψst(ys,yt) (19.10)
This form is widely used due to its simplicity, although it is not as general.
2. The partition function is denoted by Zbecause of the German word zustandssumme, which means “sum over states”.
This reﬂects the fact that a lot of pioneering working in statistical physics was done by Germans.
19.3. ParameterizationofMRFs 667
19.3.2 Representing potential functions
If the variables are discrete, we can represent the potential or energy functions as tables of
(non-negative) numbers, just as we did with CPTs. However, the potentials are not probabilities.Rather, they represent the relative “compatibility” between the different assignments to thepotential. We will see some examples of this below.
A more general approach is to deﬁne the log potentials as a linear function of the parameters:
logψ
c(yc)/definesφc(yc)Tθc (19.11)
whereφc(xc)is a feature vector derived from the values of the variables yc. The resulting log
probability has the form
logp(y|θ)=/summationdisplay
cφc(yc)Tθc−Z(θ) (19.12)
This is also known as a maximum entropy or alog-linear model.
For example, consider a pairwise MRF, where for each edge, we associate a feature vector of
lengthK2as follows:
φst(ys,yt)=[...,I(ys=j,yt=k),...] (19.13)
If we have a weight for each feature, we can convert this into a K×Kpotential function as
follows:
ψst(ys=j,yt=k)=e x p ( [ θT
stφst]jk)=e x p (θst(j,k)) (19.14)
So we see that we can easily represent tabular potentials using a log-linear form. But the
log-linear form is more general.
To see why this is useful, suppose we are interested in making a probabilistic model of English
spelling. Since certain letter combinations occur together quite frequently (e.g., “ing”), we willneed higher order factors to capture this. Suppose we limit ourselves to letter trigrams. Atabular potential still has 26
3=1 7,576parameters in it. However, most of these triples will
never occur.
An alternative approach is to deﬁne indicator functions that look for certain “special” triples,
such as “ing”, “qu-”, etc. Then we can deﬁne the potential on each trigram as follows:
ψ(yt−1,yt,yt+1)=e x p (/summationdisplay
kθkφk(yt−1,yt,yt+1)) (19.15)
wherekindexes the different features, corresponding to “ing”, “qu-”, etc., and φkis the corre-
sponding binary feature function. By tying the parameters across locations, we can deﬁne the
probability of a word of any length using
p(y|θ)∝exp(/summationdisplay
t/summationdisplay
kθkφk(yt−1,yt,yt+1)) (19.16)
This raises the question of where these feature functions come from. In many applications,they are created by hand to reﬂect domain knowledge (we will see examples later), but it is alsopossible to learn them from data, as we discuss in Section 19.5.6.
668 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
19.4 Examples of MRFs
In this section, we show how several popular probability models can be conveniently expressed
as UGMs.
19.4.1 Ising model
TheIsing model is an example of an MRF that arose from statistical physics.3It was originally
used for modeling the behavior of magnets. In particular, let ys∈{ −1,+1}represent the spin
of an atom, which can either be spin down or up. In some magnets, called ferro-magnets,
neighboring spins tend to line up in the same direction, whereas in other kinds of magnets,calledanti-ferromagnets, the spins “want” to be different from their neighbors.
We can model this as an MRF as follows. We create a graph in the form of a 2D or 3D lattice,
and connect neighboring variables, as in Figure 19.1(b). We then deﬁne the following pairwiseclique potential:
ψ
st(ys,yt)=/parenleftbiggewste−wst
e−wstewst/parenrightbigg
(19.17)
Herewstis the coupling strength between nodes sandt. If two nodes are not connected in
the graph, we set wst=0. We assume that the weight matrix Wis symmetric, so wst=wts.
Often we assume all edges have the same strength, so wst=J(assuming wst/negationslash=0).
If all the weights are positive, J>0, then neighboring spins are likely to be in the same
state; this can be used to model ferromagnets, and is an example of an associative Markov
network. If the weights are sufficiently strong, the corresponding probability distribution willhave two modes, corresponding to the all +1’s state and the all -1’s state. These are called theground states of the system.
If all of the weights are negative, J<0, then the spins want to be different from their
neighbors; this can be used to model an anti-ferromagnet, and results in a frustrated system,
in which not all the constraints can be satisﬁed at the same time. The corresponding probabilitydistribution will have multiple modes. Interestingly, computing the partition function Z(J)can
be done in polynomial time for associative Markov networks, but is NP-hard in general (Cipra2000).
There is an interesting analogy between Ising models and Gaussian graphical models. First,
assuming y
t∈{ −1,+1}, we can write the unnormalized log probability of an Ising model as
follows:
log ˜p(y)=−/summationdisplay
s∼tyswstyt=−1
2yTWy (19.18)
(The factor of1
2arises because we sum each edge twice.) If wst=J>0, we get a low energy
(and hence high probability) if neighboring states agree.
Sometimes there is an external ﬁeld, which is an energy term which is added to each spin.
This can be modelled using a local energy term of the form −bTy,w h e r ebis sometimes called
3. Ernst Ising was a German-American physicist, 1900–1998.
19.4. ExamplesofMRFs 669
abias term. The modiﬁed distribution is given by
log ˜p(y)=/summationdisplay
s∼twstysyt+/summationdisplay
sbsys=1
2yTWy+bTy (19.19)
whereθ=(W,b).
If we deﬁne μ/defines−1
2Σ−1b,Σ−1=−W, andc/defines1
2μTΣ−1μ, we can rewrite this in a form
that looks similar to a Gaussian:
˜p(y)∝exp(−1
2(y−μ)TΣ−1(y−μ)+c) (19.20)
One very important difference is that, in the case of Gaussians, the normalization constant,
Z=|2πΣ|, requires the computation of a matrix determinant, which can be computed in
O(D3)time, whereas in the case of the Ising model, the normalization constant requires
summing over all 2Dbit vectors; this is equivalent to computing the matrix permanent, which
is NP-hard in general (Jerrum et al. 2004).
19.4.2 Hopﬁeld networks
AHopﬁeld network (Hopﬁeld 1982) is a fully connected Ising model with a symmetric weight
matrix,W=WT. These weights, plus the bias terms b, can be learned from training data
using (approximate) maximum likelihood, as described in Section 19.5.4
The main application of Hopﬁeld networks is as an associative memory orcontent ad-
dressable memory. The idea is this: suppose we train on a set of fully observed bit vectors,corresponding to patterns we want to memorize. Then, at test time, we present a partial patternto the network. We would like to estimate the missing variables; this is called pattern com-
pletion. See Figure 19.7 for an example. This can be thought of as retrieving an example frommemory based on a piece of the example itself, hence the term “associative memory”.
Since exact inference is intractable in this model, it is standard to use a coordinate descent
algorithm known as iterative conditional modes (ICM), which just sets each node to its most
likely (lowest energy) state, given all its neighbors. The full conditional can be shown to be
p(y
s=1|y−s,θ) = sigm(wT
s,:y−s+bs) (19.21)
Picking the most probable state amounts to using the rule y∗
s=1if/summationtext
twstyt>bsand using
y∗
s=0otherwise. (Much better inference algorithms will be discussed later in this book.)
Since inference is deterministic, it is also possible to interpret this model as a recurrent
neural network. (This is quite different from the feedforward neural nets studied in Section 16.5;they are univariate conditional density models of the form p(y|x,θ)which can only be used for
supervised learning.) See Hertz et al. (1991) for further details on Hopﬁeld networks.
ABoltzmann machine generalizes the Hopﬁeld / Ising model by including some hidden
nodes, which makes the model representationally more powerful. Inference in such modelsoften uses Gibbs sampling, which is a stochastic version of ICM (see Section 24.2 for details).
4. ML estimation works much better than the outer product rule proposed in in (Hopﬁeld 1982), because it not only
lowers the energy of the observed patterns, but it also raises the energy of the non-observed patterns, in order to make
the distribution sum to one (Hillar et al. 2012).
670 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
Figure 19.7 Examples of how an associative memory can reconstruct images. These are binary images
of size50×50pixels. Top: training images. Row 2: partially visible test images. Row 3: estimate after
5 iterations. Bottom: ﬁnal state estimate. Based on Figure 2.1 of Hertz et al. (1991). Figure generated by
hopfieldDemo .
(a)
 (b)
 (c)
Figure 19.8 Visualizing a sample from a 10-state Potts model of size 128×128for different association
strengths: (a) J=1.42, (b)J=1.44, (c)J=1.46. The regions are labeled according to size: blue is
largest, red is smallest. Used with kind permission of Erik Sudderth. See gibbsDemoIsing for Matlab
code to produce a similar plot for the Ising model.
However, we could equally well apply Gibbs to a Hopﬁeld net and ICM to a Boltzmann machine:
the inference algorithm is not part of the model deﬁnition. See Section 27.7 for further details
on Boltzmann machines.
19.4. ExamplesofMRFs 671
xs xtys yt
Figure 19.9 A grid-structured MRF with local evidence nodes.
19.4.3 Potts model
It is easy to generalize the Ising model to multiple discrete states, yt∈{1,2,...,K}.I t i s
common to use a potential function of the following form:
ψst(ys,yt)=⎛
⎝eJ00
0eJ0
00 eJ⎞⎠ (19.22)
This is called the Potts model.
5IfJ>0, then neighboring nodes are encouraged to have the
same label. Some samples from this model are shown in Figure 19.8. We see that for J>1.44,
large clusters occur, for J<1.44, many small clusters occur, and at the critical value of
K=1.44, there is a mix of small and large clusters. This rapid change in behavior as we vary
a parameter of the system is called a phase transition, and has been widely studied in the
physics community. An analogous phenomenon occurs in the Ising model; see (MacKay 2003,
ch 31) for details.
The Potts model can be used as a prior for image segmentation, since it says that neighboring
pixels are likely to have the same discrete label and hence belong to the same segment. We cancombine this prior with a likelihood term as follows:
p(y,x|θ)=p(y|J)/productdisplay
tp(xt|yt,θ)=/bracketleftBigg
1
Z(J)/productdisplay
s∼tψ(ys,yt;J)/bracketrightBigg/productdisplay
tp(xt|yt,θ) (19.23)
wherep(xt|yt=k,θ)is the probability of observing pixel xtgiven that the corresponding
segment belongs to class k. This observation model can be modeled using a Gaussian or a
non-parametric density. (Note that we label the hidden nodes ytand the observed nodes xt,t o
be compatible with Section 19.6.)
The corresponding graphical model is a mix of undirected and directed edges, as shown in
Figure 19.9. The undirected 2d lattice represents the prior p(y); in addition, there are directed
edge from each ytto its corresponding xt, representing the local evidence. Technically speak-
ing, this combination of an undirected and directed graph is called a chain graph. However,
5. Renfrey Potts was an Australian mathematician, 1925–2005.
672 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
since the xtnodes are observed, they can be “absorbed” into the model, thus leaving behind an
undirected “backbone”.
This model is a 2d analog of an HMM, and could be called a partially observed MRF.A s
in an HMM, the goal is to perform posterior inference, i.e., to compute (some function of)
p(y|x,θ). Unfortunately, the 2d case is provably much harder than the 1d case, and we must
resort to approximate methods, as we discuss in later chapters.
Although the Potts prior is adequate for regularizing supervised learning problems, it is not
sufficiently accurate to perform image segmentation in an unsupervised way, since the segmentsproduced by this model do not accurately represent the kinds of segments one sees in naturalimages (Morris et al. 1996).
6For the unsupervised case, one needs to use more sophisticated
priors, such as the truncated Gaussian process prior of (Sudderth and Jordan 2008).
19.4.4 Gaussian MRFs
An undirected GGM, also called a Gaussian MRF (see e.g., (Rue and Held 2005)), is a pairwise
MRF of the following form:
p(y|θ)∝/productdisplay
s∼tψst(ys,yt)/productdisplay
tψt(yt) (19.24)
ψst(ys,yt)=e x p ( −1
2ysΛstyt) (19.25)
ψt(yt)=e x p ( −1
2Λtty2
t+ηtyt) (19.26)
(Note that we could easily absorb the node potentials ψtinto the edge potentials, but we have
kept them separate for clarity.) The joint distribution can be written as follows:
p(y|θ)∝exp[ηTy−1
2yTΛy] (19.27)
We recognize this as a multivariate Gaussian written in information form whereΛ=Σ−1and
η=Λμ.
IfΛst=0, then there is no pairwise term connecting sandt, so by the factorization theorem
(Theorem 2.2.1), we conclude that
ys⊥yt|y−(st)⇐⇒Λst=0 (19.28)
The zero entries in Λare called structural zeros, since they represent the absent edges in the
graph. Thus undirected GGMs correspond to sparse precision matrices, a fact which we exploitin Section 26.7.2 to efficiently learn the structure of the graph.
19.4.4.1 Comparing Gaussian DGMs and UGMs *
In Section 10.2.5, we saw that directed GGMs correspond to sparse regression matrices, and hencesparse Cholesky factorizations of covariance matrices, whereas undirected GGMs correspond to
6. An inﬂuential paper (Geman and Geman 1984), which introduced the idea of a Gibbs sampler (Section 24.2), proposed
using the Potts model as a prior for image segmentation, but the results in their paper are misleading because they did
not run their Gibbs sampler for long enough. See Figure 24.10 for a vivid illustration of this point.
19.4. ExamplesofMRFs 673
Figure 19.10 A VAR(2) process represented as a dynamic chain graph. Source: (Dahlhaus and Eichler
2000). Used with kind permission of Rainer Dahlhaus and Oxford University Press.
sparse precision matrices. The advantage of the DAG formulation is that we can make the
regression weights W, and hence Σ, be conditional on covariate information (Pourahmadi 2004),
without worrying about positive deﬁnite constraints. The disadavantage of the DAG formulation
is its dependence on the order, although in certain domains, such as time series, there is already
a natural ordering of the variables.
It is actually possible to combine both representations, resulting in a Gaussian chain graph.
For example, consider a a discrete-time, second-order Markov chain in which the states are
continuous, yt∈RD. The transition function can be represented as a (vector-valued) linear-
Gaussian CPD:
p(yt|yt−1,yt−2,θ)=N(yt|A1yt−1+A2yt−2,Σ) (19.29)
This is called vector auto-regressive orVARprocess of order 2. Such models are widely used
in econometrics for time-series forecasting.
The time series aspect is most naturally modeled using a DGM. However, if Σ−1is sparse,
then the correlation amongst the components within a time slice is most naturally modeled
using a UGM. For example, suppose we have
A1=⎛
⎜⎜⎜⎜⎝3
501
500
03
50−1
50
2
51
33
500
000 −1
21
5
001
502
5⎞
⎟⎟⎟⎟⎠,A2=⎛
⎜⎜⎜⎜⎝00−1
500
0 0000
0 0000
001
501
3
0 000 −1
5⎞
⎟⎟⎟⎟⎠(19.30)
and
Σ=⎛
⎜⎜⎜⎜⎝11
21
300
1
21−1
300
1
3−1
310 0
00 01 0
00 00 1⎞
⎟⎟⎟⎟⎠,Σ−1=⎛
⎜⎜⎜⎜⎝2.13−1.47−1.200
−1.47 2.13 1.20 0
−1.21.21.80 0
00 0 1 0
00 0 0 1⎞
⎟⎟⎟⎟⎠(19.31)
674 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
x1 x2 x3
(a)
x1 x2 x3w1 w2
(b)
Figure 19.11 (a) A bi-directed graph. (b) The equivalent DAG. Here the wnodes are latent confounders.
Based on Figures 5.12-5.13 of (Choi 2011). Used with kind permission of Myung Choi.
The resulting graphical model is illustrated in Figure 19.10. Zeros in the transition matrices A1
andA2correspond to absent directed arcs from yt−1andyt−2intoyt. Zeros in the precision
matrixΣ−1correspond to absent undirected arcs between nodes in yt.
Sometimes we have a sparse covariance matrix rather than a sparse precision matrix. This can
be represented using a bi-directed graph, where each edge has arrows in both directions, as in
Figure 19.11(a). Here nodes that are not connected are unconditionally independent. For example
in Figure 19.11(a) we see that Y1⊥Y3. In the Gaussian case, this means Σ1,3=Σ3,1=0.( A
graph representing a sparse covariance matrix is called a covariance graph.) By contrast, if
this were an undirected model, we would have that Y1⊥Y3|Y2, andΛ1,3=Λ3,1=0,w h e r e
Λ=Σ−1.
A bidirected graph can be converted to a DAG with latent variables, where each bidirected
edge is replaced with a hidden variable representing a hidden common cause, or confounder,
as illustrated in Figure 19.11(b). The relevant CI properties can then be determined using d-separation.
We can combine bidirected and directed edges to get a directed mixed graphical model.
This is useful for representing a variety of models, such as ARMA models (Section 18.2.4.4),structural equation models (Section 26.5.5), etc.
19.4.5 Markov logic networks *
In Section 10.2.2, we saw how we could “unroll” Markov models and HMMs for an arbitrarynumber of time steps in order to model variable-length sequences. Similarly, in Section 19.4.1,we saw how we could expand a lattice UGM to model images of any size. What about morecomplex domains, where we have a variable number of objects and relationships between them?Creating models for such scenarios is often done using ﬁrst-order logic (see e.g., (Russell and
Norvig 2010)). For example, consider the sentences “Smoking causes cancer” and “If two peopleare friends, and one smokes, then so does the other”. We can write these sentences in ﬁrst-order
19.4. ExamplesofMRFs 675
Friends(A,A) Smokes(A) Smokes(B) Friends(B,B)Friends(A,B)
Friends(B,A)Cancer(A) Cancer(B)
Figure 19.12 An example of a ground Markov logic network represented as a pairwise MRF for 2 people.
Based on Figure 2.1 from (Domingos and Lowd 2009). Used with kind permission of Pedro Domingos.
logic as follows:
∀x.Sm(x)=⇒Ca(x) (19.32)
∀x.∀y.Fr(x,y)∧Sm(x)=⇒Sm(y) (19.33)
whereSmandCaare predicates, and Fris a relation.7
Of course, such rules are not always true. Indeed, this brittleness is the main reason why
logical approaches to AI are no longer widely used, at least not in their pure form. There
have been a variety of attempts to combine ﬁrst order logic with probability theory, an areaknown as statistical relational AI orprobabilistic relational modeling (Kersting et al. 2011).
One simple approach is to take logical rules and attach weights (known as certainty factors)t o
them, and then to interpret them as conditional probability distributions. For example, we mightsayp(Ca(x)=1|Sm(x)=1 )=0 .9. Unfortunately, the rule does not say what to predict if
Sm(x)=0. Furthermore, combining CPDs in this way is not guaranteed to deﬁne a consistent
joint distribution, because the resulting graph may not be a DAG.
An alternative approach is to treat these rules as a way of deﬁning potential functions in an
unrolled UGM. The result is known as a Markov logic network (Domingos and Lowd 2009).
To specify the network, we ﬁrst rewrite all the rules in conjunctive normal form (CNF), also
known as clausal form. In this case, we get
¬Sm(x)∨Ca(x) (19.34)
¬Fr(x,y)∨¬Sm(x)∨Sm(y) (19.35)
The ﬁrst clause can be read as “Either xdoes not smoke or he has cancer”, which is logically
equivalent to Equation 19.32. (Note that in a clause, any unbound variable, such as x, is assumed
to be universally quantiﬁed.)
7. A predicate is just a function of one argument, known as an object, that evaluates to true or false, depending on
whether the property holds or not of that object. A (logical) relation is just a function of two or more arguments (objects)
that evaluates to true or false, depending on whether the relationship holds between that set of objects or not.
676 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
Inference in ﬁrst-order logic is only semi-decidable, so it is common to use a restricted subset.
A common approach (as used in Prolog) is to restrict the language to Horn clauses, which are
clauses that contain at most one positive literal. Essentially this means the model is a series of
if-then rules, where the right hand side of the rules (the “then” part, or consequence) has onlya single term.
Once we have encoded our knowledge base as a set of clauses, we can attach weights to
each one; these weights are the parameter of the model, and they deﬁne the clique potentialsas follows:
ψ
c(xc)=e x p (wcφc(xc)) (19.36)
whereφc(xc)is a logical expression which evaluates clause capplied to the variables xc, and
wcis the weight we attach to this clause. Roughly speaking, the weight of a clause speciﬁes
the probability of a world in which this clause is satsiﬁed relative to a world in which it is notsatisﬁed.
Now suppose there are two objects (people) in the world, Anna and Bob, which we will denote
byconstant symbols AandB. We can make a ground network from the above clauses by
creating binary random variables S
x,Cx, andFx,yforx,y∈{A,B}, and then “wiring these
up” according to the clauses above. The result is the UGM in Figure 19.12 with 8 binary nodes.Note that we have not encoded the fact that Fris a symmetric relation, so Fr(A,B)and
Fr(B,A)might have different values. Similarly, we have the “degenerate” nodes Fr(A,A)and
Fr(B,B), since we did not enforce x/negationslash=yin Equation 19.33. (If we add such constraints,
then the model compiler, which generates the ground network, could avoid creating redundantnodes.)
In summary, we can think of MLNs as a convenient way of specifying a UGM template, that
can get unrolled to handle data of arbitrary size. There are several other ways to deﬁne relationalprobabilistic models; see e.g., (Koller and Friedman 2009; Kersting et al. 2011) for details. In somecases, there is uncertainty about the number or existence of objects or relations (the so-calledopen universe problem). Section 18.6.2 gives a concrete example in the context of multi-object
tracking. See e.g., (Russell and Norvig 2010; Kersting et al. 2011) and references therein for furtherdetails.
19.5 Learning
In this section, we discuss how to perform ML and MAP parameter estimation for MRFs. We willsee that this is quite computationally expensive. For this reason, it is rare to perform Bayesianinference for the parameters of MRFs (although see (Qi et al. 2005)).
19.5.1 Training maxent models using gradient methods
Consider an MRF in log-linear form:
p(y|θ)=1
Z(θ)exp/parenleftBigg/summationdisplay
cθT
cφc(y)/parenrightBigg
(19.37)
19.5. Learning 677
wherecindexes the cliques. The scaled log-likelihood is given by
/lscript(θ)/defines1
N/summationdisplay
ilogp(yi|θ)=1
N/summationdisplay
i/bracketleftBigg/summationdisplay
cθT
cφc(yi)−logZ(θ)/bracketrightBigg
(19.38)
Since MRFs are in the exponential family, we know that this function is convex in θ(see
Section 9.2.3), so it has a unique global maximum which we can ﬁnd using gradient-based
optimizers. In particular, the derivative for the weights of a particular clique, c, is given by
∂/lscript
∂θc=1
N/summationdisplay
i/bracketleftbigg
φc(yi)−∂
∂θclogZ(θ)/bracketrightbigg
(19.39)
Exercise 19.1 asks you to show that the derivative of the log partition function wrt θcis the
expectation of the c’th feature under the model, i.e.,
∂logZ(θ)
∂θc=E[φc(y)|θ]=/summationdisplay
yφc(y)p(y|θ) (19.40)
Hence the gradient of the log likelihood is
∂/lscript
∂θc=/bracketleftBigg
1
N/summationdisplay
iφc(yi)/bracketrightBigg
−E[φc(y)] (19.41)
In the ﬁrst term, we ﬁx yto its observed values; this is sometimes called the clamped term.
In the second term, yis free; this is sometimes called the unclamped term orcontrastive
term. Note that computing the unclamped term requires inference in the model, and this must
be done once per gradient step. This makes UGM training much slower than DGM training.
The gradient of the log likelihood can be rewritten as the expected feature vector according
to the empirical distribution minus the model’s expectation of the feature vector:
∂/lscript
∂θc=Epemp[φc(y)]−Ep(·|θ)[φc(y)] (19.42)
At the optimum, the gradient will be zero, so the empirical distribution of the features willmatch the model’s predictions:
E
pemp[φc(y)] =Ep(·|θ)[φc(y)] (19.43)
This is called moment matching. This observation motivates a different optimization algorithm
which we discuss in Section 19.5.7.
19.5.2 Training partially observed maxent models
Suppose we have missing data and/or hidden variables in our model. In general, we canrepresent such models as follows:
p(y,h|θ)=1
Z(θ)exp(/summationdisplay
cθT
cφc(h,y)) (19.44)
678 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
The log likelihood has the form
/lscript(θ)=1
N/summationdisplay
ilog/parenleftBigg/summationdisplay
hip(yi,hi|θ)/parenrightBigg
=1
N/summationdisplay
ilog/parenleftBigg
1
Z(θ)/summationdisplay
hi˜p(yi,hi|θ)/parenrightBigg
(19.45)
where
˜p(y,h|θ)/definesexp/parenleftBigg/summationdisplay
cθT
cφc(h,y)/parenrightBigg
(19.46)
is the unnormalized distribution. The term/summationtext
hi˜p(yi,hi|θ)is the same as the partition function
for the whole model, except that yis ﬁxed at yi. Hence the gradient is just the expected features
where we clamp yi, but average over h:
∂
∂θclog/parenleftBigg/summationdisplay
hi˜p(yi,hi|θ)/parenrightBigg
=E[φc(h,yi)|θ] (19.47)
So the overall gradient is given by
∂/lscript
∂θc=1
N/summationdisplay
i{E[φc(h,yi)|θ]−E[φc(h,y)|θ]} (19.48)
The ﬁrst set of expectations are computed by “clamping” the visible nodes to their observed
values, and the second set are computed by letting the visible nodes be free. In both cases, wemarginalize over h
i.
An alternative approach is to use generalized EM, where we use gradient methods in the M
step. See (Koller and Friedman 2009, p956) for details.
19.5.3 Approximate methods for computing the MLEs of MRFs
When ﬁtting a UGM there is (in general) no closed form solution for the ML or the MAP estimateof the parameters, so we need to use gradient-based optimizers. This gradient requires inference.In models where inference is intractable, learning also becomes intractable. This has motivatedvarious computationally faster alternatives to ML/MAP estimation, which we list in Table 19.1. Wedicsuss some of these alternatives below, and defer others to later sections.
19.5.4 Pseudo likelihood
One alternative to MLE is to maximize the pseudo likelihood (Besag 1975), deﬁned as follows:
/lscriptPL(θ)/defines/summationdisplay
yD/summationdisplay
d=1pemp(ylogp(yd|y−d)=1
NN/summationdisplay
i=1D/summationdisplay
d=1logp(yid|yi,−d,θ) (19.49)
That is, we optimize the product of the full conditionals, also known as the composite likeli-
hood(Lindsay 1988), Compare this to the objective for maximum likelihood:
/lscriptML(θ)=/summationdisplay
y,xpemp(ylogp(y|θ)=N/summationdisplay
i=1logp(yi|θ) (19.50)
19.5. Learning 679
Method Restriction Exact MLE? Section
Closed form Only Chordal MRF Exact Section 19.5.7.4
IPF Only Tabular / Gaussian MRF Exact Section 19.5.7
Gradient-based optimization Low tree width Exact Section 19.5.1
Max-margin training Only CRFs N/A Section 19.7
Pseudo-likelihood No hidden variables Approximate Section 19.5.4
Stochastic ML - Exact (up to MC error) Section 19.5.5
Contrastive divergence - Approximate Section 27.7.2.4
Minimum probability ﬂow Can integrate out the hiddens Approximate Sohl-Dickstein et al. (2011)
Table 19.1 Some methods that can be used to compute approximate ML/ MAP parameter estimates for
MRFs/ CRFs. Low tree-width means that, in order for the method to be efficient, the graph must “tree-like”;
see Section 20.5 for details.
(a) (b)
Figure 19.13 (a) A small 2d lattice. (b) The representation used by pseudo likelihood. Solid nodes are
observed neighbors. Based on Figure 2.2 of (Carbonetto 2003).
In the case of Gaussian MRFs, PL is equivalent to ML (Besag 1975), but this is not true in general
(Liang and Jordan 2008).
The PL approach is illustrated in Figure 19.13 for a 2d grid. We learn to predict each node,
given all of its neighbors. This objective is generally fast to compute since each full conditionalp(y
id|yi,−d,θ)only requires summing over the states of a single node, yid, in order to compute
the local normalization constant. The PL approach is similar to ﬁtting each full conditionalseparately (which is the method used to train dependency networks, discussed in Section 26.2.2),except that the parameters are tied between adjacent nodes.
One problem with PL is that it is hard to apply to models with hidden variables (Parise and
Welling 2005). Another more subtle problem is that each node assumes that its neighbors haveknown values. If node t∈nbr(s)is a perfect predictor for node s, thenswill learn to rely
completely on node t, even at the expense of ignoring other potentially useful information, such
as its local evidence.
However, experiments in (Parise and Welling 2005; Hoeﬂing and Tibshirani 2009) suggest that
PL works as well as exact ML for fully observed Ising models, and of course PL is muchfaster.
19.5.5 Stochastic maximum likelihood
Recall that the gradient of the log-likelihood for a fully observed MRF is given by
∇θ/lscript(θ)=1
N/summationdisplay
i[φ(yi)−E[φ(y)]] (19.51)
680 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
The gradient for a partially observed MRF is similar. In both cases, we can approximate the
model expectations using Monte Carlo sampling. We can combine this with stochastic gradientdescent (Section 8.5.2), which takes samples from the empirical distribution. Pseudocode for theresulting method is shown in Algorithm 3.
Algorithm 19.1: Stochastic maximum likelihood for ﬁtting an MRF
1Initialize weights θrandomly;
2k=0,η=1;
3foreachepoch do
4foreachminibatchofsize Bdo
5 foreachsample s=1:Sdo
6 Sampleys,k∼p(y|θk);
7 ˆE(φ(y)) =1
S/summationtextS
s=1φ(ys,k);
8 foreachtrainingcase iinminibatch do
9 gik=φ(yi)−ˆE(φ(y));
10 gk=1
B/summationtext
i∈Bgik;
11 θk+1=θk−ηgk;
12 k=k+1;
13 Decrease step size η;
Typically we use MCMC to generate the samples. Of course, running MCMC to convergence
at each step of the inner loop would be extremely slow. Fortunately, it was shown in (Younes
1989) that we can start the MCMC chain at its previous value, and just take a few steps. Inotherwords, we sample y
s,kby initializing the MCMC chain at ys,k−1, and then run for a few
iterations. This is valid since p(y|θk)is likely to be close to p(y|θk−1), since we only changed
the parameters a small amount. We call this algorithm stochastic maximum likelihood or
SML. (There is a closely related algorithm called persistent contrastive divergence which wediscuss in Section 27.7.2.5.)
19.5.6 Feature induction for maxent models *
MRFs require a good set of features. One unsupervised way to learn such features, known asfeature induction, is to start with a base set of features, and then to continually create newfeature combinations out of old ones, greedily adding the best ones to the model. This approachwas ﬁrst proposed in (Pietra et al. 1997; Zhu et al. 1997), and was later extended to the CRF casein (McCallum 2003).
To illustrate the basic idea, we present an example from (Pietra et al. 1997), which described
how to build unconditional probabilistic models to represent English spelling. Initially the modelhas no features, which represents the uniform distribution. The algorithm starts by choosing toadd the feature
φ
1(y)=/summationdisplay
tI(yt∈{a,...,z}) (19.52)
19.5. Learning 681
which checks if any letter is lower case or not. After the feature is added, the parameters are
(re)-ﬁt by maximum likelihood. For this feature, it turns out that ˆθ1=1.944, which means that
a word with a lowercase letter in any position is about e1.944≈7times more likely than the
same word without a lowercase letter in that position. Some samples from this model, generatedusing (annealed) Gibbs sampling (Section 24.2), are shown below.
8
m, r, xevo, ijjiir, b, to, jz, gsr, wq, vf, x, ga, msmGh, pcp, d, oziVlal,
hzagh, yzop, io, advzmxnv, ijv_bolft, x, emx, kayerf, mlj, rawzyb, jp, ag,ctdnnnbg, wgdw, t, kguv, cy, spxcq, uzflbbf, dxtkkn, cxwx, jpd, ztzh, lv,zhpkvnu, l^, r, qee, nynrx, atze4n, ik, se, w, lrh, hp+, yrqyka’h, zcngotcnx,igcump, zjcjs, lqpWiqu, cefmfhc, o, lb, fdcY, tzby, yopxmvk, by, fz„ t, govyccm,ijyiduwfzo, 6xr, duh, ejv, pk, pjw, l, fl, w
The second feature added by the algorithm checks if two adjacent characters are lower case:
φ2(y)=/summationdisplay
s∼tI(ys∈{a,...,z},yt∈{a,...,z}) (19.53)
Now the model has the form
p(y)=1
Zexp(θ1φ1(y)+θ2φ2(y)) (19.54)
Continuing in this way, the algorithm adds features for the strings s>anding>,w h e r e>
represents the end of word, and for various regular expressions such as [0-9], etc. Some
samples from the model with 1000 features, generated using (annealed) Gibbs sampling, are
shown below.
was, reaser, in, there, to, will, „ was, by, homes, thing, be, reloverated,
ther, which, conists, at, fores, anditing, with, Mr., proveral, the, „ ***,on’t, prolling, prothere, „ mento, at, yaou, 1, chestraing, for, have, to,intrally, of, qut, ., best, compers, ***, cluseliment, uster, of, is, deveral,this, thise, of, offect, inatever, thifer, constranded, stater, vill, in, thase,in, youse, menttering, and, ., of, in, verate, of, to
This approach of feature learning can be thought of as a form of graphical model structure
learning (Chapter 26), except it is more ﬁne-grained: we add features that are useful, regardless
of the resulting graph structure. However, the resulting graphs can become densely connected,which makes inference (and hence parameter estimation) intractable.
19.5.7 Iterative proportional ﬁtting (IPF) *
Consider a pairwise MRF where the potentials are represented as tables, with one parameter pervariable setting. We can represent this in log-linear form using
ψ
st(ys,yt)=e x p/parenleftBig
θT
st[I(ys=1,yt=1 ),...,I(ys=K,yt=K)]/parenrightBig
(19.55)
and similarly for ψt(yt). Thus the feature vectors are just indicator functions.
8. We thank John Lafferty for sharing this example.
682 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
FromEquation19.43, wehavethat, atthemaximumofthelikelihood, theempiricalexpectation
of the features equals the model’s expectation:
Epemp[I(ys=j,yt=k)] = Ep(·|θ)[I(ys=j,yt=k)] (19.56)
pemp(ys=j,yt=k)=p( ys=j,yt=k|θ) (19.57)
wherepempis the empirical probability:
pemp(ys=j,yt=k)=Nst,jk
N=/summationtextN
n=1I(yns=j,ynt=k)
N(19.58)
For a general graph, the condition that must hold at the optimum is
pemp(yc)=p(yc|θ) (19.59)
For a special family of graphs known as decomposable graphs (deﬁned in Section 20.4.1), one
can show that p(yc|θ)=ψ c(yc). However, even if the graph is not decomposable, we can
imagine trying to enforce this condition. This suggests an iterative coordinate ascent schemewhere at each step we compute
ψ
t+1
c(yc)=ψt
c(yc)×pemp(yc)
p(yc|ψt)(19.60)
where the multiplication is elementwise. This is known as iterative proportional ﬁtting orIPF
(Fienberg 1970; Bishop et al. 1975). See Algorithm 7 for the pseudocode.
Algorithm 19.2: Iterative Proportional Fitting algorithm for tabular MRFs
1Initializeψc=1forc=1:C;
2repeat
3forc=1:Cdo
4 pc=p(yc|ψ);
5 ˆpc=pemp(yc);
6 ψc=ψc∗ˆpc
pc;
7untilconverged ;
19.5.7.1 Example
Let us consider a simple example from http://en .wikipedia .org/wiki/Iterative_propo
rtional_fitting . We have two binary variables, Y1andY2,w h e r eYn1=1if mannis left
handed, and Yn1=0otherwise; similarly, Yn2=1if woman nis left handed, and Yn2=0
otherwise. We can summarize the data using the following 2×2contingency table:
right-handed left-handed Total
male 43 9 52
female 44 4 48
Total 87 13 100
19.5. Learning 683
Suppose we want to ﬁt a disconnected graphical model containing nodes Y1andY2but with
no edge between them. That is, we want to ﬁnd vectors ψ1andψ2such that M/definesψ1ψT
2≈C,
whereMare the model’s expected counts, and Care the empirical counts. By moment
matching, we ﬁnd that the row and column sums of the model must exactly match the row
and column sums of the data. One possible solution is to use ψ1=[ 0.5200,0.4800]and
ψ2=[ 8 7,13]. Below we show the model’s predictions, M=ψ1ψT
2.
right-handed left-handed Total
male 45.24 6.76 52
female 41.76 6.24 48
Total 87 13 100
It is easy to see that this matches the required constraints. See IPFdemo2x2 for some Matlab
code that computes these numbers. This method is easily to generalized to arbitrary graphs.
19.5.7.2 Speed of IPF
IPF is a ﬁxed point algorithm for enforcing the moment matching constraints and is guaranteed
to converge to the global optimum (Bishop et al. 1975). The number of iterations depends on theform of the model. If the graph is decomposable, then IPF converges in a single iteration, but ingeneral, IPF may require many iterations.
It is clear that the dominant cost of IPF is computing the required marginals under the model.
Efficient methods, such as the junction tree algorithm (Section 20.4), can be used, resulting insomething called efficient IPF (Jirousek and Preucil 1995).
Nevertheless, coordinate descent can be slow. An alternative method is to update all the
parameters at once, by simply following the gradient of the likelihood. This gradient approachhas the further signiﬁcant advantage that it works for models in which the clique potentials maynot be fully parameterized, i.e., the features may not consist of all possible indicators for eachclique, but instead can be arbitrary. Although it is possible to adapt IPF to this setting of generalfeatures, resulting in a method known as iterative scaling, in practice the gradient method is
much faster (Malouf 2002; Minka 2003).
19.5.7.3 Generalizations of IPF
We can use IPF to ﬁt Gaussian graphical models: instead of working with empirical counts, wework with empirical means and covariances (Speed and Kiiveri 1986). It is also possible to createa Bayesian IPF algorithm for sampling from the posterior of the model’s parameters (see e.g.,(Dobra and Massam 2010)).
19.5.7.4 IPF for decomposable graphical models
There is a special family of undirected graphical models known as decomposable graphicalmodels. This is formally deﬁned in Section 20.4.1, but the basic idea is that it contains graphswhich are “tree-like”. Such graphs can be represented by UGMs or DGMs without any loss ofinformation.
In the case of decomposable graphical models, IPF converges in one iteration. In fact, the
684 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
MLE has a closed form solution (Lauritzen 1996). In particular, for tabular potentials we have
ˆψc(yc=k)=/summationtextN
i=1I(yi,c=k)
N(19.61)
and for Gaussian potentials, we have
ˆμc=/summationtextNi=1yic
N,ˆΣc=/summationtext
i(yic−ˆμc)(xic−ˆμc)T
N(19.62)
By using conjugate priors, we can also easily compute the full posterior over the model pa-
rameters in the decomposable case, just as we did in the DGM case. See (Lauritzen 1996) fordetails.
19.6 Conditional random ﬁelds (CRFs)
Aconditional random ﬁeld orCRF(Lafferty et al. 2001), sometimes a discriminative random
ﬁeld(Kumar and Hebert 2003), is just a version of an MRF where all the clique potentials are
conditioned on input features:
p(y|x,w)=1
Z(x,w)/productdisplay
cψc(yc|x,w) (19.63)
A CRF can be thought of as a structured output extension of logistic regression. We will usually
assume a log-linear representation of the potentials:
ψc(yc|x,w)=e x p (wT
cφ(x,yc)) (19.64)
whereφ(x,yc)is a feature vector derived from the global inputs xand the local set of labels
yc. We will give some examples below which will make this notation clearer.
The advantage of a CRF over an MRF is analogous to the advantage of a discriminative
classiﬁer over a generative classiﬁer (see Section 8.6), namely, we don’t need to “waste resources”modeling things that we always observe. Instead we can focus our attention on modeling whatwe care about, namely the distribution of labels given the data.
Another important advantage of CRFs is that we can make the potentials (or factors) of the
model be data-dependent. For example, in image processing applications, we may “turn off” thelabel smoothing between two neighboring nodes sandtif there is an observed discontinuity in
the image intensity between pixels sandt. Similarly, in natural language processing problems,
we can make the latent labels depend on global properties of the sentence, such as whichlanguage it is written in. It is hard to incorporate global features into generative models.
The disadvantage of CRFs over MRFs is that they require labeled training data, and they
are slower to train, as we explain in Section 19.6.3. This is analogous to the strengths andweaknesses of logistic regression vs naive Bayes, discussed in Section 8.6.
19.6.1 Chain-structured CRFs, MEMMs and the label-bias problem
The most widely used kind of CRF uses a chain-structured graph to model correlation amongstneighboring labels. Such models are useful for a variety of sequence labeling tasks (see Sec-tion 19.6.2).
19.6. Conditionalrandomﬁelds(CRFs) 685
xt−1 xt xt+1yt−1 yt yt+1
(a)xt−1 xt xt+1yt−1ytyt+1xg
(b)xt−1 xt xt+1yt−1ytyt+1xg
(c)
Figure 19.14 Various models for sequential data. (a) A generative directed HMM. (b) A discriminative
directed MEMM. (c) A discriminative undirected CRF.
Traditionally, HMMs (discussed in detail in Chapter 17) have been used for such tasks. These
are joint density models of the form
p(x,y|w)=T/productdisplay
t=1p(yt|yt−1,w)p(xt|yt,w) (19.65)
where we have dropped the initial p(y1)term for simplicity. See Figure 19.14(a). If we observe
bothxtandytfor allt, it is very easy to train such models, using techniques described in
Section 17.5.1.
An HMM requires specifying a generative observation model, p(xt|yt,w), which can be
difficult. Furthemore, each xtis required to be local, since it is hard to deﬁne a generative
model for the whole stream of observations, x=x1:T.
An obvious way to make a discriminative version of an HMM is to “reverse the arrows” from
yttoxt, as in Figure 19.14(b). This deﬁnes a directed discriminative model of the form
p(y|x,w)=/productdisplay
tp(yt|yt−1,x,w) (19.66)
wherex=(x1:T,xg),xgare global features, and xtare features speciﬁc to node t. (This
partition into local and global is not necessary, but helps when comparing to HMMs.) This is
called amaximum entropy Markov model orMEMM(McCallum et al. 2000; Kakade et al.
2002).
An MEMM is simply a Markov chain in which the state transition probabilities are conditioned
on the input features. (It is therefore a special case of an input-output HMM, discussed inSection 17.6.3.) This seems like the natural generalization of logistic regression to the structured-output setting, but it suffers from a subtle problem known (rather obscurely) as the label bias
problem (Lafferty et al. 2001). The problem is that local features at time tdo not inﬂuence states
prior to time t. This follows by examining the DAG, which shows that x
tis d-separated from
yt−1(and all earlier time points) by the v-structure at yt, which is a hidden child, thus blocking
the information ﬂow.
To understand what this means in practice, consider the part of speech (POS) tagging task.
Suppose we see the word “banks”; this could be a verb (as in “he banks at BoA”), or a noun (asin “the river banks were overﬂowing”). Locally the POS tag for the word is ambiguous. However,
686 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
(a)
 (b)
 (c)
 (d)
 (e)
Figure 19.15 Example of handwritten letter recognition. In the word ’brace’, the ’r’ and the ’c’ look very
similar, but can be disambiguated using context. Source: (Taskar et al. 2003) . Used with kind permission
of Ben Taskar.
suppose that later in the sentence, we see the word “ﬁshing”; this gives us enough context to
infer that the sense of “banks” is “river banks”. However, in an MEMM (unlike in an HMM and
CRF), the “ﬁshing” evidence will not ﬂow backwards, so we will not be able to disambiguate
“banks”.
Now consider a chain-structured CRF. This model has the form
p(y|x,w)=1
Z(x,w)T/productdisplay
t=1ψ(yt|x,w)T−1/productdisplay
t=1ψ(yt,yt+1|x,w) (19.67)
From the graph in Figure 19.14(c), we see that the label bias problem no longer exists, since yt
does not block the information from xtfrom reaching other yt/primenodes.
The label bias problem in MEMMs occurs because directed models are locally normalized ,
meaning each CPD sums to 1. By contrast, MRFs and CRFs are globally normalized , which
means that local factors do not need to sum to 1, since the partition function Z, which sums over
all joint conﬁgurations, will ensure the model deﬁnes a valid distribution. However, this solution
comes at a price: we do not get a valid probability distribution over yuntil we have seen
the whole sentence, since only then can we normalize over all conﬁgurations. Consequently,
CRFs are not as useful as DGMs (whether discriminative or generative) for online or real-time
inference. Furthermore, the fact that Zdepends on all the nodes, and hence all their parameters,
makes CRFs much slower to train than DGMs, as we will see in Section 19.6.3.
19.6.2 Applications of CRFs
CRFs have been applied to many interesting problems; we give a representative sample below.
These applications illustrate several useful modeling tricks, and will also provide motivation for
some of the inference techniques we will discuss in Chapter 20.
19.6.2.1 Handwriting recognition
A natural application of CRFs is to classify hand-written digit strings, as illustrated in Figure 19.15.
The key observation is that locally a letter may be ambiguous, but by depending on the (un-
known) labels of one’s neighbors, it is possible to use context to reduce the error rate. Note
that the node potential, ψt(yt|xt), is often taken to be a probabilistic discriminative classiﬁer,
19.6. Conditionalrandomﬁelds(CRFs) 687
its withdrawal from the UAL Airways rose after announcing  British dealADJ N V IN V PRP N IN N N DTBIO O O BIO I
POSNP I B
Begin noun phrase
Within noun phraseNot a noun phraseNounAdjectiveBIONADJVerbPrepositionPossesive pronounDeterminer (e.g., a, an, the)VINPRPDTKEY
Figure 19.16 A CRF for joint POS tagging and NP segmentation. Source: Figure 4.E.1 of (Koller and
Friedman 2009). Used with kind permission of Daphne Koller.
such as a neural network or RVM, that is trained on isolated letters, and the edge potentials,
ψst(ys,yt), are often taken to be a language bigram model. Later we will discuss how to train
all the potentials jointly.
19.6.2.2 Noun phrase chunking
One common NLP task is noun phrase chunking, which refers to the task of segmenting a
sentence into its distinct noun phrases (NPs). This is a simple example of a technique known asshallow parsing.
In more detail, we tag each word in the sentence with B (meaning beginning of a new NP), I
(meaning inside a NP), or O (meaning outside an NP). This is called BIOnotation. For example,
in the following sentence, the NPs are marked with brackets:
B I O O OB IO B I I
(British Airways) rose after announcing (its withdrawl) from (the UAI deal)
(We need the B symbol so that we can distinguish II, meaning two words within a single NP,
from BB, meaning two separate NPs.)
A standard approach to this problem would ﬁrst convert the string of words into a string of
POS tags, and then convert the POS tags to a string of BIOs. However, such a pipeline method
can propagate errors. A more robust approach is to build a joint probabilistic model of the
formp(NP
1:T,POS1:T|words1:T). One way to do this is to use the CRF in Figure 19.16. The
connections between adjacent labels encode the probability of transitioning between the B, Iand O states, and can enforce constraints such as the fact that B must preceed I. The featuresare usually hand engineered and include things like: does this word begin with a capital letter, isthis word followed by a full stop, is this word a noun, etc. Typically there are ∼1,000−10,000
features per node.
The number of features has minimal impact on the inference time, since the features are
observed and do not need to be summed over. (There is a small increase in the cost of
688 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
 Mrs. Green spoke today in New Y ork
()Green chairs the ﬁnance committe eB-PER I-PER OTH OTH OTH B-LOC I-LOC B-PER OTH OTH OTH OTH
KEY
Begin person name
Within person nameBegin location nameB-PERI-PERB-LOCWithin location nameNot an entitiyI-LOCOTH
Figure 19.17 A skip-chain CRF for named entity recognition. Source: Figure 4.E.1 of (Koller and Friedman
2009). Used with kind permission of Daphne Koller.
evaluating potential functions with many features, but this is usually negligible; if not, one can
use/lscript1regularization to prune out irrelevant features.) However, the graph structure can have a
dramatic effect on inference time. The model in Figure 19.16 is tractable, since it is essentially a“fat chain”, so we can use the forwards-backwards algorithm (Section 17.4.3) for exact inferenceinO(T|POS|
2|NP|2)time, where|POS|is the number of POS tags, and |NP|is the number
of NP tags. However, the seemingly similar graph in Figure 19.17, to be explained below, iscomputationally intractable.
19.6.2.3 Named entity recognition
A task that is related to NP chunking is named entity extraction. Instead of just segmenting
out noun phrases, we can segment out phrases to do with people and locations. Similartechniques are used to automatically populate your calendar from your email messages; this iscalledinformation extraction.
A simple approach to this is to use a chain-structured CRF, but to expand the state space
from BIO to B-Per, I-Per, B-Loc, I-Loc, and Other. However, sometimes it is ambiguous whethera word is a person, location, or something else. (Proper nouns are particularly difficult to dealwith because they belong to an open class, that is, there is an unbounded number of possible
names, unlike the set of nouns and verbs, which is large but essentially ﬁxed.) We can get betterperformance by considering long-range correlations between words. For example, we might adda link between all occurrences of the same word, and force the word to have the same tag ineach occurence. (The same technique can also be helpful for resolving the identity of pronouns.)This is known as a skip-chain CRF. See Figure 19.17 for an illustration.
We see that the graph structure itself changes depending on the input, which is an additional
advantage of CRFs over generative models. Unfortunately, inference in this model is gener-ally more expensive than in a simple chain with local connections, for reasons explained inSection 20.5.
19.6. Conditionalrandomﬁelds(CRFs) 689
Figure 19.18 Illustration of a simple parse tree based on a context free grammar in Chomsky normal
form. The feature vector φ(x,y)=Ψ (x,y)counts the number of times each production rule was used.
Source: Figure 5.2 of (Altun et al. 2006) . Used with kind permission of Yasemin Altun.
19.6.2.4 Natural language parsing
A generalization of chain-structured models for language is to use probabilistic grammars. In
particular, a probabilistic context free grammar orPCFGis a set of re-write or production
rules of the form σ→σ/primeσ/prime/primeorσ→x,w h e r eσ,σ/prime,σ/prime/prime∈Σare non-terminals (analogous to
parts of speech), and x∈Xare terminals, i.e., words. See Figure 19.18 for an example. Each
such rule has an associated probability. The resulting model deﬁnes a probability distribution
over sequences of words. We can compute the probability of observing a particular sequence
x=x1...xTby summing over all trees that generate it. This can be done in O(T3)time
using the inside-outside algorithm ; see e.g., (Jurafsky and Martin 2008; Manning and Schuetze
1999) for details.
PCFGs are generative models. It is possible to make discriminative versions which encode
the probability of a labeled tree, y, given a sequence of words, x, by using a CRF of the form
p(y|x)∝exp(wTφ(x,y)). For example, we might deﬁne φ(x,y)to count the number of
times each production rule was used (which is analogous to the number of state transitions in
a chain-structured model). See e.g., (Taskar et al. 2004) for details.
19.6.2.5 Hierarchical classiﬁcation
Suppose we are performing multi-class classiﬁcation, where we have a label taxonomy , which
groups the classes into a hierarchy. We can encode the position of ywithin this hierarchy by
deﬁning a binary vector φ(y), where we turn on the bit for component yand for all its children.
This can be combined with input features φ(x)using a tensor product, φ(x,y)=φ(x)⊗φ(y).
See Figure 19.19 for an example.
This method is widely used for text classiﬁcation, where manually constructed taxnomies
(such as the Open Directory Project at www.dmoz.org) are quite common. The beneﬁt is that
information can be shared between the parameters for nearby categories, enabling generalization
across classes.
690 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
/angbracketleftw,Ψ(x,2)/angbracketright=/angbracketleftw2,x/angbracketright+/angbracketleftw6,x/angbracketright+/angbracketleftw9,x/angbracketright
Figure 19.19 Illustration of a simple label taxonomy, and how it can be used to compute a distributed
representation for the label for class 2. In this ﬁgure, φ(x)=x,φ(y=2 )=Λ ( 2 ) ,φ(x,y)is denoted
byΨ(x,2), andwTφ(x,y)is denoted by /angbracketleftw,Ψ(x,2)/angbracketright. Source: Figure 5.1 of (Altun et al. 2006) . Used
with kind permission of Yasemin Altun.
19.6.2.6 Protein side-chain prediction
An interesting analog to the skip-chain model arises in the problem of predicting the structure
of protein side chains. Each residue in the side chain has 4 dihedral angles, which are usually
discretized into 3 values called rotamers. The goal is to predict this discrete sequence of angles,
y, from the discrete sequence of amino acids, x.
We can deﬁne an energy function E(x,y), where we include various pairwise interaction
terms between nearby residues (elements of the yvector). This energy is usually deﬁned as a
weighted sum of individual energy terms, E(x,y|w)=/summationtextD
j=1θjEj(x,y), where the Ejare
energy contribution due to various electrostatic charges, hydrogen bonding potentials, etc, and
ware the parameters of the model. See (Yanover et al. 2007) for details.
Given the model, we can compute the most probable side chain conﬁguration using y∗=
argminE(x,y|w). In general, this problem is NP-hard, depending on the nature of the graph
induced by the Ejterms, due to long-range connections between the variables. Nevertheless,
some special cases can be efficiently handled, using methods discussed in Section 22.6.
19.6.2.7 Stereo vision
Low-level vision problems are problems where the input is an image (or set of images), and
the output is a processed version of the image. In such cases, it is common to use 2d lattice-
structured models; the models are similar to Figure 19.9, except that the features can be global,
and are not generated by the model. We will assume a pairwise CRF.
A classic low-level vision problem is dense stereo reconstruction , where the goal is to
estimate the depth of every pixel given two images taken from slightly different angles. In this
section (based on (Sudderth and Freeman 2008)), we give a sketch of how a simple CRF can be
used to solve this task. See e.g., (Sun et al. 2003) for a more sophisticated model.
By using some standard preprocessing techniques, one can convert depth estimation into a
19.6. Conditionalrandomﬁelds(CRFs) 691
problem of estimating the disparity ysbetween the pixel at location (is,js)in the left image
and the corresponding pixel at location (is+ys,js)in the right image. We typically assume
that corresponding pixels have similar intensity, so we deﬁne a local node potential of the form
ψs(ys|x)∝exp/braceleftbigg
−1
2σ2(xL(is,js)−xR(is+ys,js))2/bracerightbigg
(19.68)
wherexLis the left image and xRis the right image. This equation can be generalized to model
the intensity of small windows around each location. In highly textured regions, it is usually
possible to ﬁnd the corresponding patch using cross correlation, but in regions of low texture,there will be considerable ambiguity about the correct value of y
s.
We can easily add a Gaussian prior on the edges of the MRF that encodes the assumption
that neighboring disparities ys,ytshould be similar, as follows:
ψst(ys,yt)∝exp/parenleftbigg
−1
2γ2(ys−yt)2/parenrightbigg
(19.69)
The resulting model is a Gaussian CRF.
However, using Gaussian edge-potentials will oversmooth the estimate, since this prior fails
to account for the occasional large changes in disparity that occur between neighboring pixelswhich are on different sides of an occlusion boundary. One gets much better results using atruncated Gaussian potential of the form
ψ
st(ys,yt)∝exp/braceleftbigg
−1
2γ2min/parenleftbig
(ys−yt)2,δ2
0/parenrightbig/bracerightbigg
(19.70)
whereγencodes the expected smoothness, and δ0encodes the maximum penalty that will
be imposed if disparities are signiﬁcantly different. This is called a discontinuity preserving
potential; note that such penalties are not convex. The local evidence potential can be maderobust in a similar way, in order to handle outliers due to specularities, occlusions, etc.
Figure 19.20 illustrates the difference between these two forms of prior. On the top left is an
image from the standard Middlebury stereo benchmark dataset (Scharstein and Szeliski 2002).On the bottom left is the corresponding true disparity values. The remaining columns representthe estimated disparity after 0, 1 and an “inﬁnite” number of rounds of loopy belief propagation(see Section 22.2), where by “inﬁnite” we mean the results at convergence. The top row showsthe results using a Gaussian edge potential, and the bottom row shows the results using thetruncated potential. The latter is clearly better.
Unfortunately, performing inference with real-valued variables is computationally difficult,
unless the model is jointly Gaussian. Consequently, it is common to discretize the variables.(For example, Figure 19.20(bottom) used 50 states.) The edge potentials still have the form givenin Equation 19.69. The resulting model is called a metric CRF, since the potentials form a
metric.
9Inference in metric CRFs is more efficient than in CRFs where the discrete labels
have no natural ordering, as we explain in Section 22.6.3.3. See Section 22.6.4 for a comparisonof various approximate inference methods applied to low-level CRFs, and see (Blake et al. 2011;Prince 2012) for more details on probabilistic models for computer vision.
9. A function fis said to be a metricif it satisﬁes the following three properties: Reﬂexivity: f(a,b)=0 iffa=b;
Symmetry: f(a,b)=f (b,a); and Triangle inequality: f(a,b)+f(b,c)≥f(a,c).I f fsatisﬁes only the ﬁrst two
properties, it is called a semi-metric.
692 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
/g2/g3 /g5/g10/g13/g7/g1/g4/g8/g11/g9/g6/g10/g8/g12/g8/g7/g11 
Figure 19.20 Illustration of belief propagation for stereo depth estimation. Left column: image and true
disparities. Remaining columns: initial estimate, estimate after 1 iteration, and estimate at convergence.
Top row: Gaussian edge potentials. Bottom row: robust edge potentials. Source: Figure 4 of (Sudderth and
Freeman 2008). Used with kind permission of Erik Sudderth.
19.6.3 CRF training
We can modify the gradient based optimization of MRFs described in Section 19.5.1 to the CRF
case in a straightforward way. In particular, the scaled log-likelihood becomes
/lscript(w)/defines1
N/summationdisplay
ilogp(yi|xi,w)=1
N/summationdisplay
i/bracketleftBigg/summationdisplay
cwT
cφc(yi,xi)−logZ(w,xi)/bracketrightBigg
(19.71)
and the gradient becomes
∂/lscript
∂wc=1
N/summationdisplay
i/bracketleftbigg
φc(yi,xi)−∂
∂wclogZ(w,xi)/bracketrightbigg
(19.72)
=1
N/summationdisplay
i[φc(yi,xi)−E[φc(y,xi)]] (19.73)
Note that we now have to perform inference for every single training case inside each gradient
step, which is O(N)times slower than the MRF case. This is because the partition function
depends on the inputs xi.
In most applications of CRFs (and some applications of MRFs), the size of the graph structure
can vary. Hence we need to use parameter tying to ensure we can deﬁne a distribution of
arbitrary size. In the pairwise case, we can write the model as follows:
p(y|x,w)=1
Z(w,x)exp/parenleftbig
wTφ(y,x)/parenrightbig
(19.74)
19.7. StructuralSVMs 693
wherew=[wn,we]are the node and edge parameters, and
φ(y,x)/defines[/summationdisplay
tφt(yt,x),/summationdisplay
s∼tφst(ys,yt,x)] (19.75)
are the summed node and edge features (these are the sufficient statistics). The gradient
expression is easily modiﬁed to handle this case.
In practice, it is important to use a prior/ regularization to prevent overﬁtting. If we use a
Gaussian prior, the new objective becomes
/lscript/prime(w)/defines1
N/summationdisplay
ilogp(yi|xi,w)−λ||w||2
2 (19.76)
It is simple to modify the gradient expression.
Alternatively, we can use /lscript1regularization. For example, we could use /lscript1for the edge weights
weto learn a sparse graph structure, and /lscript2for the node weights wn, as in (Schmidt et al.
2008). In other words, the objective becomes
/lscript/prime(w)/defines1
N/summationdisplay
ilogp(yi|xi,w)−λ1||we||1−λ2||wn||22(19.77)
Unfortunately, the optimization algorithms are more complicated when we use /lscript1(see Sec-
tion 13.4), although the problem is still convex.
To handle large datasets, we can use stochastic gradient descent (SGD), as described in
Section 8.5.2.
It is possible (and useful) to deﬁne CRFs with hidden variables, for example to allow for an
unknown alignment between the visible features and the hidden labels (see e.g., (Schnitzspan
et al. 2010)). In this case, the objective function is no longer convex. Nevertheless, we can ﬁnda locally optimal ML or MAP parameter estimate using EM and/ or gradient methods.
19.7 Structural SVMs
We have seen that training a CRF requires inference, in order to compute the expected sufficientstatistics needed to evaluate the gradient. For certain models, computing a joint MAP estimateof the states is provably simpler than computing marginals, as we discuss in Section 22.6. In thissection, we discuss a way to train structured output classiﬁers that that leverages the existence offast MAP solvers. (To avoid confusion with MAP estimation of parameters, we will often refer toMAP estimation of states as decoding.) These methods are known as structural support vector
machines orSSVMs(Tsochantaridis et al. 2005). (There is also a very similar class of methods
known as max margin Markov networks orM3nets(Taskar et al. 2003); see Section 19.7.2 for
a discussion of the differences.)
19.7.1 SSVMs: a probabilistic view
In this book, we have mostly concentrated on ﬁtting models using MAP parameter estimation,i.e., by minimizing functions of the form
R
MAP(w)=−logp(w)−N/summationdisplay
i=1logp(yi|xi,w) (19.78)
694 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
However, at test time, we pick the label so as to minimize the posterior expected loss (deﬁned
in Section 5.7):
ˆy(x|w) = argmin
ˆy/summationdisplay
yL(ˆy,y)p(y|x,w) (19.79)
whereL(y∗,ˆy)is the loss we incur when we estimate ˆybut the truth is y∗. It therefore seems
reasonable to take the loss function into account when performing parameter estimation.10So,
following (Yuille and He 2011), let us instead minimized the posterior expected loss on thetraining set:
R
EL(w)/defines−logp(w)+N/summationdisplay
i=1log/bracketleftBigg/summationdisplay
yL(yi,y)p(y|xi,w)/bracketrightBigg
(19.80)
In the special case of 0-1 loss, L(yi,y)=1−δy,yi, this reduces to RMAP.
We will assume that we can write our model in the following form:
p(y|x,w)=exp(wTφ(x,y))
Z(x,w)(19.81)
p(w)=exp(−E(w))
Z(19.82)
whereZ(x,w)=/summationtext
yexp(wTφ(x,y)). Also, let us deﬁne L(yi,y)=e x p ˜L(yi,y). With
this, we can rewrite our objective as follows:
REL(w)=− logp(w)+/summationdisplay
ilog/bracketleftBigg/summationdisplay
yexp˜L(yi,y)exp(wTφ(x,y))
Z(x,w)/bracketrightBigg
(19.83)
=E(w)+/summationdisplay
i−logZ(xi,w)+log/summationdisplay
yexp/parenleftBig
˜L(vyi,y)+wTφ(xi,y)/parenrightBig
(19.84)
We will now consider various bounds in order to simplify this objective. First note that for
any function f(y)we have
max
y∈Yf(y)≤log/summationdisplay
y∈Yexp[f(y)]≤log/bracketleftbigg
|Y|exp/parenleftbigg
max
yf(y)/parenrightbigg/bracketrightbigg
=l o g|Y|+max
yf(y)(19.85)
For example, suppose Y={0,1,2}andf(y)=y. Then we have
2 = log[exp(2)] ≤log[exp(0)+exp(1)+exp(2)] ≤log[3×exp(2)] = log(3)+2 (19.86)
We can ignore the log|Y|term, which is independent of y, and treat maxy∈Yf(y)as both a
lower and upper bound. Hence we see that
REL(w)∼E(w)+N/summationdisplay
i=1/bracketleftbigg
max
y/braceleftBig
˜L(yi,y)+wTφ(xi,y)/bracerightBig
−max
ywTφ(xi,y)/bracketrightbigg
(19.87)
10. Note that this violates the fundamental Bayesian distinction between inference and decision making. However,
performing these tasks separately will only result in an optimal decision if we can compute the exact posterior. In most
cases, this is intractable, so we need to perform loss-calibrated inference (Lacoste-Julien et al. 2011). In this section,
we just perform loss-calibrated MAP parameter estimation, which is computationally simpler. (See also (Stoyanov et al.2011).)
19.7. StructuralSVMs 695
wherex∼ymeansc1+x≤y+c2for some constants c1,c2. Unfortunately, this objective
is not convex in w. However, we can devise a convex upper bound by exploiting the following
looser lower bound on the log-sum-exp function:
f(y/prime)≤log/summationdisplay
yexp[f(y)] (19.88)
for anyy/prime∈Y. Applying this equation to our earlier example, for f(y)=yandy/prime=1,w eg e t
1 = log[exp(1)] ≤log[exp(0)+exp(1)+exp(2)] . And applying this bound to RELwe get
REL(w)≤E(w)+N/summationdisplay
i=1/bracketleftbigg
max
y/braceleftBig
˜L(yi,y)+wTφ(xi,y)/bracerightBig
−wTφ(xi,yi)/bracketrightbigg
(19.89)
If we setE(w)=−1
2C||w||2
2(corresponding to a spherical Gaussian prior), we get
RSSVM(w)/defines1
2||w||2+CN/summationdisplay
i=1/bracketleftbigg
max
y/braceleftBig
˜L(yi,y)+wTφ(xi,y)/bracerightBig
−wTφ(xi,yi)/bracketrightbigg
(19.90)
This is the same objective as used in the SSVM approach of (Tsochantaridis et al. 2005).
In the special case that Y={−1,+1}L(y∗,y)=1−δy,y∗, andφ(x,y)=1
2yx, this
criterion reduces to the following (by considering the two cases that y=yiandy/negationslash=yi):
RSVM(w)/defines1
2||w||2+CN/summationdisplay
i=1/bracketleftbig
max{0,1−yiwTxi}/bracketrightbig
(19.91)
which is the standard binary SVM objective (see Equation 14.57).
So we see that the SSVM criterion can be seen as optimizing an upper bound on the Bayesian
objective, a result ﬁrst shown in (Yuille and He 2011). This bound will be tight (and hence
the approximation will be a good one) when ||w||is large, since in that case, p(y|x,w)will
concentrate its mass on argmaxyp(y|x,w). Unfortunately, a large ||w||corresponds to a
model that is likely to overﬁt, so it is unlikely that we will be working in this regime (because wewill tune the strength of the regularizer to avoid this situation). An alternative justiﬁcation for theSVM criterion is that it focusses effort on ﬁtting parameters that affect the decision boundary.This is a better use of computational resources than ﬁtting the full distribution, especially whenthe model is wrong.
19.7.2 SSVMs: a non-probabilistic view
We now present SSVMs in a more traditional (non-probabilistic) way, following (Tsochantaridiset al. 2005). The resulting objective will be the same as the one above. However, this derivationwill set the stage for the algorithms we discuss below.
Letf(x;w) = argmax
y∈YwTφ(x,y)be the prediction function. We can obtain zero loss
on the training set using this predictor if
∀i.max
y∈Y\yiwTφ(xi,y)≤wTφ(xi,yi) (19.92)
696 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
Each one of these nonlinear inequalities can be equivalently replaced by |Y|−1linear inequal-
ities, resulting in a total of N|Y|−Nlinear constraints of the following form:
∀i.∀y∈Y\yi.wTφ(xi,yi)−wTφ(xi,y)≥0 (19.93)
For brevity, we introduce the notation
δi(y)/definesφ(xi,yi)−φ(xi,y) (19.94)
so we can rewrite these constraints as wTδi(y)≥0.
If we can achieve zero loss, there will typically be multiple solution vectors w. We pick the
one that maximizes the margin, deﬁned as
γ/definesmin
if(x,yi;w)−max
y/prime∈Y\yf(x,y/prime;w) (19.95)
Since the margin can be made arbitrarily large by rescaling w, we ﬁx its norm to be 1, resulting
in the optimization problem
max
γ,w:||w||=1s.t.∀i.∀y∈Y\yi.wTδi(y)≥γ (19.96)
Equivalently, we can write
min
w1
2||w||2s.t.∀i.∀y∈Y\yi.wTδi(y)≥1 (19.97)
To allow for the case where zero loss cannot be achieved (equivalent to the data being inseparable
in the case of binary classiﬁcation), we relax the constraints by introducing slack terms ξi, one
per data case. This yields
min
w,ξ1
2||w||2+CN/summationdisplay
i=1ξis.t.∀i.∀y∈Y\yi.wTδi(y)≥1−ξi,ξi≥0 (19.98)
In the case of structured outputs, we don’t want to treat all constraint violations equally. For
example, in a segmentation problem, getting one position wrong should be punished less thangetting many positions wrong. One way to achieve this is to divide the slack variable by the sizeof the loss (this is called slack re-scaling). This yields
min
w,ξ1
2||w||2+CN/summationdisplay
i=1ξis.t.∀i.∀y∈Y\yi.wTδi(y)≥1−ξi
L(yi,y),ξi≥0(19.99)
Alternatively, we can deﬁne the margin to be proportional to the loss (this is called margin
re-rescaling). This yields
min
w,ξ1
2||w||2+CN/summationdisplay
i=1ξis.t.∀i.∀y∈Y\yi.wTδi(y)≥L(yi,y)−ξi,ξi≥0(19.100)
(In fact, we can write ∀y∈Yinstead of∀y∈Y\yi, since if y=yi, thenwTδi(y)=0and
ξi=0. By using the simpler notation, which doesn’t exclude yi, we add an extra but redundant
constraint.) This latter approach is used in M3nets.
19.7. StructuralSVMs 697
For future reference, note that we can solve for the ξ∗
iterms as follows:
ξ∗
i(w)=m a x{0,max
y(L(yi,y)−wTδi))}=m a x
y(L(yi,y)−wTδi)) (19.101)
Substituting in, and dropping the constraints, we get the following equivalent problem:
min
w1
2||w||2+C/summationdisplay
imax
y/braceleftbig
L(yi,y)+wTφ(xi,y)/bracerightbig
−wTφ(xi,yi) (19.102)
19.7.2.1 Empirical risk minimization
Let us pause and consider whether the above objective is reasonable. Recall that in the frequen-
tist approach to machine learning (Section 6.5), the goal is to minimize the regularized empiricalrisk, deﬁned by
R(w)+C
NN/summationdisplay
i=1L(yi,f(xi,w)) (19.103)
whereR(w)is the regularizer, and f(xi,w) = argmaxywTφ(xi,y)=ˆyiis the prediction.
Since this objective is hard to optimize, because the loss is not differentiable, we will constructa convex upper bound instead.
We can show that
R(w)+C
N/summationdisplay
imax
y(L(yi,y)−wTδi)) (19.104)
is such a convex upper bound. To see this, note that
L(yi,f(xi,w))≤L(yi,f(xi,w))−wTφ(xi,yi)+wTφ(xi,ˆyi) (19.105)
≤max
yL(yi,y)−wTφ(xi,yi)+wTφ(xi,y) (19.106)
Using this bound and R(w)=1
2||w||2yields Equation 19.102.
19.7.2.2 Computational issues
Although the above objectives are simple quadratic programs (QP), they have O(N|Y|)con-
straints. This is intractable, since Yis usually exponentially large. In the case of the margin
rescaling formulation, it is possible to reduce the exponential number of constraints to a poly-nomial number, provided the loss function and the feature vector decompose according to agraphical model. This is the approach used in M3nets (Taskar et al. 2003).
An alternative approach is to work directly with the exponentially sized QP. This allows for
the use of more general loss functions. There are several possible methods to make this feasible.One is to use cutting plane methods. Another is to use stochastic subgradient methods. Wediscuss both of these below.
698 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
Fi C llh S f h l lh I
Figure 19.21 Illustration of the cutting plane algorithm in 2d. We start with the estimate w=w0=0.
(a) We add the ﬁrst constraint; the shaded region is the new feasible set. The new minimum norm solution
isw1. (b) We add another constraint; the dark shaded region is the new feasible set. (c) We add a third
constraint. Source: Figure 5.3 of (Altun et al. 2006) . Used with kind permission of Yasemin Altun.
19.7.3 Cutting plane methods for ﬁtting SSVMs
In this section, we discuss an efficient algorithm for ﬁtting SSVMs due to (Joachims et al. 2009).
This method can handle general loss functions, and is implemented in the popular SVMstruct
package11. The method is based on the cutting plane method from convex optimization (Kelley
1960).
The basic idea is as follows. We start with an initial guess wand no constraints. At each
iteration, we then do the following: for each example i, we ﬁnd the “most violated” constraint
involving xiandˆyi. If the loss-augmented margin violation exceeds the current value of ξiby
more than /epsilon1, we add ˆyito the working set of constraints for this training case, Wi, and then
solve the resulting new QP to ﬁnd the new w,ξ. See Figure 19.21 for a sketch, and Algorithm 11
for the pseudo code. (Since at each step we only add one new constraint, we can warm-start
the QP solver.) We can can easily modify the algorithm to optimize the slack rescaling version
by replacing the expression L(yi,y)−wTδi(ˆyi)withL(yi,y)(1−wTδi(ˆyi)).
The key to the efficiency of this method is that only polynomially many constraints need to
be added, and as soon as they are, the exponential number of other constraints are guaranteed
to also be satisﬁed to within a tolerance of /epsilon1(see (Tsochantaridis et al. 2005) for the proof).
19.7.3.1 Loss-augmented decoding
The other key to efficiency is the ability to ﬁnd the most violated constraint in line 5 of the
algorithm, i.e., to compute
argmax
y∈YL(yi,y)−wTδi(y) = argmax
y∈YL(yi,y)+wTφ(xi,y) (19.107)
11.http://svmlight .joachims .org/svm_struct .html
19.7. StructuralSVMs 699
Algorithm 19.3: Cutting plane algorithm for SSVMs (margin rescaling, N-slack version)
1InputD={(x1,y1),...,(xN,yn)},C,/epsilon1;
2Wi=∅,ξi=0fori=1:N;
3repeat
4fori=1:Ndo
5 ˆyi=a r g m a xˆyi∈YL(yi,y)−wTδi(ˆyi);
6 ifL(yi,y)−wTδi(ˆyi)>ξi+/epsilon1then
7Wi=Wi∪{ˆyi};
8 (w,ξ) = argminw,ξ≥01
2||w||2
2+C/summationtextN
i=1ξi;
9 s.t.∀i=1:N,∀y/prime∈Wi:wTδi(ˆyi)≥L(yi,y/prime)−ξi;
10untilnoWihaschanged ;
11Return (w ,ξ)
We call this process loss-augmented decoding . (In (Joachims et al. 2009), this procedure is
called the separation oracle .) If the loss function has an additive decomposition of the same
form as the features, then we can fold the loss into the weight vector, i.e., we can ﬁnd a new
set of parameters w/primesuch that (w/prime)Tδi(y)=wTδi(y). We can then use a standard decoding
algorithm, such as Viterbi, on the model p(y|x,w/prime).
Inthespecialcaseof0-1loss, theoptimumwilleitherbethebestsolution, argmaxywTφ(xi,y),
with a value of of 0−wTδi(ˆy), or it will be the second best solution, i.e.,
˜y=a r g m a x
y/negationslash=ˆywTφ(xi,y) (19.108)
which achieves an overall value of 1−wTδi(˜y). For chain structured CRFs, we can use the
Viterbi algorithm to do decoding; the second best path will differ from the best path in a singleposition, which can be obtained by changing the variable whose max marginal is closest to itsdecision boundary to its second best value. We can generalize this (with a bit more work) toﬁnd theN-best list (Schwarz and Chow 1990; Nilsson and Goldberger 2001).
For Hamming loss, L(y
∗,y)=/summationtext
tI(y∗
t/negationslash=yt), and for the F1 score (deﬁned in Section 5.7.2.3),
we can devise a dynamic programming algorithm to compute Equation 19.107. See (Altun et al.2006) for details. Other models and loss function combinations will require different methods.
19.7.3.2 A linear time algorithm
Although the above algorithm takes polynomial time, we can do better, and devise an algorithmthat runs in lineartime, assuming we use a linear kernel (i.e., we work with the original features
φ(x,y)and do not apply the kernel trick). The basic idea, as explained in (Joachims et al.
2009), is to have a single slack variable, ξ, instead of N, but to use|Y|
Nconstraints, instead of
700 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
justN|Y|. Speciﬁcally, we optimize the following (assuming the margin rescaling formulation):
min
w,ξ≥01
2||w||2
2+Cξ
s.t.∀(y1,...,yN)∈YN:1
NwTN/summationdisplay
i=1δi(yi)≥1
NN/summationdisplay
i=1L(yi,yi)−ξ(19.109)
Compare this to the original version, which was
min
w,ξ≥01
2||w||22+C
Nξs.t.∀i=1:N,∀y∈Y:wTδi(y)≥L(yi,yi)−ξi(19.110)
One can show that any solution w∗of Equation 19.109 is also a solution of Equation 19.110 and
vice versa, with ξ∗=1
Nξ∗
i.
Algorithm 19.4: Cutting plane algorithm for SSVMs (margin rescaling, 1-slack version)
1InputD={(x1,y1),...,(xN,yn)},C,/epsilon1;
2W=∅;
3repeat
4(w,ξ) = argminw,ξ≥01
2||w||2
2+C/summationtextN
i=1ξ;
5 s.t.∀(y1,...,yN)∈W:1
NwT/summationtextNi=1δi(yi)≥1
N/summationtextNi=1L(yi,yi)−ξ;
6fori=1:Ndo
7 ˆyi=a r g m a xˆyi∈YL(yi,ˆyi)+wTφ(xi,ˆyi)
8W=W∪{(ˆy1,...,ˆyN)};
9until1
N/summationtextNi=1L(yi,ˆyi)−1
NwT/summationtextNi=1δi(ˆyi)≤ξ+/epsilon1;
10Return (w ,ξ)
We can optimize Equation 19.109 using the cutting plane algorithm in Algorithm 10. (This
is what is implemented in SVMstruct.) The inner QP in line 4 can be solved in O(N)time
using the method of (Joachims 2006). In line 7 we make Ncalls to the loss-augmented decoder.
Finally, it can be shown that the number of iterations is a constant independent on N. Thus
the overall running time is linear.
19.7.4 Online algorithms for ﬁtting SSVMs
Although the cutting plane algorithm can be made to run in time linear in the number of data
points, that can still be slow if we have a large dataset. In such cases, it is preferable to useonline learning. We brieﬂy mention a few possible algorithms below.
19.7.4.1 The structured perceptron algorithm
A very simple algorithm for ﬁtting SSVMs is the structured perceptron algorithm (Collins
2002). This method is an extension of the regular perceptron algorithm of Section 8.5.4. At each
19.7. StructuralSVMs 701
step, we compute ˆy=a r g m a x p(y|x)(e.g., using the Viterbi algorithm) for the current training
samplex.I fˆy=y, we do nothing, otherwise we update the weight vector using
wk+1=wk+φ(y,x)−φ(ˆy,x) (19.111)
To get good performance, it is necessary to average the parameters over the last few updates
(see Section 8.5.2 for details), rather than using the most recent value.
19.7.4.2 Stochastic subgradient descent
The disadvantage of the structured perceptron algorithm is that it implicitly assumes 0-1 loss,and it does not enforce any kind of margin. An alternative approach is to perform stochasticsubgradient descent. A speciﬁc instance of this the Pegasos algorithm (Shalev-Shwartz et al.
2007), which stands for “primal estimated sub-gradient solver for SVM”. Pegasos was designedfor binary SVMs, but can be extended to SSVMS.
Let us start by considering the objective function:
f(w)=
N/summationdisplay
i=1max
ˆyi/bracketleftbig
L(yi,ˆyi)+wTφ(xi,ˆyi)/bracketrightbig
−wTφ(xi,yi)+λ||w||2(19.112)
Lettingˆyibe the argmax of this max. Then the subgradient of this objective function is
g(w)=N/summationdisplay
i=1φ(xi,ˆyi)−φ(xi,yi)+2λw (19.113)
In stochastic subgradient descent, we approximate this gradient with a single term, i, and then
perform an update:
wk+1=wk−ηkgi(wk)=wk−ηk[φ(xi,ˆyi)−φ(xi,yi)+(2/N)λw] (19.114)
whereηkis the step size parameter, which should satisfy the Robbins-Monro conditions (Sec-
tion 8.5.2.1). (Notice that the perceptron algorithm is just a special case where λ=0and
ηk=1.) To ensure that whas unit norm, we can project it onto the /lscript2ball after each update.
19.7.5 Latent structural SVMs
In many applications of interest, we have latent or hidden variables h. For example, in object
detections problems, we may be told that the image contains an object, so y=1, but we may
not know where it is. The location of the object, or its pose, can be considered a hidden variable.Or in machine translation, we may know the source text x(say English) and the target text y
(say French), but we typically do not know the alignment between the words.
We will extend our model as follows, to get a latent CRF:
p(y,h|x,w)=exp(w
Tφ(x,y,h))
Z(x,w)(19.115)
Z(x,w)=/summationdisplay
y,hexp(wTφ(x,y,h)) (19.116)
702 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
In addition, we introduce the loss function L(y∗,y,h); this measures the loss when the “action”
that we take is to predict yusing latent variables h. We could just use L(y∗,y)as before, since
his usually a nuisance variable and not of direct interest. However, hcan sometimes play a
useful role in deﬁning a loss function.12
Given the loss function, we deﬁne our objective as
REL(w)=− logp(w)+/summationdisplay
ilog⎡
⎣/summationdisplay
y,hexp˜L(yi,y,h)exp(wTφ(x,y,h))
Z(x,w)⎤⎦(19.117)
Using the same loose lower bound as before, we get
R
EL(w)≤E(w)+N/summationdisplay
i=1max
y,h/braceleftBig
˜L(yi,y,h)+wTφ(xi,y,h)/bracerightBig
−N/summationdisplay
i=1max
hwTφ(xi,yi,h) (19.118)
If we set E(w)=−1
2C||w||2
2, we get the same objective as is optimized in latent SVMs (Yu
and Joachims 2009).
Unfortunately, this objective is no longer convex. However, it is a difference of convex
functions, and hence can be solved efficiently using the CCCPorconcave-convex procedure
(Yuille and Rangarajan 2003). This is a method for minimizing functions of the form f(w)−
g(w),w h e r efandgare convex. The method alternates between ﬁnding a linear upper bound
uon−g, and then minimizing the convex function f(w)+u(w); see Algorithm 6 for the
pseudocode. CCCP is guaranteed to decrease the objective at every iteration, and to converge to
a local minimum or a saddle point.
Algorithm 19.5: Concave-Convex Procedure (CCCP)
1Sett=0and initialize w0;
2repeat
3Find hyperplane vtsuch that−g(w)≤−g(wt)+(w−wt)Tvtfor allw;
4Solvewt+1=a r g m i nwf(w)+wTvt;
5Sett=t+1
6untilconverged ;
When applied to latent SSVMs, CCCP is very similar to (hard) EM. In the “E step”, we compute
12. For example, consider the problem of learning to classify a set of documents as relevant or not to a query. That
is, givenndocuments x1,...,x nfor a single query q, we want to produce a labeling yj∈{ −1,+1}, representing
whether document jis relevant to qor not. Suppose our goal is to maximize the precision at k, which is a metric widely
used in ranking (see Section 9.7.4). We will introduce a latent variable for each document hjrepresenting its degree
of relevance. This corresponds to a latent total ordering, that has to be consistent with the observed partial ordering
y. Given this, we can deﬁne the following loss function: L(y,ˆy,ˆh)=m i n {1,n(y)
k}−1
k/summationtextk
j=1I(yhj=1 ),where
n(y)is the total number of relevant documents. This loss is essentially just 1 minus the precision@k, except we replace
1 withn(y)/kso that the loss will have a minimum of zero. See (Yu and Joachims 2009) for details.
19.7. StructuralSVMs 703
the linear upper bound by setting vt=−C/summationtextN
i=1φ(xi,yi,h∗
i),w h e r e
hi=a r g m a x
hwT
tφ(xi,yi,h) (19.119)
In the “M step”, we estimate wusing techniques for solving fully visible SSVMs. Speciﬁcally, we
minimize
1
2||w||2+CN/summationdisplay
i=1max
y,h/braceleftbig
L(yi,y,h)+wTφ(xi,y,h)/bracerightbig
−CN/summationdisplay
i=1wTφ(xi,yi,h∗
i)(19.120)
Exercises
Exercise 19.1 Derivative of the log partition function
Derive Equation 19.40.
Exercise 19.2 CI properties of Gaussian graphical models
(Source: Jordan.)
In this question, we study the relationship between sparse matrices and sparse graphs for Gaussian
graphical models. Consider a multivariate Gaussian N(x|μ,Σ)in 3 dimensions. Suppose μ=( 0,0,0)T
throughout.
Recall that for jointly Gaussian random variables, we know that XiandXjare independent iff they are
uncorrelated, ie. Σij=0. (This is not true in general, or even if XiandXjare Gaussian but not jointly
Gaussian.) Also, Xiis conditionally independent of Xjgiven all the other variables iff Σ−1
ij=0.
a. Suppose
Σ=⎛
⎝0.75 0.50 .25
0.51.00.5
0.25 0.50 .75⎞⎠
Are there any marginal independencies amongst X
1,X2andX3? What about conditional indepen-
dencies? Hint: compute Σ−1and expand out xTΣ−1x: which pairwise terms xixjare missing? Draw
an undirected graphical model that captures as many of these independence statements (marginal and
conditional) as possible, but does not make any false independence assertions.
b. Suppose
Σ=⎛
⎝210
121012⎞
⎠
Are there any marginal independencies amongst X
1,X2andX3? Are there any conditional inde-
pendencies amongst X1,X2andX3? Draw an undirected graphical model that captures as many of
these independence statements (marginal and conditional) as possible, but does not make any false
independence assertions.
c. Now suppose the distribution on Xcan be represented by the following DAG:
X1→X2→X3
Let the CPDs be as follows:
P(X1)=N(X1;0,1),P(X2|x1)=N(X2;x1,1),P(X3|x2)=N(X3;x2,1) (19.121)
Multiply these 3 CPDs together and complete the square (Bishop p101) to ﬁnd the corresponding joint
distribution N(X1:3|μ,Σ). (You may ﬁnd it easier to solve for Σ−1rather than Σ.)
704 Chapter19. Undirectedgraphicalmodels(Markovrandomﬁelds)
d. For the DAG model in the previous question: Are there any marginal independencies amongst X1,X2
andX3? What about conditional independencies? Draw an undirected graphical model that captures
as many of these independence statements as possible, but does not make any false independence
assertions (either marginal or conditional).
Exercise 19.3 Independencies in Gaussian graphical models
(Source: MacKay.)
a. Consider the DAG X1←X2→X3. Assume that all the CPDs are linear-Gaussian. Which of the
following matrices couldbe the covariance matrix?
A=⎛
⎝931
393139⎞
⎠,B=⎛⎝8−31
−39−3
1−38⎞⎠,C=⎛⎝930
393039⎞
⎠,D=⎛⎝9−30
−31 0−3
0−39⎞⎠(19.122)
b. Which of the above matrices could be inverse covariance matrix?
c. Consider the DAG X1→X2←X3. Assume that all the CPDs are linear-Gaussian. Which of the
above matrices could be the covariance matrix?
d. Which of the above matrices could be the inverse covariance matrix?
e. Let three variables x
1,x2,x4have covariance matrix Σ(1:3)and precision matrix Ω(1:3)=Σ−1
(1:3)as
follows
Σ(1:3)=⎛⎝10.50
0.510 .5
00.51⎞⎠,Ω
(1:3)=⎛⎝1.5−10.5
−12−1
0.5−11.5⎞
⎠ (19.123)
Now focus on x
1andx2. Which of the following statements about their covariance matrix Σ(1:2)and
precision matrix Ω(1:2)are true?
A:Σ(1:2)=/parenleftbigg10.5
0.51/parenrightbigg
,B:Ω(1:2)=/parenleftbigg1.5−1
−12/parenrightbigg
(19.124)
Exercise 19.4 Cost of training MRFs and CRFs
(Source: Koller.) Consider the process of gradient-ascent training for a log-linear model with kfeatures,
given a data set with Ntraining instances. Assume for simplicity that the cost of computing a single
feature over a single instance in our data set is constant, as is the cost of computing the expected value
of each feature once we compute a marginal over the variables in its scope. Assume that it takes ctime
to compute all the marginals for each data case. Also, assume that we need riterations for the gradient
process to converge.
• Using this notation, what is the time required to train an MRF in big-O notation?
• Using this notation, what is the time required to train a CRF in big-O notation?
Exercise 19.5 Full conditional in an Ising model
Consider an Ising model
p(x1,...,x n|θ)=1
Z(θ)/productdisplay
<ij>exp(J ijxixj)n/productdisplay
i=1exp(hixi) (19.125)
where<i j>denotes all unique pairs (i.e., all edges), Jij∈Ris the coupling strength (weight) on edge
i−j,hi∈Ris the local evidence (bias term), and θ=(J,h)are all the parameters.
19.7. StructuralSVMs 705
Ifxi∈{0,1}, derive an expression for the full conditional
p(xi=1|x−i,θ)=p(xi=1|xnbi,θ) (19.126)
wherex−iare all nodes except i, andnbiare the neighbors of iin the graph. Hint: you answer should
use the sigmoid/ logistic function σ(z)=1/(1 +e−z). Now suppose xi∈{ −1,+1}. Derive a related
expression for p(xi|x−i,θ)in this case. (This result can be used when applying Gibbs sampling to the
model.)

20 Exact inference for graphical models
20.1 Introduction
In Section 17.4.3, we discussed the forwards-backwards algorithm, which can exactly compute the
posterior marginals p(xt|v,θ)in any chain-structured graphical model, where xare the hidden
variables (assumed discrete) and vare the visible variables. This algorithm can be modiﬁed
to compute the posterior mode and posterior samples. A similar algorithm for linear-Gaussianchains, known as the Kalman smoother, was discussed in Section 18.3.2. Our goal in this chapteris to generalize these exact inference algorithms to arbitrary graphs. The resulting methods applyto both directed and undirected graphical models. We will describe a variety of algorithms, butwe omit their derivations for brevity. See e.g., (Darwiche 2009; Koller and Friedman 2009) for adetailed exposition of exact inference techniques for discrete directed graphical models.
20.2 Belief propagation for trees
In this section, we generalize the forwards-backwards algorithm from chains to trees. Theresulting algorithm is known as belief propagation (BP) (Pearl 1988), or the sum-product
algorithm.
20.2.1 Serial protocol
We initially assume (for notational simplicity) that the model is a pairwise MRF (or CRF), i.e.,
p(x|v)=1
Z(v)/productdisplay
s∈Vψs(xs)/productdisplay
(s,t)∈Eψs,t(xs,xt) (20.1)
whereψsis the local evidence for node s, andψstis the potential for edge s−t. We will
consider the case of models with higher order cliques (such as directed trees) later on.
One way to implement BP for undirected trees is as follows. Pick an arbitrary node and call it
the root,r. Now orient all edges away from r(intuitively, we can imagine “picking up the graph”
at noderand letting all the edges “dangle” down). This gives us a well-deﬁned notion of parent
and child. Now we send messages up from the leaves to the root (the collect evidence phase)
and then back down from the root (the distribute evidence phase), in a manner analogous to
forwards-backwards on chains.
708 Chapter20. Exactinferenceforgraphicalmodels
s1s2s
u1u2utroot
v−
st
(a)s1s2s
u1u2utrootv+
st
(b)
Figure 20.1 Message passing on a tree. (a) Collect-to-root phase. (b) Distribute-from-root phase.
To explain the process in more detail, consider the example in Figure 20.1. Suppose we want
to compute the belief state at node t. We will initially condition the belief only on evidence that
is at or below tin the graph, i.e., we want to compute bel−
t(xt)/definesp(xt|v−
t). We will call this a
“bottom-up belief state”. Suppose, by induction, that we have computed “messages” from t’s two
children, summarizing what they think tshould know about the evidence in their subtrees, i.e.,
we have computed m−
s→t(xt)=p(xt|v−
st),w h e r ev−
stis all the evidence on the downstream
side of the s−tedge (see Figure 20.1(a)), and similarly we have computed mu→t(xt). Then we
can compute the bottom-up belief state at tas follows:
bel−
t(xt)/definesp(xt|v−
t)=1
Ztψt(xt)/productdisplay
c∈ch(t)m−
c→t(xt) (20.2)
whereψt(xt)∝p(xt|vt)is the local evidence for node t, andZtis the local normalization
constant. In words, we multiply all the incoming messages from our children, as well as the
incoming message from our local evidence, and then normalize.
We have explained how to compute the bottom-up belief states from the bottom-up messages.
How do we compute the messages themselves? Consider computing m−
s→t(xt),w h e r esis one
oft’s children. Assume, by recursion, that we have computed bel−
s(xs)=p(xs|v−
s). Then we
can compute the message as follows:
m−
s→t(xt)=/summationdisplay
xsψst(xs,xt)bel−
s(xs) (20.3)
Essentially we convert beliefs about xsinto beliefs about xtby using the edge potential ψst.
We continue in this way up the tree until we reach the root. Once at the root, we have “seen”
all the evidence in the tree, so we can compute our local belief state at the root using
belr(xr)/definesp(xr|v)=p(xt|v−
r)∝ψr(xr)/productdisplay
c∈ch(r)m−
c→r(xr) (20.4)
This completes the end of the upwards pass, which is analogous to the forwards pass in an
HMM. As a “side effect”, we can compute the probability of the evidence by collecting the
20.2. Beliefpropagationfortrees 709
normalization constants:
p(v)=/productdisplay
tZt (20.5)
We can now pass messages down from the root. For example, consider node s, with parent t,
as shown in Figure 20.1(b). To compute the belief state for s, we need to combine the bottom-up
belief for stogether with a top-down message from t, which summarizes all the information in
the rest of the graph, m+
t→s(xs)/definesp(xt|v+
st),w h e r ev+
stis all the evidence on the upstream
(root) side of the s−tedge, as shown in Figure 20.1(b). We then have
bels(xs)/definesp(xs|v)∝bel−
s(xs)/productdisplay
t∈pa(s)m+
t→s(xt) (20.6)
How do we compute these downward messages? For example, consider the message from t
tos. Suppose t’s parent is r, andt’s children are sandu, as shown in Figure 20.1(b). We want
to include in m+t→sall the information that thas received, except for the information that s
sent it:
m+t→s(xs)/definesp(xs|v+
st)=/summationdisplay
xtψst(xs,xt)belt(xt)
m−s→t(xt)(20.7)
Rather than dividing out the message sent up to t, we can plug in the equation of beltto get
m+t→s(xs)=/summationdisplay
xtψst(xs,xt)ψt(xt)/productdisplay
c∈ch(t),c/negationslash=sm−c→t(xt)/productdisplay
p∈pa(t)m+p→t(xt) (20.8)
In other words, we multiply together all the messages coming into tfrom all nodes except for
the recipient s, combine together, and then pass through the edge potential ψst. In the case of
a chain,tonly has one child sand one parent p, so the above simpliﬁes to
m+t→s(xs)=/summationdisplay
xtψst(xs,xt)ψt(xt)m+p→t(xt) (20.9)
The version of BP in which we use division is called belief updating, and the version in
which we multiply all-but-one of the messages is called sum-product. The belief updating
version is analogous to how we formulated the Kalman smoother in Section 18.3.2: the top-
down messages depend on the bottom-up messages. This means they can be interpreted asconditional posterior probabilities. The sum-product version is analogous to how we formulatedthe backwards algorithm in Section 17.4.3: the top-down messages are completely independentof the bottom-up messages, which means they can only be interpreted as conditional likelihoods.See Section 18.3.2.3 for a more detailed discussion of this subtle difference.
20.2.2 Parallel protocol
So far, we have presented a serial version of the algorithm, in which we send messages upto the root and back. This is the optimal approach for a tree, and is a natural extension offorwards-backwards on chains. However, as a prelude to handling general graphs with loops, wenow consider a parallel version of BP. This gives equivalent results to the serial version but isless efficient when implemented on a serial machine.
710 Chapter20. Exactinferenceforgraphicalmodels
The basic idea is that all nodes receive messages from their neighbors in parallel, they then
updates their belief states, and ﬁnally they send new messages back out to their neighbors.
This process repeats until convergence. This kind of computing architecture is called a systolic
array, due to its resemblance to a beating heart.
More precisely, we initialize all messages to the all 1’s vector. Then, in parallel, each node
absorbs messages from all its neighbors using
bels(xs)∝ψs(xs)/productdisplay
t∈nbrsmt→s(xs) (20.10)
Then, in parallel, each node sends messages to each of its neighbors:
ms→t(xt)=/summationdisplay
xs⎛
⎝ψs(xs)ψst(xs,xt)/productdisplay
u∈nbrs\tmu→s(xs)⎞⎠ (20.11)
Them
s→tmessage is computed by multiplying together all incoming messages, except the one
sent by the recipient, and then passing through the ψstpotential.
At iteration Tof the algorithm, bels(xs)represents the posterior belief of xsconditioned on
the evidence that is Tsteps away in the graph. After D(G)steps, where D(G)is thediameter
of the graph (the largest distance between any two pairs of nodes), every node has obtained
information from all the other nodes. Its local belief state is then the correct posterior marginal.Since the diameter of a tree is at most |V|−1, the algorithm converges in a linear number of
steps.
We can actually derive the up-down version of the algorithm by imposing the condition that
a node can only send a message once it has received messages from all its other neighbors.This means we must start with the leaf nodes, which only have one neighbor. The messagesthen propagate up to the root and back. We can also update the nodes in a random order.The only requirement is that each node get updated D(G)times. This is just enough time for
information to spread throughout the whole tree.
Similar parallel, distributed algorithms for solving linear systems of equations are discussed
in (Bertsekas 1997). In particular, the Gauss-Seidel algorithm is analogous to the serial up-downversion of BP, and the Jacobi algorithm is analogous to the parallel version of BP.
20.2.3 Gaussian BP *
Now consider the case where p(x|v)is jointly Gaussian, so it can be represented as a Gaussian
pairwise MRF, as in Section 19.4.4. We now present the belief propagation algorithm for thisclass of models, follow the presentation of (Bickson 2009) (see also (Malioutov et al. 2006)). Wewill assume the following node and edge potentials:
ψ
t(xt)=e x p (−1
2Attx2
t+btxt) (20.12)
ψst(xs,xt)=e x p (−1
2xsAstxt) (20.13)
so the overall model has the form
p(x|v)∝exp(−1
2xTAx+bTx) (20.14)
20.2. Beliefpropagationfortrees 711
This is the information form of the MVN (see Exercise 9.2), where Ais the precision matrix.
Note that by completing the square, the local evidence can be rewritten as a Gaussian:
ψt(xt)∝N(bt/Att,A−1
tt)/definesN(mt,/lscript−1
t) (20.15)
Below we describe how to use BP to compute the posterior node marginals,
p(xt|v)=N(μt,λ−1
t) (20.16)
If the graph is a tree, the method is exact. If the graph is loopy, the posterior means may still
be exact, but the posterior variances are often too small (Weiss and Freeman 1999).
Although the precision matrix Ais often sparse, computing the posterior mean requires
inverting it, since μ=A−1b. BP provides a way to exploit graph structure to perform this
computation in O(D)time instead of O(D3). This is related to various methods from linear
algebra, as discussed in (Bickson 2009).
Since the model is jointly Gaussian, all marginals and all messages will be Gaussian. The
key operations we need are to multiply together two Gaussian factors, and to marginalize out avariable from a joint Gaussian factor.
For multiplication, we can use the fact that the product of two Gaussians is Gaussian:
N(x|μ
1,λ−1
1)×N(x|μ2,λ−1
2)=CN(x|μ,λ−1) (20.17)
λ=λ1+λ2 (20.18)
μ=λ−1(μ1λ1+μ2λ2) (20.19)
where
C=/radicalbigg
λ
λ1λ2exp/parenleftbigg1
2(λ1μ2
1(λ−1λ1−1)+λ2μ22(λ−1λ2−1)+2λ−1λ1λ2μ1μ2)/parenrightbigg
(20.20)
See Exercise 20.2 for the proof.
For marginalization, we have the following result:
/integraldisplay
exp(−ax2+bx)dx=/radicalbig
π/aexp(b2/4a) (20.21)
which follows from the normalization constant of a Gaussian (Exercise 2.11).
We now have all the pieces we need. In particular, let the message ms→t(xt)be a Gaussian
with mean μstand precision λst. From Equation 20.10, the belief at node sis given by the
product of incoming messages times the local evidence (Equation 20.15) and hence
bels(xs)=ψ s(xs)/productdisplay
t∈nbr(s)mts(xs)=N(xs|μs,λ−1
s) (20.22)
λs=/lscripts+/summationdisplay
t∈nbr(s)λts (20.23)
μs=λ−1
s⎛
⎝/lscriptsms+/summationdisplay
t∈nbr(s)λtsμts⎞⎠ (20.24)
712 Chapter20. Exactinferenceforgraphicalmodels
To compute the messages themselves, we use Equation 20.11, which is given by
ms→t(xt)=/integraldisplay
xs⎛
⎝ψst(xs,xt)ψs(xs)/productdisplay
u∈nbrs\tmu→s(xs)⎞⎠dx
s (20.25)
=/integraldisplay
xsψst(xs,xt)fs\t(xs)dxs (20.26)
wherefs\t(xs)is the product of the local evidence and all incoming messages excluding the
message from t:
fs\t(xs)/definesψs(xs)/productdisplay
u∈nbrs\tmu→s(xs) (20.27)
=N(xs|μs\t,λ−1
s\t) (20.28)
λs\t/defines/lscripts+/summationdisplay
u∈nbr(s)\tλus (20.29)
μs\t/definesλ−1
s\t⎛⎝/lscript
sms+/summationdisplay
u∈nbr(s)\tλusμus⎞⎠ (20.30)
Returning to Equation 20.26 we have
m
s→t(xt)=/integraldisplay
xsexp(−xsAstxt)/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
ψst(xs,xt)exp(−λs\t/2(xs−μs\t)2)/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
fs\t(xs)dxs (20.31)
=/integraldisplay
xsexp/parenleftbig
(−λs\tx2
s/2)+(λs\tμs\t−Astxt)xs/parenrightbig
dxs+const (20.32)
∝exp/parenleftbig
(λs\tμs\t−Astxt)2/(2λs\t)/parenrightbig
(20.33)
∝N(μst,λ−1
st) (20.34)
λst=A2st/λs\t (20.35)
μst=Astμs\t/λst (20.36)
One can generalize these equations to the case where each node is a vector, and the messages
become small MVNs instead of scalar Gaussians (Alag and Agogino 1996). If we apply the
resulting algorithm to a linear dynamical system, we recover the Kalman smoothing algorithmof Section 18.3.2.
To perform message passing in models with non-Gaussian potentials, one can use sampling
methods to approximate the relevant integrals. This is called non-parametric BP (Sudderth
et al. 2003; Isard 2003; Sudderth et al. 2010).
20.2.4 Other BP variants *
In this section, we brieﬂy discuss several variants of the main algorithm.
713
xt xt+1
vt vt+1ψt,t+1
ψt ψt+1ft βt+1
Figure 20.2 Illustration of how to compute the two-slice distribution for an HMM. The ψtandψt+1
terms are the local evidence messages from the visible nodes vt,vt+1to the hidde nodes xt,xt+1
respectively; ftis the forwards message from xt−1andβt+1is the backwards message from xt+2.
20.2.4.1 Max-product algorithm
It is possible to devise a max-product version of the BP algorithm, by replacing the/summationtextoperator
with themaxoperator. We can then compute the local MAP marginal of each node. However,
if there are ties, this might not be globally consistent, as discussed in Section 17.4.4. Fortunately,
we can generalize the Viterbi algorithm to trees, where we use max and argmax in the collect-to-root phase, and perform traceback in the distribute-from-root phase. See (Dawid 1992) fordetails.
20.2.4.2 Sampling from a tree
It is possible to draw samples from a tree structured model by generalizing the forwards ﬁltering/ backwards sampling algorithm discussed in Section 17.4.5. See (Dawid 1992) for details.
20.2.4.3 Computing posteriors on sets of variables
In Section 17.4.3.2, we explained how to compute the “two-slice” distribution ξ
t,t+1(i,j)=
p(xt=i,xt+1=j|v)in an HMM, namely by using
ξt,t+1(i,j)=α t(i)ψt+1(j)βt+1(j)ψt,t+1(i,j) (20.37)
Sinceαt(i)∝ψt(i)ft(i),w h e r eft=p(xt|v1:t−1)is the forwards message, we can think of
this as sending messages ftandψtintoxt,βt+1andφt+1intoxt+1, and then combining
them with the Ψmatrix, as shown in Figure 20.2. This is like treating xtandxt+1as a single
“mega node”, and then multiplying all the incoming messages as well as all the local factors(here,ψ
t,t+1).20.2. Beliefpropagationfortrees
714 Chapter20. Exactinferenceforgraphicalmodels
Coherence
Diﬃculty
GradeIntelligence
SAT
Letter
HappyJob
(a)Coherence
Diﬃculty
GradeIntelligence
SAT
Letter
HappyJob
(b)
Figure 20.3 Left: The “student” DGM. Right: the equivalent UGM. We add moralization arcs D-I, G-J and
L-S. Based on Figure 9.8 of (Koller and Friedman 2009).
20.3 The variable elimination algorithm
We have seen how to use BP to compute exact marginals on chains and trees. In this section,
we discuss an algorithm to compute p(xq|xv)for any kind of graph.
We will explain the algorithm by example. Consider the DGM in Figure 20.3(a). This model,
from (Koller and Friedman 2009), is a hypothetical model relating various variables pertaining toa typical student. The corresponding joint has the following form:
P(C,D,I,G,S,L,J,H ) (20.38)
=P(C)P(D|C)P(I)P(G|I,D)P(S|I)P(L|G)P(J|L,S)P(H|G,J) (20.39)
Note that the forms of the CPDs do not matter, since all our calculations will be symbolic.However, for illustration purposes, we will assume all variables are binary.
Before proceeding, we convert our model to undirected form. This is not required, but it
makes for a more uniﬁed presentation, since the resulting method can then be applied to bothDGMs and UGMs (and, as we will see in Section 20.3.1, to a variety of other problems thathave nothing to do with graphical models). Since the computational complexity of inference inDGMs and UGMs is, generally speaking, the same, nothing is lost in this transformation from acomputational point of view.
1
To convert the DGM to a UGM, we simply deﬁne a potential or factor for every CPD, yielding
p(C,D,I,G,S,L,J,H ) (20.40)
=ψC(C)ψD(D,C)ψI(I)ψG(G,I,D)ψS(S,I)ψL(L,G)ψJ(J,L,S)ψH(H,G,J)(20.41)
1. There are a few “tricks” one can exploit in the directed case that cannot easily be exploited in the undirected case.
One important example is barren node removal. To explain this, consider a naive Bayes classiﬁer, as in Figure 10.2.
Suppose we want to infer yand we observe x1andx2, but not x3andx4. It is clear that we can safely remove
x3andx4, since/summationtext
x3p(x3|y)=1, and similarly for x4. In general, once we have removed hidden leaves, we can
apply this process recursively. Since potential functions do not necessary sum to one, we cannot use this trick in theundirected case. See (Koller and Friedman 2009) for a variety of other speedup tricks.
20.3. Thevariableeliminationalgorithm 715
Since all the potentials are locally normalized, since they are CPDs, there is no need for a
global normalization constant, so Z=1. The corresponding undirected graph is shown in
Figure 20.3(b). Note that it has more edges than the DAG. In particular, any “unmarried” nodes
that share a child must get “married”, by adding an edge between them; this process is knownasmoralization. Only then can the arrows be dropped. In this example, we added D-I, G-J, and
L-S moralization arcs. The reason this operation is required is to ensure that the CI propertiesof the UGM match those of the DGM, as explained in Section 19.2.2. It also ensures there is aclique that can “store” the CPDs of each family.
Now suppose we want to compute p(J=1 ), the marginal probability that a person will get a
job. Since we have 8 binary variables, we could simply enumerate over all possible assignmentsto all the variables (except for J), adding up the probability of each joint instantiation:
p(J)=/summationdisplay
L/summationdisplay
S/summationdisplay
G/summationdisplay
H/summationdisplay
I/summationdisplay
D/summationdisplay
Cp(C,D,I,G,S,L,J,H ) (20.42)
However, this would take O(27)time. We can be smarter by pushing sums inside products.
This is the key idea behind the variable elimination algorithm (Zhang and Poole 1996), also
calledbucket elimination (Dechter 1996), or, in the context of genetic pedigree trees, the
peeling algorithm (Cannings et al. 1978). In our example, we get
p(J)=/summationdisplay
L,S,G,H,I,D,Cp(C,D,I,G,S,L,J,H )
=/summationdisplay
L,S,G,H,I,D,CψC(C)ψD(D,C)ψI(I)ψG(G,I,D)ψS(S,I)ψL(L,G)
×ψJ(J,L,S)ψH(H,G,J)
=/summationdisplay
L,SψJ(J,L,S)/summationdisplay
GψL(L,G)/summationdisplay
HψH(H,G,J)/summationdisplay
IψS(S,I)ψI(I)
×/summationdisplay
DψG(G,I,D)/summationdisplay
CψC(C)ψD(D,C)
We now evaluate this expression, working right to left as shown in Table 20.1. First we multiplytogether all the terms in the scope of the/summationtext
Coperator to create the temporary factor
τ/prime
1(C,D)=ψC(C)ψD(D,C) (20.43)
Then we marginalize out Cto get the new factor
τ1(D)=/summationdisplay
Cτ/prime
1(C,D) (20.44)
Next we multiply together all the terms in the scope of the/summationtext
Doperator and then marginalize
out to create
τ/prime
2(G,I,D)=ψ G(G,I,D)τ1(D) (20.45)
τ2(G,I)=/summationdisplay
Dτ/prime
2(G,I,D) (20.46)
716 Chapter20. Exactinferenceforgraphicalmodels
/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
GψL(L,G)/summationdisplay
HψH(H,G,J )/summationdisplay
IψS(S,I)ψI(I)/summationdisplay
DψG(G,I,D)/summationdisplay
CψC(C)ψD(D,C)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ1(D)
/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
GψL(L,G)/summationdisplay
HψH(H,G,J )/summationdisplay
IψS(S,I)ψI(I)/summationdisplay
DψG(G,I,D)τ1(D)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ2(G,I)
/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
GψL(L,G)/summationdisplay
HψH(H,G,J )/summationdisplay
IψS(S,I)ψI(I)τ2(G,I)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ3(G,S)
/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
GψL(L,G)/summationdisplay
HψH(H,G,J )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ4(G,J)τ3(G,S)
/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
GψL(L,G)τ 4(G,J)τ3(G,S)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ5(J,L,S)
/summationdisplay
L/summationdisplay
SψJ(J,L,S)τ5(J,L,S)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ6(J,L)
/summationdisplay
Lτ6(J,L)
/bracehtipupleft/bracehtipdownright/bracehtipdownleft /bracehtipupright
τ7(J)
Table 20.1 Eliminating variables from Figure 20.3 in the order C,D,I,H,G,S,L to compute P(J).
Next we multiply together all the terms in the scope of the/summationtext
Ioperator and then marginalize
out to create
τ/prime
3(G,I,S)=ψ S(S,I)ψI(I)τ2(G,I) (20.47)
τ3(G,S)=/summationdisplay
Iτ/prime
3(G,I,S) (20.48)
And so on.
The above technique can be used to compute any marginal of interest, such as p(J)o r
p(J,H). To compute a conditional, we can take a ratio of two marginals, where the visible
variables have been clamped to their known values (and hence don’t need to be summed over).
For example,
p(J=j|I=1,H=0 )=p(J=j,I=1,H=0 )/summationtext
j/primep(J=j/prime,I=1,H=0 )(20.49)
In general, we can write
p(xq|xv)=p(xq,xv)
p(xv)=/summationtext
xhp(xh,xq,xv)/summationtext
xh/summationtext
x/primeqp(xh,x/primeq,xv)(20.50)
20.3. Thevariableeliminationalgorithm 717
The normalization constant in the denominator, p(xv), is called the probability of the evi-
dence.
SeevariableElimination for a simple Matlab implementation of this algorithm, which
works for arbitrary graphs, and arbitrary discrete factors. But before you go too crazy, please
read Section 20.3.2, which points out that VE can be exponentially slow in the worst case.
20.3.1 The generalized distributive law *
Abstractly, VE can be thought of as computing the following expression:
p(xq|xv)∝/summationdisplay
x/productdisplay
cψc(xc) (20.51)
It is understood that the visible variables xvare clamped, and not summed over. VE uses
non-serial dynamic programming (Bertele and Brioschi 1972), caching intermediate results to
avoid redundant computation.
However, there are other tasks we might like to solve for any given graphical model. For
example, we might want the MAP estimate:
x∗=a r g m a x
x/productdisplay
cψc(xc) (20.52)
Fortunately, essentially the same algorithm can also be used to solve this task: we just replacesum with max. (We also need a traceback step, which actually recovers the argmax, as opposed
to just the value of max; these details are explained in Section 17.4.4.)
In general, VE can be applied to any commutative semi-ring. This is a set K, together with
two binary operations called “+” and “× ”, which satisfy the following three axioms:
1. The operation “+” is associative and commutative, and there is an additive identity element
called “0” such that k+0=kfor allk∈K.
2. The operation “× ” is associative and commutative, and there is a multiplicative identity
element called “1” such that k×1=kfor allk∈K.
3. Thedistributive law holds, i.e.,
(a×b)+(a×c)=a×(b+c) (20.53)
for all triples (a,b,c)fromK.
Thisframeworkcoversanextremelywiderangeofimportantapplications, includingconstraint
satisfaction problems (Bistarelli et al. 1997; Dechter 2003), the fast Fourier transform (Aji andMcEliece 2000), etc. See Table 20.2 for some examples.
20.3.2 Computational complexity of VE
The running time of VE is clearly exponential in the size of the largest factor, since we have sumover all of the corresponding variables. Some of the factors come from the original model (andare thus unavoidable), but new factors are created in the process of summing out. For example,
718 Chapter20. Exactinferenceforgraphicalmodels
Domain + × Name
[0,∞)( + ,0) (×,1)sum-product
[0,∞)( m a x ,0) (×,1)max-product
(−∞,∞]( m i n ,∞)( + ,0)min-sum
{T,F}(∨,F)(∧,T)Boolean satisﬁability
Table 20.2 Some commutative semirings.
/summationdisplay
D/summationdisplay
CψD(D,C)/summationdisplay
H/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
IψI(I)ψS(S,I)/summationdisplay
GψG(G,I,D)ψL(L,)ψH(H,G,J )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ1(I,D,L,J,H )
/summationdisplay
D/summationdisplay
CψD(D,C)/summationdisplay
H/summationdisplay
L/summationdisplay
SψJ(J,L,S)/summationdisplay
IψI(I)ψS(S,I)τ1(I,D,L,J,H )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ2(D,L,S,J,H )
/summationdisplay
D/summationdisplay
CψD(D,C)/summationdisplay
H/summationdisplay
L/summationdisplay
SψJ(J,L,S)τ2(D,L,S,J,H )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ3(D,L,J,H )
/summationdisplay
D/summationdisplay
CψD(D,C)/summationdisplay
H/summationdisplay
Lτ3(D,L,J,H )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ4(D,J,H )
/summationdisplay
D/summationdisplay
CψD(D,C)/summationdisplay
Hτ4(D,J,H )
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ5(D,J)
/summationdisplay
D/summationdisplay
CψD(D,C)τ5(D,J)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ6(D,J)
/summationdisplay
Dτ6(D,J)
/bracehtipupleft /bracehtipdownright/bracehtipdownleft /bracehtipupright
τ7(J)
Table 20.3 Eliminating variables from Figure 20.3 in the order G,I,S,L,H,C,D .
in Equation 20.47, we created a factor involving G, I and S; but these nodes were not originally
present together in any factor.
The order in which we perform the summation is known as the elimination order. This
can have a large impact on the size of the intermediate factors that are created. For example,consider the ordering in Table 20.1: the largest created factor (beyond the original ones in themodel) has size 3, corresponding to τ
5(J,L,S). Now consider the ordering in Table 20.3: now
the largest factors are τ1(I,D,L,J,H )andτ2(D,L,S,J,H ), which are much bigger.
We can determine the size of the largest factor graphically, without worrying about the actual
numerical values of the factors. When we eliminate a variable Xt, we connect it to all variables
20.3. Thevariableeliminationalgorithm 719
Coherence
Diﬃculty
GradeIntelligence
SAT
Letter
HappyJob
(a)Coherence
Diﬃculty
GradeIntelligence
SAT
Letter
HappyJob
(b)Coherence
Diﬃculty
GradeIntelligence
SAT
Letter
HappyJob
(c)
Figure 20.4 Example of the elimination process, in the order C,D,I, etc. When we eliminate I(ﬁgure
c), we add a ﬁll-in edge between GandS, since they are not connected. Based on Figure 9.10 of (Koller
and Friedman 2009).
that share a factor with Xt(to reﬂect the new temporary factor τ/prime
t). The edges created by this
process are called ﬁll-in edges. For example, Figure 20.4 shows the ﬁll-in edges introduced
when we eliminate in the order C,D,I,... . The ﬁrst two steps do not introduce any ﬁll-ins,
but when we eliminate I, we connect GandS, since they co-occur in Equation 20.48.
LetG(≺)be the (undirected) graph induced by applying variable elimination to Gusing
elimination ordering ≺. The temporary factors generated by VE correspond to maximal cliques
in the graph G(≺). For example, with ordering (C,D,I,H,G,S,L ), the maximal cliques are
as follows:
{C,D},{D,I,G},{G,L,S,J},{G,J,H},{G,I,S} (20.54)
It is clear that the time complexity of VE is
/productdisplay
c∈C(G(≺))K|c|(20.55)
whereCare the cliques that are created, |c|is the size of the clique c, and we assume for
notational simplicity that all the variables have Kstates each.
Let us deﬁne the induced width of a graph given elimination ordering ≺, denoted w(≺),a s
the size of the largest factor (i.e., the largest clique in the induced graph ) minus 1. Then it is
easy to see that the complexity of VE with ordering ≺isO(Kw(≺)+1).
Obviously we would like to minimize the running time, and hence the induced width. Let us
deﬁne the treewidth of a graph as the minimal induced width.
w/definesmin
≺max
c∈G(≺)|c|−1 (20.56)
Then clearly the best possible running time for VE is O(DKw+1). Unfortunately, one can show
that for arbitrary graphs, ﬁnding an elimination ordering ≺that minimizes w(≺)is NP-hard
(Arnborg et al. 1987). In practice greedy search techniques are used to ﬁnd reasonable orderings(Kjaerulff 1990), although people have tried other heuristic methods for discrete optimization,
720 Chapter20. Exactinferenceforgraphicalmodels
such as genetic algorithms (Larranaga et al. 1997). It is also possible to derive approximate
algorithms with provable performance guarantees (Amir 2010).
In some cases, the optimal elimination ordering is clear. For example, for chains, we should
work forwards or backwards in time. For trees, we should work from the leaves to the root.These orderings do not introduce any ﬁll-in edges, so w=1. Consequently, inference in chains
and trees takes O(VK
2)time. This is one reason why Markov chains and Markov trees are so
widely used.
Unfortunately, for other graphs, the treewidth is large. For example, for an m×n2d lattice,
the treewidth is O(min{m,n}) (Lipton and Tarjan 1979). So VE on a 100×100Ising model
would take O(2100)time.
Of course, just because VE is slow doesn’t mean that there isn’t some smarter algorithm out
there. We discuss this issue in Section 20.5.
20.3.3 A weakness of VE
The main disadvantage of the variable elimination algorithm (apart from its exponential depen-dence on treewidth) is that it is inefficient if we want to compute multiple queries conditionedon the same evidence. For example, consider computing all the marginals in a chain-structuredgraphical model such as an HMM. We can easily compute the ﬁnal marginal p(x
T|v)by elimi-
nating all the nodes x1toxT−1in order. This is equivalent to the forwards algorithm, and takes
O(K2T)time. But now suppose we want to compute p(xT−1|v). We have to run VE again, at
a cost of O(K2T)time. So the total cost to compute all the marginals is O(K2T2). However,
we know that we can solve this problem in O(K2T)using forwards-backwards. The difference
is that FB caches the messages computed on the forwards pass, so it can reuse them later.
The same argument holds for BP on trees. For example, consider the 4-node tree in Fig-
ure 20.5. We can compute p(x1|v)by eliminating x2:4; this is equivalent to sending messages
up tox1(the messages correspond to the τfactors created by VE). Similarly we can compute
p(x2|v),p(x3|v)and then p(x4|v). We see that some of the messages used to compute the
marginal on one node can be re-used to compute the marginals on the other nodes. By storingthe messages for later re-use, we can compute all the marginals in O(DK
2)time. This is what
the up-down (collect-distribute) algorithm on trees does.
The question is: how can we combine the efficiency of BP on trees with the generality of VE?
The answer is given in Section 20.4.
20.4 The junction tree algorithm *
Thejunction tree algorithm orJTAgeneralizes BP from trees to arbitrary graphs. We sketch
the basic idea below; for details, see e.g., (Koller and Friedman 2009).
20.4.1 Creating a junction tree
The basic idea behind the JTA is this. We ﬁrst run the VE algorithm “symbolically”, adding ﬁll-inedges as we go, according to a given elimination ordering. The resulting graph will be a chordal
graph, which means that every undirected cycle X
1−X2···Xk−X1of length k≥4has a
20.4. Thejunctiontreealgorithm* 721
;

;

;
;
;

;

;
;

;

;

;
;
;

;

;
;
D E
P[
P[
P[P[P[
P[P[
P[P[
P[P[
P[P[
P[ P[
Figure 20.5 Sending multiple messages along a tree. (a) X1is root. (b) X2is root. (c) X4is root. (d) All
of the messages needed to compute all singleton marginals. Based on Figure 4.3 of (Jordan 2007).




(a)



(b)
Figure 20.6 Left: this graph is not triangulated, despite appearances, since it contains a chordless 5-cycle
1-2-3-4-5-1. Right: one possible triangulation, by adding the 1-3 and 1-4 ﬁll-in edges. Based on (Armstrong
2005, p46)
722 Chapter20. Exactinferenceforgraphicalmodels
chord, i.e., an edge connects Xi,Xjfor all non-adjacent nodes i,jin the cycle.2
Having created a chordal graph, we can extract its maximal cliques. In general, ﬁnding max
cliques is computationally hard, but it turns out that it can be done efficiently from this special
kind of graph. Figure 20.7(b) gives an example, where the max cliques are as follows:
{C,D},{G,I,D},{G,S,I},{G,J,S,L},{H,G,J} (20.57)
Note that if the original graphical model was already chordal, the elimination process would notadd any extra ﬁll-in edges (assuming the optimal elimination ordering was used). We call suchmodelsdecomposable, since they break into little pieces deﬁned by the cliques.
It turns out that the cliques of a chordal graph can be arranged into a special kind of
tree known as a junction tree. This enjoys the running intersection property (RIP), which
means that any subset of nodes containing a given variable forms a connected component.Figure 20.7(c) gives an example of such a tree. We see that the node Ioccurs in two adjacent
tree nodes, so they can share information about this variable. A similar situation holds for allthe other variables.
One can show that if a tree that satisﬁes the running intersection property, then applying
BP to this tree (as we explain below) will return the exact values of p(x
c|v)for each node c
in the tree (i.e., clique in the induced graph). From this, we can easily extract the node andedge marginals, p(x
t|v)andp(xs,xt|v)from the original model, by marginalizing the clique
distributions.3
20.4.2 Message passing on a junction tree
Having constructed a junction tree, we can use it for inference. The process is very similarto belief propagation on a tree. As in Section 20.2, there are two versions: the sum-productform, also known as the Shafer-Shenoy algorithm, named after (Shafer and Shenoy 1990); and
the belief updating form (which involves division), also known as the Hugin(named after a
company) or the Lauritzen-Spiegelhalter algorithm (named after (Lauritzen and Spiegelhalter
1988)). See (Lepar and Shenoy 1998) for a detailed comparison of these methods. Below wesketch how the Hugin algorithm works.
We assume the original model has the following form:
p(x)=1
Z/productdisplay
c∈C(G)ψc(xc) (20.58)
whereC(G)are the cliques of the original graph. On the other hand, the tree deﬁnes a
distribution of the following form:
p(x)=/producttext
c∈C(T)ψc(xc)
/producttext
s∈S(T)ψs(xs)(20.59)
2. The largest loop in a chordal graph is length 3. Consequently chordal graphs are sometimes called triangulated.
However, it is not enough for the graph to look like it is made of little triangles. For example, Figure 20.6(a) is not
chordal, even though it is made of little triangles, since it contains the chordless 5-cycle 1-2-3-4-5-1.
3. If we want the joint distribution of some variables that are not in the same clique — a so-called out-of-clique
query— we can adapt the technique described in Section 20.2.4.3 as follows: create a mega node containing the query
variables and any other nuisance variables that lie on the path between them, multiply in messages onto the boundary
of the mega node, and then marginalize out the internal nuisance variables. This internal marginalization may require
the use of BP or VE. See (Koller and Friedman 2009) for details.
20.4. Thejunctiontreealgorithm* 723
Grade
Letter
Job
HappyCoherence
SAT
G ,J ,S ,L H ,G ,J G, S, I G, I, D C, D
G, J G, S G, I DIntelligence Difﬁculty
Grade
Letter
Job
HappyCoherence
SATIntelligence Difﬁculty
(a) (b)
(c)
Figure 20.7 (a) The student graph with ﬁll-in edges added. (b) The maximal cliques. (c) The junction
tree. An edge between nodes sandtis labeled by the intersection of the sets on nodes sandt; this is
called the separating set. From Figure 9.11 of (Koller and Friedman 2009). Used with kind permission of
Daphne Koller.
whereC(T)are the nodes of the junction tree (which are the cliques of the chordal graph), and
S(T)are the separators of the tree. To make these equal, we initialize by deﬁning ψs=1for
all separators and ψc=1for all cliques. Then, for each clique in the original model, c∈C(G),
we ﬁnd a clique in the tree c/prime∈C(T)which contains it, c/prime⊇c. We then multiply ψcontoψc/prime
by computing ψc/prime=ψc/primeψc. After doing this for all the cliques in the original graph, we have
/productdisplay
c∈C(T)ψc(xc)=/productdisplay
c∈C(G)ψc(xc) (20.60)
As in Section 20.2.1, we now send messages from the leaves to the root and back, as sketched
in Figure 20.1. In the upwards pass, also known as the collect-to-root phase, node isends to
its parent jthe following message:
mi→j(Sij)=/summationdisplay
Ci\Sijψi(Ci) (20.61)
That is, we marginalize out the variables that node i“knows about” which are irrelevant to j,
and then we send what is left over. Once a node has received messages from all its children, it
updates its belief state using
ψi(Ci)∝ψi(Ci)/productdisplay
j∈chimj→i(Sij) (20.62)
724 Chapter20. Exactinferenceforgraphicalmodels
At the root, ψr(Cr)represents p(xCr|v), which is the posterior over the nodes in clique
Crconditioned on all the evidence. Its normalization constant is p(v)/Z0,w h e r eZ0is the
normalization constant for the unconditional prior, p(x).( W eh a v e Z0=1if the original model
was a DGM.)
In the downwards pass, also known as the distribute-from-root phase, node isends to its
childrenjthe following message:
mi→j(Sij)=/summationtext
Ci\Sijψi(Ci)
mj→i(Sij)(20.63)
We divide out by what jsent toito avoid double counting the evidence. This requires that we
store the messages from the upwards pass. Once a node has received a top-down message from
its parent, it can compute its ﬁnal belief state using
ψj(Cj)∝ψj(Cj)mi→j(Sij) (20.64)
An equivalent way to present this algorithm is based on storing the messages inside the
separator potentials. So on the way up, sending from itojwe compute the separator potential
ψ∗
ij(Sij)=/summationdisplay
Ci\Sijψi(Ci) (20.65)
and then update the recipient potential:
ψ∗
j(Cj)∝ψj(Cj)ψ∗
ij(Sij)
ψij(Sij)(20.66)
(Recall that we initialize ψij(Sij)=1.) This is sometimes called passing a ﬂow fromitoj.
On the way down, from itoj, we compute the separator potential
ψ∗∗
ij(Sij)=/summationdisplay
Ci\Sijψ∗
i(Ci) (20.67)
and then update the recipient potential:
ψ∗∗
j(Cj)∝ψ∗
j(Cj)ψ∗∗
ij(Sij)
ψ∗
ij(Sij)(20.68)
This process is known as junction tree calibration. See Figure 20.1 for an illustration. Its
correctness follows from the fact that each edge partitions the evidence into two distinct groups,plus the fact that the tree satisﬁes RIP, which ensures that no information is lost by onlyperforming local computations.
20.4.2.1 Example: jtree algorithm on a chain
It is interesting to see what happens if we apply this process to a chain structured graph such asan HMM. A detailed discussion can be found in (Smyth et al. 1997), but the basic idea is this. Thecliques are the edges, and the separators are the nodes, as shown in Figure 20.8. We initializethe potentials as follows: we set ψ
s=1for all the separators, we set ψc(xt−1,xt)=p(xt|xt−1)
for clique c=(Xt−1,Xt), and we set ψc(xt,yt)=p(yt|xt)for clique c=(Xt,Yt).
20.4. Thejunctiontreealgorithm* 725
X1X2
X1X2
X1Y1X2Y2X2X2X3
X3
X3Y3X3X3X4
X4
X4Y4
Figure 20.8 The junction tree derived from an HMM/SSM of length T=4.
Next we send messages from left to right. Consider clique (Xt−1,Xt)with potential
p(Xt|Xt−1). It receives a message from clique (Xt−2,Xt−1)via separator Xt−1of the form/summationtext
xt−2p(Xt−2,Xt−1|v1:t−1)=p(Xt−1|v1:t−1). When combined with the clique potential,
this becomes the two-slice predictive density
p(Xt|Xt−1)p(Xt−1|v1:t−1)=p(Xt−1,Xt|v1:t−1 (20.69)
The clique (Xt−1,Xt)also receives a message from (Xt,Yt)via separator Xtof the form
p(yt|Xt), which corresponds to its local evidence. When combined with the updated clique
potential, this becomes the two-slice ﬁltered posterior
p(Xt−1,Xt|v1:t−1)p(vt|Xt)=p(Xt−1,Xt|v1:t) (20.70)
Thus the messages in the forwards pass are the ﬁltered belief states αt, and the clique potentials
are the two-slice distributions. In the backwards pass, the messages are the update factorsγt
αt,
whereγt(k)=p(xt=k|v1:T)andαt(k)=p(xt=k|v1:t). By multiplying by this message,
we “swap out” the old αtmessage and “swap in” the new γtmessage. We see that the backwards
pass involves working with posterior beliefs, not conditional likelihoods. See Section 18.3.2.3 for
further discussion of this difference.
20.4.3 Computational complexity of JTA
If all nodes are discrete with Kstates each, it is clear that the JTA takes O(|C|Kw+1)time
and space, where |C|is the number of cliques and wis the treewidth of the graph, i.e., the
size of the largest clique minus 1. Unfortunately, choosing a triangulation so as to minimize thetreewidth is NP-hard, as explained in Section 20.3.2.
The JTA can be modiﬁed to handle the case of Gaussian graphical models. The graph-theoretic
steps remain unchanged. Only the message computation differs. We just need to deﬁne howto multiply, divide, and marginalize Gaussian potential functions. This is most easily done ininformation form. See e.g., (Lauritzen 1992; Murphy 1998; Cemgil 2001) for the details. Thealgorithm takes O(|C|w
3)time and O(|C|w2)space. When applied to a chain structured graph,
the algorithm is equivalent to the Kalman smoother in Section 18.3.2.
726 Chapter20. Exactinferenceforgraphicalmodels
Q1 Qn Q4 Q3 Q2
C1
A1 X Am–2 A2Cm Cm–1 C3 C2
. . .. . .
Figure 20.9 Encoding a 3-SAT problem on nvariables and mclauses as a DGM. The Qsvariables are
binary random variables. The Ctvariables are deterministic functions of the Qs’s, and compute the truth
value of each clause. The Atnodes are a chain of AND gates, to ensure that the CPT for the ﬁnal xnode
has bounded size. The double rings denote nodes with deterministic CPDs. Source: Figure 9.1 of (Koller
and Friedman 2009). Used with kind permission of Daphne Koller.
20.4.4 JTA generalizations *
We have seen how to use the JTA algorithm to compute posterior marginals in a graphical model.
There are several possible generalizations of this algorithm, some of which we mention below.All of these exploit graph decomposition in some form or other. They only differ in terms ofhow they deﬁne/ compute messages and “beliefs”. The key requirement is that the operatorswhich compute messages form a commutative semiring (see Section 20.3.1).
• Computing the MAP estimate. We just replace the sum-product with max-product in the
collect phase, and use traceback in the distribute phase, as in the Viterbi algorithm (Sec-
tion 17.4.4). See (Dawid 1992) for details.
• Computing the N-most probable conﬁgurations (Nilsson 1998).
• Computing posterior samples. The collect pass is the same as usual, but in the distribute
pass, we sample variables given the values higher up in the tree, thus generalizing forwards-
ﬁltering backwards-sampling for HMMs described in Section 17.4.5. See (Dawid 1992) fordetails.
• Solving constraint satisfaction problems (Dechter 2003).
• Solving logical reasoning problems (Amir and McIlraith 2005).
20.5 Computational intractability of exact inference in the worst case
As we saw in Sections 20.3.2 and 20.4.3, VE and JTA take time that is exponential in the treewidth
of a graph. Since the treewidth can be O(number of nodes) in the worst case, this means thesealgorithms can be exponential in the problem size.
Of course, just because VE and JTA are slow doesn’t mean that there isn’t some smarter algo-
rithm out there. Unfortunately, this seems unlikely, since it is easy to show that exact inferenceis NP-hard (Dagum and Luby 1993). The proof is a simple reduction from the satisﬁability prob-
20.5. Computationalintractabilityofexactinferenceintheworstcase 727
Method Restriction Section
Forwards-backwards Chains, D or LG Section 17.4.3
Belief propagation Trees, D or LG Section 20.2
Variable elimination Low treewidth, D or LG, single query Section 20.3
Junction tree algorithm Low treewidth, D or LG Section 20.4
Loopy belief propagation Approximate, D or LG Section 22.2
Convex belief propagation Approximate, D or LG Section 22.4.2
Mean ﬁeld Approximate, C-E Section 21.3
Gibbs sampling Approximate Section 24.2
Table 20.4 Summary of some methods that can be used for inference in graphical models. “D” means
that all the hidden variables must be discrete. “L-G” means that all the factors must be linear-Gaussian.
The term “single query” refers to the restriction that VE only computes one marginal p(xq|xv)at a time.
See Section 20.3.3 for a discussion of this point. “C-E” stands for “conjugate exponential”; this means thatvariational mean ﬁeld only applies to models where the likelihood is in the exponential family, and theprior is conjugate. This includes the D and LG case, but many others as well, as we will see in Section 21.5.
lem. In particular, note that we can encode any 3-SAT problem4as a DGM with deterministic
links, as shown in Figure 20.9. We clamp the ﬁnal node, x, to be on, and we arrange the CPTs
so thatp(x=1 )>0iff there a satisfying assignment. Computing any posterior marginal
requires evaluating the normalization constant p(x=1 ), which represents the probability of the
evidence, so inference in this model implicitly solves the SAT problem.
In fact, exact inference is #P-hard (Roth 1996), which is even harder than NP-hard. (See e.g.,
(Arora and Barak 2009) for deﬁnitions of these terms.) The intuitive reason for this is that to
compute the normalizing constant Z,w eh a v et ocount how many satisfying assignments there
are. By contrast, MAP estimation is provably easier for some model classes (Greig et al. 1989),since, intuitively speaking, it only requires ﬁnding one satisfying assignment, not counting all ofthem.
20.5.1 Approximate inference
Many popular probabilistic models support efficient exact inference, since they are based onchains, trees or low treewidth graphs. But there are many other models for which exactinference is intractable. In fact, even simple two node models of the form θ→xmay not
support exact inference if the prior on θis not conjugate to the likelihood p(x|θ).
5
Therefore we will need to turn to approximate inference methods. See Table 20.4 for a
summary of coming attractions. For the most part, these methods do not come with anyguarantee as to their accuracy or running time. Theoretical computer scientists would thereforedescribe them as heuristics rather than approximation algorithms. In fact, one can prove that
4. A 3-SAT problem is a logical expression of the form (Q1∧Q2∧¬Q3)∨(Q1∧¬Q4∧Q5)···, where the Qiare
binary variables, and each clause consists of the conjunction of three variables (or their negation). The goal is to ﬁnd a
satisfying assignment, which is a set of values for the Qivariables such that the expression evaluates to true.
5. For discrete random variables, conjugacy is not a concern, since discrete distributions are always closed underconditioning and marginalization. Consequently, graph-theoretic considerations are of more importance when discussing
inference in models with discrete hidden states.
728 Chapter20. Exactinferenceforgraphicalmodels
it is not possible to construct polynomial time approximation schemes for inference in general
discrete GMs (Dagum and Luby 1993; Roth 1996). Fortunately, we will see that for many of theseheuristic methods often perform well in practice.
Exercises
Exercise 20.1 Variable elimination
Consider the MRF in Figure 10.14(b).
a. Suppose we want to compute the partition function using the elimination ordering ≺=( 1,2,3,4,5,6),
i.e.,
/summationdisplay
x6/summationdisplay
x5/summationdisplay
x4/summationdisplay
x3/summationdisplay
x2/summationdisplay
x1ψ12(x1,x2)ψ13(x1,x3)ψ24(x2,x4)ψ34(x3,x4)ψ45(x4,x5)ψ56(x5,x6)(20.71)
If we use the variable elimination algorithm, we will create new intermediate factors. What is the largest
intermediate factor?
b. Add an edge to the original MRF between every pair of variables that end up in the same factor. (These
are called ﬁll in edges.) Draw the resulting MRF. What is the size of the largest maximal clique in thisgraph?
c. Now consider elimination ordering ≺=( 4,1,2,3,5,6), i.e.,
/summationdisplay
x6/summationdisplay
x5/summationdisplay
x3/summationdisplay
x2/summationdisplay
x1/summationdisplay
x4ψ12(x1,x2)ψ13(x1,x3)ψ24(x2,x4)ψ34(x3,x4)ψ45(x4,x5)ψ56(x5,x6)(20.72)
If we use the variable elimination algorithm, we will create new intermediate factors. What is the largestintermediate factor?
d. Add an edge to the original MRF between every pair of variables that end up in the same factor. (These
are called ﬁll in edges.) Draw the resulting MRF. What is the size of the largest maximal clique in thisgraph?
Exercise 20.2 Gaussian times Gaussian is Gaussian
Prove Equation 20.17. Hint: use completing the square.
Exercise 20.3 Message passing on a tree
Consider the DGM in Figure 20.10 which represents the following ﬁctitious biological model. Each G
i
represents the genotype of a person: Gi=1if they have a healthy gene and Gi=2if they have an
unhealthy gene. G2andG3may inherit the unhealthy gene from their parent G1.Xi∈Ris a continuous
measure of blood pressure, which is low if you are healthy and high if you are unhealthy. We deﬁne the
CPDs as follows
p(G1)=[ 0 .5,0.5] (20.73)
p(G2|G1)=/parenleftbigg0.90.1
0.10.9/parenrightbigg
(20.74)
p(G3|G1)=/parenleftbigg0.90.1
0.10.9/parenrightbigg
(20.75)
p(Xi|Gi=1 ) = N(Xi|μ=5 0,σ2= 10) (20.76)
p(Xi|Gi=2 ) = N(Xi|μ=6 0,σ2= 10) (20.77)
The meaning of the matrix for p(G2|G1)is thatp(G2=1|G1=1 )=0 .9,p(G2=1|G1=2 )=0 .1,
etc.
20.5. Computationalintractabilityofexactinferenceintheworstcase 729
X1
X2X3G1
G2 G3
Figure 20.10 A simple DAG representing inherited diseases.
a. Suppose you observe X2=5 0, andX1is unobserved. What is the posterior belief on G1, i.e.,
p(G1|X2= 50)?
b. Now suppose you observe X2=5 0amdX3=5 0. What is p(G1|X2,X3)? Explain your answer
intuitively.
c. Now suppose X2=6 0,X3=6 0. What is p(G1|X2,X3)? Explain your answer intuitively.
d. Now suppose X2=5 0,X3=6 0. What is p(G1|X1,X2)? Explain your answer intuitively.
Exercise 20.4 Inference in 2D lattice MRFs
Consider an MRF with a 2D m×nlattice graph structure, so each hidden node, Xij, is connected to its
4 nearest neighbors, as in an Ising model. In addition, each hidden node has its own local evidence, Yij.
Assume all hidden nodes have K>2states. In general, exact inference in such models is intractable,
because the maximum cliques of the corresponding triangulated graph have size O(max{m,n}). Suppose
m/lessmuchni.e., the lattice is short and fat.
a. How can one efficiently perform exact inference (using a deterministic algorithm) in such models? (By
exact inference, I mean computing marginal probabilities P(Xij|/vector y)exactly, where /vector yis all the evidence.)
Give abriefdescription of your method.
b. What is the asymptotic complexity (running time) of your algorithm?
c. Now suppose the lattice is large and square, so m=n, but all hidden states are binary (ie K=2). In
this case, how can one efficiently exactly compute (using a deterministic algorithm) the MAP estimate
argmax xP(x|y),w h e r ex is the joint assignment to all hidden nodes?

21 Variational inference
21.1 Introduction
We have now seen several algorithms for computing (functions of) a posterior distribution. For
discrete graphical models, we can use the junction tree algorithm to perform exact inference,as explained in Section 20.4. However, this takes time exponential in the treewidth of thegraph, rendering exact inference often impractical. For the case of Gaussian graphical models,exact inference is cubic in the treewidth. However, even this can be too slow if we have manyvariables. In addition, the JTA does not work for continuous random variables outside of theGaussian case, nor for mixed discrete-continuous variables, outside of the conditionally Gaussiancase.
For some simple two node graphical models, of the form x→D, we can compute the
exact posterior p(x|D)in closed form, provided the prior p(x)is conjugate to the likelihood,
p(D|x)(which means the likelihood must be in the exponential family). See Chapter 5 for some
examples of this. (Note that in this chapter, xrepresent the unknown variables, whereas in
Chapter 5, we used θto represent the unknowns.)
In more general settings, we must use approximate inference methods. In Section 8.4.1, we
discussed the Gaussian approximation, which is useful for inference in two node models of theformx→D, where the prior is not conjugate. (For example, Section 8.4.3 applied the method
to logistic regression.)
The Gaussian approximation is simple. However, some posteriors are not naturally modelled
using Gaussians. For example, when inferring multinomial parameters, a Dirichlet distribution isa better choice, and when inferring states in a discrete graphical model, a categorical distributionis a better choice.
In this chapter, we will study a more general class of deterministic approximate inference
algorithms based on variational inference (Jordan et al. 1998; Jaakkola and Jordan 2000; Jaakkola
2001; Wainwright and Jordan 2008a). The basic idea is to pick an approximation q(x)to the
distribution from some tractable family, and then to try to make this approximation as closeas possible to the true posterior, p
∗(x)/definesp(x|D). This reduces inference to an optimization
problem. By relaxing the constraints and/or approximating the objective, we can trade accuracyfor speed. The bottom line is that variational inference often gives us the speed beneﬁts of MAPestimation but the statistical beneﬁts of the Bayesian approach.
732 Chapter21. Variationalinference
21.2 Variational inference
Supposep∗(x)is our true but intractable distribution and q(x)is some approximation, chosen
from some tractable family, such as a multivariate Gaussian or a factored distribution. We
assumeqhas some free parameters which we want to optimize so as to make q“similar to” p∗.
An obvious cost function to try to minimize is the KL divergence:
KL(p∗||q)=/summationdisplay
xp∗(x)logp∗(x)
q(x)(21.1)
However, this is hard to compute, since taking expectations wrt p∗is assumed to be intractable.
A natural alternative is the reverse KL divergence:
KL(q||p∗)=/summationdisplay
xq(x)logq(x)
p∗(x)(21.2)
The main advantage of this objective is that computing expectations wrt qis tractable (by choos-
ing a suitable form for q). We discuss the statistical differences between these two objectives in
Section 21.2.2.
Unfortunately, Equation 21.2 is still not tractable as written, since even evaluating p∗(x)=
p(x|D)pointwise is hard, since it requires evaluating the intractable normalization constant
Z=p(D). However, usually the unnormalized distribution ˜p(x)/definesp(x,D)=p∗(x)Zis
tractable to compute. We therefore deﬁne our new objective function as follows:
J(q)/definesKL(q||˜p) (21.3)
where we are slightly abusing notation, since ˜pis not a normalized distribution. Plugging in the
deﬁnition of KL, we get
J(q)=/summationdisplay
xq(x)logq(x)
˜p(x)(21.4)
=/summationdisplay
xq(x)logq(x)
Zp∗(x)(21.5)
=/summationdisplay
xq(x)logq(x)
p∗(x)−logZ (21.6)
=KL(q||p∗)−logZ (21.7)
SinceZis a constant, by minimizing J(q), we will force qto become close to p∗.
Since KL divergence is always non-negative, we see that J(q)is an upper bound on the NLL
(negative log likelihood):
J(q)=KL(q||p∗)−logZ≥−logZ=−logp(D) (21.8)
Alternatively, we can try to maximize the following quantity (in (Koller and Friedman 2009), this
is referred to as the energy functional), which is a lower bound on the log likelihood of the
data:
L(q)/defines−J(q)=−KL(q||p∗)+logZ≤logZ=l o gp(D) (21.9)
Since this bound is tight when q=p∗, we see that variational inference is closely related to EM
(see Section 11.4.7).
21.2. Variationalinference 733
21.2.1 Alternative interpretations of the variational objective
There are several equivalent ways of writing this objective that provide different insights. One
formulation is as follows:
J(q)=Eq[logq(x)]+Eq[−log ˜p(x)] =−H(q)+Eq[E(x)] (21.10)
which is the expected energy (recall E(x)=−log ˜p(x)) minus the entropy of the system. In
statistical physics, J(q)is called the variational free energy or theHelmholtz free energy.1
Another formulation of the objective is as follows:
J(q)=E q[logq(x)−logp(x)p(D|x)] (21.11)
=Eq[logq(x)−logp(x)−logp(D|x)] (21.12)
=Eq[−logp(D|x)]+KL(q(x)||p(x)) (21.13)
This is the expected NLL, plus a penalty term that measures how far the approximate posterioris from the exact prior.
We can also interpret the variational objective from the point of view of information theory
(the so-called bits-back argument). See (Hinton and Camp 1993; Honkela and Valpola 2004), fordetails.
21.2.2 Forward or reverse KL? *
Since the KL divergence is not symmetric in its arguments, minimizing KL(q||p)wrtqwill give
different behavior than minimizing KL(p||q). Below we discuss these two different methods.
First, consider the reverse KL, KL(q||p), also known as an I-projection orinformation
projection. By deﬁnition, we have
KL(q||p)=/summationdisplay
xq(x)lnq(x)
p(x)(21.14)
This is inﬁnite if p(x)=0andq(x)>0. Thus if p(x)=0we must ensure q(x)=0.W es a y
that the reverse KL is zero forcing forq. Henceqwill typically under-estimate the support of
p.
Now consider the forwards KL, also known as an M-projection ormoment projection:
KL(p||q)=/summationdisplay
xp(x)lnp(x)
q(x)(21.15)
This is inﬁnite if q(x)=0andp(x)>0.S oi fp(x)>0we must ensure q(x)>0.W es a y
that the forwards KL is zero avoiding forq. Henceqwill typically over-estimate the support of
p.
The difference between these methods is illustrated in Figure 21.1. We see that when the true
distribution is multimodal, using the forwards KL is a bad idea (assuming qis constrained to
be unimodal), since the resulting posterior mode/mean will be in a region of low density, rightbetween the two peaks. In such contexts, the reverse KL is not only more tractable to compute,but also more sensible statistically.
734 Chapter21. Variationalinference
(a) (b) (c)
Figure 21.1 Illustrating forwards vs reverse KL on a bimodal distribution. The blue curves are the contours
of the true distribution p. The red curves are the contours of the unimodal approximation q. (a) Minimizing
forwards KL: qtends to “cover” p. (b-c) Minimizing reverse KL: qlocks on to one of the two modes. Based
on Figure 10.3 of (Bishop 2006b). Figure generated by KLfwdReverseMixGauss .
−1 −0.8 −0.6 −0.4 −0.2 0 0.2 0.4 0.6 0.8 1−1−0.8−0.6−0.4−0.200.20.40.60.81
(a)−1 −0.8 −0.6 −0.4 −0.2 0 0.2 0.4 0.6 0.8 1−1−0.8−0.6−0.4−0.200.20.40.60.81
(b)
Figure 21.2 Illustrating forwards vs reverse KL on a symmetric Gaussian. The blue curves are the
contours of the true distribution p. The red curves are the contours of a factorized approximation q. (a)
Minimizing KL(q||p). (b) Minimizing KL(p||q). Based on Figure 10.2 of (Bishop 2006b). Figure generated
byKLpqGauss .
Another example of the difference is shown in Figure 21.2, where the target distribution is
an elongated 2d Gaussian and the approximating distribution is a product of two 1d Gaussians.
That is,p(x)=N(x|μ,Λ−1),w h e r e
μ=/parenleftbiggμ1
μ2/parenrightbigg
,Λ=/parenleftbiggΛ11Λ12
Λ21Λ22/parenrightbigg
(21.16)
In Figure 21.2(a) we show the result of minimizing KL(q||p). In this simple example, one can
show that the solution has the form
q(x)=N (x1|m1,Λ−1
11)N(x2|m2,Λ−1
22) (21.17)
m1=μ1−Λ−1
11Λ12(m2−μ2) (21.18)
m2=μ2−Λ−1
22Λ21(m1−μ1) (21.19)
1. It is called “free” because the variables xare free to vary, rather than being ﬁxed. The variational free energy is a
function of the distribution q, whereas the regular energy is a function of the state vector x.
21.3. Themeanﬁeldmethod 735
Figure 21.2(a) shows that we have correctly captured the mean, but the approximation is too
compact: its variance is controlled by the direction of smallest variance of p. In fact, it is
often the case (although not always (Turner et al. 2008)) that minimizing KL(q||p),w h e r eqis
factorized, results in an approximation that is overconﬁdent.
In Figure 21.2(b), we show the result of minimizing KL(p||q). As we show in Exercise 21.7,
the optimal solution when minimizing the forward KL wrt a factored approximation is to set q
to be the product of marginals. Thus the solution has the form
q(x)=N(x1|μ1,Λ−1
11)N(x2|μ2,Λ−1
22) (21.20)
Figure 21.2(b) shows that this is too broad, since it is an over-estimate of the support of p.
For the rest of this chapter, and for most of the next, we will focus on minimizing KL(q||p).
In Section 22.5, when we discuss expectation proagation, we will discuss ways to locally optimizeKL(p||q).
One can create a family of divergence measures indexed by a parameter α∈Rby deﬁning
thealpha divergence as follows:
D
α(p||q)/defines4
1−α2/parenleftbigg
1−/integraldisplay
p(x)(1+α)/2q(x)(1−α)/2dx/parenrightbigg
(21.21)
This measure satisﬁes Dα(p||q)=0iffp=q, but is obviously not symmetric, and hence is
not a metric. KL(p||q)corresponds to the limit α→1, whereas KL(q||p)corresponds to the
limitα→−1. When α=0, we get a symmetric divergence measure that is linearly related to
theHellinger distance, deﬁned by
DH(p||q)/defines/integraldisplay/parenleftBig
p(x)1
2−q(x)1
2/parenrightBig2
dx (21.22)
Note that/radicalbig
DH(p||q)is a valid distance metric, that is, it is symmetric, non-negative and
satisﬁes the triangle inequality. See (Minka 2005) for details.
21.3 The mean ﬁeld method
One of the most popular forms of variational inference is called the mean ﬁeld approxima-
tion (Opper and Saad 2001). In this approach, we assume the posterior is a fully factorizedapproximation of the form
q(x)=/productdisplay
iqi(xi) (21.23)
Our goal is to solve this optimization problem:
min
q1,...,qDKL(q||p) (21.24)
where we optimize over the parameters of each marginal distribution qi. In Section 21.3.1, we
derive a coordinate descent method, where at each step we make the following update:
logqj(xj)=E−qj[log ˜p(x)]+const (21.25)
736 Chapter21. Variationalinference
Model Section
Ising model Section 21.3.2
Factorial HMM Section 21.4.1
Univariate Gaussian Section 21.5.1
Linear regression Section 21.5.2Logistic regression Section 21.8.1.1Mixtures of Gaussians Section 21.6.1Latent Dirichlet allocation Section 27.3.6.3
Table 21.1 Some models in this book for which we provide detailed derivations of the mean ﬁeld inference
algorithm.
where˜p(x)=p(x,D)is the unnormalized posterior and the notation E−qj[f(x)]means to
take the expectation over f(x)with respect to all the variables except for xj. For example, if
we have three variables, then
E−q2[f(x)] =/summationdisplay
x1/summationdisplay
x3q(x1)q3(x3)f(x1,x2,x3) (21.26)
where sums get replaced by integrals where necessary.
When updating qj, we only need to reason about the variables which share a factor with xj,
i.e., the terms in j’s Markov blanket (see Section 10.5.3); the other terms get absorbed into the
constant term. Since we are replacing the neighboring values by their mean value, the methodis known as mean ﬁeld. This is very similar to Gibbs sampling (Section 24.2), except insteadof sending sampled values between neighboring nodes, we send mean values between nodes.This tends to be more efficient, since the mean can be used as a proxy for a large number ofsamples. (On the other hand, mean ﬁeld messages are dense, whereas samples are sparse; thiscan make sampling more scalable to very large models.)
Of course, updating one distribution at a time can be slow, since it is a form of coordinate
descent. Several methods have been proposed to speed up this basic approach, including usingpattern search (Honkela et al. 2003), and techniques based on parameter expansion (Qi andJaakkola 2008). However, we will not consider these methods in this chapter.
It is important to note that the mean ﬁeld method can be used to infer discrete or continuous
latent quantities, using a variety of parametric forms for q
i, as we will see below. This is
in contrast to some of the other variational methods we will encounter later, which are morerestricted in their applicability. Table 21.1 lists some of the examples of mean ﬁeld that we coverin this book.
21.3.1 Derivation of the mean ﬁeld update equations
Recall that the goal of variational inference is to minimize the upper bound J(q)≥−logp(D).
Equivalently, we can try to maximize the lower bound
L(q)/defines−J(q)=/summationdisplay
xq(x)log˜p(x)
q(x)≤logp(D) (21.27)
We will do this one term at a time.
21.3. Themeanﬁeldmethod 737
If we write the objective singling out the terms that involve qj, and regarding all the other
terms as constants, we get
L(qj)=/summationdisplay
x/productdisplay
iqi(xi)/bracketleftBigg
log ˜p(x)−/summationdisplay
klogqk(xk)/bracketrightBigg
(21.28)
=/summationdisplay
xj/summationdisplay
x−jqj(xj)/productdisplay
i/negationslash=jqi(xi)/bracketleftBigg
log ˜p(x)−/summationdisplay
klogqk(xk)/bracketrightBigg
(21.29)
=/summationdisplay
xjqj(xj)/summationdisplay
x−j/productdisplay
i/negationslash=jqi(xi)log ˜p(x)
−/summationdisplay
xjqj(xj)/summationdisplay
x−j/productdisplay
i/negationslash=jqi(xi)⎡
⎣/summationdisplay
k/negationslash=jlogqk(xk)+qj(xj)⎤⎦ (21.30)
=/summationdisplay
xjqj(xj)logfj(xj)−/summationdisplay
xjqj(xj)logqj(xj)+const (21.31)
where
logfj(xj)/defines/summationdisplay
x−j/productdisplay
i/negationslash=jqi(xi)log ˜p(x)=E−qj[log ˜p(x)] (21.32)
So we average out all the hidden variables except for xj. Thus we can rewrite L(qj)as follows:
L(qj)=−KL(qj||fj) (21.33)
We can maximize Lby minimizing this KL, which we can do by setting qj=fj, as follows:
qj(xj)=1
Zjexp/parenleftbig
E−qj[log ˜p(x)]/parenrightbig
(21.34)
We can usually ignore the local normalization constant Zj, since we know qjmust be a
normalized distribution. Hence we usually work with the form
logqj(xj)=E−qj[log ˜p(x)]+const (21.35)
The functional form of the qjdistributions will be determined by the type of variables xj,a s
well as the form of the model. (This is sometimes called free-form optimization.) If xjis a
discrete random variable, then qjwill be a discrete distribution; if xjis a continuous random
variable, then qjwill be some kind of pdf. We will see examples of this below.
21.3.2 Example: mean ﬁeld for the Ising model
Consider the image denoising example from Section 19.4.1, where xi∈{−1,+1}are the hidden
pixel values of the “clean” image. We have a joint model of the form
p(x,y)=p( x)p(y|x) (21.36)
738 Chapter21. Variationalinference
where the prior has the form
p(x)=1
Z0exp(−E0(x)) (21.37)
E0(x)=−D/summationdisplay
i=1/summationdisplay
j∈nbriWijxixj (21.38)
and the likelihood has the form
p(y|x)=/productdisplay
ip(yi|xi)=/summationdisplay
iexp(−Li(xi)) (21.39)
Therefore the posterior has the form
p(x|y)=1
Zexp(−E(x)) (21.40)
E(x)=E 0(x)−/summationdisplay
iLi(xi) (21.41)
We will now approximate this by a fully factored approximation
q(x)=/productdisplay
iq(xi,μi) (21.42)
whereμiis the mean value of node i. To derive the update for the variational parameter μi,w e
ﬁrst write out log ˜p(x)=−E(x), dropping terms that do not involve xi:
log ˜p(x)=xi/summationdisplay
j∈nbriWijxj+Li(xi)+const (21.43)
This only depends on the states of the neighboring nodes. Now we take expectations of this wrt/producttext
j/negationslash=iqj(xj)to get
qi(xi)∝exp⎛
⎝xi/summationdisplay
j∈nbriWijμj+Li(xi)⎞⎠ (21.44)
Thus we replace the states of the neighbors by their average values. Let
m
i=/summationdisplay
j∈nbriWijμj (21.45)
be the mean ﬁeld inﬂuence on node i. Also, let L+
i/definesLi(+1)andL−i/definesLi(−1). The
approximate marginal posterior is given by
qi(xi=1 ) =emi+L+
i
emi+L+i+e−mi+L−i=1
1+e−2mi+L−i−L+i=s i g m ( 2 ai) (21.46)
ai/definesmi+0.5(L+
i−L−i) (21.47)
21.4. Structuredmeanﬁeld* 739
sample 1, meanfieldH
  
−0.8−0.6−0.4−0.200.20.40.60.8
(a)
sample 3, meanfieldH
  
−0.8−0.6−0.4−0.200.20.40.60.8
(b)
mean after 15 sweeps of meanfieldH
  
−0.8−0.6−0.4−0.200.20.40.60.8
(c)
Figure 21.3 Example of image denoising using mean ﬁeld (with parallel updates and a damping factor
of 0.5). We use an Ising prior with Wij=1and a Gaussian noise model with σ=2. We show
the results after 1, 3 and 15 iterations across the image. Compare to Figure 24.1. Figure generated by
isingImageDenoiseDemo .
Similarly, we have qi(xi=−1) = sigm(−2ai). From this we can compute the new mean for
sitei:
μi=Eqi[xi]=qi(xi=+ 1 )·(+1)+qi(xi=−1)·(−1) (21.48)
=1
1+e−2ai−1
1+e2ai=eai
eai+e−ai−e−ai
e−ai+eai= tanh(ai) (21.49)
Hence the update equation becomes
μi= tanh⎛
⎝/summationdisplay
j∈nbriWijμj+0.5(L+
i−L−
i)⎞
⎠ (21.50)
See also Exercise 21.6 for an alternative derivation of these equations.
We can turn the above equations in to a ﬁxed point algorithm by writing
μt
i= tanh⎛
⎝/summationdisplay
j∈nbriWijμt−1
j+0.5(L+
i−L−
i)⎞
⎠ (21.51)
It is usually better to use damped updates of the form
μt
i=( 1−λ)μt−1
i+λtanh⎛
⎝/summationdisplay
j∈nbriWijμt−1
j+0.5(L+
i−L−
i)⎞
⎠ (21.52)
for0<λ<1. We can update all the nodes in parallel, or update them asychronously.
Figure 21.3 shows the method in action, applied to a 2d Ising model with homogeneous
attractive potentials, Wij=1. We use parallel updates with a damping factor of λ=0.5. (If we
don’t use damping, we tend to get “checkerboard” artefacts.)
21.4 Structured mean ﬁeld *
Assuming that all the variables are independent in the posterior is a very strong assumption that
can lead to poor results. Sometimes we can exploit tractable substructure in our problem, so
740 Chapter21. Variationalinference
y1y2y3x3,1x3,2x3,3x2,1x2,2x2,3x1,1x1,2x1,3
(a)x3,1x3,2x3,3x2,1x2,2x2,3x1,1x1,2x1,3
(b)x3,1x3,2x3,3x2,1x2,2x2,3x1,1x1,2x1,3
(c)
Figure 21.4 (a) A factorial HMM with 3 chains. (b) A fully factorized approximation. (c) A product-of-
chains approximation. Based on Figure 2 of (Ghahramani and Jordan 1997).
that we can efficiently handle some kinds of dependencies. This is called the structured mean
ﬁeldapproach (Saul and Jordan 1995). The approach is the same as before, except we group sets
of variables together, and we update them simultaneously. (This follows by simply treating all
the variables in the i’th group as a single “mega-variable”, and then repeating the derivation in
Section 21.3.1.) As long as we can perform efficient inference in each qi, the method is tractable
overall. We give an example below. See (Bouchard-Cote and Jordan 2009) for some more recentwork in this area.
21.4.1 Example: factorial HMM
Consider the factorial HMM model (Ghahramani and Jordan 1997) introduced in Section 17.6.5.Suppose there are Mchains, each of length T, and suppose each hidden node has Kstates.
The model is deﬁned as follows
p(x,y)=/productdisplay
m/productdisplay
tp(xtm|xt−1,m)p(yt|xtm) (21.53)
wherep(xtm=k|xt−1,m=j)=A mjkis an entry in the transition matrix for chain m,
p(x1m=k|x0m)=p(x1m=k)=πmk, is the initial state distribution for chain m, and
p(yt|xt)=N/parenleftBigg
yt|M/summationdisplay
m=1Wmxtm,Σ/parenrightBigg
(21.54)
is the observation model, where xtmis a 1-of-K encoding of xtmandWmis aD×K
matrix (assuming yt∈RD). Figure 21.4(a) illustrates the model for the case where M=3.
Even though each chain is a priori independent, they become coupled in the posterior dueto having an observed common child, y
t. The junction tree algorithm applied to this graph
takesO(TMKM+1)time. Below we will derive a structured mean ﬁeld algorithm that takes
O(TMK2I)time, where Iis the number of mean ﬁeld iterations (typically I∼10suffices for
good performance).
21.4. Structuredmeanﬁeld* 741
We can write the exact posterior in the following form:
p(x|y)=1
Zexp(−E(x,y)) (21.55)
E(x,y)=1
2T/summationdisplay
t=1/parenleftBigg
yt−/summationdisplay
mWmxtm/parenrightBiggT
Σ−1/parenleftBigg
yt−/summationdisplay
mWmxtm/parenrightBigg
−/summationdisplay
mxT
1m˜πm−T/summationdisplay
t=2/summationdisplay
mxTtm˜Amxt−1,m (21.56)
where˜Am/defineslogAmand˜πm/defineslogπm(both interpreted elementwise).
We can approximate the posterior as a product of marginals, as in Figure 21.4(b), but a better
approximation is to use a product of chains, as in Figure 21.4(c). Each chain can be tractably
updated individually, using the forwards-backwards algorithm. More precisely, we assume
q(x|y)=1
ZqM/productdisplay
m=1q(x1m|ξ1m)T/productdisplay
t=2q(xtm|xt−1,m,ξtm) (21.57)
q(x1m|ξ1m)=K/productdisplay
k=1(ξ1mkπmk)x1mk(21.58)
q(xtm|xt−1,m,ξtm)=K/productdisplay
k=1⎛
⎝ξtmkK/productdisplay
j=1(Amjk)xt−1,m,j⎞⎠xtmk
(21.59)
We see that the ξtmkparameters play the role of an approximate local evidence, averaging out
the effects of the other chains. This is contrast to the exact local evidence, which couples all
the chains together.
We can rewrite the approximate posterior as q(x)=1
Zqexp(−Eq(x)),w h e r e
Eq(x)=−T/summationdisplay
t=1M/summationdisplay
m=1xT
tm˜ξtm−M/summationdisplay
m=1xT1m˜πm−T/summationdisplay
t=2M/summationdisplay
m=1xTtm˜Amxt−1,m (21.60)
where˜ξtm=l o gξtm. We see that this has the same temporal factors as the exact posterior,
but the local evidence term is different. The objective function is given by
KL(q||p)=E[E]−E[Eq]−logZq+logZ (21.61)
where the expectations are taken wrt q. One can show (Exercise 21.8) that the update has the
form
ξtm=e x p/parenleftbigg
WT
mΣ−1˜ytm−1
2δm/parenrightbigg
(21.62)
δm/definesdiag(WT
mΣ−1Wm) (21.63)
˜ytm/definesyt−M/summationdisplay
/lscript/negationslash=mW/lscriptE[xt,/lscript] (21.64)
742 Chapter21. Variationalinference
Theξtmparameter plays the role of the local evidence, averaging over the neighboring chains.
Having computed this for each chain, we can perform forwards-backwards in parallel, using
these approximate local evidence terms to compute q(xt,m|y1:T)for eachmandt.
The update cost is O(TMK2)for a full “sweep” over all the variational parameters, since we
have to run forwards-backwards Mtimes, for each chain independently. This is the same cost
as a fully factorized approximation, but is much more accurate.
21.5 Variational Bayes
So far we have been concentrating on inferring latent variables ziassuming the parameters θ
of the model are known. Now suppose we want to infer the parameters themselves. If wemake a fully factorized (i.e., mean ﬁeld) approximation, p(θ|D)≈/producttext
kq(θk), we get a method
known as variational Bayes orVB(Hinton and Camp 1993; MacKay 1995a; Attias 2000; Beal
and Ghahramani 2006; Smidl and Quinn 2005).2We give some examples of VB below, assuming
that there are no latent variables. If we want to infer both latent variables and parameters, andwe make an approximation of the form p(θ,z
1:N|D)≈q(θ)/producttext
iqi(zi), we get a method known
as variational Bayes EM, which we described in Section 21.6.
21.5.1 Example: VB for a univariate Gaussian
Following (MacKay 2003, p429), let us consider how to apply VB to infer the posterior over theparameters for a 1d Gaussian, p(μ,λ|D),w h e r eλ=1/σ
2is the precision. For convenience, we
will use a conjugate prior of the form
p(μ,λ)=N(μ|μ0,(κ0λ)−1)Ga(λ|a0,b0) (21.65)
However, we will use an approximate factored posterior of the form
q(μ,λ)=qμ(μ)qλ(λ) (21.66)
We do not need to specify the forms for the distributions qμandqλ; the optimal forms will “fall
out” automatically during the derivation (and conveniently, they turn out to be Gaussian andGamma respectively).
You might wonder why we would want to do this, since we know how to compute the
exact posterior for this model (Section 4.6.3.7). There are two reasons. First, it is a usefulpedagogical exercise, since we can compare the quality of our approximation to the exactposterior. Second, it is simple to modify the method to handle a semi-conjugate prior of theformp(μ,λ)=N(μ|μ
0,τ0)Ga(λ|a0,b0), for which exact inference is no longer possible.
2. This method was originally called ensemble learning (MacKay 1995a), since we are using an ensemble of parameters
(a distribution) instead of a point estimate. However, the term “ensemble learning” is also used to describe methods
such as boosting, so we prefer the term VB.
21.5. VariationalBayes 743
21.5.1.1 Target distribution
The unnormalized log posterior has the form
log ˜p(μ,λ)=l o g p(μ,λ,D)=l o gp(D|μ,λ)+logp(μ|λ)+logp(λ) (21.67)
=N
2logλ−λ
2N/summationdisplay
i=1(xi−μ)2−κ0λ
2(μ−μ0)2
+1
2log(κ0λ)+(a0−1)logλ−b0λ+const (21.68)
21.5.1.2 Updating qμ(μ)
The optimal form for qμ(μ)is obtained by averaging over λ:
logqμ(μ)=E qλ[logp(D|μ,λ)+logp(μ|λ)]+const (21.69)
=−Eqλ[λ]
2/braceleftBigg
κ0(μ−μ0)2+N/summationdisplay
i=1(xi−μ)2/bracerightBigg
+const (21.70)
By completing the square one can show that qμ(μ)=N(μ|μN,κ−1
N),w h e r e
μN=κ0μ0+Nx
κ0+N,κN=(κ0+N)Eqλ[λ] (21.71)
At this stage we don’t know what qλ(λ)is, and hence we cannot compute E[λ], but we will
derive this below.
21.5.1.3 Updating qλ(λ)
The optimal form for qλ(λ)is given by
logqλ(λ)=E qμ[logp(D|μ,λ)+logp(μ|λ)+logp(λ)]+const (21.72)
=(a0−1)logλ−b0λ+1
2logλ+N
2logλ
−λ
2Eqμ/bracketleftBigg
κ0(μ−μ0)2+N/summationdisplay
i=1(xi−μ)2/bracketrightBigg
+const (21.73)
We recognize this as the log of a Gamma distribution, hence qλ(λ)=G a ( λ|aN,bN),w h e r e
aN=a0+N+1
2(21.74)
bN=b0+1
2Eqμ/bracketleftBigg
κ0(μ−μ0)2+N/summationdisplay
i=1(xi−μ)2/bracketrightBigg
(21.75)
744 Chapter21. Variationalinference
21.5.1.4 Computing the expectations
To implement the updates, we have to specify how to compute the various expectations. Since
q(μ)=N(μ|μN,κ−1
N),w eh a v e
Eq(μ)[μ]=μ N (21.76)
Eq(μ)/bracketleftbig
μ2/bracketrightbig
=1
κN+μ2
N (21.77)
Sinceq(λ)=G a ( λ|aN,bN),w eh a v e
Eq(λ)[λ]=aN
bN(21.78)
We can now give explicit forms for the update equations. For q(μ)we have
μN=κ0μ0+Nx
κ0+N(21.79)
κN=(κ0+N)aN
bN(21.80)
and forq(λ)we have
aN=a0+N+1
2(21.81)
bN=b0+κ0(E/bracketleftbig
μ2/bracketrightbig
+μ20−2E[μ]μ0)+1
2N/summationdisplay
i=1/parenleftbig
x2i+E/bracketleftbig
μ2/bracketrightbig
−2E[μ]xi/parenrightbig
(21.82)
We see that μNandaNare in fact ﬁxed constants, and only κNandbNneed to be updated
iteratively. (In fact, one can solve for the ﬁxed points of κNandbNanalytically, but we don’t
do this here in order to illustrate the iterative updating scheme.)
21.5.1.5 Illustration
Figure 21.5 gives an example of this method in action. The green contours represent the
exact posterior, which is Gaussian-Gamma. The dotted red contours represent the variationalapproximation over several iterations. We see that the ﬁnal approximation is reasonably close tothe exact solution. However, it is more “compact” than the true distribution. It is often the casethat mean ﬁeld inference underestimates the posterior uncertainty; See Section 21.2.2 for morediscussion of this point.
21.5.1.6 Lower bound *
In VB, we are maximizing L(q), which is a lower bound on the log marginal likelihood:
L(q)≤logp(D)=l o g/integraldisplay/integraldisplay
p(D|μ,λ)p(μ,λ)dμdλ (21.83)
It is very useful to compute the lower bound itself, for three reasons. First, it can be used toassess convergence of the algorithm. Second, it can be used to assess the correctness of one’s
21.5. VariationalBayes 745
μλ
  
−1 −0.5 0 0.5 100.20.40.60.811.21.41.61.82
exact
vb
(a)μλ
  
−1 −0.5 0 0.5 100.20.40.60.811.21.41.61.82
exact
vb
(b)
μλ
  
−1 −0.5 0 0.5 100.20.40.60.811.21.41.61.82
exact
vb
(c)μλ
  
−1 −0.5 0 0.5 100.20.40.60.811.21.41.61.82
exact
vb
(d)
Figure 21.5 Factored variational approximation (red) to the Gaussian-Gamma distribution (green). (a)
Initial guess. (b) After updating qμ. (c) After updating qλ. (d) At convergence (after 5 iterations). Based on
10.4 of (Bishop 2006b). Figure generated by unigaussVbDemo .
code: as with EM, if the bound does not increase monotonically, there must be a bug. Third,
the bound can be used as an approximation to the marginal likelihood, which can be used forBayesian model selection.
Unfortunately, computing this lower bound involves a fair amount of tedious algebra. We
work out the details for this example, but for other models, we will just state the results withoutproof, or even omit discussion of the bound altogether, for brevity.
For this model, L(q)can be computed as follows:
L(q)=/integraldisplay/integraldisplay
q(μ,λ)logp(D,μ,λ)
q(μ,λ)dμdλ (21.84)
=E[logp(D|μ,λ)]+E[logp(μ|λ)]+ E[logp(λ)]
−E[logq(μ)]−E[logq(λ)] (21.85)
where all expectations are wrt q(μ,λ). We recognize the last two terms as the entropy of a
Gaussian and the entropy of a Gamma distribution, which are given by
H/parenleftbig
N(μN,κ−1
N)/parenrightbig
=−1
2logκN+1
2(1+log(2π )) (21.86)
H(Ga(aN,bN)) = logΓ(a N)−(aN−1)ψ(aN)−log(bN)+aN (21.87)
746 Chapter21. Variationalinference
whereψ()is the digamma function.
To compute the other terms, we need the following facts:
E[logx|x∼Ga(a,b)] =ψ(a)−log(b) (21.88)
E[x|x∼Ga(a,b)] =a
b(21.89)
E/bracketleftbig
x|x∼N(μ,σ2)/bracketrightbig
=μ (21.90)
E/bracketleftbig
x2|x∼N(μ,σ2)/bracketrightbig
=μ+σ2(21.91)
For the expected log likelihood, one can show that
Eq(μ,λ)[logp(D|μ,λ)] (21.92)
=−N
2log(2π)+N
2Eq(λ)[logλ]−E[λ]q(λ)
2N/summationdisplay
i=1Eq(μ)/bracketleftbig
(xi−μ)2/bracketrightbig
=−N
2log(2π)+N
2(ψ(aN)−logbN) (21.93)
−NaN
2bN/parenleftbigg
ˆσ2+x2−2μNx+μ2
N+1
κN/parenrightbigg
(21.94)
wherexandˆσ2are the empirical mean and variance.
For the expected log prior of λ,w eh a v e
Eq(λ)[logp(λ) ]=( a0−1)E[logλ]−b0E[λ]+a0logb0−logΓ(a 0) (21.95)
=(a0−1)(ψ(aN)−logbN)−b0aN
bN+a0logb0−logΓ(a 0)(21.96)
For the expected log prior of μ, one can show that
Eq(μ,λ)[logp(μ|λ)] =1
2logκ0
2π+1
2E[logλ]q(λ)−1
2Eq(μ,λ)/bracketleftbig
(μ−μ0)2κ0λ/bracketrightbig
=1
2logκ0
2π+1
2(ψ(aN)−logbN)
−κ0
2aN
bN/bracketleftbigg1
κN+(μN−μ0)2/bracketrightbigg
(21.97)
Putting it altogether, one can show that
L(q)=1
2log1
κN+logΓ(a N)−aNlogbN+const (21.98)
This quantity monotonically increases after each VB update.
21.5.2 Example: VB for linear regression
In Section 7.6.4, we discussed an empirical Bayes approach to setting the hyper-parameters for
ridge regression known as the evidence procedure. In particular, we assumed a likelihood ofthe form p(y|X,θ)=N(Xw,λ
−1)and a prior of the form p(w)=N(w|0,α−1I). We then
21.5. VariationalBayes 747
computed a type II estimate of αandλ. The same approach was extended in Section 13.7 to
handle a prior of the form N(w|0,diag(α)−1), which allows one hyper-parameter per feature,
a technique known as automatic relevancy determination.
In this section, we derive a VB algorithm for this model. We follow the presentation of
(Drugowitsch 2008).3Initially we will use the following prior:
p(w,λ,α)=N (w|0,(λα)−1I)Ga(λ|aλ
0,bλ0)Ga(α|aα0,bα0) (21.99)
We choose to use the following factorized approximation to the posterior:
q(w,α,λ)=q(w,λ)q(α) (21.100)
Given these assumptions, one can show (see (Drugowitsch 2008)) that the optimal form for the
posterior is
q(w,α,λ)=N (w|wN,λ−1VN)Ga(λ|aλ
N,bλN)Ga(α|aαN,bαN) (21.101)
where
V−1
N=A+XX(21.102)
wN=VNXTy (21.103)
aλN=aλ0+N
2(21.104)
bλN=bλ0+1
2(||y−Xw||2+wT
NAwN) (21.105)
aαN=aα0+D
2(21.106)
bαN=bα0+1
2/parenleftbiggaλ
N
bλNwT
NwN+tr(VN)/parenrightbigg
(21.107)
A=/angbracketleftα/angbracketrightI=aαN
bαNI (21.108)
This method can be extended to the ARD case in a straightforward way, by using the following
priors:
p(w)=N (0,diag(α)−1) (21.109)
p(α)=D/productdisplay
j=1Ga(αj|aα
0,bα0) (21.110)
The posterior for wandλis computed as before, except we use A=d i a g (aα
N/bαN
j)instead of
3. Note that Drugowitsch uses a0,b0as the hyper-parameters for p(λ)andc0,d0as the hyper-parameters for p(α),
whereas (Bishop 2006b, Sec 10.3) uses a0,b0as the hyper-parameters for p(α)and treats λas ﬁxed. To (hopefully)
avoid confusion, I use aλ
0,bλ0as the hyper-parameters for p(λ), andaα0,bα0as the hyper-parameters for p(α).
748 Chapter21. Variationalinference
aα
N/bαNI. The posterior for αhas the form
q(α)=/productdisplay
jGa(αj|aα
N,bαN
j) (21.111)
aαN=aα0+1
2(21.112)
bαN
j=bα0+1
2/parenleftbiggaλ
N
bλNw2
N,j+(VN)jj/parenrightbigg
(21.113)
The algorithm alternates between updating q(w,λ)andq(α). Oncewandλhave been
inferred, the posterior predictive is a Student distribution, as shown in Equation 7.76. Speciﬁcally,
for a single data case, we have
p(y|x,D)=T (y|wT
Nx,bλ
N
aλN(1+xTVNx),2aλ
N) (21.114)
The exact marginal likelihood, which can be used for model selection, is given by
p(D)=/integraldisplay/integraldisplay/integraldisplay
p(y|X,w,λ)p(w|α)p(λ)dwdαdλ (21.115)
We can compute a lower bound on logp(D)as follows:
L(q)=−N
2log(2π)−1
2N/summationdisplay
i=1/parenleftbiggaλ
N
bλN(yi−wT
Nxi)2+xT
iVNxi/parenrightbigg
+1
2log|VN|+D
2
−logΓ(aλ0)+aλ0logbλ0−bλ0aλ
N
bλN+logΓ(aλ
N)−aλNlogbλN+aλN
−logΓ(aα0)+aα0logbα0+logΓ(aαN)−aαNlogbαN(21.116)
In the ARD case, the last line becomes
D/summationdisplay
j=1/bracketleftBig
−logΓ(aα0)+aα0logbα0+logΓ(aαN)−aαNlogbαN
j/bracketrightBig
(21.117)
Figure 21.6 compare VB and EB on a model selection problem for polynomial regression. We
see that VB gives similar results to EB, but the precise behavior depends on the sample size.WhenN=5, VB’s estimate of the posterior over models is more diffuse than EB’s, since VB
models uncertainty in the hyper-parameters. When N=3 0, the posterior estimate of the hyper-
parameters becomes more well-determined. Indeed, if we compute E[α|D]when we have an
uninformative prior, a
α
0=bα0=0,w eg e t
α=aα
N
bαN=D/2
1
2(aλ
N
bλNwT
NwN+tr(VN))(21.118)
21.6. VariationalBayesEM 749
1 2 300.20.40.60.81
MP(M|D)N=5, method=VB
(a)1 2 300.20.40.60.81
MP(M|D)N=5, method=EB
(b)
1 2 300.20.40.60.81
MP(M|D)N=30, method=VB
(c)1 2 300.20.40.60.81
MP(M|D)N=30, method=EB
(d)
Figure 21.6 We plot the posterior over models (polynomials of degree 1, 2 and 3) assuming a uniform
priorp(m)∝1. We approximate the marginal likelihood using (a,c) VB and (b,d) EB. In (a-b), we use
N=5data points (shown in Figure 5.7). In (c-d), we use N=3 0data points (shown in Figure 5.8). Figure
generated by linregEbModelSelVsN .
Compare this to Equation 13.167 for EB:
ˆα=D
E[wTw]=D
wT
NwN+tr(VN)(21.119)
Modulo the aλ
NandbλNterms, these are the same. In hindsight this is perhaps not that
surprising, since EB is trying to maximize logp(D), and VB is trying to maximize a lower
bound on logp(D).
21.6 Variational Bayes EM
Now consider latent variable models of the form zi→xi←θ. This includes mixtures models,
PCA, HMMs, etc. There are now two kinds of unknowns: parameters, θ, and latent variables, zi.
As we saw in Section 11.4, it is common to ﬁt such models using EM, where in the E step we
infer the posterior over the latent variables, p(zi|xi,θ), and in the M step, we compute a point
estimate of the parameters, θ. The justiﬁcation for this is two-fold. First, it results in simple
algorithms. Second, the posterior uncertainty in θis usually less than in zi, since the θare
informed by all Ndata cases, whereas ziis only informed by xi; this makes a MAP estimate of
750 Chapter21. Variationalinference
θmore reasonable than a MAP estimate of zi.
However, VB provides a way to be “more Bayesian”, by modeling uncertainty in the parameters
θas well in the latent variables zi, at a computational cost that is essentially the same as EM.
This method is known as variational Bayes EM orVBEM. The basic idea is to use mean ﬁeld,
where the approximate posterior has the form
p(θ,z1:N|D)≈q(θ)q(z)=q(θ)/productdisplay
iq(zi) (21.120)
The ﬁrst factorization, between θandz, is a crucial assumption to make the algorithm tractable.
The second factorization follows from the model, since the latent variables are iid conditional
onθ.
In VBEM, we alternate between updating q(zi|D)(the variational E step) and updating q(θ|D)
(the variational M step). We can recover standard EM from VBEM by approximating the param-eter posterior using a delta function, q(θ|D)≈δ
ˆθ(θ).
The variational E step is similar to a standard E step, except instead of plugging in a MAP
estimate of the parameters and computing p(zi|D,ˆθ), we need to average over the parameters.
Roughly speaking, this can be computed by plugging in the posterior mean of the parametersinstead of the MAP estimate, and then computing p(z
i|D,θ)using standard algorithms, such
as forwards-backwards. Unfortunately, things are not quite this simple, but this is the basic idea.The details depend on the form of the model; we give some examples below.
The variational M step is similar to a standard M step, except instead of computing a point
estimate of the parameters, we update the hyper-parameters, using the expected sufficient statis-tics. This process is usually very similar to MAP estimation in regular EM. Again, the details onhow to do this depend on the form of the model.
The principle advantage of VBEM over regular EM is that by marginalizing out the parameters,
we can compute a lower bound on the marginal likelihood, which can be used for modelselection. We will see an example of this in Section 21.6.1.6. VBEM is also “egalitarian”, sinceit treats parameters as “ﬁrst class citizens”, just like any other unknown quantity, whereas EMmakes an artiﬁcial distinction between parameters and latent variables.
21.6.1 Example: VBEM for mixtures of Gaussians *
Let us consider how to “ﬁt” a mixture of Gaussians using VBEM. (We use scare quotes since weare not estimating the model parameters, but inferring a posterior over them.) We will followthe presentation of (Bishop 2006b, Sec 10.2). Unfortunately, the details are rather complicated.Fortunately, as with EM, one gets used to it after a bit of practice. (As usual with math, simplyreading the equations won’t help much, you should really try deriving these results yourself (ortry some of the exercises) if you want to learn this stuff in depth.)
21.6.1.1 The variational posterior
The likelihood function is the usual one for Gaussian mixture models:
p(z,X|θ)=/productdisplay
i/productdisplay
kπzik
kN(xi|μk,Λ−1
k)zik(21.121)
wherezik=1if data point ibelongs to cluster k, andzik=0otherwise.
21.6. VariationalBayesEM 751
We will assume the following factored conjugate prior
p(θ)=D i r (π|α0)/productdisplay
kN(μk|m0,(β0Λk)−1)Wi(Λ k|L0,ν0) (21.122)
whereΛkis the precision matrix for cluster k. The subscript 0 means these are parameters
of the prior; we assume all the prior parameters are the same for all clusters. For the mixing
weights, we usually use a symmetric prior, α0=α01.
The exact posterior p(z,θ|D)is a mixture of KNdistributions, corresponding to all possible
labelings z. We will try to approximate the volume around one of these modes. We will use the
standard VB approximation to the posterior:
p(θ,z1:N|D)≈q(θ)/productdisplay
iq(zi) (21.123)
At this stage we have not speciﬁed the forms of the qfunctions; these will be determined by
the form of the likelihood and prior. Below we will show that the optimal form is as follows:
q(z,θ)=q(z|θ)q(θ)=/bracketleftBigg/productdisplay
iCat(zi|ri)/bracketrightBigg
(21.124)
/bracketleftBigg
Dir(π|α)/productdisplay
kN(μk|mk,(βkΛk)−1)Wi(Λ k|Lk,νk)/bracketrightBigg
(21.125)
(The lack of 0 subscript means these are parameters of the posterior, not the prior.) Below wewill derive the update equations for these variational parameters.
21.6.1.2 Derivation of q(z)(variational E step)
The form for q(z)can be obtained by looking at the complete data log joint, ignoring terms that
do not involve z, and taking expectations of what’s left over wrt all the hidden variables except
forz.W eh a v e
logq(z)=E
q(θ)[logp(x,z,θ)]+const (21.126)
=/summationdisplay
i/summationdisplay
iziklogρik+const (21.127)
where we deﬁne
logρik/definesEq(θ)[logπk]+1
2Eq(θ)[log|Λk|]−D
2log(2π)
−1
2Eq(θ)/bracketleftbig
(xi−μk)TΛk(xi−μk)/bracketrightbig
(21.128)
Using the fact that q(π)=D i r (π),w eh a v e
log˜πk/definesE[logπk]=ψ(αk)−ψ(/summationdisplay
k/primeαk/prime) (21.129)
752 Chapter21. Variationalinference
whereψ()is the digamma function. (See Exercise 21.5 for the detailed derivation.) Next, we use
the fact that
q(μk,Λk)=N(μk|mk,(βkΛk)−1)Wi(Λ k|Lk,νk) (21.130)
to get
log˜Λk/definesE[log|Λk|]=D/summationdisplay
j=1ψ/parenleftbiggνk+1−j
2/parenrightbigg
+Dlog2+log|Λk| (21.131)
Finally, for the expected value of the quadratic form, we get
E/bracketleftbig
(xi−μk)TΛk(xi−μk)/bracketrightbig
=Dβ−1
k+νk(xi−mk)TΛk(xi−mk) (21.132)
Putting it altogether, we get that the posterior responsibility of cluster kfor datapoint iis
rik∝˜πk˜Λ1
2
kexp/parenleftbigg
−D
2βk−νk
2(xi−mk)TΛk(xi−mk)/parenrightbigg
(21.133)
Compare this to the expression used in regular EM:
rEM
ik∝ˆπk|ˆΛ|1
2
kexp/parenleftbigg
−1
2(xi−ˆμk)TˆΛk(xi−ˆμk)/parenrightbigg
(21.134)
The signiﬁcance of this difference is discussed further in Section 21.6.1.7.
21.6.1.3 Derivation of q(θ)(variational M step)
Using the mean ﬁeld recipe, we have
logq(θ)=l o g p(π)+/summationdisplay
klogp(μk,Λk)+/summationdisplay
iEq(z)[logp(zi|π)]
+/summationdisplay
k/summationdisplay
iEq(z)[zik]logN(xi|μk,Λ−1
k)+const (21.135)
We see this factorizes into the form
q(θ)=q(π)/productdisplay
kq(μk,Λk) (21.136)
For theπterm, we have
logq(π)=(α0−1)/summationdisplay
klogπk+/summationdisplay
k/summationdisplay
iriklogπk+const (21.137)
Exponentiating, we recognize this as a Dirichlet distribution:
q(π)=D i r ( π|α) (21.138)
αk=α0+Nk (21.139)
Nk=/summationdisplay
irik (21.140)
21.6. VariationalBayesEM 753
0 20 40 60 80 100−1100−1050−1000−950−900−850−800−750−700−650−600
iterlower bound on log marginal likelihoodvariational Bayes objective for GMM on old faithful data
Figure 21.7 Lower bound vs iterations for the VB algorithm in Figure 21.8. The steep parts of the
curve correspond to places where the algorithm ﬁgures out that it can increase the bound by “killing
off” unnecessary mixture components, as described in Section 21.6.1.6. The plateaus correspond to slowlymoving the clusters around. Figure generated by mixGaussVbDemoFaithful .
For theμkandΛkterms, we have
q(μk,Λk)=N (μk|mk,(βkΛk)−1)Wi(Λ k|Lk,νk) (21.141)
βk=β0+Nk (21.142)
mk=(β0m0+Nkxk)/βk (21.143)
L−1
k=L−1
0+NkSk+β0Nk
β0+Nk(xk−m0)(xk−m0)T(21.144)
νk=ν0+Nk+1 (21.145)
xk=1
Nk/summationdisplay
irikxi (21.146)
Sk=1
Nk/summationdisplay
irik(xi−xk)(xi−xk)T(21.147)
This is very similar to the M step for MAP estimation discussed in Section 11.4.2.8, except here
we are computing the parameters of the posterior over θ, rather than MAP estimates of θ.
21.6.1.4 Lower bound on the marginal likelihood
The algorithm is trying to maximize the following lower bound
L=/summationdisplay
z/integraldisplay
q(z,θ)logp(x,z,θ)
q(z,θ)dθ≤logp(D) (21.148)
This quantity should increase monotonically with each iteration, as shown in Figure 21.7. Un-
fortunately, deriving the bound is a bit messy, because we need to compute expectations of theunnormalized log posterior as well as entropies of the qdistribution. We leave the details (which
are similar to Section 21.5.1.6) to Exercise 21.4.
754 Chapter21. Variationalinference
21.6.1.5 Posterior predictive distribution
We showed that the approximate posterior has the form
q(θ)=D i r (π|α)/productdisplay
kN(μk|mk,(βkΛk)−1)Wi(Λ k|Lk,νk) (21.149)
Consequently the posterior predictive density can be approximated as follows, using the results
from Section 4.6.3.6:
p(x|D)≈/summationdisplay
z/integraldisplay
p(x|z,θ)p(z|θ)q(θ)dθ (21.150)
=/summationdisplay
k/integraldisplay
πkN(x|μk,Λ−1
k)q(θ)dθ (21.151)
=/summationdisplay
kαk/summationtext
k/primeαk/primeT(x|mk,Mk,νk+1−D) (21.152)
Mk=(νk+1−D)βk
1+βkLk (21.153)
This is just a weighted sum of Student distributions. If instead we used a plug-in approximation,we would get a weighted sum of Gaussian distributions.
21.6.1.6 Model selection using VBEM
The simplest way to select Kwhen using VB is to ﬁt several models, and then to use the
variational lower bound to the log marginal likelihood, L(K)≤logp(D|K), to approximate
p(K|D):
p(K|D)=e
L(K)
/summationtext
K/primeeL(K/prime)(21.154)
However, the lower bound needs to be modiﬁed somewhat to take into account the lack ofidentiﬁability of the parameters (Section 11.3.1). In particular, although VB will approximate thevolume occupied by the parameter posterior, it will only do so around one of the local modes.WithKcomponents, there are K!equivalent modes, which differ merely by permuting the
labels. Therefore we should use logp(D|K)≈L(K)+log(K!).
21.6.1.7 Automatic sparsity inducing effects of VBEM
Although VB provides a reasonable approximation to the marginal likelihood (better than BIC(Beal and Ghahramani 2006)), this method still requires ﬁtting multiple models, one for eachvalue ofKbeing considered. A faster alternative is to ﬁt a single model, where Kis set large,
but where α
0is set very small, α0/lessmuch1. From Figure 2.14(d), we see that the resulting prior for
the mixing weights πhas “spikes” near the corners of the simplex, encouraging a sparse mixing
weight vector.
In regular EM, the MAP estimate of the mixing weights will have the form ˆπk∝(αk−1),
whereαk=α0+Nk. Unforuntately, this can be negative if α0=0andNk=0(Figueiredo
21.6. VariationalBayesEM 755
−2 −1.5 −1 −0.5 0 0.5 1 1.5−2.5−2−1.5−1−0.500.511.52
1
2
345
6iter 1
(a)−2 −1.5 −1 −0.5 0 0.5 1 1.5−2.5−2−1.5−1−0.500.511.52
45iter 94
(b)
Figure 21.8 We visualize the posterior mean parameters at various stages of the VBEM algorithm applied
to a mixture of Gaussians model on the Old Faithful data. Shading intensity is proportional to the mixing
weight. We initialize with K-means and use α0=0.001as the Dirichlet hyper-parameter. Based on Figure
10.6 of (Bishop 2006b). Figure generated by mixGaussVbDemoFaithful , based on code by Emtiyaz Khan.
1 2 3 4 5 60102030405060708090iter 1
(a)1 2 3 4 5 6020406080100120140160180iter 94
(b)
Figure 21.9 We visualize the posterior values of αkfor the model in Figure 21.8. We see that unnecessary
components get “killed off”. Figure generated by mixGaussVbDemoFaithful .
and Jain 2002). However, in VBEM, we use
˜πk=exp[Ψ(α k)]
exp[Ψ(/summationtext
k/primeαk/prime)](21.155)
Nowexp(Ψ(x))≈x−0.5forx>1.S oi f αk=0, when we compute ˜πk, it’s like we substract
0.5 from the posterior counts. This will hurt small clusters more than large clusters (like a
regressive tax).4The effect is that clusters which have very few (weighted) members become
more and more empty over successive iterations, whereas the popular clusters get more andmore members. This is called the rich get richer phenomenon; we will encounter it again in
Section 25.2, when we discuss Dirichlet process mixture models.
This automatic pruning method is demonstrated in Figure 21.8. We ﬁt a mixture of 6 Gaussians
to the Old Faithful dataset, but the data only really “needs” 2 clusters, so the rest get “killed off”.
4. For more details, see (Liang et al. 2007).
756 Chapter21. Variationalinference
In this example, we used α0=0.001; if we use a larger α0, we do not get a sparsity effect.
In Figure 21.9, we plot q(α|D)at various iterations; we see that the unwanted components
get extinguished. This provides an efficient alternative to performing a discrete search over the
number of clusters.
21.7 Variational message passing and VIBES
We have seen that mean ﬁeld methods, at least of the fully-factorized variety, are all very similar:just compute each node’s full conditional, and average out the neighbors. This is very similarto Gibbs sampling (Section 24.2), except the derivation of the equations is usually a bit morework. Fortunately it is possible to derive a general purpose set of update equations that work forany DGM for which all CPDs are in the exponential family, and for which all parent nodes haveconjugate distributions (Ghahramani and Beal 2001). (See (Wand et al. 2011) for a recent extensionto handle non-conjugate priors.) One can then sweep over the graph, updating nodes one at atime, in a manner similar to Gibbs sampling. This is known as variational message passing or
VMP(Winn and Bishop 2005), and has been implemented in the open-source program VIBES
5.
This is a VB analog to BUGS, which is a popular generic program for Gibbs sampling discussedin Section 24.2.6.
VMP/ mean ﬁeld is best-suited to inference where one or more of the hidden nodes are
continuous (e.g., when performing “Bayesian learning”). For models where all the hidden nodesare discrete, more accurate approximate inference algorithms can be used, as we discuss inChapter 22.
21.8 Local variational bounds *
So far, we have been focusing on mean ﬁeld inference, which is a form of variational inferencebased on minimizing KL(q||˜p),w h e r eqis the approximate posterior, assumed to be factorized,
and˜pis the exact (but unnormalized) posterior. However, there is another kind of variational
inference, where we replace a speciﬁc term in the joint distribution with a simpler function, tosimplify computation of the posterior. Such an approach is sometimes called a local variational
approximation, since we are only modifying one piece of the model, unlike mean ﬁeld, whichis a global approximation. In this section, we study several examples of this method.
21.8.1 Motivating applications
Before we explain how to derive local variational bounds, we give some examples of where thisis useful.
21.8.1.1 Variational logistic regression
Consider the problem of how to approximate the parameter posterior for multiclass logisticregression model under a Gaussian prior. One approach is to use a Gaussian (Laplace) approx-imation, as discussed in Section 8.4.3. However, a variational approach can produce a more
5. Available at http://vibes .sourceforge .net/.
21.8. Localvariationalbounds* 757
accurate approximation to the posterior, since it has tunable parameters. Another advantage is
that the variational approach monotonically optimizes a lower bound on the likelihood of thedata, as we will see.
To see why we need a bound, note that the likelihood can be written as follows:
p(y|X,w)= N/productdisplay
i=1exp/bracketleftbig
yT
iηi−lse(ηi)/bracketrightbig
(21.156)
whereηi=Xiwi=[xT
iw1,...,xTiwM],w h e r eM=C−1(since we set wC=0for
identiﬁability), and where we deﬁne the log-sum-exp orlsefunction as follows:
lse(ηi)/defineslog/parenleftBigg
1+M/summationdisplay
m=1eηim/parenrightBigg
(21.157)
The main problem is that this likelihood is not conjugate to the Gaussian prior. Below we discuss
how to compute “Gaussian-like” lower bounds to this likelihood, which give rise to approximateGaussian posteriors.
21.8.1.2 Multi-task learning
One important application of Bayesian inference for logistic regression is where we have multiplerelated classiﬁers we want to ﬁt. In this case, we want to share information between theparameters for each classiﬁer; this requires that we maintain a posterior distibution over theparameters, so we have a measure of conﬁdence as well as an estimate of the value. We canembed the above variational method inside of a larger hierarchical model in order to performsuch multi-task learning, as described in e.g., (Braun and McAuliffe 2010).
21.8.1.3 Discrete factor analysis
Another situation where variational bounds are useful arises when we ﬁt a factor analysismodel to discrete data. This model is just like multinomial logistic regression, except the inputvariables are hidden factors. We need to perform inference on the hidden variables as well asthe regression weights. For simplicity, we might perform point estimation of the weights, andjust integrate out the hidden variables. We can do this using variational EM, where we use thevariational bound in the E step. See Section 12.4 for details.
21.8.1.4 Correlated topic model
A topic model is a latent variable model for text documents and other forms of discrete data; seeSection 27.3 for details. Often we assume the distribution over topics has a Dirichlet prior, buta more powerful model, known as the correlated topic model, uses a Gaussian prior, which canmodel correlations more easily (see Section 27.4.1 for details). Unfortunately, this also involvesthe lse function. However, we can use our variational bounds in the context of a variational EMalgorithm, as we will see later.
758 Chapter21. Variationalinference
21.8.2 Bohning’s quadratic bound to the log-sum-exp function
All of the above examples require dealing with multiplying a Gaussian prior by a multinomial
likelihood; this is difficult because of the log-sum-exp (lse) term. In this section, we derive a wayto derive a “Gaussian-like” lower bound on this likelihood.
Consider a Taylor series expansion of the lse function around ψ
i∈RM:
lse(ηi) = lse(ψi)+(ηi−ψi)Tg(ψi)+1
2(ηi−ψi)TH(ψi)(ηi−ψi) (21.158)
g(ψi)=e x p [ ψi−lse(ψi)] =S(ψi) (21.159)
H(ψi) = diag(g (ψi))−g(ψi)g(ψi)T(21.160)
wheregandHare the gradient and Hessian of lse, and ψi∈RMis chosen such that equality
holds. An upper bound to lse can be found by replacing the Hessian matrix H(ψi)with a
matrixAisuch that Ai≺H(ψi). (Bohning 1992) showed that this can be achieved if we use
the matrix Ai=1
2/bracketleftBig
IM−1
M+11M1T
M/bracketrightBig
. (Recall that M+1=Cis the number of classes.)
Note that Aiis independent of ψi; however, we still write it as Ai(rather than dropping the
isubscript), since other bounds that we consider below will have a data-dependent curvature
term. The upper bound on lse therefore becomes
lse(ηi)≤1
2ηT
iAiηi−bTiηi+ci (21.161)
Ai=1
2/bracketleftbigg
IM−1
M+11M1TM/bracketrightbigg
(21.162)
bi=Aiψi−g(ψi) (21.163)
ci=1
2ψT
iAiψi−g(ψi)Tψi+lse(ψi) (21.164)
whereψi∈RMis a vector of variational parameters.
We can use the above result to get the following lower bound on the softmax likelihood:
logp(yi=c|xi,w)≥/bracketleftbigg
yT
iXiw−1
2wTXiAiXiw+bT
iXiw−ci/bracketrightbigg
c(21.165)
To simplify notation, deﬁne the pseudo-measurement
˜yi/definesA−1
i(bi+yi) (21.166)
Then we can get a “Gaussianized” version of the observation model:
p(yi|xi,w)≥f(xi,ψi)N(˜yi|Xiw,A−1
i) (21.167)
wheref(xi,ψi)is some function that does not depend on w. Given this, it is easy to compute
the posterior q(w)=N(mN,VN), using Bayes rule for Gaussians. Below we will explain how
to update the variational parameters ψi.
21.8. Localvariationalbounds* 759
21.8.2.1 Applying Bohning’s bound to multinomial logistic regression
Let us see how to apply this bound to multinomial logistic regression. From Equation 21.13, we
can deﬁne the goal of variational inference as maximizing
L(q)/defines−KL(q(w)||p(w|D))+Eq/bracketleftBiggN/summationdisplay
i=1logp(yi|xi,w)/bracketrightBigg
(21.168)
=−KL(q(w)||p(w|D))+Eq/bracketleftBiggN/summationdisplay
i=1yT
iηi−lse(ηi)/bracketrightBigg
(21.169)
=−KL(q(w)||p(w|D))+N/summationdisplay
i=1yT
iEq[ηi]−N/summationdisplay
i=1Eq[lse(ηi)] (21.170)
whereq(w)=N(w|mN,VN)is the approximate posterior. The ﬁrst term is just the KL
divergence between two Gaussians, which is given by
−KL(N(m0,V0)||N(mN,VN)) =−1
2/bracketleftbig
tr(VNV−1
0)−log|VNV−1
0|
+(mN−m0)TV−1
0(mN−m0)−DM/bracketrightbig
(21.171)
whereDMis the dimensionality of the Gaussian, and we assume a prior of the form p(w)=
N(m0,V0), where typically μ0=0DM, andV0is block diagonal. The second term is simply
N/summationdisplay
i=1yT
iEq[ηi]=N/summationdisplay
i=1yT
i˜mi (21.172)
where˜mi/definesXimN. The ﬁnal term can be lower bounded by taking expectations of our
quadratic upper bound on lse as follows:
−N/summationdisplay
i=1Eq[lse(ηi)]≥−1
2tr(Ai˜Vi)−1
2˜miAi˜mi+bT
i˜mi−ci (21.173)
where˜Vi/definesXiVNXT
i. Putting it altogether, we have
LQJ(q)≥−1
2/bracketleftbig
tr(VNV−1
0)−log|VNV−1
0|+(mN−m0)TV−1
0(mN−m0)/bracketrightbig
−1
2DM+N/summationdisplay
i=1yT
i˜mi−1
2tr(Ai˜Vi)−1
2˜miAi˜mi+bT
i˜mi−ci(21.174)
This lower bound combines Jensen’s inequality (as in mean ﬁeld inference), plus the quadratic
lower bound due to the lse term, so we write it as LQJ.
We will use coordinate ascent to optimize this lower bound. That is, we update the variational
posterior parameters VNandmN, and then the variational likelihood parameters ψi. We leave
760 Chapter21. Variationalinference
the detailed derivation as an exercise, and just state the results. We have
VN=/parenleftBigg
V0+N/summationdisplay
i=1XT
iAiXi/parenrightBigg−1
(21.175)
mN=Vn/parenleftBigg
V−1
0m0+N/summationdisplay
i=1XTi(yi+bi)/parenrightBigg
(21.176)
ψi=˜mi=XimN (21.177)
We can exploit the fact that Aiis a constant matrix, plus the fact that Xihas block structure,
to simplify the ﬁrst two terms as follows:
VN=/parenleftBigg
V0+A⊗N/summationdisplay
i=1xixTi/parenrightBigg−1
(21.178)
mN=Vn/parenleftBigg
V−1
0m0+N/summationdisplay
i=1(yi+bi)⊗xi/parenrightBigg
(21.179)
where⊗denotes the kronecker product. See Algorithm 15 for some pseudocode, and http:
//www.cs.ubc.ca/~emtiyaz/software/catLGM .htmlfor some Matlab code.
Algorithm 21.1: Variational inference for multi-class logistic regression using Bohning’s
bound
1Input:yi∈{1,...,C},xi∈RD,i=1:N, priorm0,V0;
2DeﬁneM:=C−1; dummy encode yi∈{0,1}M; deﬁneXi=blockdiag( xT
i);
3Deﬁney:= [y1;...;yN],X:= [X1;...;XN]andA:=1
2/bracketleftBig
IM−1
M+11M1T
M/bracketrightBig
;
4VN:=/parenleftbig
V−1
0+/summationtextn
i=1XT
iAXi/parenrightbig−1;
5InitializemN:=m0;
6repeat
7ψ:=XmN;
8Ψ:=reshape(m,M,N );
9G:= exp(Ψ−lse(Ψ));
10B:=AΨ−G;
11b:= (B);
12mN:=VN/parenleftbig
V−1
0m0+XT(y+b)/parenrightbig
;
13Compute the lower bound LQJusing Equation 21.174;
14untilconverged ;
15ReturnmNandVN;
21.8.3 Bounds for the sigmoid function
In many models, we just have binary data. In this case, we have yi∈{0,1},M=1and
ηi=wTxiwherew∈RDis a weight vector (not matrix). In this case, the Bohning bound
21.8. Localvariationalbounds* 761
−6 −4 −2 0 2 4 600.10.20.30.40.50.60.70.80.91Bohning bound, χ=−2.5
(a)−6 −4 −2 0 2 4 600.10.20.30.40.50.60.70.80.91JJ bound, χ=2.5
(b)
Figure 21.10 Quadratic lower bounds on the sigmoid (logistic) function. In solid red, we plot sigm(x) vs
x. In dotted blue, we plot the lower bound L(x,ξ)vsxforξ=2.5. (a) Bohning bound. This is tight at
−ξ=2.5. (b) JJ bound. This is tight at ξ=±2.5. Figure generated by sigmoidLowerBounds .
becomes
log(1+eη)≤1
2aη2−bη+c (21.180)
a=1
4(21.181)
b=Aψ−(1+e−ψ)−1(21.182)
c=1
2Aψ2−(1+e−ψ)−1ψ+log(1+ eψ) (21.183)
It is possible to derive an alternative quadratic bound for this case, as shown in (Jaakkola and
Jordan 1996b, 2000). This has the following form
log(1+eη)≤λ(ξ)(η2−ξ2)+1
2(η−ξ)+log(1+eξ) (21.184)
λ(ξ)/defines1
4ξtanh(ξ/2) =1
2ξ/bracketleftbigg
sigm(ξ)−1
2/bracketrightbigg
(21.185)
We shall refer to this as the JJ bound, after its inventors, (Jaakkola and Jordan 1996b, 2000).
To facilitate comparison with Bohning’s bound, let us rewrite the JJ bound as a quadratic form
as follows
log(1+eη)≤1
2a(ξ)η2−b(ξ)η+c(ξ) (21.186)
a(ξ)=2λ(ξ) (21.187)
b(ξ)=−1
2(21.188)
c(ξ)=−λ( ξ)ξ2−1
2ξ+log(1+ eξ) (21.189)
The JJ bound has an adaptive curvature term, since adepends on ξ. In addition, it is tight at
two points, as is evident from Figure 21.10(b). By contrast, the Bohning bound is a constantcurvature bound, and is only tight at one point, as is evident from Figure 21.10(a).
762 Chapter21. Variationalinference
If we wish to use the JJ bound for binary logistic regression, we can make some small
modiﬁcations to Algorithm 15. First, we use the new deﬁnitions for ai,biandci. The fact that
aiis not constant when using the JJ bound, unlike when using the Bohning bound, means we
cannot compute VNoutside of the main loop, making the method a constant factor slower.
Next we note that Xi=xT
i, so the updates for the posterior become
V−1
N=V−1
0+2N/summationdisplay
i=1λ(ξi)xixT
i (21.190)
mN=VN/parenleftBigg
V−1
0m0+N/summationdisplay
i=1(yi−1
2)xi/parenrightBigg
(21.191)
Finally, to compute the update for ξi, we isolate the terms in LQJthat depend on ξito get
L(ξ)=N/summationdisplay
i=1/braceleftbig
lnsigm(ξ i)−ξi/2−λ(ξi)(xTiEq/bracketleftbig
wwT/bracketrightbig
xi−ξ2
i)/bracerightbig
+const (21.192)
Optimizing this wrt ξigives the equation
0=λ/prime(ξi)(xTiEq/bracketleftbig
wwT/bracketrightbig
xi−ξ2
i) (21.193)
Nowλ/prime(ξi)is monotonic for ξi≥0, and we do not need to consider negative values of ξiby
symmetry of the bound around ξi=0(see Figure 21.10). Hence the only way to make the above
expression 0 is if we have (xT
iE/bracketleftbig
wwT/bracketrightbig
xi−ξ2
i)=0. Hence the update becomes
(ξnew
i)2=xT
i(VN+mNmTN)xi (21.194)
Although the JJ bound is tighter than the Bohning bound, sometimes it is not tight enough
in order to estimate the posterior covariance accurately. A more accurate approach, which uses
a piecewise quadratic upper bound to lse, is described in (Marlin et al. 2011). By increasing thenumber of pieces, the bound can be made arbitrarily tight.
21.8.4 Other bounds and approximations to the log-sum-exp function *
There are several other bounds and approximations to the multiclass lse function which wecan use, which we brieﬂy summarize below. Note, however, that all of these require numericaloptimization methods to compute m
NandVN, making them more complicated to implement.
21.8.4.1 Product of sigmoids
The approach in (Bouchard 2007) exploits the fact that
log/parenleftBiggK/summationdisplay
k=1eηk/parenrightBigg
≤α+K/summationdisplay
k=1log(1+eηk−α) (21.195)
It then applies the JJ bound to the term on the right.
21.8. Localvariationalbounds* 763
21.8.4.2 Jensen’s inequality
The approach in (Blei and Lafferty 2006a, 2007) uses Jensen’s inequality as follows:
Eq[lse(ηi)] = Eq/bracketleftBigg
log/parenleftBigg
1+M/summationdisplay
c=1exp(xT
iwc)/parenrightBigg/bracketrightBigg
(21.196)
≤log/parenleftBigg
1+M/summationdisplay
c=1Eq/bracketleftbig
exp(xTiwc)/bracketrightbig/parenrightBigg
(21.197)
≤log/parenleftBigg
1+M/summationdisplay
c=1exp(xTimN,c+1
2xTiVN,ccxi)/parenrightBigg
(21.198)
where the last term follows from the mean of a log-normal distribution, which is eμ+σ2/2.
21.8.4.3 Multivariate delta method
The approach in (Ahmed and Xing 2007; Braun and McAuliffe 2010) uses the multivariate delta
method, which is a way to approximate moments of a function using a Taylor series expansion.
In more detail, let f(w)be the function of interest. Using a second-order approximation around
mwe have
f(w)≈f(m)+(w−m)Tg(w−m)+1
2(w−m)TH(w−m) (21.199)
wheregandHare the gradient and Hessian evaluated at m.I fq(w)=N(w|m,V),w eh a v e
Eq[f(w)]≈f(m)+1
2tr[HV] (21.200)
If we use f(w)=l s e (Xiw),w eg e t
Eq[lse(X iw)]≈lse(Xim)+1
2tr[XiHXT
iV] (21.201)
wheregandHfor the lse function are deﬁned in Equations 21.159 and 21.160.
21.8.5 Variational inference based on upper bounds
So far, we have been concentrating on lower bounds. However, sometimes we need to use an
upper bound. For example, (Saul et al. 1996) derives a mean ﬁeld algorithm for sigmoid beliefnets, which are DGMs in which each CPD is a logistic regression function (Neal 1992). Unlike thecase of Ising models, the resulting MRF is not pairwise, but contains higher order interactions.This makes the standard mean ﬁeld updates intractable. In particular, they turn out to involvecomputing an expression which requires evaluating
E/bracketleftBig
log(1+e
−/summationtext
j∈paiwijxj)/bracketrightBig
=E/bracketleftbig
−logsigm(wT
ixpa(i))/bracketrightbig
(21.202)
(Notice the minus sign in front.) (Saul et al. 1996) show how to derive an upper bound on thesigmoid function so as to make this update tractable, resulting in a monotonically convergentinference procedure.
764 Chapter21. Variationalinference
Exercises
Exercise 21.1 Laplace approximation to p(μ,logσ|D)for a univariate Gaussian
ComputeaLaplaceapproximationof p(μ,logσ|D)foraGaussian, usinganuninformativeprior p(μ,logσ)∝
1.
Exercise 21.2 Laplace approximation to normal-gamma
Consider estimating μand/lscript=l o gσfor a Gaussian using an uniformative normal-Gamma prior. The log
posterior is
logp(μ,/lscript|D)=−nlogσ−1
2σ2[ns2+n(y−μ)2] (21.203)
a. Show that the ﬁrst derivatives are
∂
∂μlogp(μ,/lscript|D)=n(y−μ)
σ2(21.204)
∂
∂/lscriptlogp(μ,/lscript|D)=−n +ns2+n(y−μ)2
σ2(21.205)
b. Show that the Hessian matrix is given by
H=/parenleftBigg
∂2
∂μ2logp(μ,/lscript|D)∂2
∂μ∂/lscriptlogp(μ,/lscript|D)
∂2
∂/lscript2logp(μ,/lscript|D)∂2
∂/lscript2logp(μ,/lscript|D)/parenrightBigg
(21.206)
=/parenleftbigg−n
σ2 −2ny−μ
σ2
−2ny−μ
σ2−2
σ2(ns2+n(y−μ)2)/parenrightbigg
(21.207)
c. Use this to derive a Laplace approximation to the posterior p(μ,/lscript|D).
Exercise 21.3 Variational lower bound for VB for univariate Gaussian
Fill in the details of the derivation in Section 21.5.1.6.
Exercise 21.4 Variational lower bound for VB for GMMs
Consider VBEM for GMMs as in Section 21.6.1.4. Show that the lower bound has the following form
L=E[lnp(x|z,μ,Λ)]+ E[lnp(z|π)]+E[lnp(π)]+E[lnp(μ,Λ)]
−E[lnq(z)]−E[lnq(π)]−E[lnq(μ,Λ)] (21.208)
21.8. Localvariationalbounds* 765
where
E[lnp(x|z,μ,Λ)] =1
2/summationdisplay
kNk/braceleftBig
ln˜Λk−Dβ−1
k−νktr(SkLk)
−νk(xk−mk)TLk(xk−mk)−Dln(2π)/bracerightBig
(21.209)
E[lnp(z|π)] =/summationdisplay
i/summationdisplay
krikln˜πk (21.210)
E[lnp(π)] = ln Cdir(α0)+(α0−1)/summationdisplay
kln˜πk (21.211)
E[lnp(μ,Λ)] =1
2/summationdisplay
k/braceleftbigg
Dln(β0/2π)+ln˜Λk−Dβ0
βk
−β0νk(mk−m0)TLk(mk−m0)
+lnCWi(L0,ν0)+ν0−D−1
2ln˜Λk−1
2νktr(L−1
0Lk)/bracerightbigg
(21.212)
E[lnq(z)] =/summationdisplay
i/summationdisplay
kriklnrik (21.213)
E[lnq(π)] =/summationdisplay
k(αk−1)ln˜πk+lnCdir(α) (21.214)
E[lnq(μ,Λ)] =/summationdisplay
k/braceleftbigg1
2ln˜Λk+D
2ln/parenleftbiggβk
2π/parenrightbigg
−D
2−H(q(Λk))/bracerightbigg
(21.215)
where the normalization constant for the Dirichlet and Wishart is given by
Cdir(α)/definesΓ(/summationtext
kαk)/producttext
kΓ(αk)(21.216)
CWi(L,ν)/defines|L|−ν/2/parenleftBig
2νD/2ΓD(ν/2)/parenrightBig−1
(21.217)
ΓD(α)/definesπD(D−1)/4D/productdisplay
j=1Γ(α+(1−j)/2) (21.218)
whereΓD(ν)is the multivariate Gamma function. Finally, the entropy of the Wishart is given by
H(Wi(L,ν)) = −lnCWi(L,ν)−ν−D−1
2E[ln|Λ|]+νD
2(21.219)
where E[ln|Λ|]is given in Equation 21.131.
Exercise 21.5 Derivation of E[logπk]under a Dirichlet distribution
Show that
exp(E[logπk]) =exp(Ψ(α k))
exp(Ψ(/summationtext
k/primeαk/prime))(21.220)
whereπ∼Dir(α).
Exercise 21.6 Alternative derivation of the mean ﬁeld updates for the Ising model
Derive Equation 21.50 by directly optimizing the variational free energy one term at a time.
766 Chapter21. Variationalinference
Exercise 21.7 Forwards vs reverse KL divergence
(Source: Exercise 33.7 of (MacKay 2003).) Consider a factored approximation q(x,y)=q(x)q(y)to a joint
distribution p(x,y). Show that to minimize the forwards KL KL(p||q)we should set q(x)=p(x)and
q(y)=p(y), i.e., the optimal approximation is a product of marginals
Now consider the following joint distribution, where the rows represent yand the columns x.
x
1234
11/8 1/8 0 0
21/8 1/8 0 0
30 0 1/4 0
40 0 0 1/4
Show that the reverse KL KL(q||p)for thisphas three distinct minima. Identify those minima and
evaluate KL(q||p)at each of them. What is the value of KL(q||p)if we setq(x,y)=p(x)p(y)?
Exercise 21.8 Derivation of the structured mean ﬁeld updates for FHMM
Derive the updates in Section 21.4.1.
Exercise 21.9 Variational EM for binary FA with sigmoid link
Consider the binary FA model:
p(xi|zi,θ)=D/productdisplay
j=1Ber(xij|sigm(wT
jzi+βj)) =D/productdisplay
j=1Ber(xij|sigm(η ij)) (21.221)
ηi=˜W˜zi (21.222)
˜ zi/defines(zi;1) (21.223)
˜W/defines(W,β) (21.224)
p(zi)=N (0,I) (21.225)
Derive an EM algorithm to ﬁt this model, using the Jaakkola-Jordan bound. Hint: the answer is in (Tipping
1998), but the exercise asks you to derive these equations.
Exercise 21.10 VB for binary FA with probit link
In Section 11.4.6, we showed how to use EM to ﬁt probit regression, using a model of the form p(yi=
1|zi)=I(zi>0),w h e r e zi∼N(wTxi,1)is latent. Now consider the case where the inputs xiare
also unknown, as in binary factor analysis. Show how to ﬁt this model using variational Bayes, making an
approximation to the posterior of the form q(x,z,W)=/producttextN
i=1q(xi)q(zi)/producttextLl=1q(wl). Hint:q(xi)and
q(wi)will be Gaussian, and q(zi)will be a truncated univariate Gaussian.
22 More variational inference
22.1 Introduction
In Chapter 21, we discussed mean ﬁeld inference, which approximates the posterior by a product
of marginal distributions. This allows us to use different parametric forms for each variable,which is particularly useful when performing Bayesian inference for the parameters of statisticalmodels (such as the mean and variance of a Gaussian or GMM, or the regression weights in aGLM), as we saw when we discussed variational Bayes and VB-EM.
In this chapter, we discuss a slightly different kind of variational inference. The basic idea is
to minimize J(q)=KL(q||˜p),w h e r e˜pis the exact but unnormalized posterior as before, but
where we no longer require qto be factorized. In fact, we do not even require qto be a globally
valid joint distribution. Instead, we only require that qis locally consistent, meaning that the
joint distribution of two adjacent nodes agrees with the corresponding marginals (we will deﬁnethis more precisely below).
In addition to this new kind of inference, we will discuss approximate methods for MAP
state estimation in discrete graphical models. It turns out that algorithms for solving the MAPproblem are very similar to some approximate methods for computing marginals, as we will see.
22.2 Loopy belief propagation: algorithmic issues
There is a very simple approximate inference algorithm for discrete (or Gaussian) graphicalmodels known as loopy belief propagation orLBP. The basic idea is extremely simple: we
apply the belief propagation algorithm of Section 20.2 to the graph, even if it has loops (i.e.,even if it is not a tree). This method is simple and efficient, and often works well in practice,outperforming mean ﬁeld (Weiss 2001). In this section, we discuss the algorithm in more detail.In the next section, we analyse this algorithm in terms of variational inference.
22.2.1 A brief history
When applied to loopy graphs, BP is not guaranteed to give correct results, and may not evenconverge. Indeed, Judea Pearl, who invented belief propagation for trees, wrote the followingabout loopy BP in 1988:
When loops are present, the network is no longer singly connected and local propagation
768 Chapter22. Morevariationalinference
schemes will invariably run into trouble ...If we ignore the existence of loops and
permit the nodes to continue communicating with each other as if the network were
singly connected, messages may circulate indeﬁnitely around the loops and the processmay not converge to a stable equilibrium ...Such oscillations do not normally occur in
probabilistic networks ...which tend to bring all messages to some stable equilibrium as
time goes on. However, this asymptotic equilibrium is not coherent, in the sense that itdoes not represent the posterior probabilities of all nodes of the network — (Pearl 1988,p.195)
Despite these reservations, Pearl advocated the use of belief propagation in loopy networks asan approximation scheme (J. Pearl, personal communication) and exercise 4.7in (Pearl 1988)
investigates the quality of the approximation when it is applied to a particular loopy beliefnetwork.
However, the main impetus behind the interest in BP arose when McEliece et al. (1998) showed
that a popular algorithm for error correcting codes known as turbo codes (Berrou et al. 1993)could be viewed as an instance of BP applied to a certain kind of graph. This was an importantobservation since turbo codes have gotten very close to the theoretical lower bound on codingefficiency proved by Shannon. (Another approach, known as low density parity check or LDPCcodes, has achieved comparable performance; it also uses LBP for decoding — see Figure 22.1for an example.) In (Murphy et al. 1999), LBP was experimentally shown to also work well forinference in other kinds of graphical models beyond the error-correcting code context, and sincethen, the method has been widely used in many different applications.
22.2.2 LBP on pairwise models
We now discuss how to apply LBP to an undirected graphical model with pairwise factors (wediscuss the directed case, which can involve higher order factors, in the next section). Themethod is simple: just continually apply Equations 20.11 and 20.10 until convergence. SeeAlgorithm 8 for the pseudocode, and beliefPropagation for some Matlab code. We will
discuss issues such as convergence and accuracy of this method shortly.
Algorithm 22.1: Loopy belief propagation for a pairwise MRF
1Input: node potentials ψs(xs), edge potentials ψst(xs,xt);
2Initialize messages ms→t(xt)=1for all edges s−t;
3Initialize beliefs bels(xs)=1for all nodes s;
4repeat
5Send message on each edge
ms→t(xt)=/summationtext
xs/parenleftBig
ψs(xs)ψst(xs,xt)/producttext
u∈nbrs\tmu→s(xs)/parenrightBig
;
6Update belief of each node bels(xs)∝ψs(xs)/producttext
t∈nbrsmt→s(xs);
7untilbeliefsdon’tchangesigniﬁcantly ;
8Return marginal beliefs bels(xs);
22.2. Loopybeliefpropagation: algorithmicissues 769
Figure 22.1 (a) A simple factor graph representation of a (2,3) low-density parity check code (factor graphs
are deﬁned in Section 22.2.3.1). Each message bit (hollow round circle) is connected to two parity factors
(solid black squares), and each parity factor is connected to three bits. Each parity factor has the formψ
stu(xs,xt,xu)=I(xs⊗xt⊗xu=1 ),w h e r e⊗is the xor operator. The local evidence factors for
each hidden node are not shown. (b) A larger example of a random LDPC code. We see that this graph is“locally tree-like”, meaning there are no short cycles; rather, each cycle has length ∼logm,w h e r e mis the
number of nodes. This gives us a hint as to why loopy BP works so well on such graphs. (Note, however,that some error correcting code graphs have short loops, so this is not the full explanation.) Source:Figure 2.9 from (Wainwright and Jordan 2008b). Used with kind permission of Martin Wainwright.
22.2.3 LBP on a factor graph
To handle models with higher-order clique potentials (which includes directed models where
some nodes have more than one parent), it is useful to use a representation known as a factorgraph. We explain this representation below, and then describe how to apply LBP to suchmodels.
22.2.3.1 Factor graphs
Afactor graph (Kschischang et al. 2001; Frey 2003) is a graphical representation that uniﬁes
directed and undirected models, and which simpliﬁes certain message passing algorithms. Moreprecisely, a factor graph is an undirected bipartite graph with two kinds of nodes. Round nodesrepresent variables, square nodes represent factors, and there is an edge from each variable toevery factor that mentions it. For example, consider the MRF in Figure 22.2(a). If we assumeone potential per maximal clique, we get the factor graph in Figure 22.2(b), which represents thefunction
f(x
1,x2,x3,x4)=f124(x1,x2,x4)f234(x2,x3,x4) (22.1)
If we assume one potential per edge. we get the factor graph in Figure 22.2(c), which representsthe function
f(x
1,x2,x3,x4)=f14(x1,x4)f12(x1,x2)f34(x3,x4)f23(x2,x3)f24(x2,x4) (22.2)
770 Chapter22. Morevariationalinference
1
2
34
(a)34 21
(b)34 21
(c)
Figure 22.2 (a) A simple UGM. (b) A factor graph representation assuming one potential per maximal
clique. (c) A factor graph representation assuming one potential per edge.
x4x5x3x1x2
(a)x4p(x4|x3)x3
p(x5|x3)
x5p(x3|x1,x2)x1 x2p(x1) p(x2)
(b)
Figure 22.3 (a) A simple DGM. (b) Its corresponding factor graph. Based on Figure 5 of (Yedidia et al.
2001)..
We can also convert a DGM to a factor graph: just create one factor per CPD, and connect that
factor to all the variables that use that CPD. For example, Figure 22.3 represents the following
factorization:
f(x1,x2,x3,x4,x5)=f1(x1)f2(x2)f123(x1,x2,x3)f34(x3,x4)f35(x3,x5) (22.3)
where we deﬁne f123(x1,x2,x3)=p(x3|x1,x2), etc. If each node has at most one parent (and
hence the graph is a chain or simple tree), then there will be one factor per edge (root nodescan have their prior CPDs absorvbed into their children’s factors). Such models are equivalentto pairwise MRFs.
22.2. Loopybeliefpropagation: algorithmicissues 771
Figure 22.4 Message passing on a bipartite factor graph. Square nodes represent factors, and circles
represent variables. Source: Figure 6 of (Kschischang et al. 2001). Used with kind permission of Brendan
Frey.
22.2.3.2 BP on a factor graph
We now derive a version of BP that sends messages on a factor graph, as proposed in (Kschis-
chang et al. 2001). Speciﬁcally, we now have two kinds of messages: variables to factors
mx→f(x)=/productdisplay
h∈nbr(x)\{f}mh→x(x) (22.4)
and factors to variables:
mf→x(x)=/summationdisplay
yf(x,y)/productdisplay
y∈nbr(f)\{x}my→f(y) (22.5)
Herenbr(x)are all the factors that are connected to variable x, andnbr(f)are all the variables
that are connected to factor f. These messages are illustrated in Figure 22.4. At convergence,
we can compute the ﬁnal beliefs as a product of incoming messages:
bel(x)∝/productdisplay
f∈nbr(x)mf→x(x) (22.6)
In the following sections, we will focus on LBP for pairwise models, rather than for factor
graphs, but this is just for notational simplicity.
22.2.4 Convergence
LBP does not always converge, and even when it does, it may converge to the wrong answers.
This raises several questions: how can we predict when convergence will occur? what can we do
to increase the probability of convergence? what can we do to increase the rate of convergence?
We brieﬂy discuss these issues below. We then discuss the issue of accuracy of the results at
convergence.
772 Chapter22. Morevariationalinference
Synchronous Asynchronous No smoothing True01.0
0.90.80.70.60.50.40.30.20.1
0
10 20 30 40 50 60 70 80 90 100
Time (seconds)% of messages converged1.00.90.80.70.60.50.40.30.20.1
0
Time (seconds)P(X10=0 )1.00.90.80.70.60.50.40.30.20.1
0
0 0.1 0.2 0.3 0.4 0.5
Time (seconds)P(X115=0 )
1.00.90.80.70.60.50.40.30.20.1
0
Time (seconds)P(X61=0 )1.00.90.80.70.60.50.40.30.20.1
0
Time (seconds)P(X17=0 )1.00.90.80.70.60.50.40.30.20.1
0
Time (seconds)P(X7=0 )0 0.1 0.2 0.3 0.4 0.5
0 0.1 0.2 0.3 0.4 0.5 0 0.1 0.2 0.3 0.4 0.5 0 0.1 0.2 0.3 0.4 0.5(a)
(d)(b)
(e)(c)
(f)
Figure 22.5 Illustration of the behavior of loopy belief propagation on an 11×11Ising grid with
random potentials, wij∼Unif(−C,C ),w h e r eC=1 1. For larger C, inference becomes harder. (a)
Percentage of messasges that have converged vs time for 3 different update schedules: Dotted = damped
sychronous (few nodes converge), dashed = undamped asychnronous (half the nodes converge), solid =damped asychnronous (all nodes converge). (b-f) Marginal beliefs of certain nodes vs time. Solid straightline = truth, dashed = sychronous, solid = damped asychronous. Source: Figure 11.C.1 of (Koller andFriedman 2009). Used with kind permission of Daphne Koller.
22.2.4.1 When will LBP converge?
The details of the analysis of when LBP will converge are beyond the scope of this chapter, but
we brieﬂy sketch the basic idea. The key analysis tool is the computation tree, which visualizes
the messages that are passed as the algorithm proceeds. Figure 22.6 gives a simple example.In the ﬁrst iteration, node 1 receives messages from nodes 2 and 3. In the second iteration, itreceives one message from node 3 (via node 2), one from node 2 (via node 3), and two messagesfrom node 4 (via nodes 2 and 3). And so on.
The key insight is that Titerations of LBP is equivalent to exact computation in a computation
tree of height T+1. If the strengths of the connections on the edges is sufficiently weak, then
the inﬂuence of the leaves on the root will diminish over time, and convergence will occur. See(Wainwright and Jordan 2008b) and references therein for more information.
22.2. Loopybeliefpropagation: algorithmicissues 773
Figure 22.6 (a) A simple loopy graph. (b) The computation tree, rooted at node 1, after 4 rounds of
message passing. Nodes 2 and 3 occur more often in the tree because they have higher degree than nodes
1 and 2. Source: Figure 8.2 of (Wainwright and Jordan 2008b). Used with kind permission of MartinWainwright.
22.2.4.2 Making LBP converge
Although the theoretical convergence analysis is very interesting, in practice, when faced with a
model where LBP is not converging, what should we do?
One simple way to reduce the chance of oscillation is to use damping. That is, instead of
sending the message Mk
ts, we send a damped message of the form
˜Mk
ts(xs)=λMts(xs)+(1−λ)˜Mk−1
ts(xs) (22.7)
where0≤λ≤1is the damping factor Clearly if λ=1this reduces to the standard scheme,
but forλ<1, this partial updating scheme can help improve convergence. Using a value such
asλ∼0.5is standard practice. The beneﬁts of this approach are shown in Figure 22.5, where
we see that damped updating results in convergence much more often than undamped updating.
It is possible to devise methods, known as double loop algorithms, which are guaranteed to
converge to a local minimum of the same objective that LBP is minimizing (Yuille 2001; Wellingand Teh 2001). Unfortunately, these methods are rather slow and complicated, and the accuracyof the resulting marginals is usually not much greater than with standard LBP. (Indeed, oscillatingmarginals is sometimes a sign that the LBP approximation itself is a poor one.) Consequently,these techniques are not very widely used. In Section 22.4.2, we will see a different convergentversion of BP that is widely used.
22.2.4.3 Increasing the convergence rate: message scheduling
Even if LBP converges, it may take a long time. The standard approach when implementingLBP is to perform synchronous updates, where all nodes absorb messages in parallel, and then
send out messages in parallel. That is, the new messages at iteration k+1are computed in
parallel using
m
k+1=(f1(mk),...,f E(mk)) (22.8)
whereEis the number of edges, and fst(m)is the function that computes the message for
edges→tgiven all the old messages. This is analogous to the Jacobi method for solving linear
774 Chapter22. Morevariationalinference
systems of equations. It is well known (Bertsekas 1997) that the Gauss-Seidel method, which
performs asynchronous updates in a ﬁxed round-robin fashion, converges faster when solving
linear systems of equations. We can apply the same idea to LBP, using updates of the form
mk+1
i=fi/parenleftbig
{mk+1
j:j<i},{mk
j:j>i}/parenrightbig
(22.9)
where the message for edge iis computed using new messages (iteration k+1) from edges
earlier in the ordering, and using old messages (iteration k) from edges later in the ordering.
This raises the question of what order to update the messages in. One simple idea is to use
a ﬁxed or random order. The beneﬁts of this approach are shown in Figure 22.5, where we see
that (damped) asynchronous updating results in convergence much more often than synchronousupdating.
A smarter approach is to pick a set of spanning trees, and then to perform an up-down
sweep on one tree at a time, keeping all the other messages ﬁxed. This is known as tree
reparameterization (TRP) (Wainwright et al. 2001), which should not be confused with the more
sophisticated tree-reweighted BP (often abbreviated to TRW) to be discussed in Section 22.4.2.1.
However, we can do even better by using an adaptive ordering. The intuition is that we should
focus our computational efforts on those variables that are most uncertain. (Elidan et al. 2006)proposed a technique known as residual belief propagation, in which messages are scheduled
to be sent according to the norm of the difference from their previous value. That is, we deﬁnethe residual of new message m
stat iteration kto be
r(s,t,k)=||logmst−logmk
st||∞=m a x
i|logmst(i)
mk
st(i)| (22.10)
We can store messages in a priority queue, and always send the one with highest residual. When
a message is sent from stot, all of the other messages that depend on mst(i.e., messages of
the form mtuwhereu∈nbr(t)\s) need to be recomputed; their residual is recomputed, and
they are added back to the queue. In (Elidan et al. 2006), they showed (experimentally) that thismethod converges more often, and much faster, than using sychronous updating, asynchronousupdating with a ﬁxed order, and the TRP approach.
A reﬁnement of residual BP was presented in (Sutton and McCallum 2007). In this paper, they
use an upper bound on the residual of a message instead of the actual residual. This meansthat messages are only computed if they are going to be sent; they are not just computed forthe purposes of evaluating the residual. This was observed to be about ﬁve times faster thanresidual BP, although the quality of the ﬁnal results is similar.
22.2.5 Accuracy of LBP
For a graph with a single loop, one can show that the max-product version of LBP will ﬁnd thecorrect MAP estimate, if it converges (Weiss 2000). For more general graphs, one can boundthe error in the approximate marginals computed by LBP, as shown in (Wainwright et al. 2003;Vinyals et al. 2010). Much stronger results are available in the case of Gaussian models (Weissand Freeman 2001a; Johnson et al. 2006; Bickson 2009). In particular, in the Gaussian case, ifthe method converges, the means are exact, although the variances are not (typically the beliefsare over conﬁdent).
22.2. Loopybeliefpropagation: algorithmicissues 775
22.2.6 Other speedup tricks for LBP *
There are several tricks one can use to make BP run faster. We discuss some of them below.
22.2.6.1 Fast message computation for large state spaces
The cost of computing each message in BP (whether in a tree or a loopy graph) is O(Kf),
whereKis the number of states, and fis the size of the largest factor (f =2for pairwise
UGMs). In many vision problems (e.g., image denoising), Kis quite large (say 256), because
it represents the discretization of some underlying continuous space, so O(K2)per message
is too expensive. Fortunately, for certain kinds of pairwise potential functions of the form
ψst(xs,xt)=ψ(xs−xt), one can compute the sum-product messages in O(KlogK)time
using the fast Fourier transform or FFT, as explained in (Felzenszwalb and Huttenlocher 2006).The key insight is that message computation is just convolution:
M
k
st(xt)=/summationdisplay
xsψ(xs−xt)h(xs) (22.11)
whereh(xs)=ψs(xs)/producttext
v∈nbr(s)\tMk−1
vs(xs). If the potential function ψ(z)is a Gaussian-like
potential, we can compute the convolution in O(K)time by sequentially convolving with a
small number of box ﬁlters (Felzenszwalb and Huttenlocher 2006).
For the max-product case, a technique called the distance transform can be used to compute
messages in O(K)time. However, this only works if ψ(z)=e x p (−E(z))and where E(z)
has one the following forms: quadratic, E(z)=z2; truncated linear, E(z)=m i n ( c1|z|,c2);o r
Potts model, E(z)=cI(z/negationslash=0 ). See (Felzenszwalb and Huttenlocher 2006) for details.
22.2.6.2 Multi-scale methods
A method which is speciﬁc to 2d lattice structures, which commonly arise in computer vision,is based on multi-grid techniques. Such methods are widely used in numerical linear algebra,where one of the core problems is the fast solution of linear systems of equations; this isequivalent to MAP estimation in a Gaussian MRF. In the computer vision context, (Felzenszwalband Huttenlocher 2006) suggested using the following heuristic to signiﬁcantly speedup BP:construct a coarse-to-ﬁne grid, compute messages at the coarse level, and use this to initializemessages at the level below; when we reach the bottom level, just a few iterations of standard BPare required, since long-range communication has already been achieved via the initializationprocess.
The beliefs at the coarse level are computed over a small number of large blocks. The local
evidence is computed from the average log-probability each possible block label assigns to allthe pixels in the block. The pairwise potential is based on the discrepancy between labels ofneighboring blocks, taking into account their size. We can then run LBP at the coarse level,and then use this to initialize the messages one level down. Note that the modelis still a
ﬂat grid; however, the initialization process exploits the multi-scale nature of the problem. See
(Felzenszwalb and Huttenlocher 2006) for details.
776 Chapter22. Morevariationalinference
22.2.6.3 Cascades
Another trick for handling high-dimensional state-spaces, that can also be used with exact
inference (e.g., for chain-structured CRFs), is to prune out improbable states based on a com-putationally cheap ﬁltering step. In fact, one can create a hierarchy of models which tradeoffspeed and accuracy. This is called a computational cascade. In the case of chains, one can
guarantee that the cascade will never ﬁlter out the true MAP solution (Weiss et al. 2010).
22.3 Loopy belief propagation: theoretical issues *
We now attempt to understand the LBP algorithm from a variational point of view. Our presen-tation is closely based on an excellent 300-page review article (Wainwright and Jordan 2008a).This paper is sometimes called “the monster” (by its own authors!) in view of its length andtechnical difficulty. This section just sketches some of the main results.
To simplify the presentation, we focus on the special case of pairwise UGMs with discrete
variables and tabular potentials. Many of the results generalize to UGMs with higher-order cliquepotentials (which includes DGMs), but this makes the notation more complex (see (Koller andFriedman 2009) for details of the general case).
22.3.1 UGMs represented in exponential family form
We assume the distribution has the following form:
p(x|θ,G)=1
Z(θ)exp⎧
⎨
⎩/summationdisplay
s∈Vθs(xs)+/summationdisplay
(s,t)∈Eθst(xs,xt)⎫
⎬
⎭(22.12)
where graph Ghas nodesVand edgesE. (Henceforth we will drop the explicit conditioning
onθandGfor brevity, since we assume both are known and ﬁxed.) We can rewrite this in
exponential family form as follows:
p(x|θ)=1
Z(θ)exp(−E(x)) (22.13)
E(x)/defines−θTφ(x) (22.14)
whereθ=({θs;j},{θs,t;j,k})are all the node and edge parameters (the canonical parameters),
andφ(x)=({I(xs=j)},{I(xs=j,xt=k)})are all the node and edge indicator functions
(the sufficient statistics). Note: we use s,t∈Vto index nodes and j,k∈Xto index states.
The mean of the sufficient statistics are known as the mean parameters of the model, and are
given by
μ=E[φ(x)] = ({p( xs=j)}s,{p(xs=j,xt=k)}s/negationslash=t)=({μs;j}s,{μst;jk}s/negationslash=t)(22.15)
This is a vector of length d=|X||V|+|X|2|E|, containing the node and edge marginals.
It completely characterizes the distribution p(x|θ), so we sometimes treat μas a distribution
itself.
Equation 22.12 is called the standard overcomplete representation. It is called “overcom-
plete” because it ignores the sum-to-one constraints. In some cases, it is convenient to remove
22.3. Loopybeliefpropagation: theoreticalissues* 777
this redundancy. For example, consider an Ising model where Xs∈{0,1}. The model can be
written as
p(x)=1
Z(θ)exp⎧
⎨
⎩/summationdisplay
s∈Vθsxs+/summationdisplay
(s,t)∈Eθstxsxt⎫
⎬
⎭(22.16)
Hence we can use the following minimal parameterization
φ(x)=(xs,s∈V;xsxt,(s,t)∈E)∈Rd(22.17)
whered=|V|+|E|. The corresponding mean parameters are μs=p(xs=1 )andμst=
p(xs=1,xt=1 ).
22.3.2 The marginal polytope
The space of allowable μvectors is called the marginal polytope, and is denoted M(G),w h e r e
Gis the structure of the graph deﬁning the UGM. This is deﬁned to be the set of all mean
parameters for the given model that can be generated from a valid probability distribution:
M(G)/defines{μ∈Rd:∃ps.t.μ=/summationdisplay
xφ(x)p(x)for some p(x)≥0,/summationdisplay
xp(x)=1}(22.18)
For example, consider an Ising model. If we have just two nodes connected as X1−X2,
one can show that we have the following minimal set of constraints: 0≤μ12,0≤μ12≤μ1,
0≤μ12≤μ2, and1+μ12−μ1−μ2≥0. We can write these in matrix-vector form as
⎛
⎜⎜⎝001
10−1
01−1
−1−11⎞
⎟⎟⎠⎛
⎝μ1
μ2
μ12⎞⎠≥⎛
⎜⎜⎝0
00
−1⎞
⎟⎟⎠(22.19)
These four constraints deﬁne a series of half-planes, whose intersection deﬁnes a polytope,
as shown in Figure 22.7(a).
Since M(G)is obtained by taking a convex combination of the φ(x)vectors, it can also be
written as the convex hull of the feature set:
M(G)=conv{φ
1(x),...,φ d(x)} (22.20)
For example, for a 2 node MRF X1−X2with binary states, we have
M(G)=conv{(0,0,0),(1,0,0),(0,1,0),(1,1,1)} (22.21)
These are the four black dots in Figure 22.7(a). We see that the convex hull deﬁnes the same
volume as the intersection of half-spaces.
The marginal polytope will play a crucial role in the approximate inference algorithms we
discuss in the rest of this chapter.
778 Chapter22. Morevariationalinference
(a) (b) (c)
Figure 22.7 (a) Illustration of the marginal polytope for an Ising model with two variables. (b) Cartoon
illustration of the set MF(G), which is a nonconvex inner bound on the marginal polytope M(G).MF(G)
is used by mean ﬁeld. (c) Cartoon illustration of the relationship between M(G)andL(G), which is used
by loopy BP. The set L(G)is always an outer bound on M(G), and the inclusion M(G)⊂L(G)is strict
whenever Ghas loops. Both sets are polytopes, which can be deﬁned as an intersection of half-planes
(deﬁned by facets), or as the convex hull of the vertices. L(G)actually has fewer facets than M(G), despite
the picture. In fact, L(G)hasO(|X||V|+|X|2|E|)facets, where |X|is the number of states per variable,
|V|is the number of variables, and |E|is the number of edges. By contrast, M(G)hasO(|X||V|)facets.
On the other hand, L(G)has more vertices than M(G), despite the picture, since L(G)contains all the
binary vector extreme points μ∈M(G), plus additional fractional extreme points. Source: Figures 3.6,
5.4 and 4.2 of (Wainwright and Jordan 2008a). Used with kind permission of Martin Wainwright.
22.3.3 Exact inference as a variational optimization problem
Recall from Section 21.2 that the goal of variational inference is to ﬁnd the distribution qthat
maximizes the energy functional
L(q)=−KL(q||p)+log Z=Eq[log ˜p(x)]+H(q)≤logZ (22.22)
where˜p(x)=Zp(x)is the unnormalized posterior. If we write log ˜p(x)=θTφ(x), and we
letq=p, then the exact energy functional becomes
max
μ∈M(G)θTμ+H(μ) (22.23)
whereμ=Ep[φ(x)]is a joint distribution over all state conﬁgurations x(so it is valid to write
H(μ)). Since the KL divergence is zero when p=q, we know that
max
μ∈M(G)θTμ+H(μ)=l o gZ(θ) (22.24)
This is a way to cast exact inference as a variational optimization problem.
Equation 22.24 seems easy to optimize: the objective is concave, since it is the sum of a linear
function and a concave function (see Figure 2.21 to see why entropy is concave); furthermore, we
are maximizing this over a convex set. However, the marginal polytope M(G)has exponentially
many facets. In some cases, there is structure to this polytope that can be exploited by dynamicprogramming (as we saw in Chapter 20), but in general, exact inference takes exponential time.Most of the existing deterministic approximate inference schemes that have been proposed inthe literature can be seen as different approximations to the marginal polytope, as we explainbelow.
22.3. Loopybeliefpropagation: theoreticalissues* 779
22.3.4 Mean ﬁeld as a variational optimization problem
We discussed mean ﬁeld at length in Chapter 21. Let us re-interpret mean ﬁeld inference in
our new more abstract framework. This will help us compare it to other approximate methodswhich we discuss below.
First, letFbe an edge subgraph of the original graph G, and letI(F)⊆Ibe the subset of
sufficient statistics associated with the cliques of F.L e tΩbe the set of canonical parameters
for the full model, and deﬁne the canonical parameter space for the submodel as follows:
Ω(F)/defines{θ∈Ω:θ
α=0∀α∈I\I(F)} (22.25)
In other words, we require that the natural parameters associated with the sufficient statisticsαoutside of our chosen class to be zero. For example, in the case of a fully factorized
approximation, F
0, we remove all edges from the graph, giving
Ω(F0)/defines{θ∈Ω:θst=0∀(s,t)∈E} (22.26)
In the case of structured mean ﬁeld (Section 21.4), we set θst=0for edges which are not in
our tractable subgraph.
Next, we deﬁne the mean parameter space of the restricted model as follows:
MF(G)/defines{μ∈Rd:μ=Eθ[φ(x)]for some θ∈Ω(F)} (22.27)
This is called an inner approximation to the marginal polytope, since MF(G)⊆M(G). See
Figure 22.7(b) for a sketch. Note that MF(G)is a non-convex polytope, which results in multiple
local optima. By contrast, some of the approximations we will consider later will be convex.
We deﬁne the entropy of our approximation H(μ(F))as the entropy of the distribution
μdeﬁned on submodel F. Then we deﬁne the mean ﬁeld energy functional optimization
problem as follows:
max
μ∈MF(G)θTμ+H(μ)≤logZ(θ) (22.28)
In the case of the fully factorized mean ﬁeld approximation for pairwise UGMs, we can writethis objective as follows:
max
μ∈Pd/summationdisplay
s∈V/summationdisplay
xsθs(xs)μs(xs)+/summationdisplay
(s,t)∈E/summationdisplay
xs,xtθst(xs,xt)μs(xs)μt(xt)+/summationdisplay
s∈VH(μs)(22.29)
whereμs∈P, andPis the probability simplex over X.
Mean ﬁeld involves a concave objective being maximized over a non-convex set. It is typically
optimized using coordinate ascent, since it is easy to optimize a scalar concave function over P
for eachμs. For example, for a pairwise UGM we get
μs(xs)∝exp(θs(xs))exp⎛
⎝/summationdisplay
t∈nbr(s)/summationdisplay
xtμt(xt)θst(xs,xt)⎞⎠ (22.30)
22.3.5 LBP as a variational optimization problem
In this section, we explain how LBP can be viewed as a variational inference problem.
780 Chapter22. Morevariationalinference
Figure 22.8 (a) Illustration of pairwise UGM on binary nodes, together with a set of pseudo marginals
that are not globally consistent. (b) A slice of the marginal polytope illustrating the set of feasible edge
marginals, assuming the node marginals are clamped at μ1=μ2=μ3=0.5. Source: Figure 4.1 of
(Wainwright and Jordan 2008a). Used with kind permission of Martin Wainwright.
22.3.5.1 An outer approximation to the marginal polytope
If we want to consider all possible probability distributions which are Markov wrt our model, we
need to consider all vectors μ∈M(G). Since the set M(G)is exponentially large, it is usually
infeasible to optimize over. A standard strategy in combinatorial optimization is to relax the
constraints. In this case, instead of requiring probability vector μto live in M(G), we consider
a vectorτthat only satisﬁes the following local consistency constraints:
/summationdisplay
xsτs(xs)=1 (22.31)
/summationdisplay
xtτst(xs,xt)=τs(xs) (22.32)
The ﬁrst constraint is called the normalization constraint, and the second is called the marginal-
ization constraint. We then deﬁne the set
L(G)/defines{τ≥0:( 2 2.31)holds∀s∈Vand(22.32)holds∀(s,t)∈E} (22.33)
The set L(G)is also a polytope, but it only has O(|V|+|E|)constraints. It is a convex outer
approximation onM(G), as shown in Figure 22.7(c).
We call the terms τs,τst∈L(G)pseudo marginals , since they may not correspond to
marginals of any valid probability distribution. As an example of this, consider Figure 22.8(a).
The picture shows a set of pseudo node and edge marginals, which satisfy the local consistency
requirements. However, they are not globally consistent. To see why, note that τ12implies
p(X1=X2)=0.8,τ23impliesp(X2=X3)=0.8, butτ13impliesp(X1=X3)=0.2, which
is not possible (see (Wainwright and Jordan 2008b, p81) for a formal proof). Indeed, Figure 22.8(b)
shows that L(G)contains points that are not in M(G).
We claim that M(G)⊆L(G), with equality iff Gis a tree. To see this, ﬁrst consider
22.3. Loopybeliefpropagation: theoreticalissues* 781
an element μ∈M(G). Any such vector must satisfy the normalization and marginalization
constraints, hence M(G)⊆L(G).
Now consider the converse. Suppose Tis a tree, and let μ∈L(T). By deﬁnition, this satisﬁes
the normalization and marginalization constraints. However, any tree can be represented in the
form
pμ(x)=/productdisplay
s∈Vμs(xs)/productdisplay
(s,t)∈Eμst(xs,xt)
μs(xs)μt(xt)(22.34)
Hence satsifying normalization and local consistency is enough to deﬁne a valid distribution forany tree. Hence μ∈M(T)as well.
In contrast, if the graph has loops, we have that M(G)/negationslash=L(G). See Figure 22.8(b) for an
example of this fact.
22.3.5.2 The entropy approximation
From Equation 22.34, we can write the exact entropy of any tree structured distribution μ∈
M(T)as follows:
H(μ)=/summationdisplay
s∈VHs(μs)−/summationdisplay
(s,t)∈EIst(μst) (22.35)
Hs(μs)=−/summationdisplay
xs∈Xsμs(xs)logμs(xs) (22.36)
Ist(μst)=/summationdisplay
(xs,xt)∈Xs×Xtμst(xs,xt)logμst(xs,xt)
μs(xs)μt(xt)(22.37)
Note that we can rewrite the mutual information term in the form Ist(μst)=Hs(μs)+Ht(μt)−
Hst(μst), and hence we get the following alternative but equivalent expression:
H(μ)=−/summationdisplay
s∈V(ds−1)Hs(μs)+/summationdisplay
(s,t)∈EHst(μst) (22.38)
wheredsis the degree (number of neighbors) for node s.
TheBethe1approximation to the entropy is simply the use of Equation 22.35 even when we
don’t have a tree:
HBethe(τ)=/summationdisplay
s∈VHs(τs)−/summationdisplay
(s,t)∈EIst(τst) (22.39)
We deﬁne the Bethe free energy as
FBethe(τ)/defines−/bracketleftBig
θTτ+HBethe(τ)/bracketrightBig
(22.40)
We deﬁne the Bethe energy functional as the negative of the Bethe free energy.
1. Hans Bethe was a German-American physicist, 1906–2005.
782 Chapter22. Morevariationalinference
22.3.5.3 The LBP objective
Combining the outer approximation L(G)with the Bethe approximation to the entropy, we get
the following Bethe variational problem (BVP):
min
τ∈L(G)FBethe(τ)= m a x
τ∈L(G)θTτ+HBethe(τ) (22.41)
The space we are optimizing over is a convex set, but the objective itself is not concave (since
HBetheis not concave). Thus there can be multiple local optima of the BVP.
The value obtained by the BVP is an approximation to logZ(θ). In the case of trees, the
approximation is exact, and in the case of models with attractive potentials, the approximationturns out to be an upper bound (Sudderth et al. 2008).
22.3.5.4 Message passing and Lagrange multipliers
In this subsection, we will show that any ﬁxed point of the LBP algorithm deﬁnes a stationarypoint of the above constrained objective. Let us deﬁne the normalization constraint at C
ss(τ)/defines
1−/summationtext
xsτs(xs), and the marginalization constraint as Cts(xs;τ)/definesτs(xs)−/summationtext
xtτst(xs,xt)
for each edge t→s. We can now write the Lagrangian as
L(τ,λ;θ)/definesθTτ+HBethe(τ)+/summationdisplay
sλssCss(τ)
+/summationdisplay
s,t/bracketleftBigg/summationdisplay
xsλts(xs)Cts(xs;τ)+/summationdisplay
xtλst(xt)Cst(xt;τ)/bracketrightBigg
(22.42)
(The constraint that τ≥0is not explicitly enforced, but one can show that it will hold at the
optimum since θ>0.) Some simple algebra then shows that ∇τL=0yields
logτs(xs)=λ ss+θs(xs)+/summationdisplay
t∈nbr(s)λts(xs) (22.43)
logτst(xs,xt)
˜τs(xs)˜τt(xt)=θst(xs,xt)−λts(xs)−λst(xt) (22.44)
where we have deﬁned ˜τs(xs)/defines/summationtext
xtτ(xs,xt). Using the fact that the marginalization con-
straint implies ˜τs(xs)=τs(xs),w eg e t
logτst(xs,xt)=λ ss+λtt+θst(xs,xt)+θs(xs)+θt(xt)
+/summationdisplay
u∈nbr(s)\tλus(xs)+/summationdisplay
u∈nbr(t)\sλut(xt) (22.45)
To make the connection to message passing, deﬁne Mts(xs)=e x p ( λts(xs)). With this
notation, we can rewrite the above equations (after taking exponents of both sides) as follows:
τs(xs)∝exp(θs(xs))/productdisplay
t∈nbr(s)Mts(xs) (22.46)
τst(xs,xt)∝exp(θst(xs,xt)+θs(xs)+θt(xt))
×/productdisplay
u∈nbr(s)\tMus(xs)/productdisplay
u∈nbr(t)\sMut(xt) (22.47)
22.4. Extensionsofbeliefpropagation* 783
where the λterms are absorbed into the constant of proportionality. We see that this is
equivalent to the usual expression for the node and edge marginals in LBP.
To derive an equation for the messages in terms of other messages (rather than in terms of
λts), we enforce the marginalization condition/summationtext
xtτst(xs,xt)=τs(xs). Then one can show
that
Mts(xs)∝/summationdisplay
xt⎡
⎣exp{θst(xs,xt)+θt(xt)}/productdisplay
u∈nbr(t)\sMut(xt)⎤⎦ (22.48)
We see that this is equivalent to the usual expression for the messages in LBP.
22.3.6 Loopy BP vs mean ﬁeld
It is interesting to compare the naive mean ﬁeld (MF) and LBP approximations. There are several
obvious differences. First, LBP is exact for trees whereas MF is not, suggesting LBP will in generalbe more accurate (see (Wainwright et al. 2003) for an analysis). Second, LBP optimizes over nodeand edge marginals, whereas MF only optimizes over node marginals, again suggesting LBP willbe more accurate. Third, in the case that the true edge marginals factorize, so μ
st=μsμt, the
free energy approximations will be the same in both cases.
What is less obvious, but which nevertheless seems to be true, is that the MF objective has
many more local optima than the LBP objective, so optimizing the MF objective seems to beharder. In particular, (Weiss 2001), shows empirically that optimizing MF starting from uniformor random initial conditions often leads to poor results, whereas optimizing BP from uniforminitial messages often leads to good results. Furthermore, initializing MF with the BP marginalsalso leads to good results (although MF tends to be more overconﬁdent than BP), indicating thatthe problem is caused not by the inaccuracy of the MF approximation, but rather by the severenon-convexity of the MF objective, and by the weakness of the standard coordinate descentoptimization method used by MF.
2However, the advantage of MF is that it gives a lower bound
on the partition function, unlike BP, which is useful when using it as a subroutine inside alearning algorithm. Also, MF is easier to extend to other distributions besides discrete andGaussian, as we saw in Chapter 21. Intuitively, this is because MF only works with marginaldistributions, which have a single type, rather than needing to deﬁne pairwise distributions,which may need to have two different types.
22.4 Extensions of belief propagation *
In this section, we discuss various extensions of LBP.
22.4.1 Generalized belief propagation
We can improve the accuracy of loopy BP by clustering together nodes that form a tight loop.This is known as the cluster variational method. The result is a hyper-graph, which is a graph
2. (Honkela et al. 2003) discusses the use of the pattern search algorithm to speedup mean ﬁeld inference in the case
of continuous random variables. It is possible that similar ideas could be adapted to the discrete case, although there
may be no reason to do this, given that LBP already works well in the discrete case.
784 Chapter22. Morevariationalinference
1 2
8 743
95 61245
5 22356
5
547 858
568945 56
Figure 22.9 (a) Kikuchi clusters superimposed on a 3×3lattice graph. (b) Corresponding hyper-graph.
Source: Figure 4.5 of (Wainwright and Jordan 2008b). Used with kind permission of Martin Wainwright.
where there are hyper-edges between sets of vertices instead of between single vertices. Note
that a junction tree (Section 20.4.1) is a kind of hyper-graph. We can represent hyper-graph usinga poset (partially ordered set) diagram, where each node represents a hyper-edge, and there isan arrow e
1→e2ife2⊂e1. See Figure 22.9 for an example.
Lettbe the size of the largest hyper-edge in the hyper-graph. If we allow tto be as large as
the treewidth of the graph, then we can represent the hyper-graph as a tree, and the methodwill be exact, just as LBP is exact on regular trees (with treewidth 1). In this way, we can deﬁnea continuum of approximations, from LBP all the way to exact inference.
Deﬁne L
t(G)to be the set of all pseudo-marginals such that normalization and marginaliza-
tion constraints hold on a hyper-graph whose largest hyper-edge is of size t+1. For example,
in Figure 22.9, we impose constraints of the form
/summationdisplay
x1,x2τ1245(x1,x2,x4,x5)=τ45(x4,x5),/summationdisplay
x6τ56(x5,x6)=τ5(x5),... (22.49)
Furthermore, we approximate the entropy as follows:
HKikuchi(τ)/defines/summationdisplay
g∈Ec(g)Hg(τg) (22.50)
whereHg(τg)is the entropy of the joint (pseudo) distribution on the vertices in set g, andc(g)
is called the overcounting number of setg. These are related to Mobious numbers in set
theory. Rather than giving a precise deﬁnition, we just give a simple example. For the graph inFigure 22.9, we have
H
Kikuchi(τ)=[H1245+H2356+H4578+H5689]
−[H25+H45+H56+H58]+H5 (22.51)
Putting these two approximations together, we can deﬁne the Kikuchi free energy3as follows:
FKikuchi(τ)/defines−/bracketleftBig
θTτ+HKikuchi(τ)/bracketrightBig
(22.52)
3. Ryoichi Kikuchi is a Japanese physicist.
22.4. Extensionsofbeliefpropagation* 785
Our variational problem becomes
min
τ∈Lt(G)FKikuchi(τ)= m a x
τ∈Lt(G)θTτ+HKikuchi(τ) (22.53)
Just as with the Bethe free energy, this is not a concave objective. There are several possible
algorithms for ﬁnding a local optimum of this objective, including a message passing algorithm
known as generalized belief propagation. However, the details are beyond the scope of this
chapter. See e.g., (Wainwright and Jordan 2008b, Sec 4.2) or (Koller and Friedman 2009, Sec11.3.2) for more information. Suffice it to say that the method gives more accurate results thanLBP, but at increased computational cost (because of the need to handle clusters of nodes). Thiscost, plus the complexity of the approach, have precluded it from widespread use.
22.4.2 Convex belief propagation
The mean ﬁeld energy functional is concave, but it is maximized over a non-convex innerapproximation to the marginal polytope. The Bethe and Kikuchi energy functionals are notconcave, but they are maximized over a convex outer approximation to the marginal polytope.Consequently, for both MF and LBP, the optimization problem has multiple optima, so themethods are sensitive to the initial conditions. Given that the exact formulation (Equation 22.24)a concave objective maximized over a convex set, it is natural to try to come up with anappproximation which involves a concave objective being maximized over a convex set.
We now describe one method, known as convex belief propagation. This involves working
with a set of tractable submodels, F, such as trees or planar graphs. For each model F⊂G,
the entropy is higher, H(μ(F))≥H(μ(G)), since Fhas fewer constraints. Consequently, any
convex combination of such subgraphs will have higher entropy, too:
H(μ(G))≤/summationdisplay
F∈Fρ(F)H(μ(F))/definesH(μ,ρ) (22.54)
whereρ(F)≥0and/summationtext
Fρ(F)=1. Furthermore, H(μ,ρ)is a concave function of μ.W en o w
deﬁne the convex free energy as
FConvex(μ,ρ)/defines−/bracketleftbig
μTθ+H(μ,ρ)/bracketrightbig
(22.55)
We deﬁne the concave energy functional as the negative of the convex free energy. We discusshow to optimize ρbelow.
Having deﬁned an upper bound on the entropy, we now consider a convex outerbound on
the marginal polytope of mean parameters. We want to ensure we can evaluate the entropy ofany vector τin this set, so we restrict it so that the projection of τonto the subgraph Glives
in the projection of MontoF:
L(G;F)/defines{τ∈R
d:τ(F)∈M(F)∀F∈F} (22.56)
This is a convex set since each M(F)is a projection of a convex set. Hence we deﬁne our
problem as
min
τ∈L(G;F)FConvex(τ,ρ)= m a x
τ∈L(G;F)τTθ+H(τ,ρ) (22.57)
This is a concave objective being maximized over a convex set, and hence has a unique maxi-mum. We give a speciﬁc example below.
786 Chapter22. Morevariationalinference
b
ef
b
ef
b
ef
b
ef
Figure 22.10 (a) A graph. (b-d) Some of its spanning trees. Source: Figure 7.1 of (Wainwright and Jordan
2008b). Used with kind permission of Martin Wainwright.
22.4.2.1 Tree-reweighted belief propagation
Consider the speciﬁc case where Fis all spanning trees of a graph. For any given tree, the
entropy is given by Equation 22.35. To compute the upper bound, obtained by averaging over
all trees, note that the terms/summationtext
Fρ(F)H(μ(F)s)for single nodes will just be Hs, since node s
appears in every tree, and/summationtext
Fρ(F)=1. But the mutual information term Istreceives weight
ρst=Eρ[I((s,t)∈E(T))], known as the edge appearance probability. Hence we have the
following upper bound on the entropy:
H(μ)≤/summationdisplay
s∈VHs(μs)−/summationdisplay
(s,t)∈EρstIst(μst) (22.58)
The edge appearance probabilities live in a space called the spanning tree polytope . This
is because they are constrained to arise from a distribution over trees. Figure 22.10 gives anexample of a graph and three of its spanning trees. Suppose each tree has equal weight underρ. The edge foccurs in 1 of the 3 trees, so ρ
f=1/3. The edge eoccurs in 2 of the 3 trees,
soρe=2/3. The edge bappears in all of the trees, so ρb=1. And so on. Ideally we can
ﬁnd a distribution ρ, or equivalently edge probabilities in the spanning tree polytope, that make
the above bound as tight as possible. An algorithm to do this is described in (Wainwright et al.2005). (A simpler approach is to generate spanning trees of Gat random until all edges are
covered, or use all single edges with weight ρ
e=1/E.)
What about the set we are optimizing over? We require μ(T)∈M(T)for each tree T, which
means enforcing normalization and local consistency. Since we have to do this for every tree,we are enforcing normalization and local consistency on every edge. Hence L(G;F)=L(G).
So our ﬁnal optimization problem is as follows:
max
τ∈L(G)⎧
⎨
⎩τTθ+/summationdisplay
s∈VHs(τs)−/summationdisplay
(s,t)∈E(G)ρstIst(τst)⎫
⎬
⎭(22.59)
which is the same as the LBP objective except for the crucial ρstweights. So long as ρst>0
for all edges (s,t), this problem is strictly concave with a unique maximum.
How can we ﬁnd this global optimum? As for LBP, there are several algorithms, but perhaps the
simplest is a modiﬁcation of belief propagation known as tree reweighted belief propagation ,
22.5. Expectationpropagation 787
also called TRWorTRBPfor short. The message from ttosis now a function of all messages
sent from other neighbors vtot, as before, but now it is also a function of the message sent
fromstot. Speciﬁcally
Mts(xs)∝/summationdisplay
xtexp/parenleftbigg1
ρstθst(xs,xt)+θt(xt)/parenrightbigg/producttext
v∈nbr(t)\s[Mvt(xt)]ρvt
[Mst(xt)]1−ρts(22.60)
At convergence, the node and edge pseudo marginals are given by
τs(xs)∝exp(θs(xs))/productdisplay
v∈nbr(s)[Mvs(xs)]ρvs(22.61)
τst(xs,xt)∝ϕst(xs,xt)/producttext
v∈nbr(s)\t[Mvs(xs)]ρvs
[Mts(xs)]1−ρst/producttext
v∈nbr(t)\s[Mvt(xt)]ρvt
[Mst(xt)]1−ρts(22.62)
ϕst(xs,xt)/definesexp/parenleftbigg1
ρstθst(xs,xt)+θs(xs)+θt(xt)/parenrightbigg
(22.63)
This algorithm can be derived using a method similar to that described in Section 22.3.5.4.
Ifρst=1for all edges (s,t)∈E, the algorithm reduces to the standard LBP algorithm.
However, the condition ρst=1implies every edge is present in every spanning tree with
probability 1, which is only possible if the original graph is a tree. Hence the method is only
equivalent to standard LBP on trees, when the method is of course exact.
In general, this message passing scheme is not guaranteed to converge to the unique global
optimum. One can devise double-loop methods that are guaranteed to converge (Hazan andShashua 2008), but in practice, using damped updates as in Equation 22.7 is often sufficient toensure convergence.
It is also possible to produce a convex version of the Kikuchi free energy, which one can
optimize with a modiﬁed version of generalized belief propagation. See (Wainwright and Jordan2008b, Sec 7.2.2) for details.
From Equation 22.59, and using the fact that the TRBP entropy approximation is an upper
bound on the true entropy, wee see that the TRBP objective is an upper bound on logZ. Using
the fact that I
st=Hs+Ht−Hst, we can rewrite the upper bound as follows:
logˆZ(θ)/definesτTθ+/summationdisplay
stρstHst(τst)+/summationdisplay
scsHs(τs)≤logZ(θ) (22.64)
wherecs/defines1−/summationtext
tρst.
22.5 Expectation propagation
Expectation propagation (EP) (Minka 2001c) is a form of belief propagation where the mes-
sages are approximated. It is a generalization of the assumed density ﬁltering (ADF) algorithm,discussed in Section 18.5.3. In that method, we approximated the posterior at each step usingan assumed functional form, such as a Gaussian. This posterior can be computed using mo-ment matching, which locally optimizes KL(p||q)for a single term. From this, we derived the
message to send to the next time step.
788 Chapter22. Morevariationalinference
ADF works well for sequential Bayesian updating, but the answer it gives depends on the
order in which the data is seen. EP essentially corrects this ﬂaw by making multiple passes over
the data (thus EP is an offline or batch inference algorithm).
22.5.1 EP as a variational inference problem
We now explain how to view EP in terms of variational inference. We follow the presentation of(Wainwright and Jordan 2008b, Sec 4.3), which should be consulted for further details.
Suppose the joint distribution can be written in exponential family form as follows:
p(x|θ,˜θ)∝f
0(x)exp(θTφ(x))dI/productdisplay
i=1exp(˜θT
iΦi(x)) (22.65)
where we have partitioned the parameters and the sufficient statistics into a tractable term θof
sizedTanddIintractable terms ˜θi, each of size b.
For example, consider the problem of inferring an unknown vector x, when the observation
model is a mixture of two Gaussians, one centered at xand one centered at 0. (This can be
used to represent outliers, for example.) Minka (who invented EP) calls this the clutter problem.
More formally, we assume an observation model of the form
p(y|x)=( 1−w)N(y|x,I)+wN(y|0,aI) (22.66)
where0<w<1 is the known mixing weight (fraction of outliers), and a>0is the variance
of the background distribution. Assuming a ﬁxed prior of the form p(x)=N(x|0,Σ), we can
write our model in the required form as follows:
p(x|y1:N)∝N(x|0,Σ)N/productdisplay
i=1p(yi|x) (22.67)
=e x p/parenleftbigg
−1
2xTΣ−1x/parenrightbigg
exp/parenleftBiggN/summationdisplay
i=1logp(yi|x)/parenrightBigg
(22.68)
This matches our canonical form where f0(x)exp(θTφ(x))corresponds to exp/parenleftbig
−1
2xTΣ−1x/parenrightbig
,
usingφ(x)=(x,xxT), and we set Φi(x)=l o gp(yi|x),˜θi=1, anddI=N.
The exact inference problem corresponds to
max
(τ,˜τ)∈M(φ,Φ)τTθ+˜τT˜θ+H((τ,˜τ)) (22.69)
whereM(φ,Φ)is the set of mean parameters realizable by any probability distribution as seen
through the eyes of the sufficient statistics:
M(φ,Φ)={(μ,˜μ)∈RdT×RdIb:(μ,˜μ)=E[(φ(X),Φ1(X),...,ΦdI(X))]}(22.70)
As it stands, it is intractable to perform inference in this distribution. For example, in our
clutter example, the posterior contains 2Nmodes. But suppose we incorporate just one of the
intractable terms, say the i’th one; we will call this the Φi-augmented distribution:
p(x|θ,˜θi)∝f0(x)exp(θTφ(x))exp(˜θTiΦi(x)) (22.71)
22.5. Expectationpropagation 789
In our clutter example, this becomes
p(x|θ,˜θi)=e x p/parenleftbigg
−1
2xTΣ−1x/parenrightbigg
[wN(yi|0,aI)+(1− w)N(yi|x,I)] (22.72)
Thisistractable to compute, since it is just a mixture of 2 Gaussians.
The key idea behind EP is to work with these the Φi-augmented distributions in an iterative
fashion. First, we approximate the convex set M(φ,Φ)with another, larger convex set:
L(φ,Φ)/defines{(τ,˜τ):τ∈M(φ),(τ,˜τi)∈M(φ,Φi)} (22.73)
whereM(φ)={μ∈RdT:μ=E[φ(X)]}andM(φ,Φi)={(μ,˜μi)∈RdT×Rb:
(μ,˜μi)=E[(φ(X),Φi(X))]. Next we approximate the entropy by the following term-by-term
approximation:
Hep(τ,˜τ)/definesH(τ)+dI/summationdisplay
i=1[H(τ,˜τi)−H(τ)] (22.74)
Then the EP problem becomes
max
(τ,˜τ)∈L(φ,Φ)τTθ+˜τT˜θ+Hep(τ,˜τ) (22.75)
22.5.2 Optimizing the EP objective using moment matching
We now discuss how to maximize the EP objective in Equation 22.75. Let us duplicate τdI
times to yield ηi=τ. The augmented set of parameters we need to optimize is now
(τ,(ηi,˜τi)dI
i=1)∈RdT×(RdT×Rb)dI(22.76)
subject to the constraints that ηi=τand(ηi,˜τi)∈M(φ;Φi). Let us associate a vector of
Lagrange multipliers λi∈RdTwith the ﬁrst set of constraints. Then the partial Lagrangian
becomes
L(τ;λ)=τTθ+H(τ)+di/summationdisplay
i=1/bracketleftBig
˜τT
i˜θi+H((ηi,˜τi))−H(ηi)+λT
i(τ−ηi)/bracketrightBig
(22.77)
By solving∇τL(τ;λ)=0, we can show that the corresponding distribution in M(φ)has
the form
q(x|θ,λ)∝f0(x)exp{(θ+dI/summationdisplay
i=1λi)Tφ(x)} (22.78)
TheλTiφ(x)terms represents an approximation to the i’th intractable term using the sufficient
statisticsfromthebasedistribution, aswewillseebelow. Similarly, bysolving ∇(ηi,˜τi)L(τ;λ)=
0, we ﬁnd that the corresponding distribution in M(φ,Φi)has the form
qi(x|θ,˜θi,λ)∝f0(x)exp{(θ+/summationdisplay
j/negationslash=iλj)Tφ(x)+˜θT
iΦi(x)} (22.79)
790 Chapter22. Morevariationalinference
This corresponds to removing the approximation to the i’th term, λi, from the base distribution,
and adding in the correct i’th term, Φi. Finally,∇λL(τ;λ)=0just enforces the constraints
thatτ=Eq[φ(X)]andηi=Eqi[φ(X)]are equal. In other words, we get the following
moment matching constraints:
/integraldisplay
q(x|θ,λ)φ(x)dx=/integraldisplay
qi(x|θ,˜θi,λ)φ(x)dx (22.80)
Thus the overall algorithm is as follows. First we initialize the λi. Then we iterate the following
to convergence: pick a term i; compute qi(corresponding to removing the old approximation
toΦiand adding in the new one); then update the λiterm inqby solving the moment
matching equation Eqi[φ(X)] = Eq[φ(X)]. (Note that this particular optimization scheme is
not guaranteed to converge to a ﬁxed point.)
An equivalent way of stating the algorithm is as follows. Let us assume the true distribution
is given by
p(x|D)=1
Z/productdisplay
ifi(x) (22.81)
We approximate each fiby˜fiand set
q(x)=1
Z/productdisplay
i˜fi(x) (22.82)
Now we repeat the following until convergence:
1. Choose a factor ˜fito reﬁne.
2. Remove ˜fifrom the posterior by dividing it out:
q−i(x)=q(x)
˜fi(x)(22.83)
This can be implemented by substracting off the natural parameters of ˜fifromq.
3. Compute the new posterior qnew(x)by solving
min
qnew(x)KL/parenleftbigg1
Zifi(x)q−i(x)||qnew(x)/parenrightbigg
(22.84)
This can be done by equating the moments of qnew(x)with those of qi(x)∝q−i(x)fi(x).
The corresponding normalization constant has the form
Zi=/integraldisplay
q−i(x)fi(x)dx (22.85)
4. Compute the new factor (message) that was implicitly used (so it can be later removed):
˜fi(x)=Ziqnew(x)
q−i(x)(22.86)
22.5. Expectationpropagation 791
After convergence, we can approximate the marginal likelihood using
p(D)≈/integraldisplay/productdisplay
i˜fi(x)dx (22.87)
We will give some examples of this below which will make things clearer.
22.5.3 EP for the clutter problem
Let us return to considering the clutter problem. Our presentation is based on (Bishop 2006b).4
For simplicity, we will assume that the prior is a spherical Gaussian, p(x)=N(0,bI). Also, we
choose to approximate the posterior by a spherical Gaussian, q(x)=N(m,vI).W es e tf0(x)
to be the prior; this can be held ﬁxed. The factor approximations will be “Gaussian like” terms
of the form
˜fi(x)=siN(x|mi,viI) (22.88)
Note, however, that in the EP updates, the variances may be negative! Thus these terms shouldbe interpreted as functions, but not necessarily probability distributions. (If the variance isnegative, it means the that ˜f
icurves upwards instead of downwards.)
First we remove ˜fi(x)fromq(x)by division, which yields q−i(x)=N(m−i,v−iI),w h e r e
v−1
−i=v−1−v−1
i (22.89)
m−i=m+v−iv−1
i(m−mi) (22.90)
The normalization constant is given by
Zi=( 1−w)N(yi|m−i,(v−i+1)I)+wN(yi|0,aI) (22.91)
Next we compute qnew(x)by computing the mean and variance of q−i(x)fi(x)as follows:
m=m−i+ρiv−i
v−i+1(yi−m−i) (22.92)
v=v−i−ρiv2
−i
v−i+1+ρi(1−ρi)v2
−i||yi−mi||2
D(v−i+1)2(22.93)
ρi=1−w
ZiN(yi|0,aI) (22.94)
whereDis the dimensionality of xandρican be interpreted as the probability that yiis not
clutter.
Finally, we compute the new factor ˜fiwhose parameters are given by
v−1
i=v−1−v−1
−i (22.95)
mi=m−i+(vi+v−i)v−1
−i(m−m−i) (22.96)
si=Zi
(2πvi)D/2N(mi|m−i,(vi+v−i)I)(22.97)
4. For a handy “crib sheet”, containing many of the standard equations needed for deriving Gaussian EP algorithms, see
http://research .microsoft .com/en-us/um/people/minka/papers/ep/minka-ep-quickref .pdf.
792 Chapter22. Morevariationalinference
At convergence, we can approximate the marginal likelihood as follows:
p(D)≈(2πv)D/2exp(c/2)N/productdisplay
i=1si(2πvi)−D/2(22.98)
c/definesmTm
v−N/summationdisplay
i=1mT
imi
vi(22.99)
In (Minka 2001d), it is shown that, at least on this example, EP gives better accuracy per unit
of CPU time than VB and MCMC.
22.5.4 LBP is a special case of EP
We now show that loopy belief propagation is a special case of EP, where the base distribution
contains the node marginals and the “intractable” terms correspond to the edge potentials. Weassume the model has the pairwise form shown in Equation 22.12. If there are mnodes, the
base distribution takes the form
p(x|θ
1,...,θm,0)∝/productdisplay
s∈Vexp(θs(xs)) (22.100)
The entropy of this distribution is simply
H(τ1:m)=/summationdisplay
sH(τs) (22.101)
If we add in the u−vedge, the Φuvaugmented distribution has the form
p(x|θ1:m,θuv)∝/bracketleftBigg/productdisplay
s∈Vexp(θs(xs))/bracketrightBigg
exp(θuv(xu,xv)) (22.102)
Since this graph is a tree, the exact entropy of this distribution is given by
H(τ1:m,˜τuv)=/summationdisplay
sH(τs)−I(˜τuv) (22.103)
whereI(τuv)=H(τu)+H(τv)−H(τuv)is the mutual information. Thus the EP approxi-
mation to the entropy of the full distribution is given by
Hep(τ,˜τ)=H (τ)+/summationdisplay
(u,v)∈E[H(τ1:m,˜τuv)−H(τ)] (22.104)
=/summationdisplay
sH(τs)+/summationdisplay
(u,v)∈E/bracketleftBigg/summationdisplay
sH(τs)−I(˜τuv)−/summationdisplay
sH(τs)/bracketrightBigg
(22.105)
=/summationdisplay
sH(τs)−/summationdisplay
(u,v)∈EI(˜τuv) (22.106)
which is precisely the Bethe approximation to the entropy.
22.5. Expectationpropagation 793
We now show that the convex set that EP is optimizing over, L(φ,Φ)given by Equation 22.73,
is the same as the one that LBP is optimizing over, L(G)given in Equation 22.33. First, let us
consider the set M(φ). This consists of all marginal distributions (τs,s∈V), realizable by
a factored distribution. This is therefore equivalent to the set of all distributions which satisfy
non-negativity τs(xs)≥0and the local normalization constraint/summationtext
xsτ(xs)=1. Now consider
the setM(φ,Φuv)for a single u−vedge. This is equivalent to the marginal polytope M(Guv),
whereGuvis the graph with the single u−vedge added. Since this graph corresponds to a
tree, this set also satisﬁes the marginalization conditions
/summationdisplay
xvτuv(xu,xv)=τu(xu),/summationdisplay
xuτuv(xu,xv)=τv(xv) (22.107)
SinceL(φ,Φ)is the union of such sets, as we sweep over all edges in the graph, we recover
the same set as L(G).
We have shown that the Bethe approximation is equivalent to the EP approximation. We now
show how the EP algorithm reduces to LBP. Associated with each intractable term i=(u,v)
will be a pair of Lagrange multipliers, (λuv(xv),λvu(xu)). Recalling that θTφ(x)=[θs(xs)]s,
the base distribution in Equation 22.78 has the form
q(x|θ,λ)∝/productdisplay
sexp(θs(xs))/productdisplay
(u,v)∈Eexp(λuv(xv)+λvu(xu)) (22.108)
=/productdisplay
sexp⎛
⎝θs(xs)+/summationdisplay
t∈N(s)λts(xs)⎞⎠ (22.109)
Similarly, the augmented distribution in Equation 22.79 has the form
q
uv(x|θ,λ)∝q(x|θ,λ)exp(θuv(xu,xv)−λuv(xv)−λvu(xu)) (22.110)
We now need to update τu(xu)andτv(xv)to enforce the moment matching constraints:
(Eq[xs],Eq[xt]) = (E quv[xs],Equv[xt]) (22.111)
It can be shown that this can be done by performing the usual sum-product message passing
step along the u−vedge (in both directions), where the messages are given by Muv(xv)=
exp(λuv(xv)), andMvu(xu)=e x p ( λvu(xu)). Once we have updated q, we can derive the
corresponding messages λuvandλvu.
The above analysis suggests a natural extension, where we make the base distribution be a
tree structure instead of a fully factored distribution. We then add in one edge at a time, absorbits effect, and approximate the resulting distribution by a new tree. This is known as tree EP
(Minka and Qi 2003), and is more accurate than LBP, and sometimes faster. By considering otherkinds of structured base distributions, we can derive algorothms that outperform generalizationbelief propagation (Welling et al. 2005).
22.5.5 Ranking players using TrueSkill
We now present an interesting application of EP to the problem of ranking players who competein games. Microsoft uses this method — known as TrueSkill (Herbrich et al. 2007) — to rank
794 Chapter22. Morevariationalinference
6
6
6
6
3 3 3 3
W W W
G G
\ \
(a)
) ) )
K K
N N6 6 6
G G
\ \




(b)
Figure 22.11 (a) A DGM representing the TrueSkill model for 4 players and 3 teams, where team 1 is player
1, team 2 is players 2 and 3, and team 3 is player 4. We assume there are two games, team 1 vs team 2,
and team 2 vs team 3. Nodes with double circles are deterministic. (b) A factor graph representation of themodel where we assume there are 3 players (and no teams). There are 2 games, player 1 vs player 2, andplayer 2 vs player 3. The numbers inside circles represent steps in the message passing algorithm.
22.5. Expectationpropagation 795
players who use the Xbox 360 Live online gaming system; this system process over 105games
per day, making this one of the largest application of Bayesian statistics to date.5The same
method can also be applied to other games, such as tennis or chess.6
The basic idea is shown in Figure 22.11(a). We assume each player ihas a latent or true
underlying skill level si∈R. These skill levels can evolve over time according to a simple
dynamical model, p(st
i|st−1
i)=N(sti|st−1
i,γ2). In any given game, we deﬁne the performance
of player ito bepi, which has the conditional distribution p(pi|si)=N(pi|si,β2). We then
deﬁne the performance of a team to be the sum of the performance of its constituent players.
For example, in Figure 22.11(a), we assume team 2 is composed of players 2 and 3, so we deﬁnet
2=p2+p3. Finally, we assume that the outcome of a game depends on the difference in
performance levels of the two teams. For example, in Figure 22.11(a), we assume y1=s i g n (d1),
whered1=t1−t2, and where y1=+ 1means team 1 won, and y1=−1means team 2 won.
Thus the prior probability that team 1 wins is
p(y1=+ 1|s)=/integraldisplay
p(d1>0|t1,t2)p(t1|s1)p(t2|s2)dt1dt2 (22.112)
wheret1∼N(s1,β2)andt2∼N(s2+s3,β2).7
To simplify the presentation of the algorithm, we will ignore the dynamical model and assume
a common static factored Gaussian prior, N(μ0,σ2
0), on the skills. Also, we will assume that
each team consists of 1 player, so ti=pi, and that there can be no ties. Finally, we will integrate
out the performance variables pi, and assume β2=1, leading to a ﬁnal model of the form
p(s)=/productdisplay
iN(si|μ0,σ2) (22.113)
p(dg|s)=N (dg|sig−sjg,1) (22.114)
p(yg|dg)=I(yg=s i g n (dg)) (22.115)
whereigis the ﬁrst player of game g, andjgis the second player. This is represented in
factor graph form in in Figure 22.11(b). We have 3 kinds of factors: the prior factor, fi(si)=
N(si|μ0,σ2
0), the game factor, hg(sig,sjg,dg)=N(dg|sig−sjg,1), and the outcome factor,
kg(dg,yg)=I(yg=s i g n (dg)).
Since the likelihood term (yg|dg)is not conjugate to the Gaussian priors, we will have to
perform approximate inference. Thus even when the graph is a tree, we will need to iterate.(If there were an additional game, say between player 1 and player 3, then the graph would nolonger be a tree.) We will represent all messages and marginal beliefs by 1d Gaussians. We willuse the notation μandvfor the mean and variance (the moment parameters), and λ=1/v
andη=λμfor the precision and precision-adjusted mean (the natural parameters).
5. Naive Bayes classiﬁers, which are widely used in spam ﬁlters, are often described as the most common application
of Bayesian methods. However, the parameters of such models are usually ﬁt using non-Bayesian methods, such as
penalized maximum likelihood.
6. Our presentation of this algorithm is based in part on lecture notes by Carl Rasmussen Joaquin Quinonero-Candela,
available at http://mlg .eng.cam .ac.uk/teaching/4f13/1112/lect13 .pdf.
7. Note that this is very similar to probit regression, discussed in Section 9.4, except the inputs are (the differences of)latent 1 dimensional factors. If we assume a logistic noise model instead of a Gaussian noise model, we recover the
Bradley Terry model of ranking.
796 Chapter22. Morevariationalinference
We initialize by assuming that at iteration 0, the initial upward messages from factors hgto
variables siare uniform, i.e.,
m0
hg→sig(sig)=1,λ0h
g→sig=0,η0
hg→sig=0 (22.116)
and similarly m0
hg→sjg(sjg)=1. The messages passing algorithm consists of 6 steps per game,
as illustrated in Figure 22.11(b). We give the details of these steps below.
1. Compute the posterior over the skills variables:
qt(si)=f (si)/productdisplay
gmt−1
hg→si(si)=Nc(si|ηt
i,λt
i) (22.117)
λti=λ0+/summationdisplay
gλt−1
hg→si,ηt
i=η0+/summationdisplay
gηt−1
hg→si(22.118)
2. Compute the message from the skills variables down to the game factor hg:
mts
ig→hg(sig)=qt(sig)
mt
hg→sig(sig),mt
sjg→hg(sjg)=qt(sjg)
mt
hg→sjg(sjg)(22.119)
where the division is implemented by subtracting the natural parameters as follows:
λt
sig→hg=λts
ig−λth
g→sig,ηt
sig→hg=ηt
sig−ηt
hg→sig(22.120)
and similarly for sjg.
3. Compute the message from the game factor hgdown to the difference variable dg:
mth
g→dg(dg)=/integraldisplay/integraldisplay
hg(dg,sig,sjg)mts
ig→hg(sig)mts
jg→hg(sjg)dsigdsjg(22.121)
=/integraldisplay/integraldisplay
N(dg|sig−sjg,1)N(sig|μts
ig→hg,vt
sig→hg) (22.122)
N(sjg|μts
jg→hg,vt
sjg→hg)dsigdsjg (22.123)
=N(dg|μth
g→dg,vt
hg→dg) (22.124)
vt
hg→dg=1 +vt
sig→hg+vt
sjg→hg(22.125)
μth
g→dg=μts
ig→hg−μts
jg→hg(22.126)
4. Compute the posterior over the difference variables:
qt(dg)∝mth
g→dg(dg)mkg→dg(dg) (22.127)
=N(dg|μth
g→dg,vt
hg→dg)I(yg=s i g n (dg)) (22.128)
≈N(dg|μtg,vt
g) (22.129)
22.5. Expectationpropagation 797
−6 −4 −2 0 2 4 601234567Ψ function
(a)−6 −4 −2 0 2 4 600.10.20.30.40.50.60.70.80.91Λ function
(b)
Figure 22.12 (a)Ψfunction. (b) Λfunction. Based on Figure 2 of (Herbrich et al. 2007). Figure generated
bytrueskillPlot .
(Note that the upward message from the kgfactor is constant.) We can ﬁnd these parameters
by moment matching as follows:
μt
g=ygμth
g→dg+σt
hg→dgΨ/parenleftBigg
ygμt
hg→dg
σt
hg→dg/parenrightBigg
(22.130)
vt
g=vt
hg→dg/bracketleftBigg
1−Λ/parenleftBigg
ygμth
g→dg
σt
hg→dg/parenrightBigg/bracketrightBigg
(22.131)
Ψ(x) /definesN(x|0,1)
Φ(x)(22.132)
Λ(x) /definesΨ(x)(Ψ(x)+x) (22.133)
(The derivation of these equations is left as a modiﬁcation to Exercise 11.15.) These functions
are plotted in Figure 22.12. Let us try to understand these equations. Suppose μt
hg→dgis a
large positive number. That means we expect, based on the current estimate of the skills,
thatdgwill be large and positive. Consequently, if we observe yg=+ 1, we will not be
surprised that igis the winner, which is reﬂected in the fact that the update factor for the
mean is small, Ψ(ygμt
hg→dg)≈0. Similarly, the update factor for the variance is small,
Λ(ygμth
g→dg)≈0. However, if we observe yg=−1, then the update factor for the mean
and variance becomes quite large.
5. Compute the upward message from the difference variable to the game factor hg:
mt
dg→hg(dg)=qt(dg)
mt
dg→hg(dg)(22.134)
λt
dg→hh=λtg−λth
g→dg,ηt
dg→hh=ηt
g−ηt
hg→dg(22.135)
6. Compute the upward messages from the game factor to the skill variables. Let us assume
798 Chapter22. Morevariationalinference
2
53
4
61
(a)0 1 2 3 4 5 6 7−2−1.5−1−0.500.511.52
(b)
Figure 22.13 (a) A DAG representing a partial ordering of players. (b) Posterior mean plus/minus 1 standard
deviation for the latent skills of each player based on 26 games. Figure generated by trueskillDemo .
thatigis the winner, and jgis the loser. Then we have
mt
hg→sig(sig)=/integraldisplay/integraldisplay
hg(dg,sig,sjg)mtd
g→hg(dg)mts
jg→hg(sjg)ddgdsjg(22.136)
=N(sig|μth
g→sig,vt
hg→sig) (22.137)
vt
hg→sig=1 +vt
dg→hg+vt
sjg→hg(22.138)
μth
g→sig=μtd
g→hg+μts
jg→hg(22.139)
And similarly
mth
g→sjg(sjg)=/integraldisplay/integraldisplay
hg(dg,sig,sjg)mtd
g→hg(dg)mts
ig→hg(sig)ddgdsig(22.140)
=N(sjg|μth
g→sjg,vt
hg→sjg) (22.141)
vt
hg→sjg=1 +vt
dg→hg+vt
sig→hg(22.142)
μth
g→sjg=μtd
g→hg−μts
ig→hg(22.143)
When we compute qt+1(sig)at the next iteration, by combining mt
hg→sig(sig)with the
prior factor, we will see that the posterior mean of siggoes up. Similarly, the posterior mean
ofsjggoes down.
It is straightforward to combine EP with ADF to perform online inference, which is necessary
for most practical applications.
Let us consider a simple example of this method. We create a partial ordering of 5 players
as shown in Figure 22.13(a). We then sample some game outcomes from this graph, where a
22.6. MAPstateestimation 799
parent always beats a child. We pass this data into (5 iterations of) the EP algorithm and infer the
posterior mean and variance for each player’s skill level. The results are shown in Figure 22.13(b).We see that the method has correctly inferred the rank ordering of the players.
22.5.6 Other applications of EP
The TrueSkill model was developed by researchers at Microsoft. They and others have extendedthe model to a variety of other interesting applications, including personalized ad recommenda-tion (Stern et al. 2009), predicting click-through-rate on ads in the Bing search engine (Graepelet al. 2010), etc. They have also developed a general purpose Bayesian inference toolbox basedon EP called infer.net (Minka et al. 2010).
EP has also been used for a variety of other models, such as Gaussian process classiﬁcation
(Nickisch and Rasmussen 2008). See http://research .microsoft .com/en-us/um/people/
minka/papers/ep/roadmap .htmlfor a list of other EP applications.
22.6 MAP state estimation
In this section, we consider the problem of ﬁnding the most probable conﬁguration of variablesin a discrete-state graphical model, i.e., our goal is to ﬁnd a MAP assignment of the followingform:
x
∗=a r gm a x
x∈Xmp(x|θ) = arg max
x∈Xm/summationdisplay
i∈Vθi(xi)+/summationdisplay
f∈Fθf(xf) = arg max
x∈XmθTφ(x)(22.144)
whereθiare the singleton node potentials, and θfare the factor potentials. (In this section, we
follow the notation of (Sontag et al. 2011), which considers the case of general potentials, not justpairwise ones.) Note that the partition function Z(θ)plays no role in MAP estimation.
If the treewidth is low, we can solve this problem with the junction tree algorithm (Sec-
tion 20.4), but in general this problem is intractable. In this section, we discuss various approxi-mations, building on the material from Section 22.3.
22.6.1 Linear programming relaxation
We can rewrite the objective in terms of the variational parameters as follows:
arg max
x∈XmθTφ(x) = arg max
μ∈M(G)θTμ (22.145)
whereφ(x)=[{I(xs=j)},{I(xf=k)})andμis a probability vector in the marginal
polytope. To see why this equation is true, note that we can just set μto be a degenerate
distribution with μ(xs)=I(xs=x∗
s),w h e r ex∗sis the optimal assigment of node s. So instead
of optimizing over discrete assignments, we now optimize over probability distributions μ.
It seems like we have an easy problem to solve, since the objective in Equation 22.145 is linear
inμ, and the constraint set M(G)is convex. The trouble is, M(G)in general has a number of
facets that is exponential in the number of nodes.
A standard strategy in combinatorial optimization is to relax the constraints. In this case,
instead of requiring probability vector μto live in the marginal polytope M(G), we allow it to
800 Chapter22. Morevariationalinference
live inside a convex outer bound L(G). Having deﬁned this relaxed constraint set, we have
max
x∈XmθTφ(x)= m a x
μ∈M(G)θTμ≤max
τ∈L(G)θTτ (22.146)
If the solution is integral, it is exact; if it is fractional, it is an approximation. This is called
a (ﬁrst order) linear programming relaxtion. The reason it is called ﬁrst-order is that the
constraints that are enforced are those that correspond to consistency on a tree, which is agraph of treewidth 1. It is possible to enforce higher-order consistency, using graphs with largertreewidth (see (Wainwright and Jordan 2008b, sec 8.5) for details).
How should we actually perform the optimization? We can use a generic linear programming
package, but this is often very slow. Fortunately, in the case of graphical models, it is possible todevise specialised distributed message passing algorithms for solving this optimization problem,as we explain below.
22.6.2 Max-product belief propagation
The MAP objective in Equation 22.145, maxμ∈M(G)θTμ, is almost identical to the inference
objective in Equation 22.23, maxμ∈M(G)θTμ+H(μ), apart from the entropy term. One
heuristic way to proceed would be to consider the zero temperature limit of the probability
distribution μ, where the probability distribution has all its mass centered on its mode (see
Section 4.2.2). In such a setting, the entropy term becomes zero. We can then modify themessage passing methods used to solve the inference problem so that they solve the MAPestimation problem instead. In particular, in the zero temperature limit, the sum operatorbecomes the max operator, which results in a method called max-product belief propagation.
In more detail, let
A(θ)/definesmax
μ∈M(G)θTμ+H(μ) (22.147)
Now consider an inverse temperature βgoing to inﬁnity. We have
lim
β→+∞A(βθ)
β= lim
β→+∞1
βmax
μ∈M(G)/braceleftbig
(βθ)Tμ+H(μ)/bracerightbig
(22.148)
=m a x
μ∈M(G)/braceleftbigg
θTμ+ lim
β→+∞1
βH(μ)/bracerightbigg
(22.149)
=m a x
μ∈M(G)θTμ (22.150)
It is the concavity of the objective function that allows us to interchange the limandmax
operators (see (Wainwright and Jordan 2008b, p274) for details).
Now consider the Bethe approximation, which has the form maxτ∈L(G)θTτ+HBethe(τ).
We showed that loopy BP ﬁnds a local optimum of this objective. In the zero temperature limit,this objective is equivalent to the LP relaxation of the MAP problem. Unfortunately, max-productloopy BP does not solve this LP relaxation unless the graph is a tree (Wainwright and Jordan2008b, p211). The reason is that Bethe energy functional is not concave (except on trees), so weare not licensed to swap the limit and max operators in the above zero-temperature derivation.However, if we use tree-reweighted BP, or TRBP/ TRW, we have a concave objective. In this case,
22.6. MAPstateestimation 801
one can show (Kolmogorov and Wainwright 2005) that the max-product version of TRBP does
solve the above LP relaxation.
A certain scheduling of this algorithm, known as sequential TRBP, TRBP-S,o rTRW-S, can
be shown to always converge (Kolmogorov 2006), and furthermore, it typically does so fasterthan the standard parallel updates. The idea is to pick an arbitrary node ordering X
1,...,X N.
We then consider a set of trees which is a subsequence of this ordering. At each iteration, weperform max-product BP from X
1towardsXNand back along one of these trees. It can be
shown that this monotonically minimizes a lower bound on the energy, and thus is guaranteedto converge to the global optimum of the LP relaxation.
22.6.3 Graphcuts
In this section, we show how to ﬁnd MAP state estimates, or equivalently, minimum energyconﬁgurations, by using the max ﬂow/min cut algorithm for graphs.
8This class of methods is
known as graphcuts and is very widely used, especially in computer vision applications.
We will start by considering the case of MRFs with binary nodes and a restricted class of
potentials; in this case, graphcuts will ﬁnd the exact global optimum. We then consider thecase of multiple states per node, which are assumed to have some underlying ordering; we canapproximately solve this case by solving a series of binary subproblems, as we will see.
22.6.3.1 Graphcuts for the generalized Ising model
Let us start by considering a binary MRF where the edge energies have the following form:
E
uv(xu,xv)=/braceleftbigg0ifxu=xv
λstifxu/negationslash=xv(22.151)
whereλst≥0is the edge cost. This encourages neighboring nodes to have the same value
(since we are trying to minimize energy). Since we are free to add any constant we like to theoverall energy without affecting the MAP state estimate, let us rescale the local energy termssuch that either E
u(1) = 0orEu(0) = 0.
Now let us construct a graph which has the same set of nodes as the MRF, plus two distin-
guished nodes: the source sand the sinkt.I f Eu(1) = 0, we add the edge xu→twith cost
Eu(0). (This ensures that if uis not in partition Xt, meaning uis assigned to state 0, we will
pay a cost of Eu(0)in the cut.) Similarly, If Eu(0) = 0, we add the edge xu→swith cost
Eu(1). Finally, for every pair of variables that are connected in the MRF, we add edges xu→xv
andxv→xu, both with cost λu,v≥0. Figure 22.14 illustrates this construction for an MRF
with 4 nodes, and with the following non-zero energy values:
E1(0) = 7,E 2(1) = 2,E 3(1) = 1,E4(1) = 6 (22.152)
λ1,2=6,λ2,3=6,λ3,4=2,λ1,4=1 (22.153)
Having constructed the graph, we compute a minimal s−tcut. This is a partition of the nodes
into two sets,Xs, which are nodes connected to s, andXt, which are nodes connected to t.W e
8. There are a variety of ways to implement this algorithm, see e.g., (Sedgewick and Wayne 2011). The best take
O(EVlogV)orO(V3)time, where Eis the number of edges and Vis the number of nodes.
802 Chapter22. Morevariationalinference
z1
z4z2
z3
st
1
12
26
6
67
Figure 22.14 Illustration of graphcuts applied to an MRF with 4 nodes. Dashed lines are ones which
contribute to the cost of the cut (for bidirected edges, we only count one of the costs). Here the min cut
has cost 6. Source: Figure 13.5 from (Koller and Friedman 2009). Used with kind permission of DaphneKoller.
pick the partition which minimizes the sum of the cost of the edges between nodes on different
sides of the partition:
cost(Xs,Xt)=/summationdisplay
xu∈Xs,xv∈Xtcost(xu,sv) (22.154)
In Figure 22.14, we see that the min-cut has cost 6.
Minimizing the cost in this graph is equivalent to minimizing the energy in the MRF. Hence
nodes that are assigned to shave an optimal state of 0, and the nodes that are assigned to t
have an optimal state of 1. In Figure 22.14, we see that the optimal MAP estimate is (1,1,1,0).
22.6.3.2 Graphcuts for binary MRFs with submodular potentials
We now discuss how to extend the graphcuts construction to binary MRFs with more generalkinds of potential functions. In particular, suppose each pairwise energy satisﬁes the followingcondition:
E
uv(1,1)+Euv(0,0)≤Euv(1,0)+Euv(0,1) (22.155)
In other words, the sum of the diagonal energies is less than the sum of the off-diagonal energies.In this case, we say the energies are submodular (Kolmogorov and Zabin 2004).
9An example
of a submodular energy is an Ising model where λuv>0. This is also known as an attractive
MRForassociative MRF, since the model “wants” neighboring states to be the same.
9. Submodularity is the discrete analog of convexity. Intuitively, it corresponds to the “law of diminishing returns”, that
is, the extra value of adding one more element to a set is reduced if the set is already large. More formally, we say that
f:2S→Ris submodular if for any A⊂B⊂Sandx∈S,w eh a v ef (A∪{x})−f(A)≥f(B∪{x})−f(B).
If−fis submodular, then fissupermodular.
22.6. MAPstateestimation 803
To apply graphcuts to a binary MRF with submodular potentials, we construct the pairwise
edge weights as follows:
E/prime
u,v(0,1) =Eu,v(1,0)+Eu,v(0,1)−Eu,v(0,0)−Eu,v(1,1) (22.156)
This is guaranteed to be non-negative by virtue of the submodularity assumption. In addition,
we construct new local edge weights as follows: ﬁrst we initialize E/prime(u)=E(u), and then for
each edge pair (u,v), we update these values as follows:
E/prime
u(1) = E/prime
u(1)+(Eu,v(1,0)−Eu,v(0,0)) (22.157)
E/prime
v(1) = E/prime
u(1)+(Eu,v(1,1)−Eu,v(1,0)) (22.158)
We now construct a graph in a similar way to before. Speciﬁcally, if E/prime
u(1)>E/prime
u(0),w e
add the edge u→swith cost E/prime
u(1)−E/prime
u(0), otherwise we add the edge u→twith cost
E/prime
u(0)−E/prime
u(1). Finally for every MRF edge for which E/prime
u,v(0,1)>0, we add a graphcuts edge
xu−xvwith cost E/prime
u,v(0,1). (We don’t need to add the edge in both directions.)
One can show (Exercise 22.1) that the min cut in this graph is the same as the minimum
energy conﬁguration. Thus we can use max ﬂow/min cut to ﬁnd the globally optimal MAPestimate (Greig et al. 1989).
22.6.3.3 Graphcuts for nonbinary metric MRFs
We now discuss how to use graphcuts for approximate MAP estimation in MRFs where eachnode can have multiple states (Boykov et al. 2001). However, we require that the pairwise energiesform a metric. We call such a model a metric MRF. For example, suppose the states have a
natural ordering, as commonly arises if they are a discretization of an underlying continuousspace. In this case, we can deﬁne a metric of the form E(x
s,xt)=m i n ( δ,||xs−xt||)or a
semi-metric of the form E(xs,xt)=m i n ( δ,(xs−xt)2), for some constant δ>0. This energy
encourages neighbors to have similar labels, but never “punishes” them by more than δ. Thisδ
term prevents over-smoothing, which we illustrate in Figure 19.20.
One version of graphcuts is the alpha expansion. At each step, it picks one of the available
labels or states and calls it α; then it solves a binary subproblem where each variable can choose
to remain in its current state, or to become state α(see Figure 22.15(d) for an illustration). More
precisely, we deﬁne a new MRF on binary nodes, and we deﬁne the energies of this new model,relative to the current assignment x, as follows:
E
/prime
u(0) =Eu(xu),E/prime
u(1) =Eu(α),E/prime
u,v(0,0) =Eu,v(xu,xv)(22.159)
E/prime
u,v(0,1) =Eu,v(xu,α),E/prime
u,v(1,0) =Eu,v(α,xv),E/prime
u,v(1,1) =Eu,v(α,α) (22.160)
To optimize E/primeusing graph cuts (and thus ﬁgure out the optimal alpha expansion move),
we require that the energies be submodular. Plugging in the deﬁnition we get the followingconstraint:
E
u,v(xu,xv)+Eu,v(α,α)≤Eu,v(xu,α)+Eu,v(α,xv) (22.161)
For any distance function, Eu,v(α,α)=0 , and the remaining inequality follows from the
triangle inequality. Thus we can apply the alpha expansion move to any metric MRF.
804 Chapter22. Morevariationalinference
(a) initial labeling (b) standard move (c) α-β-swap (d) α-expansion
Figure 22.15 (a) An image with 3 labels. (b) A standard local move (e.g., by iterative conditional modes)
just ﬂips the label of one pixel. (c) An α−βswap allows all nodes that are currently labeled as αto
be relabeled as βif this decreases the energy. (d) An αexpansion allows all nodes that are not currently
labeled as αto be relabeled as αif this decreases the energy. Source: Figure 2 of (Boykov et al. 2001).
Used with kind permission of Ramin Zabih.
At each step of alpha expansion, we ﬁnd the optimal move from amongst an exponentially
large set; thus we reach a strong local optimum , of much lower energy than the local optima
found by standard greedy label ﬂipping methods such as iterative conditional modes. In fact,
one can show that, once the algorithm has converged, the energy of the resulting solution is at
most2ctimes the optimal energy, where
c=m a x
(u,v)∈Emaxα/negationslash=βEuv(α,β)
minα/negationslash=βEuv(α,β)(22.162)
See Exercise 22.3 for the proof. In the case of the Potts model, c=1,s ow eh a v ea2 -
approximation.
Another version of graphcuts is the alpha-beta swap . At each step, two labels are chosen,
call them αandβ. All the nodes currently labeled αcan change to β(and vice versa) if this
reduces the energy (see Figure 22.15(c) for an illustration). The resulting binary subproblem can
be solved exactly, even if the energies are only semi-metric (that is, the triangle inequality need
not hold; see Exercise 22.2). Although the α−βswap version can be applied to a broader class
of models than the α-expansion version, it is theoretically not as powerful. Indeed, in various
low-level vision problems, (Szeliski et al. 2008) show empirically that the expansion version is
usually better than the swap version (see Section 22.6.4).
22.6.4 Experimental comparison of graphcuts and BP
In Section 19.6.2.7, we described lattice-structured CRFs for various low-level vision problems.
(Szeliski et al. 2008) performed an extensive comparison of different approximate optimization
techniques for this class of problems. Some of the results, for the problem of stereo depth
estimation, are shown in Figure 22.16. We see that the graphcut and tree-reweighted max-
product BP (TRW) give the best results, with regular max-product BP being much worse. In terms
of speed, graphcuts is the fastest, with TRW a close second. Other algorithms, such as ICM,
simulated annealing or a standard domain-speciﬁc heuristic known as normalize correlation, are
22.6. MAPstateestimation 805
Max-Product BP
a-Expansion
a-b Swap
TRW
Max-Product BP
a-Expansion
a-b Swap
TRW2
1.9
1.8
1.7
1.6
1.5
1.4
1.3Energy
Running Time (s)100×106
1011021034.2
4.1
4
3.9
3.8
3.7
3.6Energy
Running Time (s)100×105
101102
Figure 22.16 Energy minimization on a CRF for stereo depth estimation. Top row: two input images along
with the ground truth depth values. Bottom row: energy vs time for 4 different optimization algorithms.
Bottom left: results are for the Teddy image (shown in top row). Bottom right: results are for the Tsukuba
image (shown in Figure 22.17(a)). Source: Figure 13.B.1 of (Koller and Friedman 2009). Used with kind
permission of Daphne Koller.
even worse, as shown qualitatively in Figure 22.17.
Since TRW is optimizing the dual of the relaxed LP problem, we can use its value at conver-
gence to evaluate the optimal energy. It turns out that for many of the images in the stereo
benchmark dataset, the ground truth has higher energy (lower probability) than the globally op-
timal estimate (Meltzer et al. 2005). This indicates that we are optimizing the wrong model. This
is not surprising, since the pairwise CRF ignores known long-range constraints. Unfortunately,
if we add these constraints to the model, the graph either becomes too dense (making BP slow),
and/or the potentials become non-submodular (making graphcuts inapplicable).
One way around this is to generate a diverse set of local modes, using repeated applications
of graph cuts, as described in (Yadollahpour et al. 2011). We can then apply a more sophisticated
model, which uses global features, to rerank the solutions.
806 Chapter22. Morevariationalinference
(a) Left image: 384x288, 15 labels (b) Ground truth
(c) Swap algorithm (d) Expansion algorithm
(e) Normalized correlation (f) Simulated annealing
Figure 22.17 An example of stereo depth estimation using an MRF. (a) Left image, of size 384×288
pixels, from the University of Tsukuba. (The corresponding right image is similar, but not shown.) (b)
Ground truth depth map, quantized to 15 levels. (c-f): MAP estimates using different methods: (c) α−β
swap, (d) αexpansion, (e) normalized cross correlation, (f) simulated annealing. Source: Figure 10 of
(Boykov et al. 2001). Used with kind permission of Ramin Zabih.
22.6.5 Dual decomposition
We are interested in computing
p∗=m a x
x∈Xm/summationdisplay
i∈Vθi(xi)+/summationdisplay
f∈Fθf(xf) (22.163)
whereFrepresents a set of factors. We will assume that we can tractably optimize each local
factor, but the combination of all of these factors makes the problem intractable. One way to
proceed is to optimize each term independently, but then to introduce constraints that force all
the local estimates of the variables’ values to agree with each other. We explain this in more
detail below, following the presentation of (Sontag et al. 2011).
22.6. MAPstateestimation 807
x1 x2
x3 x4θf(x1,x2)
θh(x2,x4)
θk(x3,x4)θg(x1,x3)
(a)x1 x2
x3 x4xf
1 xf2
xg1
xg3xh
2
xh4
xk3 xk4
θk(xk3,xk4)θh(xh2,xh4)θf(xf
1,xf2)
== =
=
=
===
θg(xg
1,xg3)
(b)
Figure 22.18 (a) A pairwise MRF with 4 different edge factors. (b) We have 4 separate variables, plus a
copy of each variable for each factor it participates in. Source: Figure 1.2-1.3 of (Sontag et al. 2011). Used
with kind permission of David Sontag.
22.6.5.1 Basic idea
Let us duplicate the variables xi, once for each factor, and then force them to be equal.
Speciﬁcally, let xf
f={xf
i}i∈fbe the set of variables used by factor f. This construction is
illustrated in Figure 22.18. We can reformulate the objective as follows:
p∗=m a x
x,xf/summationdisplay
i∈Vθi(xi)+/summationdisplay
f∈Fθf(xf
f)s.t.xf
i=xi∀f,i∈f (22.164)
Let us now introduce Lagrange multipliers, or dual variables, δfi(k), to enforce these constraints.
The Lagrangian becomes
L(δ,x,xf)=/summationdisplay
i∈Vθi(xi)+/summationdisplay
f∈Fθf(xf
f) (22.165)
+/summationdisplay
f∈F/summationdisplay
i∈f/summationdisplay
ˆxiδfi(ˆxi)/parenleftBig
I(xi=ˆxi)−I(xf
i=ˆxi)/parenrightBig
(22.166)
This is equivalent to our original problem in the following sense: for any value of δ,w eh a v e
p∗=m a x
x,xfL(δ,x,xf)s.t.xfi=xi∀f,i∈f (22.167)
since if the constraints hold, the last term is zero. We can get an upper bound by dropping the
consistency constraints, and just optimizing the following upper bound:
L(δ)/definesmax
x,xfL(δ,x,xf) (22.168)
=/summationdisplay
imax
xi⎛
⎝θi(xi)+/summationdisplay
f:i∈fδfi(xi)⎞⎠+/summationdisplay
fmax
xf⎛⎝θ
f(xf)−/summationdisplay
i∈fδfi(xi)⎞⎠(22.169)
See Figure 22.19 for an illustration.
808 Chapter22. Morevariationalinference
x1δf2(x2)
δf1(x1)
δk4(x4) δk3(x3)δg1(x1)+
−−−−δf1(x1)
δg3(x3)
δg1(x1)−
−δh2(x2)
δh4(x4)−
−
+x3δg3(x3)
δk3(x3)x4+δk4(x4)
δh4(x4)+x2δf2(x2)
δh2(x2)θf(x1,x2)
θh(x2,x4)
θk(x3,x4)θg(x1,x3)
x3 x4x4x2x2 x1
x1
x3
Figure 22.19 Illustration of dual decomposition. Source: Figure 1.2 of (Sontag et al. 2011). Used with
kind permission of David Sontag.
This objective is tractable to optimize, since each xfterm is decoupled. Furthermore, we see
thatL(δ)≥p∗, since by relaxing the consistency constraints, we are optimizing over a larger
space. Furthermore, we have the property that
min
δL(δ)=p∗(22.170)
so the upper bound is tight at the optimal value of δ, which enforces the original constraints.
Minimizing this upper bound is known as dual decomposition orLagrangian relaxation
(Komodakis et al. 2011; Sontag et al. 2011; Rush and Collins 2012). Furthemore, it can be shown
thatL(δ)is the dual to the same LP relaxation we saw before. We will discuss several possible
optimization algorithms below.
The main advantage of dual decomposition from a practical point of view is that it allows
one to mix and match different kinds of optimization algorithms in a convenient way. Forexample, we can combine a grid structured graph with local submodular factors to performimage segmentation, together with a tree structured model to perform pose estimation (seeExercise 22.4). Analogous methods can be used in natural language processing, where we oftenhave a mix of local and global constraints (see e.g., (Koo et al. 2010; Rush and Collins 2012)).
22.6.5.2 Theoretical guarantees
What can we say about the quality of the solutions obtained in this way? To understand this, letus ﬁrst introduce some more notation:
θδ
i(xi)/definesθi(xi)+/summationdisplay
f:i∈fδfi(xi) (22.171)
θδf(xf)/definesθf(xf)−/summationdisplay
i∈fδfi(xi) (22.172)
22.6. MAPstateestimation 809
This represents a reparameterization of the original problem, in the sense that
/summationdisplay
iθi(xi)+/summationdisplay
fθf(xf)=/summationdisplay
iθδ
i(xi)+/summationdisplay
fθδf(xf) (22.173)
and hence
L(δ)=/summationdisplay
imax
xiθδi(xi)+/summationdisplay
fmax
xfθδf(xf) (22.174)
Now suppose there is a set of dual variables δ∗and an assignment x∗such that the maxi-
mizing assignments to the singleton terms agrees with the assignments to the factor terms, i.e.,
so thatx∗
i∈argmaxxiθδ∗
i(xi)andx∗
f∈argmaxxfθδ∗
f(xf). In this case, we have
L(δ∗)=/summationdisplay
iθδ∗
i(x∗
i)+/summationdisplay
fθδ∗
f(x∗f)=/summationdisplay
iθi(x∗i)+/summationdisplay
fθf(x∗f) (22.175)
Now since
/summationdisplay
iθi(x∗i)+/summationdisplay
fθf(x∗f)≤p∗≤L(δ∗) (22.176)
we conclude that L(δ∗)=p∗,s ox∗is the MAP assignment.
So if we can ﬁnd a solution where all the subproblems agree, we can be assured that it is the
global optimum. This happens surprisingly often in practical problems.
22.6.5.3 Subgradient descent
L(δ)is a convex and continuous objective, but it is non-differentiable at points δwhereθδ
i(xi)
orθδf(xf)have multiple optima. One approach is to use subgradient descent. This updates all
the elements of δat the same time, as follows:
δt+1
fi(xi)=δt
fi(xi)−αtgt
fi(xi) (22.177)
wheregtthe subgradient of L(δ)atδt. If the step sizes αtare set appropriately (see Sec-
tion 8.5.2.1), this method is guaranteed to converge to a global optimum of the dual. (See
(Komodakis et al. 2011) for details.)
One can show that the gradient is given by the following sparse vector. First let xs
i∈
argmaxxiθδt
i(xi)andxf
f∈argmaxxfθδt
f(xf).N e x tl e t gfi(xi)=0for all elements. Finally,
ifxf
i/negationslash=xs
i(so factor fdisagrees with the local term on how to set variable i), we setgfi(xsi)=
+1andgfi(xf
i)=−1. This has the effect of decreasing θδt
i(xs
i)and increasing θδt
i(xf
i),
bringing them closer to agreement. Similarly, the subgradient update will decrease the value of
θδt
f(xfi,xf\i)and increasing the value of θδt
f(xs
i,xf\i).
To compute the gradient, we need to be able to solve subproblems of the following form:
argmax
xfθδt
f(xf) = argmax
xf⎡
⎣θf(xf)−/summationdisplay
i∈fδt
fi(xi)⎤⎦ (22.178)
810 Chapter22. Morevariationalinference
(In (Komodakis et al. 2011), these subproblems are called slaves, whereas L(δ)is called the
master.) Obviously if the scope of factor fis small, this is simple. For example, if each factor is
pairwise, and each variable has Kstates, the cost is just K2. However, there are some kinds of
global factors that also support exact and efficient maximization, including the following:
• Graphical models with low tree width.
• Factors that correspond to bipartite graph matchings (see e.g., (Duchi et al. 2007)). This
is useful for data association problems, where we must match up a sensor reading with
an unknown source. We can ﬁnd the maximal matching using the so-called Hungarianalgorithm in O(|f|
3)time (see e.g., (Padadimitriou and Steiglitz 1982)).
• Supermodular functions. We discuss this case in more detail in Section 22.6.3.2.
• Cardinality constraints. For example, we might have a factor over a large set of binary
variables that enforces that a certain number of bits are turned on; this can be useful in
problems such as image segmentation. In particular, suppose θf(xf)=0if/summationtext
i∈fxi=L
andθf(xf)=−∞otherwise. We can ﬁnd the maximizing assignment in O(|f|log|f|)
time as follows: ﬁrst deﬁne ei=δfi(1)−δfi(0); now sort the ei; ﬁnally set xi=1for the
ﬁrstLvalues, and xi=0for the rest (Tarlow et al. 2010).
• Factors which are constant for all but a small set Sof distinguished values of xf. Then we
can optimize over the factor in O(|S|)time (Rother et al. 2009).
22.6.5.4 Coordinate descent
An alternative to updating the entire δvector at once (albeit sparsely) is to update it using block
coordinate descent. By choosing the size of the blocks, we can trade off convergence speed withease of the local optimization problem.
One approach, which optimizes δ
fi(xi)for alli∈fand allxiat the same time (for a
ﬁxed factor f), is known as max product linear programming (Globerson and Jaakkola 2008).
Algorithmically, this is similar to belief propagation on a factor graph. In particular, we deﬁneδ
f→ias messages sent from factor fto variable i, and we deﬁne δi→fas messages sent from
variableito factorf. These messages can be computed as follows (see (Globerson and Jaakkola
2008) for the derivation):10
δi→f(xi)=θ i(xi)+/summationdisplay
g/negationslash=fδg→i(xi) (22.179)
δf→i(xi)=−δ i→f(xi)+1
|f|max
xf\i⎡
⎣θf(xf)+/summationdisplay
j∈fδj→f(xj)⎤⎦ (22.180)
We then set the dual variables δ
fi(xi)to be the messages δf→i(xi).
For example, consider a 2×2grid MRF, with the following pairwise factors: θf(x1,x2),
θg(x1,x3),θh(x2,x4), andθk(x3,x4). The outgoing message from factor fto variable 2 is a
10. Note that we denote their δ−f
i(xi)byδi→f(xi).
22.6. MAPstateestimation 811
function of all messages coming into f, andf’s local factor:
δf→2(x2)=−δ2→f(x2)+1
2max
x1[θf(x1,x2)+δ1→f(x1)+δ2→f(x2)] (22.181)
Similarly, the outgoing message from variable 2 to factor fis a function of all the messages
sent into variable 2 from other connected factors (in this example, just factor h) and the local
potential:
δ2→f(x2)=θ2(2)+δh2(x2) (22.182)
The key computational bottleneck is computing the max marginals of each factor, where we
max out all the variables from xfexcept for xi, i.e., we need to be able to compute the following
max marginals efficiently:
max
xf\ih(xf\i,xi),h(xf\i,xi)/definesθf(xf)+/summationdisplay
j∈fδjf(xj) (22.183)
The difference from Equation 22.178 is that we are maxing over all but one of the variables. We
can solve this efficiently for low treewidth graphical models using message passing; we can alsosolve this efficiently for factors corresponding to bipartite matchings (Duchi et al. 2007) or tocardinality constraints (Tarlow et al. 2010). However, there are cases where maximizing over allthe variables in a factor’s scope is computationally easier than maximizing over all-but-one (see(Sontag et al. 2011, Sec 1.5.4) for an example); in such cases, we may prefer to use a subgradientmethod.
Coordinate descent is a simple algorithm that is often much faster at minimizing the dual than
gradient descent, especially in the early iterations. It also reduces the objective monotonically,and does not need any step size parameters. Unfortunately, it is not guaranteed to converge tothe global optimum, since L(δ)is convex but not strictly convex (which implies there may be
more than one globally optimizing value). One way to ensure convergence is to replace the maxfunction in the deﬁnition of L(δ)with the soft-max function, which makes the objective strictly
convex (see e.g., (Hazan and Shashua 2010) for details).
22.6.5.5 Recovering the MAP assignment
So far, we have been focussing on ﬁnding the optimal value of δ
∗. But what we really want is
the optimal value of x∗. In general, computing x∗fromδ∗is NP-hard, even if the LP relaxation
is tight and the MAP assignment is unique (Sontag et al. 2011, Theorem 1.4). (The troublesomecases arise when there are fractional assignments with the same optimal value as the MAPestimate.)
However, suppose that each
θδ∗
ihas a unique maximum, x∗
i; in this case, we say that δ∗is
locally decodable tox∗. One can show than in this case, the LP relaxation is unique and its
solution is indeed x∗. If many, but not all, of the nodes are uniquely decodable, we can “clamp”
the uniquely decodable ones to their MAP value, and then use exact inference algorithms to
ﬁgure out the optimal assignment to the remaining variables. Using this method, (Meltzer et al.2005) was able to optimally solve various stereo vision CRF estimation problems, and (Yanoveret al. 2007) was able to optimally solve various protein side-chain structure predicition problems.
Another approach is to use the upper bound provided by the dual in a branch and bound
search procedure (Geoffrion 1974).
812 Chapter22. Morevariationalinference
Exercises
Exercise 22.1 Graphcuts for MAP estimation in binary submodular MRFs
(Source: Ex. 13.14 of (Koller and Friedman 2009).). Show that using the graph construction described in
Section 22.6.3.2, the cost of the cut is equal to the energy of the corresponding assignment, up to anirrelevant constant. (Warning: this exercise involves a lot of algebraic book-keeping.)
Exercise 22.2 Graphcuts for alpha-beta swap
(Source: Ex. 13.15 of (Koller and Friedman 2009).). Show how the optimal alpha-beta swap can be found by
running min-cut on an appropriately constructed graph. More precisely,
a. Deﬁne a set of binary variables t
1,...,t nsuch that ti=0meansx/prime
i=α,ti=1ifx/primei=β, and
x/primei=xiis unchanged f xi/negationslash=αandxi/negationslash=β.
b. Deﬁne an energy function over the new variables such that E/prime(t)=E(x)+const .
c. Show that E/primeis submodular if Eis a semimetric.
Exercise 22.3 Constant factor optimality for alpha-expansion
(Source: Daphne Koller.). Let Xbe a pairwise metric Markov random ﬁeld over a graph G=(V,E).
Suppose that the variables are nonbinary and that the node potentials are nonnegative. Let Adenote the
set of labels for each X∈X. Though it is not possible to (tractably) ﬁnd the globally optimal assignment
x⋆in general, the α-expansion algorithm provides a method for ﬁnding assignments ˆxthat are locally
optimal with respect to a large set of transformations, i.e., the possible α-expansion moves.
Despite the fact that α-expansion only produces a locally optimal MAP assignment, it is possible to prove
that the energy of this assignment is within a known factor of the energy of the globally optimal solution
x⋆. In fact, this is a special case of a more general principle that applies to a wide variety of algorithms,
including max-product belief propagation and more general move-making algorithms: If one can provethat the solutions obtained by the algorithm are ‘strong local minima’, i.e., local minima with respect to
a large set of potential moves, then it is possible to derive bounds on the (global) suboptimality of thesesolutions, and the quality of the bounds will depend on the nature of the moves considered. (There is aprecise deﬁnition of ‘large set of moves’.)
Consider the following approach to proving the suboptimality bound for α-expansion.
a. Letˆxbe a local minimum with respect to expansion moves. For each α∈A,l e tV
α={s∈V|x⋆
s=
α},i.e., the set of nodes labelled αin the global minimum. Let x/primebe an assignment that is equal to
x⋆onVαand equal to ˆxelsewhere; this is an α-expansion of ˆx. Verify that E(x⋆)≤E(ˆx)≤E(x/prime).
b. Building on the previous part, show that E(ˆx)≤2cE(x⋆),wherec=m a x (s,t)∈E/parenleftBigmaxα/negationslash=βεst(α,β)
minα/negationslash=βεst(α,β)/parenrightBig
andEdenotes the energy of an assignment.
Hint. Think about where x/primeagrees with ˆxand where it agrees with x⋆.
Exercise 22.4 Dual decomposition for pose segmentation
(Source: Daphne Koller.). Two important problems in computer vision are that of parsing articulated objects
(e.g., the human body), called pose estimation, and segmenting the foreground and the background, called
segmentation. Intuitively, these two problems are linked, in that solving either one would be easier if thesolution to the other were available. We consider solving these problems simultaneously using a jointmodel over human poses and foreground/background labels and then using dual decomposition for MAPinference in this model.
We construct a two-level model, where the high level handles pose estimation and the low level handles
pixel-level background segmentation. Let G=(V,E)be an undirected grid over the pixels. Each node
i∈Vrepresents a pixel. Suppose we have one binary variable x
ifor each pixel, where xi=1means that
pixeliis in the foreground. Denote the full set of these variables by x=(xi).
22.6. MAPstateestimation 813
In addition, suppose we have an undirected tree structure T=(V/prime,E/prime)on the parts. For each body
part, we have a discrete set of candidate poses that the part can be in, where each pose is characterized
by parameters specifying its position and orientation. (These candidates are generated by a procedureexternal to the algorithm described here.) Deﬁne y
jkto be a binary variable indicating whether body part
j∈V/primeis in conﬁguration k. Then the full set of part variables is given by y=(yjk), withj∈V/prime
andk=1,...,K,w h e r eJis the total number of body parts and Kis the number of candidate poses
for each part. Note that in order to describe a valid conﬁguration, ymust satisfy the constraint that/summationtextK
k=1yjk=1for eachj.
Suppose we have the following energy function on pixels:
E1(x)=/summationdisplay
i∈V1[xi=1 ]·θi+/summationdisplay
(i,j)∈E1[xi/negationslash=xj]·θij.
Assume that the θijarises from a metric (e.g., based on differences in pixel intensities), so this can be
viewed as the energy for a pairwise metric MRF with respect to G.
We then have the following energy function for parts:
E2(y)=/summationdisplay
p∈V/primeθp(yp)+/summationdisplay
(p,q)∈E/primeθpq(yp,yq).
Since each part candidate yjkis assumed to come with a position and orientation, we can compute a
binary mask in the image plane. The mask assigns a value to each pixel, denoted by {wi
jk}i∈V,w h e r e
wi
jk=1if pixelilies on the skeleton and decreases as we move away. We can use this to deﬁne an
energy function relating the parts and the pixels:
E3(x,y)=/summationdisplay
i∈V/summationdisplay
j∈V/primeK/summationdisplay
k=11[xi=0,yjk=1 ]·wi
jk.
In other words, this energy term only penalizes the case where a part candidate is active but the pixel
underneath is labeled as background.
Formulate the minimization of E1+E2+E3as an integer program and show how you can use dual
decomposition to solve the dual of this integer program. Your solution should describe the decomposition
into slaves, the method for solving each one, and the update rules for the overall algorithm. Brieﬂy justifyyour design choices, particularly your choice of inference algorithms for the slaves.

23 Monte Carlo inference
23.1 Introduction
So far, we discussed various deterministic algorithms for posterior inference. These meth-
ods enjoy many of the beneﬁts of the Bayesian approach, while still being about as fast asoptimization-based point-estimation methods. The trouble with these methods is that they canbe rather complicated to derive, and they are somewhat limited in their domain of applicabil-ity (e.g., they usually assume conjugate priors and exponential family likelihoods, although see(Wand et al. 2011) for some recent extensions of mean ﬁeld to more complex distributions). Fur-thermore, although they are fast, their accuracy is often limited by the form of the approximationwhich we choose.
In this chapter, we discuss an alternative class of algorithms based on the idea of Monte Carlo
approximation, which we ﬁrst introduced in Section 2.7. The idea is very simple: generate some(unweighted) samples from the posterior, x
s∼p(x|D), and then use these to compute any
quantity of interest, such as a posterior marginal, p(x1|D), or the posterior of the difference of
two quantities, p(x1−x2|D), or the posterior predictive, p(y|D), etc. All of these quantities
can be approximated by E[f|D]≈1
S/summationtextS
s=1f(xs)for some suitable function f.
By generating enough samples, we can achieve any desired level of accuracy we like. The main
issue is: how do we efficiently generate samples from a probability distribution, particularly in
high dimensions? In this chapter, we discuss non-iterative methods for generating independentsamples. In the next chapter, we discuss an iterative method known as Markov Chain MonteCarlo, or MCMC for short, which produces dependent samples but which works well in highdimensions. Note that sampling is a large topic. The reader should consult other books, such as(Liu 2001; Robert and Casella 2004), for more information.
23.2 Sampling from standard distributions
We brieﬂy discuss some ways to sample from 1 or 2 dimensional distributions of standard form.These methods are often used as subroutines by more complex methods.
23.2.1 Using the cdf
The simplest method for sampling from a univariate distribution is based on the inverse prob-
ability transform.L e t Fbe a cdf of some distribution we want to sample from, and let F−1
816 Chapter23. MonteCarloinference
0 x0u1 F
Figure 23.1 Sampling using an inverse CDF. Figure generated by sampleCdf .
be its inverse. Then we have the following result.
Theorem 23.2.1. IfU∼U(0,1)isauniformrv,then F−1(U)∼F.
Proof.
Pr(F−1(U)≤x) = Pr( U≤F(x))(applying Fto both sides) (23.1)
=F(x)(because Pr(U≤y)=y (23.2)
where the ﬁrst line follows since Fis a monotonic function, and the second line follows since
Uis uniform on the unit interval.
Hence we can sample from any univariate distribution, for which we can evaluate its inverse
cdf, as follows: generate a random number u∼U(0,1)using apseudo random number
generator (see e.g., (Press et al. 1988) for details). Let urepresent the height up the yaxis. Then
“slide along” the xaxis until you intersect the Fcurve, and then “drop down” and return the
corresponding xvalue. This corresponds to computing x=F−1(u). See Figure 23.1 for an
illustration.
For example, consider the exponential distribution
Expon(x| λ)/definesλe−λxI(x≥0) (23.3)
The cdf is
F(x)=1−e−λxI(x≥0) (23.4)
whose inverse is the quantile function
F−1(p)=−ln(1−p)
λ(23.5)
By the above theorem, if U∼Unif(0,1), we know that F−1(U)∼Expon(λ) . Furthermore,
since1−U∼Unif(0,1)as well, we can sample from the exponential distribution by ﬁrst
sampling from the uniform and then transforming the results using −ln(u)/λ.
23.3. Rejectionsampling 817
23.2.2 Sampling from a Gaussian (Box-Muller method)
We now describe a method to sample from a Gaussian. The idea is we sample uniformly from
a unit radius circle, and then use the change of variables formula to derive samples from aspherical 2d Gaussian. This can be thought of as two samples from a 1d Gaussian.
In more detail, sample z
1,z2∈(−1,1)uniformly, and then discard pairs that do not satisfy
z2
1+z2
2≤1. The result will be points uniformly distributed inside the unit circle, so p(z)=
1
πI(zinside circle) . Now deﬁne
xi=zi/parenleftbigg−2lnr2
r2/parenrightbigg1
2
(23.6)
fori=1:2,w h e r er2=z2
1+z2
2. Using the multivariate change of variables formula, we have
p(x1,x2)=p(z1,z2)|∂(z1,z2)
∂(x1,x2)|=/bracketleftbigg1√
2πexp(−1
2x2
1)/bracketrightbigg/bracketleftbigg1√
2πexp(−1
2x22)/bracketrightbigg
(23.7)
Hencex1andx2are two independent samples from a univariate Gaussian. This is known as
theBox-Muller method.
To sample from a multivariate Gaussian, we ﬁrst compute the Cholesky decomposition of its
covariance matrix, Σ=LLT,w h e r eLis lower triangular. Next we sample x∼N(0,I)using
the Box-Muller method. Finally we set y=Lx+μ. This is valid since
cov[y]=Lcov[x]LT=LILT=Σ (23.8)
23.3 Rejection sampling
When the inverse cdf method cannot be used, one simple alternative is to use rejection sam-
pling, which we now explain.
23.3.1 Basic idea
In rejection sampling, we create a proposal distribution q(x)which satisifes Mq(x)≥˜p(x),
for some constant M,w h e r e˜p(x)is an unnormalized version of p(x)(i.e.,p(x)=˜p(x)/Zp
for some possibly unknown constant Zp). The function Mq(x)provides an upper envelope for
˜p. We then sample x∼q(x), which corresponds to picking a random xlocation, and then
we sample u∼U(0,1), which corresponds to picking a random height (y location) under the
envelope. If u>˜p(x)
Mq(x), we reject the sample, otherwise we accept it. See Figure 23.2(a). where
the acceptance region is shown shaded, and the rejection region is the white region between
the shaded zone and the upper envelope.
We now prove that this procedure is correct. Let
S={(x,u):u≤˜p(x)/Mq(x)},S0={(x,u):x≤x0,u≤˜p(x)/Mq(x)} (23.9)
818 Chapter23. MonteCarloinference
/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0
/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1
xuMq(x  )
Accept region Reject region
x  ~ q(x)(i)(i)(i)(i)
p(x  )Mq(x  )
(a)0 2 4 6 8 1000.20.40.60.811.21.4
  
target p(x)
comparison function Mq(x)
(b)
Figure 23.2 (a) Schematic illustration of rejection sampling. Source: Figure 2 of (Andrieu et al. 2003).
Used with kind permission of Nando de Freitas. (b) Rejection sampling from a Ga(α=5.7,λ=2 )
distribution (solid blue) using a proposal of the form MGa(k,λ−1)(dotted red), where k=⌊5.7⌋=5.
The curves touch at α−k=0.7. Figure generated by rejectionSamplingDemo .
Then the cdf of the accepted points is given by
P(x≤x0|xaccepted)=P(x≤x0,xaccepted)
P(xaccepted)(23.10)
=/integraltext/integraltext
I((x,u)∈S0)q(x)dudx/integraltext/integraltext
I((x,u)∈S)q(x)dudx=/integraltextx0
−∞˜p(x)dx/integraltext∞
−∞˜p(x)dx(23.11)
which is the cdf of p(x), as desired.
How efficient is this method? Since we generate with probability q(x)and accept with
probability˜p(x)
Mq(x), the probability of acceptance is
p(accept)=/integraldisplay˜p(x)
Mq(x)q(x)dx=1
M/integraldisplay
˜p(x)dx (23.12)
Hence we want to choose Mas small as possible while still satisfying Mq(x)≥˜p(x).
23.3.2 Example
For example, suppose we want to sample from a Gamma distribution:1
Ga(x|α,λ)=1
Γ(α)xα−1λαexp(−λx) (23.13)
One can show that if Xiiid∼Expon(λ), andY=X1+···+Xk, thenY∼Ga(k,λ).F o r
non-integer shape parameters, we cannot use this trick. However, we can use rejection sampling
1. This section is based on notes by Ioana A. Cosma, available at http://users .aims.ac.za/~ioana/cp2 .pdf.
23.3. Rejectionsampling 819
(a)−8 −6 −4 −2 0 2 4 6 800.10.20.30.40.50.60.70.80.91f(x) half−gaussian
(b)−8 −6 −4 −2 0 2 4 6 801002003004005006007008009001000samples from f(x) (by ARS)
(c)
Figure 23.3 (a) Idea behind adaptive rejection sampling. We place piecewise linear upper (and lower)
bounds on the log-concave density. Based on Figure 1 of (Gilks and Wild 1992). Figure generated by
arsEnvelope . (b-c) Using ARS to sample from a half-Gaussian. Figure generated by arsDemo, written by
Daniel Eaton.
using aGa(k,λ−1)distribution as a proposal, where k=⌊α⌋. The ratio has the form
p(x)
q(x)=Ga(x|α,λ)
Ga(x|k,λ−1)=xα−1λαexp(−λx)/Γ(α)
xk−1(λ−1)kexp(−(λ−1)x)/Γ(k)(23.14)
=Γ(k)λα
Γ(α)(λ−1)kxα−kexp(−x) (23.15)
This ratio attains its maximum when x=α−k. Hence
M=Ga(α−k|α,λ)
Ga(α−k|k,λ−1)(23.16)
See Figure 23.2(b) for a plot. (Exercise 23.2 asks you to devise a better proposal distribution
based on the Cauchy distribution.)
23.3.3 Application to Bayesian statistics
Supposewewanttodraw(unweighted)samplesfromtheposterior, p(θ|D)=p(D|θ)p(θ)/p(D).
We can use rejection sampling with ˜p(θ)=p(D|θ)p(θ)as the target distribution, q(θ)=p(θ)
as our proposal, and M=p(D|ˆθ),w h e r eˆθ= argmax p(D|θ)is the MLE; this was ﬁrst
suggested in (Smith and Gelfand 1992). We accept points with probability
˜p(θ)
Mq(θ)=p(D|θ)
p(D|ˆθ)(23.17)
Thus samples from the prior that have high likelihood are more likely to be retained in theposterior. Of course, if there is a big mismatch between prior and posterior (which will be thecase if the prior is vague and the likelihood is informative), this procedure is very inefficient. Wediscuss better algorithms later.
23.3.4 Adaptive rejection sampling
We now describe a method that can automatically come up with a tight upper envelope q(x)
to any log concave density p(x). The idea is to upper bound the log density with a piecewise
820 Chapter23. MonteCarloinference
linear function, as illustrated in Figure 23.3(a). We choose the initial locations for the pieces
based on a ﬁxed grid over the support of the distribution. We then evaluate the gradient of thelog density at these locations, and make the lines be tangent at these points.
Since the log of the envelope is piecewise linear, the envelope itself is piecewise exponential:
q(x)=M
iλiexp(−λi(x−xi−1)),xi−1<x≤xi (23.18)
wherexiare the grid points. It is relatively straightforward to sample from this distribution. If
the sample xis rejected, we create a new grid point at x, and thereby reﬁne the envelope. As
the number of grid points is increased, the tightness of the envelope improves, and the rejectionrate goes down. This is known as adaptive rejection sampling (ARS) (Gilks and Wild 1992).
Figure 23.3(b-c) gives an example of the method in action. As with standard rejection sampling,it can be applied to unnormalized distributions.
23.3.5 Rejection sampling in high dimensions
It is clear that we want to make our proposal q(x)as close as possible to the target distribution
p(x), while still being an upper bound. But this is quite hard to achieve, especially in high
dimensions. To see this, consider sampling from p(x)=N(0,σ2
pI)using as a proposal
q(x)=N(0,σ2
qI). Obviously we must have σ2
q≥σ2
pin order to be an upper bound. In D
dimensions, the optimum value is given by M=(σq/σp)D. The acceptance rate is 1/M(since
bothpandqare normalized), which decreases exponentially fast with dimension. For example,
ifσqexceedsσpby just 1%, then in 1000 dimensions the acceptance ratio will be about 1/20,000.
This is a fundamental weakness of rejection sampling.
In Chapter 24, we will describe MCMC sampling, which is a more efficient way to sample
from high dimensional distributions. Sometimes this uses (adaptive) rejection sampling as asubroutine, which is known as adaptive rejection Metropolis sampling (Gilks et al. 1995).
23.4 Importance sampling
We now describe a Monte Carlo method known as importance sampling for approximating
integrals of the form
I=E[f]=/integraldisplay
f(x)p(x)dx (23.19)
23.4.1 Basic idea
The idea is to draw samples xin regions which have high probability, p(x), but also where
|f(x)|is large. The result can be super efficient, meaning it needs less samples than if we
were to sample from the exact distribution p(x). The reason is that the samples are focussed
on the important parts of space. For example, suppose we want to estimate the probability ofarare event. Deﬁne f(x)=I(x∈E), for some set E. Then it is better to sample from a
proposal of the form q(x)∝f(x)p(x)than to sample from p(x)itself.
Importance sampling samples from any proposal, q(x). It then uses these samples to estimate
23.4. Importancesampling 821
the integral as follows:
E[f]=/integraldisplay
f(x)p(x)
q(x)q(x)dx≈1
SS/summationdisplay
s=1wsf(xs)=ˆI (23.20)
wherews/definesp(xs)
q(xs)are theimportance weights. Note that, unlike rejection sampling, we use all
the samples.
How should we choose the proposal? A natural criterion is to minimize the variance of the
estimateˆI=/summationtext
swsf(xs).N o w
varq(x)[f(x)w(x)] =Eq(x)/bracketleftbig
f2(x)w2(x)/bracketrightbig
−I2(23.21)
Since the last term is independent of q, we can ignore it. By Jensen’s inequality, we have the
following lower bound:
Eq(x)/bracketleftbig
f2(x)w2(x)/bracketrightbig
≥(Eq(x)[|f(x)w(x)|])2=/parenleftbigg/integraldisplay
|f(x)|p(x)dx/parenrightbigg2
(23.22)
The lower bound is obtained when we use the optimal importance distribution:
q∗(x)=|f(x)|p(x)/integraltext
|f(x/prime)|p(x/prime)dx/prime(23.23)
When we don’t have a particular target function f(x)in mind, we often just try to make
q(x)as close as possible to p(x). In general, this is difficult, especially in high dimensions, but
it is possible to adapt the proposal distribution to improve the approximation. This is known as
adaptive importance sampling (Oh and Berger 1992).
23.4.2 Handling unnormalized distributions
It is frequently the case that we can evaluate the unnormalized target distribution, ˜p(x), but not
its normalization constant, Zp. We may also want to use an unnormalized proposal, ˜q(x), with
possibly unknown normlization constant Zq. We can do this as follows. First we evaluate
E[f]=Zq
Zp/integraldisplay
f(x)˜p(x)
˜q(x)q(x)dx≈Zq
Zp1
SS/summationdisplay
s=1˜wsf(xs) (23.24)
where˜ws/defines˜p(xs)
˜q(xs)is the unnormalized importance weight. We can use the same set of samples
to evaluate the ratio Zp/Zqas follows:
Zp
Zq=1
Zq/integraldisplay
˜p(x)dx=/integraldisplay˜p(x)
˜q(x)q(x)dx≈1
SS/summationdisplay
s=1˜ws (23.25)
Hence
ˆI=1
S/summationtext
s˜wsf(xs)
1
S/summationtext
s˜ws=S/summationdisplay
s=1wsf(xs) (23.26)
822 Chapter23. MonteCarloinference
where
ws/defines˜ws/summationtext
s/prime˜ws/prime(23.27)
are the normalized importance weights. The resulting estimate is a ratio of two estimates, and
hence is biased. However, as S→∞, we have that ˆI→I, under weak assumptions (see e.g.,
(Robert and Casella 2004) for details).
23.4.3 Importance sampling for a DGM: likelihood weighting
We now describe a way to use importance sampling to generate samples from a distributionwhich can be represented as a directed graphical model (Chapter 10).
If we have no evidence, we can sample from the unconditional joint distribution of a DGM
p(x)as follows: ﬁrst sample the root nodes, then sample their children, then sample their
children, etc. This is known as ancestral sampling. It works because, in a DAG, we can always
topologically order the nodes so that parents preceed children. (Note that there is no equivalenteasy method for sampling from an unconditional undirected graphical model.)
Now suppose we have some evidence, so some nodes are “clamped” to observed values, and
we want to sample from the posterior p(x|D). If all the variables are discrete, we can use the
following simple procedure: perform ancestral sampling, but as soon as we sample a value thatis inconsistent with an observed value, reject the whole sample and start again. This is knownaslogic sampling (Henrion 1988).
Needless to say, logic sampling is very inefficient, and it cannot be applied when we have
real-valued evidence. However, it can be modiﬁed as follows. Sample unobserved variables asbefore, conditional on their parents. But don’t sample observed variables; instead we just usetheir observed values. This is equivalent to using a proposal of the form
q(x)=/productdisplay
t/negationslash∈Ep(xt|xpa(t))/productdisplay
t∈Eδx∗
t(xt) (23.28)
whereEis the set of observed nodes, and x∗
tis the observed value for node t. We should
therefore give the overall sample an importance weight as follows:
w(x)=p(x)
q(x)=/productdisplay
t/negationslash∈Ep(xt|xpa(t))
p(xt|xpa(t))/productdisplay
t∈Ep(xt|xpa(t))
1=/productdisplay
t∈Ep(xt|xpa(t)) (23.29)
This technique is known as likelihood weighting (Fung and Chang 1989; Shachter and Peot
1989).
23.4.4 Sampling importance resampling (SIR)
We can draw unweighted samples from p(x)by ﬁrst using importance sampling (with proposal
q) to generate a distribution of the form
p(x)≈/summationdisplay
swsδxs(x) (23.30)
23.5. Particleﬁltering 823
wherewsare the normalized importance weights. We then sample with replacement from
Equation 23.30, where the probability that we pick xsisws. Let this procedure induce a
distribution denoted by ˆp. To see that this is valid, note that
ˆp(x≤x0)=/summationdisplay
sI(xs≤x0)ws=/summationtext
sI(xs≤x0)˜p(xs)/q(xs)/summationtext
s˜p(xs)/q(xs)(23.31)
→/integraltext
I(x≤x0)˜p(x)
q(x)q(x)dx
/integraltext˜p(x)
q(x)q(x)dx(23.32)
=/integraltext
I(x≤x0)˜p(x)dx/integraltext
˜p(x)dx=/integraldisplay
I(x≤x0)p(x)dx=p(x≤x0) (23.33)
This is known as sampling importance resampling (SIR) (Rubin 1998). The result is an un-
weighted approximation of the form
p(x)≈1
S/primeS/prime/summationdisplay
s=1δxs(x) (23.34)
Note that we typically take S/prime/lessmuchS.
This algorithm can be used to perform Bayesian inference in low-dimensional settings (Smith
and Gelfand 1992). That is, suppose we want to draw (unweighted) samples from the posterior,
p(θ|D)=p(D|θ)p(θ)/p(D). We can use importance sampling with ˜p(θ)=p(D|θ)p(θ)as
the unnormalized posterior, and q(θ)=p(θ)as our proposal. The normalized weights have the
form
ws=˜p(θs)/q(θs)/summationtext
s/prime˜p(θs/prime)/q(θs/prime)=p(D|θs)/summationtext
s/primep(D|θs/prime)(23.35)
We can then use SIR to sample from p(θ|D).
Of course, if there is a big discrepancy between our proposal (the prior) and the target (the
posterior), we will need a huge number of importance samples for this technique to work reliably,since otherwise the variance of the importance weights will be very large, implying that mostsamples carry no useful information. (This issue will come up again in Section 23.5, when wediscuss particle ﬁltering.)
23.5 Particle ﬁltering
Particle ﬁltering (PF) is a Monte Carlo, or simulation based, algorithm for recursive Bayesian
inference. That is, it approximates the predict-update cycle described in Section 18.3.1. It isvery widely used in many areas, including tracking, time-series forecasting, online parameterlearning, etc. We explain the basic algorithm below. For a book-length treatment, see (Doucetet al. 2001); for a good tutorial, see (Arulampalam et al. 2002), or just read on.
824 Chapter23. MonteCarloinference
23.5.1 Sequential importance sampling
The basic idea is to appproximate the belief state (of the entire state trajectory) using a weighted
set of particles:
p(z1:t|y1:t)≈S/summationdisplay
s=1ˆws
tδzs
1:t(z1:t) (23.36)
whereˆws
tis the normalized weight of sample sat timet. From this representation, we can
easily compute the marginal distribution over the most recent state, p(zt|y1:t), by simply
ignoring the previous parts of the trajectory, z1:t−1. (The fact that PF samples in the space of
entire trajectories has various implications which we will discuss later.)
We update this belief state using importance sampling. If the proposal has the form
q(zs
1:t|y1:t), then the importance weights are given by
ws
t∝p(zs1:t|y1:t)
q(zs1:t|y1:t)(23.37)
which can be normalized as follows:
ˆws
t=ws
t/summationtext
s/primews/prime
t(23.38)
We can rewrite the numerator recursively as follows:
p(z1:t|y1:t)=p(yt|z1:t,y1:t−1)p(z1:t|y1:t−1)
p(yt|y1:t−1)(23.39)
=p(yt|zt)p(zt|z1:t−1,y1:t−1)p(z1:t−1|y1:t−1)
p(yt|y1:t−1)(23.40)
∝p(yt|zt)p(zt|zt−1)p(z1:t−1|y1:t−1) (23.41)
where we have made the usual Markov assumptions. We will restrict attention to proposal
densities of the following form:
q(z1:t|y1:t)=q(zt|z1:t−1,y1:t)q(z1:t−1|y1:t−1) (23.42)
so that we can “grow” the trajectory by adding the new state ztto the end. In this case, the
importance weights simplify to
ws
t∝p(yt|zs
t)p(zst|zs
t−1)p(zs1:t−1|y1:t−1)
q(zs
t|zs
1:t−1,y1:t)q(zs1:t−1|y1:t−1)(23.43)
=ws
t−1p(yt|zs
t)p(zst|zs
t−1)
q(zs
t|zs
1:t−1,y1:t)(23.44)
If we further assume that q(zt|z1:t−1,y1:t)=q(zt|zt−1,yt), then we only need to keep the
most recent part of the trajectory and observation sequence, rather than the whole history, in
order to compute the new sample. In this case, the weight becomes
ws
t∝ws
t−1p(yt|zs
t)p(zst|zs
t−1)
q(zs
t|zs
t−1,yt)(23.45)
23.5. Particleﬁltering 825
Hence we can approximate the posterior ﬁltered density using
p(zt|y1:t)≈S/summationdisplay
s=1ˆws
tδzs
t(zt) (23.46)
AsS→∞, one can show that this approaches the true posterior (Crisan et al. 1999).
The basic algorithm is now very simple: for each old sample s, propose an extension using
zs
t∼q(zt|zs
t−1,yt), and give this new particle weight ws
tusing Equation 23.45. Unfortunately,
this basic algorithm does not work very well, as we discuss below.
23.5.2 The degeneracy problem
The basic sequential importance sampling algorithm fails after a few steps because most of
the particles will have negligible weight. This is called the degeneracy problem, and occurs
because we are sampling in a high-dimensional space (in fact, the space is growing in size overtime), using a myopic proposal distribution.
We can quantify the degree of degeneracy using the effective sample size, deﬁned by
Seff/definesS
1+v ar[w∗s
t](23.47)
wherew∗s
t=p(zs
t|y1:t)/q(zst|zs
t−1,yt)is the “true weight” of particle s. This quantity cannot
be computed exactly, since we don’t know the true posterior, but we can approximate it using
ˆSeff=1/summationtextS
s=1(ws
t)2(23.48)
If the variance of the weights is large, then we are wasting our resources updating particles with
low weight, which do not contribute much to our posterior estimate.
There are two main solutions to the degeneracy problem: adding a resampling step, and using
a good proposal distribution. We discuss both of these in turn.
23.5.3 The resampling step
The main improvement to the basic SIS algorithm is to monitor the effective sampling size,and whenever it drops below a threshold, to eliminate particles with low weight, and thento create replicates of the surviving particles. (Hence PF is sometimes called survival of the
ﬁttest(Kanazawa et al. 1995).) In particular, we generate a new set {z
s∗
t}S
s=1by sampling with
replacement Stimes from the weighted distribution
p(zt|y1:t)≈S/summationdisplay
s=1ˆws
tδzs
t(zt) (23.49)
where the probability of choosing particle jfor replication is wj
t. (This is sometimes called
rejuvenation.) The result is an iid unweighted sample from the discrete density Equation 23.49,
so we set the new weights to ws
t=1/S. This scheme is illustrated in Figure 23.4.
826 Chapter23. MonteCarloinference
SURSRVDO
ZHLJKWLQJ
UHVDPSOH3]W_\W
3]W_\W
3\W_]W
3]W_\W
Figure 23.4 Illustration of particle ﬁltering.
There are a variety of algorithms for peforming the resampling step. The simplest is multi-
nomial resampling, which computes
(K1,...,K S)∼Mu(S,(w1
t,...,wS
t)) (23.50)
We then make Kscopies of zs
t. Various improvements exist, such as systematic resampling
residual resampling, and stratiﬁed sampling, which can reduce the variance of the weights.
All these methods take O(S)time. See (Doucet et al. 2001) for details.
The overall particle ﬁltering algorithm is summarized in Algorithm 6. (Note that if an estimate
of the state is required, it should be computed before the resampling step, since this will result
in lower variance.)
Algorithm 23.1: One step of a generic particle ﬁlter
1fors=1:Sdo
2Drawzs
t∼q(zt|zs
t−1,yt);
3Compute weight ws
t∝ws
t−1p(yt|zs
t)p(zst|zst−1)
q(zs
t|zs
t−1,yt);
4Normalize weights: ws
t=ws
t/summationtext
s/primews/prime
t;
5Compute ˆSeff=1/summationtextS
s=1(ws
t)2;
6ifˆSeff<Sminthen
7Resample Sindicesπ∼wt;
8z:
t=zπt;
9ws
t=1/S;
Although the resampling step helps with the degeneracy problem, it introduces problems of
its own. In particular, since the particles with high weight will be selected many times, there is
a loss of diversity amongst the population. This is known as sample impoverishment. In the
23.5. Particleﬁltering 827
extreme case of no process noise (e.g., if we have static but unknown parameters as part of the
state space), then all the particles will collapse to a single point within a few iterations.
To mitigate this problem, several solutions have been proposed. (1) Only resample when
necessary, not at every time step. (The original bootstrap ﬁlter (Gordon 1993) resampled at
every step, but this is suboptimal.) (2) After replicating old particles, sample new values usingan MCMC step which leaves the posterior distribution invariant (see e.g., the resample-move
algorithm in (Gilks and Berzuini 2001)). (3) Create a kernel density estimate on top of theparticles,
p(z
t|y1:t)≈S/summationdisplay
s=1ws
tκ(zt−zs
t) (23.51)
whereκis some smoothing kernel. We then sample from this smoothed distribution. This is
known as a regularized particle ﬁlter (Musso et al. 2001). (4) When performing inference on
static parameters, add some artiﬁcial process noise. (If this is undesirable, other algorithms must
be used for online parameter estimation, e.g., (Andrieu et al. 2005)).
23.5.4 The proposal distribution
The simplest and most widely used proposal distribution is to sample from the prior:
q(zt|zs
t−1,yt)=p(zt|zst−1) (23.52)
In this case, the weight update simpliﬁes to
ws
t∝ws
t−1p(yt|zst) (23.53)
This can be thought of a “generate and test” approach: we sample values from the dynamic
model, and then evaluate how good they are after we see the data (see Figure 23.4). Thisis the approach used in the condensation algorithm (which stands for “conditional density
propagation”) used for visual tracking (Isard and Blake 1998). However, if the likelihood isnarrower than the dynamical prior (meaning the sensor is more informative than the motionmodel, which is often the case), this is a very inefficient approach, since most particles will beassigned very low weight.
It is much better to actually look at the data y
twhen generating a proposal. In fact, the
optimal proposal distribution has the following form:
q(zt|zs
t−1,yt)=p(zt|zst−1,yt)=p(yt|zt)p(zt|zs
t−1)
p(yt|zst−1)(23.54)
If we use this proposal, the new weight is given by
ws
t∝ws
t−1p(yt|zs
t−1)=ws
t−1/integraldisplay
p(yt|z/primet)p(z/primet|zst−1)dz/primet(23.55)
This proposal is optimal since, for any given zs
t−1, the new weight ws
ttakes the same value
regardless of the value drawn for zs
t. Hence, conditional on the old values z.
t−1, the variance of
true weights var[w∗s
t],i sz e r o .
828 Chapter23. MonteCarloinference
In general, it is intractable to sample from p(zt|zs
t−1,yt)and to evaluate the integral needed
to compute the predictive density p(yt|zst−1). However, there are two cases when the optimal
proposal distribution can be used. The ﬁrst setting is when ztis discrete, so the integral becomes
a sum. Of course, if the entire state space is discrete, we can use an HMM ﬁlter instead, but
in some cases, some parts of the state are discrete, and some continuous. The second settingis whenp(z
t|zs
t−1,yt)is Gaussian. This occurs when the dynamics are nonlinear but the
observations are linear. See Exercise 23.3 for the details.
In cases where the model is not linear-Gaussian, we may still compute a Gaussian approxima-
tion top(zt|zst−1,yt)using the unscented transform (Section 18.5.2) and use this as a proposal.
This is known as the unscented particle ﬁlter (van der Merwe et al. 2000). In more general
settings, we can use other kinds of data-driven proposals, perhaps based on discriminative
models. Unlike MCMC, we do not need to worry about the proposals being reversible.
23.5.5 Application: robot localization
Consider a mobile robot wandering around an office environment. We will assume that it already
has a map of the world, represented in the form of an occupancy grid, which just speciﬁes
whether each grid cell is empty space or occupied by an something solid like a wall. The goalis for the robot to estimate its location. This can be solved optimally using an HMM ﬁlter, sincewe are assuming the state space is discrete. However, since the number of states, K,i so f t e n
very large, the O(K
2)time complexity per update is prohibitive. We can use a particle ﬁlter as
a sparse approximation to the belief state. This is known as Monte Carlo localization, and is
described in detail in (Thrun et al. 2006).
Figure 23.5 gives an example of the method in action. The robot uses a sonar range ﬁnder,
so it can only sense distance to obstacles. It starts out with a uniform prior, reﬂecting the factthat the owner of the robot may have turned it on in an arbitrary location. (Figuring out whereyou are, starting from a uniform prior, is called global localization.) After the ﬁrst scan, which
indicates two walls on either side, the belief state is shown in (b). The posterior is still fairlybroad, since the robot could be in any location where the walls are fairly close by, such as acorridor or any of the narrow rooms. After moving to location 2, the robot is pretty sure it mustbe in the corridor, as shown in (c). After moving to location 3, the sensor is able to detect theend of the corridor. However, due to symmetry, it is not sure if it is in location I (the truelocation) or location II. (This is an example of perceptual aliasing, which refers to the fact that
different things may look the same.) After moving to locations 4 and 5, it is ﬁnally able to ﬁgureout precisely where it is. The whole process is analogous to someone getting lost in an officebuilding, and wandering the corridors until they see a sign they recognize.
In Section 23.6.3, we discuss how to estimate location and the map at the same time.
23.5.6 Application: visual object tracking
Our next example is concerned with tracking an object (in this case, a remote-controlled heli-copter) in a video sequence. The method uses a simple linear motion model for the centroidof the object, and a color histogram for the likelihood model, using Bhattacharya distance to
compare histograms. The proposal distribution is obtained by sampling from the likelihood. See(Nummiaro et al. 2003) for further details.
23.5. Particleﬁltering 829
3 4Room A
Room BStart 2 15
Room C
I
II
III(a) Path and reference poses
(c) Belief at reference pose 2
(e) Belief at reference pose 4(b) Belief at reference pose 1
(d) Belief at reference pose 3
(f) Belief at reference pose 5
Figure 23.5 Illustration of Monte Carlo localization. Source: Figure 8.7 of (Thrun et al. 2006). Used
with kind permission of Sebastian Thrun.
Figure 23.6 shows some example frames. The system uses S= 250particles, with an effective
sample size of ˆSeff= 134. (a) shows the belief state at frame 1. The system has had to resample
5 times to keep the effective sample size above the threshold of 150; (b) shows the belief state
at frame 251; the red lines show the estimated location of the center of the object over the last250 frames. (c) shows that the system can handle visual clutter, as long as it does not have thesame color as the target object. (d) shows that the system is confused between the grey of thehelicopter and the grey of the building. The posterior is bimodal. The green ellipse, representingthe posterior mean and covariance, is in between the two modes. (e) shows that the probabilitymass has shifted to the wrong mode: the system has lost track. (f) shows the particles spreadout over the gray building; recovery of the object is very unlikely from this state using this
830 Chapter23. MonteCarloinference
(a)
 (b)
(c)
 (d)
(e)
 (f)
Figure 23.6 Example of particle ﬁltering applied to visual object tracking, based on color histograms.
(a-c) succesful tracking: green ellipse is on top of the helicopter. (d-f): tracker gets distracted by gray clutter
in the background. See text for details. Figure generated by pfColorTrackerDemo , written by Sebastien
Paris.
proposal.
We see that the method is able to keep track for a fairly long time, despite the presence
of clutter. However, eventually it loses track of the object. Note that since the algorithm is
stochastic, simply re-running the demo may ﬁx the problem. But in the real world, this is not
an option. The simplest way to improve performance is to use more particles. An alternative
is to perform tracking by detection , by running an object detector over the image every few
frames. See (Forsyth and Ponce 2002; Szeliski 2010; Prince 2012) for details.
23.6. Rao-Blackwellisedparticleﬁltering(RBPF) 831
23.5.7 Application: time series forecasting
In Section 18.2.4, we discussed how to use the Kalman ﬁlter to perform time series forecasting.
This assumes that the model is a linear-Gaussian state-space model. There are many modelswhich are either non-linear and/or non-Gaussian. For example, stochastic volatility models,
which are widely used in ﬁnance, assume that the variance of the system and/or observationnoise changes over time. Particle ﬁltering is widely used in such settings. See e.g., (Doucet et al.2001) and references therein for details.
23.6 Rao-Blackwellised particle ﬁltering (RBPF)
In some models, we can partition the hidden variables into two kinds, qtandzt, such that
we can analytically integrate out ztprovided we know the values of q1:t. This means we only
have sample q1:t, and can represent p(zt|q1:t)parametrically. Thus each particle srepresents
a value for qs
1:tand a distribution of the form p(zt|y1:t,qs1:t). These hybrid particles are are
sometimes called distributional particles orcollapsed particles (Koller and Friedman 2009,
Sec 12.4).
The advantage of this approach is that we reduce the dimensionality of the space in which
we are sampling, which reduces the variance of our estimate. Hence this technique is known
asRao-Blackwellised particle ﬁltering orRBPFfor short, named after Theorem 24.20. The
method is best explained using a speciﬁc example.
23.6.1 RBPF for switching LG-SSMs
A canonical example for which RBPF can be applied is the switching linear dynamical system(SLDS) model discussed in Section 18.6 (Chen and Liu 2000; Doucet et al. 2001). We can representp(z
t|y1:t,qs
1:t)using a mean and covariance matrix for each particle s,w h e r eqt∈{1,...,K}.
If we propose from the prior, q(qt=k|qs
t−1), the weight update becomes
ws
t∝ws
t−1p(yt|qt=k,qs
1:t−1,y1:t−1)=ws
t−1Lst,k(23.56)
where
Lstk=/integraldisplay
p(yt|qt=k,zt,y1:t−1,qs1:t−1)p(zt|qt=k,y1:t−1qs1:t−1,)dzt (23.57)
The quantity Ls
tkis the predictive density for the new observation ytconditioned on qt=kand
the history qs
1:t−1. In the case of SLDS models, this can be computed using the normalization
constant of the Kalman ﬁlter, Equation 18.41.
We give some pseudo-code in Algorithm 8. (The step marked “KFupdate” refers to the Kalman
ﬁlter update equations in Section 18.3.1.) This is known as a mixture of Kalman ﬁlters.
IfKis small, we can compute the optimal proposal distribution, which is
p(qt=k|y1:t,qs
1:t−1)=ˆpst−1(qt=k|yt) (23.58)
=ˆps
t−1(yt|qt=k)ˆpst−1(qt=k)
ˆpst−1(yt)(23.59)
=Ls
tkp(qt=k|qs
t−1)/summationtext
k/primeLstk/primep(qt=k/prime|qs
t−1)(23.60)
832 Chapter23. MonteCarloinference
Algorithm 23.2: One step of RBPF for SLDS using prior as proposal
1fors=1:Sdo
2k∼p(qt|qs
t−1);
3qs
t:=k;
4(μs
t,Σs
t,Ls
tk)=KFupdate( μs
t−1,Σs
t−1,yt,θk);
5ws
t=ws
t−1Lk
ts;
6Normalize weights: ws
t=ws
t/summationtext
s/primews/prime
t;
7Compute ˆSeff=1/summationtextS
s=1(ws
t)2;
8ifˆSeff<Sminthen
9Resample Sindicesπ∼wt;
10q:
t=qπt,μ:t=μπt,Σ:
t=Σπt,;
11ws
t=1/S;
where we use the following shorthand:
ˆps
t−1(·)=p(·|y1:t−1,qs1:t−1) (23.61)
We then sample from p(qt|qs
1:t−1,y1:t)and give the resulting particle weight
ws
t∝ws
t−1p(yt|qs
1:t−1,y1:t−1)=ws
t−1/summationdisplay
k/bracketleftbig
Lstkp(qt=k|qs
t−1)/bracketrightbig
(23.62)
Since the weights of the particles in Equation 23.62 are independent of the new value that is
actually sampled for qt, we can compute these weights ﬁrst, and use them to decide which
particles to propagate. That is, we choose the ﬁttest particles at time t−1using information
from time t. This is called look-ahead RBPF (de Freitas et al. 2004).
In more detail, the idea is this. We pass each sample in the prior through all Kmodels
to getKposteriors, one per sample. The normalization constants of this process allow us to
compute the optimal weights in Equation 23.62. We then resample Sindices. Finally, for each
old particle sthat is chosen, we sample one new state qs
t=k, and use the corresponding
posterior from the Kpossible alternative that we have already computed. The pseudo-code is
shown in Algorithm 7. This method needs O(KS)storage, but has the advantage that each
particle is chosen using the latest information, yt.
A further improvement can be obtained by exploiting the fact that the state space is discrete.
Hence we can use the resampling method of (Fearnhead 2004) which avoids duplicating particles.
23.6.2 Application: tracking a maneuvering target
One application of SLDS is to track moving objects that have piecewise linear dynamics. Forexample, suppose we want to track an airplane or missile; q
tcan specify if the object is ﬂying
normally or is taking evasive action. This is called maneuvering target tracking.
Figure 23.7 gives an example of an object moving in 2d. The setup is essentially the same
as in Section 18.2.1, except that we add a three-state discrete Markov chain which controls the
23.6. Rao-Blackwellisedparticleﬁltering(RBPF) 833
Algorithm 23.3: One step of look-ahead RBPF for SLDS using optimal proposal
1fors=1:Sdo
2fork=1:Kdo
3 (μs
tk,Σs
tk,Lk
ts)=KFupdate( μs
t−1,Σs
t−1,yt,θk);
4ws
t=ws
t−1[/summationtext
kLk
tsp(qt=k|qs
t−1)];
5Normalize weights: ws
t=ws
t/summationtext
s/primews/prime
t;
6Resample Sindicesπ∼wt;
7fors∈πdo
8Compute optimal proposal p(k|qs
1:t−1,y1:t)=Ls
tkp(qt=k|qs
t−1)/summationtext
k/primeLs
tkp(qt=k|qs
t−1);
9Samplek∼p(k|qs
1:t−1,y1:t);
10qs
t=k,μs
t=μs
tk,Σs
t=Σstk;
11ws
t=1/S;
Method misclassiﬁcation rate MSE Time (seconds)
PF 0.440 21.051 6.086
RBPF 0.340 18.168 10.986
Table 23.1 Comparison of PF an RBPF on the maneuvering target problem in Figure 23.7.
input to the system. We deﬁne ut=1and set
B1=( 0,0,0,0)T,B2=(−1.225,−0.35,1.225,0.35)T,B3=( 1.225,0.35,−1.225,−0.35)T
so the system will turn in different directions depending on the discrete state.
Figure 23.7(a) shows the true state of the system from a sample run, starting at (0,0): the
colored symbols denote the discrete state, and the location of the symbol denotes the (x,y)
location. The small dots represent noisy observations. Figure 23.7(b) shows the estimate of
the state computed using particle ﬁltering with 500 particles, where the proposal is to samplefrom the prior. The colored symbols denote the MAP estimate of the state, and the location ofthe symbol denotes the MMSE (minimum mean square error) estimate of the location, which isgiven by the posterior mean. Figure 23.7(c) shows the estimate computing using RBPF with 500particles, using the optimal proposal distribution. A more quantitative comparison is shown inTable 23.1. We see that RBPF has slightly better performance, although it is also slightly slower.
Figure 23.8 visualizes the belief state of the system. In (a) we show the distribution over the
discrete states. We see that the particle ﬁlter estimate of the belief state (second column) is notas accurate as the RBPF estimate (third column) in the beginning, although after the ﬁrst fewobservations performance is similar for both methods. In (b), we plot the posterior over the x
locations. For simplicity, we use the PF estimate, which is a set of weighted samples, but wecould also have used the RBPF estimate, which is a set of weighted Gaussians.
834 Chapter23. MonteCarloinference
−90 −80 −70 −60 −50 −40 −30 −20 −10 0−250−200−150−100−50050data
(a)−80 −70 −60 −50 −40 −30 −20 −10 0−250−200−150−100−50050pf, mse 21.051
(b)
−80 −70 −60 −50 −40 −30 −20 −10 0−250−200−150−100−50050rbpf, mse 18.168
(c)
Figure 23.7 (a) A maneuvering target. The colored symbols represent the hidden discrete state. (b)
Particle ﬁlter estimate. (c) RBPF estimate. Figure generated by rbpfManeuverDemo , based on code by
Nando de Freitas.
23.6.3 Application: Fast SLAM
In Section 18.2.2, we introduced the problem of simultaneous localization and mapping or SLAM
for mobile robotics. The main problem with the Kalman ﬁlter implementation is that it is cubicin the number of landmarks. However, by looking at the DGM in Figure 18.2, we see that,conditional on knowing the robot’s path, q
1:t,w h e r eqt∈R2, the landmark locations z∈R2L
are independent. (We assume the landmarks don’t move, so we drop the tsubscript). That is,
p(z|q1:t,y1:t)=/producttextL
l=1p(zl|q1:t,y1:t). Consequently we can use RBPF, where we sample the
robot’s trajectory, q1:t, and we run Lindependent 2d Kalman ﬁlters inside each particle. This
takesO(L)time per particle. Fortunately, the number of particles needed for good performance
is quite small (this partly depends on the control / exploration policy), so the algorithm is
essentially linear in the number of particles. This technique has the additional advantage that
23.6. Rao-Blackwellisedparticleﬁltering(RBPF) 835
truth
1 2 310
20
30
40
50
60
70
80
90
100
pf, error rate 0.440
1 2 310
20
30
40
50
60
70
80
90
100
rbpf, error rate 0.340
1 2 310
20
30
40
50
60
70
80
90
100
(a)−80−60−40−200
02040608010000.51
x1,tPF
tp(x1,t|y1:t)
(b)
Figure 23.8 Belief states corresponding to Figure 23.7. (a) Discrete state. The system starts in state
2 (red x in Figure 23.7), then moves to state 3 (black * in Figure 23.7), returns brieﬂy to state 2, then
switches to state 1 (blue circle in Figure 23.7), etc. (b) Horizontal location (PF estimate). Figure generated
byrbpfManeuverDemo , based on code by Nando de Freitas.
it is easy to use sampling to handle the data association ambiguity, and that it allows for other
representations of the map, such as occupancy grids. This idea was ﬁrst suggested in (Murphy
2000), and was subsequently extended and made practical in (Thrun et al. 2004), who christened
the technique FastSLAM . See rbpfSlamDemo for a simple demo in a discrete grid world.
Exercises
Exercise 23.1 Sampling from a Cauchy
Show how to use inverse probability transform to sample from a standard Cauchy, T(x|0,1,1).
Exercise 23.2 Rejection sampling from a Gamma using a Cauchy proposal
Show how to use a Cauchy proposal to perform rejection sampling from a Gamma distribution. Derive the
optimal constant M, and plot the density and its upper envelope.
Exercise 23.3 Optimal proposal for particle ﬁltering with linear-Gaussian measurement model
Consider a state-space model of the following form:
zt=ft(zt−1)+N(0,Qt−1) (23.63)
yt=Htzt+N(0,Rt) (23.64)
Derive expressions for p(zt|zt−1,yt)andp(yt|zt−1), which are needed to compute the optimal (minimum
variance) proposal distribution. Hint: use Bayes rule for Gaussians.

24Markov chain Monte Carlo (MCMC)
inference
24.1 Introduction
In Chapter 23, we introduced some simple Monte Carlo methods, including rejection sampling
and importance sampling. The trouble with these methods is that they do not work well in highdimensional spaces. The most popular method for sampling from high-dimensional distributionsisMarkov chain Monte Carlo orMCMC.I nas u r v e yb ySIAMNews
1, MCMC was placed in the
top 10 most important algorithms of the 20th century.
The basic idea behind MCMC is to construct a Markov chain (Section 17.2) on the state space
Xwhose stationary distribution is the target density p∗(x)of interest (this may be a prior or a
posterior). That is, we perform a random walk on the state space, in such a way that the fractionof time we spend in each state xis proportional to p
∗(x). By drawing (correlated!) samples
x0,x1,x2,...,from the chain, we can perform Monte Carlo integration wrt p∗. We give the
details below.
The MCMC algorithm has an interesting history. It was discovered by physicists working
on the atomic bomb at Los Alamos during World War II, and was ﬁrst published in the openliterature in (Metropolis et al. 1953) in a chemistry journal. An extension was published inthe statistics literature in (Hastings 1970), but was largely unnoticed. A special case (Gibbssampling, Section 24.2) was independently invented in 1984 in the context of Ising models andwas published in (Geman and Geman 1984). But it was not until (Gelfand and Smith 1990) thatthe algorithm became well-known to the wider statistical community. Since then it has becomewildly popular in Bayesian statistics, and is becoming increasingly popular in machine learning.
It is worth brieﬂy comparing MCMC to variational inference (Chapter 21). The advantages
of variational inference are (1) for small to medium problems, it is usually faster; (2) it isdeterministic; (3) is it easy to determine when to stop; (4) it often provides a lower bound onthe log likelihood. The advantages of sampling are: (1) it is often easier to implement; (2) itis applicable to a broader range of models, such as models whose size or structure changesdepending on the values of certain variables (e.g., as happens in matching problems), or modelswithout nice conjugate priors; (3) sampling can be faster than variational methods when appliedto really huge models or datasets.
2
1. Source: http://www .siam.org/pdf/news/637 .pdf.
2. The reason is that sampling passes speciﬁc values of variables (or sets of variables), whereas in variational inference,
we pass around distributions. Thus sampling passes sparse messages, whereas variational inference passes dense
messages For comparisons of the two approaches, see e.g., (Yoshida and West 2010) and articles in (Bekkerman et al.
838 Chapter24. MarkovchainMonteCarlo(MCMC)inference
24.2 Gibbs sampling
In this section, we present one of the most popular MCMC algorithms, known as Gibbs sam-
pling.3(In physics, this method is known as Glauber dynamics or theheat bath method.) This
is the MCMC analog of coordinate descent.
24.2.1 Basic idea
The idea behind Gibbs sampling is that we sample each variable in turn, conditioned on the
values of all the other variables in the distribution. That is, given a joint sample xsof all the
variables, we generate a new sample xs+1by sampling each component in turn, based on the
most recent values of the other variables. For example, if we have D=3variables, we use
•xs+1
1∼p(x1|xs
2,xs3)
•xs+1
2∼p(x2|xs+11,xs
3)
•xs+1
3∼p(x3|xs+11,xs+12)
This readily generalizes to Dvariables. If xiis a visible variable, we do not sample it, since its
value is already known.
The expression p(xi|x−i)is called the full conditional for variable i. In general, ximay only
depend on some of the other variables. If we represent p(x)as a graphical model, we can infer
the dependencies by looking at i’s Markov blanket, which are its neighbors in the graph. Thus
to sample xi, we only need to know the values of i’s neighbors. In this sense, Gibbs sampling
is a distributed algorithm. However, it is not a parallel algorithm, since the samples must be
generated sequentially.
For reasons that we will explain in Section 24.4.1, it is necessary to discard some of the
initial samples until the Markov chain has burned in, or entered its stationary distribution. We
discuss how to estimate when burnin has occured in Section 24.4.1. In the examples below, wejust discard the initial 25% of the samples, for simplicity.
24.2.2 Example: Gibbs sampling for the Ising model
In Section 21.3.2, we applied mean ﬁeld to an Ising model. Here we apply Gibbs sampling.
Gibbs sampling in pairwise MRF/CRF takes the form
p(xt|x−t,θ)∝/productdisplay
s∈nbr(t)ψst(xs,xt) (24.1)
In the case of an Ising model with edge potentials ψ(xs,xt)=e x p ( Jxsxt),w h e r ext∈
2011)
3. Josiah Willard Gibbs, 1839–1903, was an American physicist.
24.2. Gibbssampling 839
samp le 1, Gibb s
  
−1−0.500.51
(a)
sample 5, Gibbs
  
−1−0.500.51
(b)
mean after 15 sweeps of Gibbs
  
−1−0.500.51
(c)
Figure 24.1 Example of image denoising. We use an Ising prior with Wij=J=1and a Gaussian
noise model with σ=2. We use Gibbs sampling (Section 24.2) to perform approximate inference. (a)
Sample from the posterior after one sweep over the image. (b) Sample after 5 sweeps. (c) Posterior mean,
computed by averaging over 15 sweeps. Compare to Figure 21.3 which shows the results of using mean
ﬁeld inference. Figure generated by isingImageDenoiseDemo .
{−1,+1}, the full conditional becomes
p(xt=+ 1|x−t,θ)=/producttext
s∈nbr(t)ψst(xt=+ 1,xs)
/producttext
s∈nbr(t)ψ(st=+ 1,xs)+/producttext
s∈nbr(t)ψ(xt=−1,xs)(24.2)
=exp[J/summationtext
s∈nbr(t)xs]
exp[J/summationtext
s∈nbr(t)xs]+exp[−J/summationtext
s∈nbr(t)xs](24.3)
=exp[Jηt]
exp[Jηt]+exp[−Jηt]=s i g m ( 2 Jηt) (24.4)
whereJis the coupling strength, ηt/defines/summationtext
s∈nbr(t)xtandsigm(u)=1/(1+e−u)is the sigmoid
function. It is easy to see that ηt=xt(at−dt),w h e r eatis the number of neighbors that agree
with (have the same sign as) t, anddtis the number of neighbors who disagree. If this number
is equal, the “forces” on xtcancel out, so the full conditional is uniform.
We can combine an Ising prior with a local evidence term ψt. For example, with a Gaussian
observation model, we have ψt(xt)=N(yt|xt,σ2). The full conditional becomes
p(xt=+ 1|x−t,y,θ)=exp[Jηt]ψt(+1)
exp[Jηt]ψt(+1)+exp[−Jηt]ψt(−1)(24.5)
=s i g m/parenleftbigg
2Jηt−logψt(+1)
ψt(−1)/parenrightbigg
(24.6)
Now the probability of xtentering each state is determined both by compatibility with its
neighbors (the Ising prior) and compatibility with the data (the local likelihood term).
See Figure 24.1 for an example of this algorithm applied to a simple image denoising problem.
The results are similar to mean ﬁeld (Figure 21.3) except that the ﬁnal estimate (based on
averaging the samples) is somewhat “blurrier”, due to the fact that mean ﬁeld tends to be
over-conﬁdent.
840 Chapter24. MarkovchainMonteCarlo(MCMC)inference
24.2.3 Example: Gibbs sampling for inferring the parameters of a GMM
It is straightforward to derive a Gibbs sampling algorithm to “ﬁt” a mixture model, especially
if we use conjugate priors. We will focus on the case of mixture of Gaussians, although theresults are easily extended to other kinds of mixture models. (The derivation, which follows fromthe results of Section 4.6, is much easier than the corresponding variational Bayes algorithm inSection 21.6.1.)
Suppose we use a semi-conjugate prior. Then the full joint distribution is given by
p(x,z,μ,Σ,π)=p( x|z,μ,Σ)p(z|π)p(π)
K/productdisplay
k=1p(μk)p(Σk) (24.7)
=/parenleftBiggN/productdisplay
i=1K/productdisplay
k=1(πkN(xi|μk,Σk))I(zi=k)/parenrightBigg
× (24.8)
Dir(π|α)K/productdisplay
k=1N(μk|m0,V0)IW(Σ k|S0,ν0) (24.9)
We use the same prior for each mixture component. The full conditionals are as follows. Forthe discrete indicators, we have
p(z
i=k|xi,μ,Σ,π)∝πkN(xi|μk,Σk) (24.10)
For the mixing weights, we have (using results from Section 3.4)
p(π|z)=D i r ({αk+N/summationdisplay
i=1I(zi=k)}K
k=1) (24.11)
For the means, we have (using results from Section 4.6.1)
p(μk|Σk,z,x)=N (μk|mk,Vk) (24.12)
V−1
k=V−1
0+NkΣ−1
k (24.13)
mk=Vk(Σ−1
kNkxk+V−1
0m0) (24.14)
Nk/definesN/summationdisplay
i=1I(zi=k) (24.15)
xk/defines/summationtextN
i=1I(zi=k)xi
Nk(24.16)
For the covariances, we have (using results from Section 4.6.2)
p(Σk|μk,z,x)=I W ( Σk|Sk,νk) (24.17)
Sk=S0+N/summationdisplay
i=1I(zi=k)(xi−μk)(xi−μk)T(24.18)
νk=ν0+Nk (24.19)
SeegaussMissingFitGibbs for some Matlab code. (This code can also sample missing
values for x, if necessary.)
24.2. Gibbssampling 841
24.2.3.1 Label switching
Although it is simple to implement, Gibbs sampling for mixture models has a fundamental
weakness. The problem is that the parameters of the model θ, and the indicator functions z,a r e
unidentiﬁable, since we can arbitrarily permute the hidden labels without affecting the likelihood(see Section 11.3.1). Consequently, we cannot just take a Monte Carlo average of the samples tocompute posterior means, since what one sample considers the parameters for cluster 1 may bewhat another sample considers the parameters for cluster 2. Indeed, if we could average overall modes, we would ﬁnd E[μ
k|D]is the same for all k(assuming a symmetric prior). This is
called the label switching problem.
This problem does not arise in EM or VBEM, which just “lock on” to a single mode. However,
it arises in any method that visits multiple modes. In 1d problems, one can try to prevent thisproblem by introducing constraints on the parameters to ensure identiﬁability, e.g., μ
1<μ2<
μ3(Richardson and Green 1997). However, this does not always work, since the likelihood might
overwhelm the prior and cause label switching anyway. Furthermore, this technique does notscale to higher dimensions. Another approach is to post-process the samples by searching for aglobal label permutation to apply to each sample that minimizes some loss function (Stephens2000); however, this can be slow.
Perhaps the best solution is simply to “not ask” questions that cannot be uniquely identiﬁed.
For example, instead of asking for the probability that data point ibelongs to cluster k, ask
for the probability that data points iandjbelong to the same cluster. The latter question is
invariant to the labeling. Furthermore, it only refers to observable quantities (are iandjgrouped
together or not), rather than referring to unobservable quantities, such as latent clusters. Thisapproach has the further advantage that it extends to inﬁnite mixture models, discussed inSection 25.2, where Kis unbounded; in such models, the notion of a hidden cluster is not well
deﬁned, but the notion of a partitioning of the data iswell deﬁned
24.2.4 Collapsed Gibbs sampling *
In some cases, we can analytically integrate out some of the unknown quantities, and justsample the rest. This is called a collapsed Gibbs sampler, and it tends to be much more
efficient, since it is sampling in a lower dimensional space.
More precisely, suppose we sample zand integrate out θ. Thus the θparameters do not
participate in the Markov chain; consequently we can draw conditionally independent samplesθ
s∼p(θ|zs,D), which will have much lower variance than samples drawn from the joint state
space (Liu et al. 1994). This process is called Rao-Blackwellisation, named after the following
theorem:
Theorem 24.2.1 (Rao-Blackwell). Letzandθbe dependent random variables, and f(z,θ)be
somescalarfunction. Then
varz,θ[f(z,θ)]≥varz[Eθ[f(z,θ)|z]] (24.20)
This theorem guarantees that the variance of the estimate created by analytically integrating
outθwill always be lower (or rather, will never be higher) than the variance of a direct MC
estimate. In collapsed Gibbs, we sample zwithθintegrated out; the above Rao-Blackwell
theorem still applies in this case (Liu et al. 1994).
842 Chapter24. MarkovchainMonteCarlo(MCMC)inference
α
π
z1zizN
x1xixN
θK
β
(a)α
z1zizN
x1xixN
β
(b)
Figure 24.2 (a) A mixture model. (b) After integrating out the parameters.
We will encounter Rao-Blackwellisation again in Section 23.6. Although it can reduce statistical
variance, it is only worth doing if the integrating out can be done quickly, otherwise we will not
be able to produce as many samples per second as the naive method. We give an example ofthis below.
24.2.4.1 Example: collapsed Gibbs for ﬁtting a GMM
Consider a GMM with a fully conjugate prior. In this case we can analytically integrate out themodel parameters μ
k,Σkandπ, and just sample the indicators z. Once we integrate out π,
all thezinodes become inter-dependent. Similarly, once we integrate out θk, all thexinodes
become inter-dependent, as shown in Figure 24.2(b). Nevertheless, we can easily compute thefull conditionals as follows:
p(z
i=k|z−i,x,α,β)∝p(zi=k|z−i,α,β)p(x|zi=k,z−i,α,β) (24.21)
∝p(zi=k|z−i,α)p(xi|x−i,zi=k,z−i,β)
p(x−i|zi=k,z−i,β) (24.22)
∝p(zi=k|z−i,α)p(xi|x−i,zi=k,z−i,β) (24.23)
whereβ=(m0,V0,S0,ν0)are the hyper-parameters for the class-conditional densities. The
ﬁrst term can be obtained by integrating out π. Suppose we use a symmetric prior of the form
π∼Dir(α),w h e r eα k=α/K. From Equation 5.26 we have
p(z1,...,z N|α)=Γ(α)
Γ(N+α)K/productdisplay
k=1Γ(Nk+α/K)
Γ(α/K)(24.24)
24.2. Gibbssampling 843
Hence
p(zi=k|z−i,α)=p(z1:N|α)
p(z−i|α)=1
Γ(N+α)
1
Γ(N+α−1)×Γ(Nk+α/K)
Γ(Nk,−i+α/K)(24.25)
=Γ(N+α−1)
Γ(N+α)Γ(Nk,−i+1+α/K)
Γ(Nk,−i+α/K)=Nk,−i+α/K
N+α−1(24.26)
whereNk,−i/defines/summationtext
n/negationslash=iI(zn=k)=Nk−1, and where we exploited the fact that Γ(x+1)=
xΓ(x).
To obtain the second term in Equation 24.23, which is the posterior predictive distribution for
xigiven all the other data and all the assignments, we use the fact that
p(xi|x−i,z−i,zi=k,β)=p(xi|D−i,k) (24.27)
whereD−i,k={xj:zj=k,j/negationslash=i}is all the data assigned to cluster kexcept for xi.I fw e
use a conjugate prior for θk, we can compute p(xi|D−i,k)in closed form. Furthermore, we can
efficiently update these predictive likelihoods by caching the sufficient statistics for each cluster.
To compute the above expression, we remove xi’s statistics from its current cluster (namely zi),
and then evaluate xiunder each cluster’s posterior predictive. Once we have picked a new
cluster, we add xi’s statistics to this new cluster.
Some pseudo-code for one step of the algorithm is shown in Algorithm 1, based on (Sud-
derth 2006, p94). (We update the nodes in random order to improve the mixing time, assuggested in (Roberts and Sahu 1997).) We can initialize the sample by sequentially samplingfromp(z
i|z1:i−1,x1:i). (See fmGibbs for some Matlab code, by Yee-Whye Teh.) In the case of
GMMs, both the naive sampler and collapsed sampler take O(NKD)time per step.
Algorithm 24.1: Collapsed Gibbs sampler for a mixture model
1foreachi=1:Ninrandomorder do
2Removexi’s sufficient statistics from old cluster zi;
3foreachk=1:Kdo
4 Compute pk(xi)/definesp(xi|{xj:zj=k,j/negationslash=i});
5Compute p(zi=k|z−i,D)∝(Nk,−i+α/K)pk(xi);
6Samplezi∼p(zi|·);
7Addxi’s sufficient statistics to new cluster zi
A comparison of this method with the standard Gibbs sampler is shown in Figure 24.3. The
vertical axis is the data log probability at each iteration, computed using
logp(D|z,θ)=N/summationdisplay
i=1log[πzip(xi|θzi)] (24.28)
To compute this quantity using the collapsed sampler, we have to sample θ=(π,θ1:K)given
the data and the current assignment z.
In Figure 24.3 we see that the collapsed sampler does indeed generally work better than the
vanilla sampler. Occasionally, however, both methods can get stuck in poor local modes. (Note
844 Chapter24. MarkovchainMonteCarlo(MCMC)inference
100101102103−600−550−500−450−400−350
Iterationlog p(x | π, θ)
  
Standard Gibbs Sampler
Rao−Blackwellized Sampler
(a)100101102103−600−550−500−450−400−350
Iterationlog p(x | π, θ)
  
Standard Gibbs Sampler
Rao−Blackwellized Sampler
(b)
Figure 24.3 Comparison of collapsed (red) and vanilla (blue) Gibbs sampling for a mixture of K=4two-
dimensional Gaussians applied to N= 300data points (shown in Figure 25.7). We plot log probability of
the data vs iteration. (a) 20 different random initializations. (b) logprob averaged over 100 different random
initializations. Solid line is the median, thick dashed in the 0.25 and 0.75 quantiles, and thin dashed arethe 0.05 and 0.95 quintiles. Source: Figure 2.20 of (Sudderth 2006). Used with kind permission of ErikSudderth.
−2 −1 0 1 220304050607080
SESMath Score
(a)5 10 15 20 25 30−50510
Sample SizeSlope
(b)−2 −1 0 1 220304050607080
SESMath Score
(c)
Figure 24.4 (a) Least squares regression lines for math scores vs socio-economic status for 100 schools.
Population mean (pooled estimate) is in bold. (b) Plot of ˆw2j(the slope) vs Nj(sample size) for the 100
schools. The extreme slopes tend to correspond to schools with smaller sample sizes. (c) Predictions fromthe hierarchical model. Population mean is in bold. Based on Figure 11.1 of (Hoff 2009). Figure generatedbymultilevelLinregDemo , written by Emtiyaz Khan.
that the error bars in Figure 24.3(b) are averaged over starting values, whereas the theorem refers
to MC samples in a single run.)
24.2.5 Gibbs sampling for hierarchical GLMs
Often we have data from multiple related sources. If some sources are more reliable and/ordata-rich than others, it makes sense to model all the data simultaneously, so as to enable theborrowing of statistical strength. One of the most natural way to solve such problems is to usehierarchical Bayesian modeling, also called multi-level modeling. In Section 9.6, we discusseda way to perform approximate inference in such models using variational methods. Here wediscuss how to use Gibbs sampling.
To explain the method, consider the following example. Suppose we have data on students
24.2. Gibbssampling 845
xijyijwj
σ2μwΣw
Nj
J
Figure 24.5 Multi-level model for linear regression.
in different schools. Such data is naturally modeled in a two-level hierarchy: we let yijbe the
response variable we want to predict for student iin school j. This prediction can be based on
school and student speciﬁc covariates, xij. Since the quality of schools varies, we want to use
a separate parameter for each school. So our model becomes
yij=xT
ijwj+/epsilon1ij (24.29)
We will illustrate this model below, using a dataset from (Hoff 2009, p197), where xijis the
socio-economic status (SES) of student iin school y, andyijis their math score.
We could ﬁt each wjseparately, but this can give poor results if the sample size of a given
school is small. This is illustrated in Figure 24.4(a), which plots the least squares regression
line estimated separately for each of the J= 100schools. We see that most of the slopes are
positive, but there are a few “errant” cases where the slope is negative. It turns out that the lineswith extreme slopes tend to be in schools with small sample size, as shown in Figure 24.4(b).Thus we may not necessarily trust these ﬁts.
We can get better results if we construct a hierarchical Bayesian model, in which the w
jare
assumed to come from a common prior: wj∼N(μw,Σw). This is illustrated in Figure 24.5. In
this model, the schools with small sample size borrow statistical strength from the schools withlarger sample size, because the w
j’s are correlated via the latent common parents (μw,Σw). (It
is crucial that these hyper-parameters be inferrred from data; if they were ﬁxed constants, thew
jwould be conditionally independent, and there would be no information sharing between
them.)
To complete the model speciﬁcation, we must specify priors for the shared parameters. Fol-
lowing (Hoff 2009, p198), we will use the following semi-conjugate forms, for convenience:
μw∼N(μ0,V0) (24.30)
Σw∼IW(η0,S−1
0) (24.31)
σ2∼IG(ν0/2,ν0σ2
0/2) (24.32)
Given this, it is simple to show that the full conditionals needed for Gibbs sampling have the
846 Chapter24. MarkovchainMonteCarlo(MCMC)inference
following forms. For the group-speciﬁc weights:
p(wj|Dj,θ)=N (wj|μj,Σj) (24.33)
Σ−1
j=Σ−1+XT
jXj/σ2(24.34)
μj=Σj(Σ−1μ+XTjyj/σ2) (24.35)
For the overall mean:
p(μw|w1:J,Σw)=N (μ|μN,ΣN) (24.36)
Σ−1
N=V−1
0+JΣ−1(24.37)
μN=ΣN(V−1
0μ0+JΣ−1w) (24.38)
wherew=1
J/summationtext
jwj. For the overall covariance:
p(Σw|μw,w1:J)=I W ( ( S0+Sμ)−1,η0+J) (24.39)
Sμ=/summationdisplay
j(wj−μw)(wj−μw)T(24.40)
For the noise variance:
p(σ2|D,w1:J)=I G ( [ ν0+N]/2,[ν0σ2
0+SSR(w1:J)]/2) (24.41)
SSR(w1:J)=J/summationdisplay
j=1Nj/summationdisplay
i=1(yij−wT
jxij)2(24.42)
Applying Gibbs sampling to our hierarchical model, we get the results shown in Figure 24.4(c).
The light gray lines plot the mean of the posterior predictive distribution for each school:
E[yj|xij]=xTijˆwj (24.43)
where
ˆwj=E[wj|D]≈1
SS/summationdisplay
s=1w(s)
j (24.44)
The dark gray line in the middle plots the prediction using the overall mean parameters, xT
ijˆμw.
We see that the method has regularized the ﬁts quite nicely, without enforcing too much
uniformity. (The amount of shrinkage is controlled by Σw, which in turns depends on the
hyper-parameters; in this example, we used vague values.)
24.2.6 BUGS and JAGS
One reason Gibbs sampling is so popular is that it is possible to design general purpose softwarethat will work for almost any model. This software just needs a model speciﬁcation, usuallyin the form a directed graphical model (speciﬁed in a ﬁle, or created with a graphical userinterface), and a library of methods for sampling from different kinds of full conditionals. (Thiscan often be done using adaptive rejection sampling, described in Section 23.3.4.) An example
24.2. Gibbssampling 847
of such a package is BUGS(Lunn et al. 2000), which stands for “Bayesian updating using Gibbs
Sampling”. BUGS is very widely used in biostatistics and social science. Another more recent,
but very similar, package is JAGS(Plummer 2003), which stands for “Just Another Gibbs Sampler”.
This uses a similar model speciﬁcation language to BUGS.
For example, we can describe the model in Figure 24.5 as follows:
model {
for (i in 1:N) {
for (j in 1:J) {
y[i,j] ~ dnorm(y.hat[i,j], tau.y)y.hat[i,j] <- inprod(W[j, ], X[i, j, ])
}
}tau.y <- pow(sigma.y, -2)sigma.y ~ dunif(0,100)
for (j in 1:J) {
W[j,] ~ dmnorm(mu, SigmaInv)
}
SigmaInv ~ dwish(S0[,], eta0)mu ~ dmnorm(mu0, V0inv)}
We can then just pass this model to BUGS or JAGS, which will generate samples for us. See
the webpages for details.
Although this approach is appealing, unfortunately it can be much slower than using hand-
written code, especially for complex models. There has been some work on automaticallyderiving model-speciﬁc optimized inference code (Fischer and Schumann 2003), but fast codestill typically requires human expertise.
24.2.7 The Imputation Posterior (IP) algorithm
TheImputation Posterior or IP algorithm (Tanner and Wong 1987) is a special case of Gibbs
sampling in which we group the variables into two classes: hidden variables zand parameters
θ. This should sound familiar: it is basically an MCMC version of EM, where the E step gets
replaced by the I step, and the M step gets replaced the P step. This is an example of a moregeneral strategy called data augmentation, whereby we introduce auxiliary variables in order
to simplify the posterior computations (here the computation of p(θ|D)). See (Tanner 1996; van
Dyk and Meng 2001) for more information.
24.2.8 Blocking Gibbs sampling
Gibbs sampling can be quite slow, since it only updates one variable at a time (so-called single
site updating). If the variables are highly correlated, it will take a long time to move awayfrom the current state. This is illustrated in Figure 24.6, where we illustrate sampling from a 2dGaussian (see Exercise 24.1 for the details). If the variables are highly correlated, the algorithm
848 Chapter24. MarkovchainMonteCarlo(MCMC)inference
/g1/g2/g1/g3/g1/g4/g5/g4/g3/g2
/g1/g2 /g1/g3 /g1/g4 /g5 /g4 /g3 /g2/g6
/g7
Figure 24.6 Illustration of potentially slow sampling when using Gibbs sampling for a skewed 2D Gaus-
sian. Based on Figure 11.11 of (Bishop 2006b). Figure generated by gibbsGaussDemo .
will move very slowly through the state space. In particular, the size of the moves is controlled
by the variance of the conditional distributions. If this is /lscriptin thex1direction, and the support
of the distribution is Lalong this dimension, then we need O((L//lscript)2)steps to obtain an
independent sample.
In some cases we can efficiently sample groups of variables at a time. This is called blocking
Gibbs sampling orblocked Gibbs sampling (Jensen et al. 1995; Wilkinson and Yeung 2002),
and can make much bigger moves through the state space.
24.3 Metropolis Hastings algorithm
Although Gibbs sampling is simple, it is somewhat restricted in the set of models to which itcan be applied. For example, it is not much help in computing p(w|D)for a logistic regression
model, since the corresponding graphical model has no useful Markov structure. In addition,Gibbs sampling can be quite slow, as we mentioned above.
Fortunately, there is a more general algorithm that can be used, known as the Metropolis
Hastings orMHalgorithm, which we describe below.
24.3.1 Basic idea
The basic idea in MH is that at each step, we propose to move from the current state xto a
new state x/primewith probability q(x/prime|x),w h e r eqis called the proposal distribution (also called
thekernel). The user is free to use any kind of proposal they want, subject to some conditions
which we explain below. This makes MH quite a ﬂexible method. A commonly used proposal isa symmetric Gaussian distribution centered on the current state, q(x
/prime|x)=N(x/prime|x,Σ); this is
called arandom walk Metropolis algorithm. We discuss how to choose Σin Section 24.3.3. If
we use a proposal of the form q(x/prime|x)=q(x/prime), where the new state is independent of the old
state, we get a method known as the independence sampler, which is similar to importance
sampling (Section 23.4).
Having proposed a move to x/prime, we then decide whether to acceptthis proposal or not
according to some formula, which ensures that the fraction of time spent in each state isproportional to p
∗(x). If the proposal is accepted, the new state is x/prime, otherwise the new state
24.3. MetropolisHastingsalgorithm 849
is the same as the current state, x(i.e., we repeat the sample).
If the proposal is symmetric, so q(x/prime|x)=q(x|x/prime), the acceptance probability is given by the
following formula:
r=m i n ( 1,p∗(x/prime)
p∗(x)) (24.45)
We see that if x/primeis more probable than x, we deﬁnitely move there (sincep∗(x/prime)
p∗(x)>1), but if
x/primeis less probable, we may still move there anyway, depending on the relative probabilities. So
instead of greedily moving to only more probable states, we occasionally allow “downhill” moves
to less probable states. In Section 24.3.6, we prove that this procedure ensures that the fractionof time we spend in each state xis proportional to p
∗(x).
If the proposal is asymmetric, so q(x/prime|x)/negationslash=q(x|x/prime), we need the Hastings correction, given
by the following:
r=m i n ( 1 ,α) (24.46)
α=p∗(x/prime)q(x|x/prime)
p∗(x)q(x/prime|x)=p∗(x/prime)/q(x/prime|x)
p∗(x)/q(x|x/prime)(24.47)
This correction is needed to compensate for the fact that the proposal distribution itself (ratherthan just the target distribution) might favor certain states.
An important reason why MH is a useful algorithm is that, when evaluating α, we only need to
know the target density up to a normalization constant. In particular, suppose p
∗(x)=1
Z˜p(x),
where˜p(x)is an unnormalized distribution and Zis the normalization constant. Then
α=(˜p(x/prime)/Z)q(x|x/prime)
(˜p(x)/Z)q(x/prime|x)(24.48)
so theZ’s cancel. Hence we can sample from p∗even ifZis unknown. In particular, all we
have to do is evaluate ˜ppointwise, where ˜p(x)=p∗(x)Z.
The overall algorithm is summarized in Algorithm 2.
24.3.2 Gibbs sampling is a special case of MH
It turns out that Gibbs sampling, which we discussed in Section 24.2, is a special case of MH. Inparticular, it is equivalent to using MH with a sequence of proposals of the form
q(x
/prime|x)=p(x/prime
i|x−i)I(x/prime−i=x−i) (24.49)
That is, we move to a new state where xiis sampled from its full conditional, but x−iis left
unchanged.
We now prove that the acceptance rate of each such proposal is 1, so the overall algorithm
also has an acceptance rate of 100%. We have
α=p(x/prime)q(x|x/prime)
p(x)q(x/prime|x)=p(x/prime
i|x/prime−i)p(x/prime−i)p(xi|x/prime−i)
p(xi|x−i)p(x−i)p(x/primei|x−i)(24.50)
=p(x/primei|x−i)p(x−i)p(xi|x−i)
p(xi|x−i)p(x−i)p(x/primei|x−i)=1 (24.51)
850 Chapter24. MarkovchainMonteCarlo(MCMC)inference
Algorithm 24.2: Metropolis Hastings algorithm
1Initializex0;
2fors=0,1,2,...do
3Deﬁnex=xs;
4Samplex/prime∼q(x/prime|x);
5Compute acceptance probability
α=˜p(x/prime)q(x|x/prime)
˜p(x)q(x/prime|x)
Compute r=m i n ( 1,α);
6Sampleu∼U(0,1);
7Set new sample to
xs+1=/braceleftbiggx/primeifu<r
xsifu≥r
where we exploited the fact that x/prime
−i=x−i, and that q(x/prime|x)=p(x/primei|x−i).
The fact that the acceptance rate is 100% does not necessarily mean that Gibbs will converge
rapidly, since it only updates one coordinate at a time (see Section 24.2.8). Fortunately, there are
many other kinds of proposals we can use, as we discuss below.
24.3.3 Proposal distributions
For a given target distribution p∗, a proposal distribution qis valid or admissible if it gives
a non-zero probability of moving to the states that have non-zero probability in the target.Formally, we can write this as
supp(p
∗)⊆∪xsupp(q(·|x)) (24.52)
For example, a Gaussian random walk proposal has non-zero probability density on the entirestate space, and hence is a valid proposal for any continuous state space.
Of course, in practice, it is important that the proposal spread its probability mass in just the
right way. Figure 24.7 shows an example where we use MH to sample from a mixture of two1D Gaussians using a random walk proposal, q(x
/prime|x)=N(x/prime|x,v). This is a somewhat tricky
target distribution, since it consists of two well separated modes. It is very important to set thevariance of the proposal vcorrectly: If the variance is too low, the chain will only explore one
of the modes, as shown in Figure 24.7(a), but if the variance is too large, most of the moveswill be rejected, and the chain will be very sticky, i.e., it will stay in the same state for a long
time. This is evident from the long stretches of repeated values in Figure 24.7(b). If we setthe proposal’s variance just right, we get the trace in Figure 24.7(c), where the samples clearlyexplore the support of the target distribution. We discuss how to tune the proposal below.
One big advantage of Gibbs sampling is that one does not need to choose the proposal
24.3. MetropolisHastingsalgorithm 851
0
200
400
600
800
1000−100−5005010000.10.2
SamplesMH with N(0,1.0002) proposal
Iterations
(a)0
200
400
600
800
1000−100−5005010000.020.040.06
SamplesMH with N(0,500.0002) proposal
Iterations
(b)
0
200
400
600
800
1000−100−5005010000.010.020.03
SamplesMH with N(0,8.0002) proposal
Iterations
(c)
Figure 24.7 An example of the Metropolis Hastings algorithm for sampling from a mixture of two 1D
Gaussians (μ =(−20,20),π=( 0.3,0.7),σ= (100,100)), using a Gaussian proposal with variances of
v∈{1,500,8}. (a) When v=1, the chain gets trapped near the starting state and fails to sample from
the mode at μ=−20. (b) When v= 500, the chain is very “sticky”, so its effective sample size is low (as
reﬂected by the rough histogram approximation at the end). (c) Using a variance of v=8is just right and
leads to a good approximation of the true distribution (shown in red). Figure generated by mcmcGmmDemo .
Based on code by Christophe Andrieu and Nando de Freitas.
distribution, and furthermore, the acceptance rate is 100%. Of course, a 100% acceptance can
trivially be achieved by using a proposal with variance 0 (assuming we start at a mode), but thisis obviously not exploring the posterior. So having a high acceptance is not the ultimate goal.We can increase the amount of exploration by increasing the variance of the Gaussian kernel.Often one experiments with different parameters until the acceptance rate is between 25% and40%, which theory suggests is optimal, at least for Gaussian target distributions. These shortinitial runs, used to tune the proposal, are called pilot runs.
852 Chapter24. MarkovchainMonteCarlo(MCMC)inference
−120 −100 −80 −60 −40 −20 000.020.040.060.080.10.120.140.160.180.2
w0w1
(a)−120 −100 −80 −60 −40 −20 0050010001500w0 intercept
(b)0 0.05 0.1 0.15 0.2050010001500w1 slope
(c)
Figure 24.8 (a) Joint posterior of the parameters for 1d logistic regression when applied to some SAT data.
(b) Marginal for the offset w0. (c) Marginal for the slope w1. We see that the marginals do not capture the
fact that the parameters are highly correlated. Figure generated by logregSatMhDemo .
24.3.3.1 Gaussian proposals
If we have a continuous state space, the Hessian Hat a local mode ˆwcan be used to deﬁne
the covariance of a Gaussian proposal distribution. This approach has the advantage that the
Hessian models the local curvature and length scales of each dimension; this approach thereforeavoids some of the slow mixing behavior of Gibbs sampling shown in Figure 24.6.
There are two obvious approaches: (1) an independence proposal, q(w
/prime|w)=N(w/prime|ˆw,H−1)
or (2), a random walk proposal, q(w/prime|w)=N(w/prime|w,s2H−1),w h e r es2is a scale factor chosen
to facilitate rapid mixing. (Roberts and Rosenthal 2001) prove that, if the posterior is Gaussian,the asymptotically optimal value is to use s
2=2.382/D,w h e r eDis the dimensionality of w;
this results in an acceptance rate of 0.234.
For example, consider MH for binary logistic regression. From Equation 8.7, we have that
the Hessian of the log-likelihood is Hl=XTDX,w h e r eD= diag(μ i(1−μi))andμi=
sigm(ˆwTxi). If we assume a Gaussian prior, p(w)=N(0,V0),w eh a v e H=V−1
0+Hl,s o
the asymptotically optimal Gaussian proposal has the form
q(w/prime|w)=N/parenleftbigg
w,2.382
D/parenleftbig
V−1
0+XTDX/parenrightbig−1/parenrightbigg
(24.53)
See (Gamerman 1997; Rossi et al. 2006; Fruhwirth-Schnatter and Fruhwirth 2010) for furtherdetails. The approach is illustrated in Figure 24.8, where we sample parameters from a 1dlogistic regression model ﬁt to some SAT data. We initialize the chain at the mode, computedusing IRLS, and then use the above random walk Metropolis sampler.
If you cannot afford to compute the mode or its Hessian XDX, an alternative approach,
suggested in (Scott 2009), is to approximate the above proposal as follows:
q(w
/prime|w)=N/parenleftBigg
w,/parenleftbigg
V−1
0+6
π2XTX/parenrightbigg−1/parenrightBigg
(24.54)
24.3. MetropolisHastingsalgorithm 853
24.3.3.2 Mixture proposals
If one doesn’t know what kind of proposal to use, one can try a mixture proposal, which is a
convex combination of base proposals:
q(x/prime|x)=K/summationdisplay
k=1wkqk(x/prime|x) (24.55)
wherewkare the mixing weights. As long as each qkis individually valid, the overall proposal
will also be valid.
24.3.3.3 Data-driven MCMC
The most efficient proposals depend not just on the previous hidden state, but also the visible
data, i.e., they have the form q(x/prime|x,D). This is called data-driven MCMC (see e.g., (Tu and
Zhu 2002)). To create such proposals, one can sample (x,D)pairs from the forwards model
and then train a discriminative classiﬁer to predict p(x|f(D)),w h e r e f(D)are some features
extracted from the visible data.
Typically xis a high-dimensional vector (e.g., position and orientation of all the limbs of a
person in a visual object detector), so it is hard to predict the entire state vector, p(x|f(D)).
Instead we might train a discriminative detector to predict parts of the state-space, p(xk|fk(D)),
such as the location of just the face of a person. We can then use a proposal of the form
q(x/prime|x,D)=π0q0(x/prime|x)+/summationdisplay
kπkqk(x/prime
k|fk(D)) (24.56)
whereq0is a standard data-independent proposal (e.g., random walk), and qkupdates the k’th
component of the state space. For added efficiency, the discriminative proposals should suggest
joint changes to multiple variables, but this is often hard to do.
The overall procedure is a form of generate and test: the discriminative proposals q(x/prime|x)
generate new hypotheses, which are then “tested” by computing the posterior ratiop(x/prime|D)
p(x|D),t o
see if the new hypothesis is better or worse. By adding an annealing step, one can modifythe algorithm to ﬁnd posterior modes; this is called simulated annealing, and is described in
Section 24.6.1. One advantage of using the mode-seeking version of the algorithm is that we donot need to ensure the proposal distribution is reversible.
24.3.4 Adaptive MCMC
One can change the parameters of the proposal as the algorithm is running to increase efficiency.This is called adaptive MCMC. This allows one to start with a broad covariance (say), allowing
large moves through the space until a mode is found, followed by a narrowing of the covarianceto ensure careful exploration of the region around the mode.
However, one must be careful not to violate the Markov property; thus the parameters of the
proposal should not depend on the entire history of the chain. It turns out that a sufficientcondition to ensure this is that the adaption is “faded out” gradually over time. See e.g., (Andrieuand Thoms 2008) for details.
854 Chapter24. MarkovchainMonteCarlo(MCMC)inference
24.3.5 Initialization and mode hopping
It is necessary to start MCMC in an initial state that has non-zero probability. If the model has
deterministic constraints, ﬁnding such a legal conﬁguration may be a hard problem in itself. Itis therefore common to initialize MCMC methods at a local mode, found using an optimizer.
In some domains (especially with discrete state spaces), it is a more effective use of computa-
tion time to perform multiple restarts of an optimizer, and to average over these modes, ratherthan exploring similar points around a local mode. However, in continuous state spaces, themode contains negligible volume (Section 5.2.1.3), so it is necessary to locally explore aroundeach mode, in order to visit enough posterior probability mass.
24.3.6 Why MH works *
To prove that the MH procedure generates samples from p∗, we have to use a bit of Markov
chain theory, so be sure to read Section 17.2.3 ﬁrst.
The MH algorithm deﬁnes a Markov chain with the following transition matrix:
p(x/prime|x)=/braceleftbiggq(x/prime|x)r(x/prime|x) ifx/prime/negationslash=x
q(x|x)+/summationtext
x/prime/negationslash=xq(x/prime|x)(1−r(x/prime|x))otherwise(24.57)
This follows from a case analysis: if you move to x/primefromx, you must have proposed it (with
probability q(x/prime|x)) and it must have been accepted (with probability r(x/prime|x)); otherwise you
stay in state x, either because that is what you proposed (with probability q(x|x)), or because
you proposed something else (with probability q(x/prime|x)) but it was rejected (with probability
1−r(x/prime|x)).
Let us analyse this Markov chain. Recall from Section 17.2.3.4 that a chain satisﬁes detailed
balanceif
p(x/prime|x)p∗(x)=p(x|x/prime)p∗(x/prime) (24.58)
We also showed that if a chain satisﬁes detailed balance, then p∗is its stationary distribution.
Our goal is to show that the MH algorithm deﬁnes a transition function that satisﬁes detailedbalance and hence that p
∗is its stationary distribution. (If Equation 24.58 holds, we say that p∗
is aninvariant distribution wrt the Markov transition kernel q.)
Theorem 24.3.1. IfthetransitionmatrixdeﬁnedbytheMHalgorithm(givenbyEquation24.57)is
ergodicandirreducible,then p∗isitsuniquelimitingdistribution.
Proof.Consider two states xandx/prime. Either
p∗(x)q(x/prime|x)<p∗(x/prime)q(x|x/prime) (24.59)
or
p∗(x)q(x/prime|x)>p∗(x/prime)q(x|x/prime) (24.60)
We will ignore ties (which occur with probability zero for continuous distributions). Without lossof generality, assume that p
∗(x)q(x/prime|x)>p∗(x/prime)q(x|x/prime). Hence
α(x/prime|x)=p∗(x/prime)q(x|x/prime)
p∗(x)q(x/prime|x)<1 (24.61)
24.3. MetropolisHastingsalgorithm 855
Hence we have r(x/prime|x)=α(x/prime|x)andr(x|x/prime)=1.
N o wt om o v ef r o mx tox/primewe must ﬁrst propose x/primeand then accept it. Hence
p(x/prime|x)=q(x/prime|x)r(x/prime|x)=q(x/prime|x)p∗(x/prime)q(x|x/prime)
p∗(x)q(x/prime|x)=p∗(x/prime)
p∗(x)q(x|x/prime) (24.62)
Hence
p∗(x)p(x/prime|x)=p∗(x/prime)q(x|x/prime) (24.63)
The backwards probability is
p(x|x/prime)=q(x|x/prime)r(x|x/prime)=q(x|x/prime) (24.64)
sincer(x|x/prime)=1. Inserting this into Equation 24.63 we get
p∗(x)p(x/prime|x)=p∗(x/prime)p(x|x/prime) (24.65)
so detailed balance holds wrt p∗. Hence, from Theorem 17.2.3, p∗is a stationary distribution.
Furthermore, from Theorem 17.2.2, this distribution is unique, since the chain is ergodic and
irreducible.
24.3.7 Reversible jump (trans-dimensional) MCMC *
Suppose we have a set of models with different numbers of parameters, e.g., mixture models inwhich the number of mixture components is unknown. Let the model be denoted by m, and
let its unknowns (e.g., parameters) be denoted by x
m∈Xm(e.g.,Xm=Rnm,w h e r enmis
the dimensionality of model m). Sampling in spaces of differing dimensionality is called trans-
dimensional MCMC (Green 2003). We could sample the model indicator m∈{1,...,M}and
sample all the parameters from the product space/producttextM
m=1Xm, but this is very inefficient. It is
more parsimonious to sample in the union space X=∪M
m=1{m}×X m, where we only worry
about parameters for the currently active model.
The difficulty with this approach arises when we move between models of different dimen-
sionality. The trouble is that when we compute the MH acceptance ratio, we are comparing
densities deﬁned in different dimensionality spaces, which is meaningless. It is like trying tocompare a sphere with a circle. The solution, proposed by (Green 1998) and known as reversible
jump MCMC orRJMCMC, is to augment the low dimensional space with extra random variables
so that the two spaces have a common measure.
Unfortunately, we do not have space to go into details here. Suffice it to say that the method
can be made to work in theory, although it is a bit tricky in practice. If, however, the continuousparameters can be integrated out (resulting in a method called collapsed RJMCMC), much of thedifficulty goes away, since we are just left with a discrete state space, where there is no needto worry about change of measure. For example, (Denison et al. 2002) includes many examplesof applications of collapsed RJMCMC applied to Bayesian inference fro adaptive basis-functionmodels. They sample basis functions from a ﬁxed set of candidates (e.g., centered on the datapoints), and integrate out the other parameters analytically. This provides a Bayesian alternativeto using RVMs or SVMs.
856 Chapter24. MarkovchainMonteCarlo(MCMC)inference
0 5 10 15 20p(0)(x)
0 5 10 15 20p(1)(x)
0 5 10 15 20p(2)(x)
0 5 10 15 20p(3)(x)
0 5 10 15 20p(10)(x)
0 5 10 15 20p(100)(x)
0 5 10 15 20p(200)(x)Initial Condition X0 = 10
0 5 10 15 20p(400)(x)
(a)0 5 10 15 20p(0)(x)
0 5 10 15 20p(1)(x)
0 5 10 15 20p(2)(x)
0 5 10 15 20p(3)(x)
0 5 10 15 20p(10)(x)
0 5 10 15 20p(100)(x)
0 5 10 15 20p(200)(x)Initial Condition X0 = 17
0 5 10 15 20p(400)(x)
(b)
Figure 24.9 Illustration of convergence to the uniform distribution over {0,1,...,20} using a symmetric
random walk starting from (left) state 10, and (right) state 17. Based on Figures 29.14 and 29.15 of (MacKay
2003). Figure generated by randomWalk0to20Demo .
24.4 Speed and accuracy of MCMC
In this section, we discuss a number of important theoretical and practical issues to do with
MCMC.
24.4.1 The burn-in phase
We start MCMC from an arbitrary initial state. As we explained in Section 17.2.3, only when thechainhas “forgotten”where itstarted fromwill thesamples becoming fromthe chain’sstationarydistribution. Samples collected before the chain has reached its stationary distribution do notcome from p
∗, and are usually thrown away. The initial period, whose samples will be ignored,
is called the burn-in phase.
For example, consider a uniform distribution on the integers {0,1,...,20}. Suppose we
sample from this using a symmetric random walk. In Figure 24.9, we show two runs of thealgorithm. On the left, we start in state 10; on the right, we start in state 17. Even in this smallproblem it takes over 100 steps until the chain has “forgotten” where it started from.
It is difficult to diagnose when the chain has burned in, an issue we discuss in more detail
below. (This is one of the fundamental weaknesses of MCMC.) As an interesting example of whatcan happen if you start collecting samples too early, consider the Potts model. Figure 24.10(a),shows a sample after 500 iterations of Gibbs sampling. This suggests that the model likes
24.4. SpeedandaccuracyofMCMC 857
(a)
 (b)
Figure 24.10 Illustration of problems caused by poor mixing. (a) One sample from a 5-state Potts model
on a128×128grid with 8 nearest neighbor connectivity and J=2/3(as in (Geman and Geman 1984)),
after 200 iterations. (b) One sample from the same model after 10,000 iterations. Used with kind permission
of Erik Sudderth.
medium-sized regions where the label is the same, implying the model would make a good
prior for image segmentation. Indeed, this was suggested in the original Gibbs sampling paper
(Geman and Geman 1984).
However, it turns out that if you run the chain long enough, you get isolated speckles, as
in Figure 24.10(b). The results depend on the coupling strength, but in general, it is very hard
to ﬁnd a setting which produces nice medium-sized blobs: most parameters result in a few
super-clusters, or lots of small fragments. In fact, there is a rapid phase transition between these
two regimes. This led to a paper called “The Ising/Potts model is not well suited to segmentation
tasks” (Morris et al. 1996). It is possible to create priors more suited to image segmentation
(e.g., (Sudderth and Jordan 2008)), but the main point here is that sampling before reaching
convergence can lead to erroneous conclusions.
24.4.2 Mixing rates of Markov chains *
The amount of time it takes for a Markov chain to converge to the stationary distribution, and
forget its initial state, is called the mixing time . More formally, we say that the mixing time
from state x0is the minimal time such that, for any constant /epsilon1>0,w eh a v et h a t
τ/epsilon1(x0)/definesmin{t:||δx0(x)Tt−p∗||1≤/epsilon1} (24.66)
whereδx0(x)is a distribution with all its mass in state x0,Tis the transition matrix of the
chain (which depends on the target p∗and the proposal q), andδx0(x)Ttis the distribution
aftertsteps. The mixing time of the chain is deﬁned as
τ/epsilon1/definesmax
x0τ/epsilon1(x0) (24.67)
The mixing time is determined by the eigengap γ=λ1−λ2, which is the difference of the
858 Chapter24. MarkovchainMonteCarlo(MCMC)inference
x2
x4
x7x5
x6 x1
x3
Figure 24.11 A Markov chain with low conductance. The dotted arcs represent transitions with very low
probability. Source: Figure 12.6 of (Koller and Friedman 2009). Used with kind permission of Daphne
Koller.
ﬁrst and second eigenvalues of the transition matrix. In particular, one can show that
τ/epsilon1≤O(1
γlogn
/epsilon1) (24.68)
wherenis the number of states. Since computing the transition matrix can be hard to do,
especially for high dimensional and/or continuous state spaces, it is useful to ﬁnd other ways to
estimate the mixing time.
An alternative approach is to examine the geometry of the state space. For example, consider
the chain in Figure 24.11. We see that the state space consists of two “islands”, each of whichis connected via a narrow “bottleneck”. (If they were completely disconnected, the chain wouldnot be ergodic, and there would no longer be a unique stationary distribution.) We deﬁne theconductance φof a chain as the minimum probability, over all subsets of states, of transitioning
from that set to its complement:
φ/definesmin
S:0≤p∗(S)≤0.5/summationtext
x∈S,x/prime∈ScT(x→x/prime)
p∗(S), (24.69)
One can show that
τ/epsilon1≤O(1
φ2logn
/epsilon1) (24.70)
Hence chains with low conductance have high mixing time. For example, distributions withwell-separated modes usually have high mixing time. Simple MCMC methods often do not workwell in such cases, and more advanced algorithms, such as parallel tempering, are necessary(see e.g., (Liu 2001)).
24.4.3 Practical convergence diagnostics
Computing the mixing time of a chain is in general quite difficult, since the transition matrixis usually very hard to compute. In practice various heuristics have been proposed to diagnose
24.4. SpeedandaccuracyofMCMC 859
convergence — see (Geyer 1992; Cowles and Carlin 1996; Brooks and Roberts 1998) for a review.
Strictly speaking, these methods do not diagnose convergence, but rather non-convergence. Thatis, the method may claim the chain has converged when in fact it has not. This is a ﬂaw commonto all convergence diagnostics, since diagnosing convergence is computationally intractable ingeneral (Bhatnagar et al. 2010).
One of the simplest approaches to assessing when the method has converged is to run
multiple chains from very different overdispersed starting points, and to plot the samples of
some variables of interest. This is called a trace plot. If the chain has mixed, it should have
“forgotten” where it started from, so the trace plots should converge to the same distribution,and thus overlap with each other.
Figure 24.12 gives an example. We show the traceplot for xwhich was sampled from a
mixture of two 1D Gaussians using four different methods: MH with a symmetric Gaussianproposal of variance σ
2∈{1,8,500}, and Gibbs sampling. We see that σ2=1has not mixed,
which is also evident from Figure 24.7(a), which shows that a single chain never leaves the areawhere it started. The results for the other methods indicate that the chains rapidly converge tothe stationary distribution, no matter where they started. (The sticky nature of the σ
2= 500
proposal is very evident. This reduces the computational efficiency, as we discuss below, butnot the statistical validity.)
24.4.3.1 Estimated potential scale reduction (EPSR)
We can assess convergence more quantitatively as follows. The basic idea is to compare thevariance of a quantity within each chain to its variance across chains. More precisely, supposewe collect Ssamples (after burn-in) from each of Cchains of Dvariables, x
isc,i=1:D,
s=1:S,c=1:C.L e tyscbe a scalar quantity of interest derived from x1:D,s,c(e.g.,
ysc=xiscfor some chosen i). Deﬁne the within-sequence mean and overall mean as
y·c/defines1
SS/summationdisplay
s=1ysc,y··/defines1
CC/summationdisplay
c=1y·c (24.71)
Deﬁne the between-sequence and within-sequence variance as
B/definesS
C−1C/summationdisplay
c=1(y·c−y··)2,W/defines1
CC/summationdisplay
c=1/bracketleftBigg
1
S−1S/summationdisplay
s=1(ysc−y·c)2/bracketrightBigg
(24.72)
We can now construct two estimates of the variance of y. The ﬁrst estimate is W: this should
underestimate var[y]if the chains have not ranged over the full posterior. The second estimate
is
ˆV=S−1
SW+1
SB (24.73)
This is an estimate of var[y]that is unbiased under stationarity, but is an overestimate if the
starting points were overdispersed (Gelman and Rubin 1992). From this, we can deﬁne thefollowing convergence diagnostic statistic, known as the estimated potential scale reduction
orEPSR:
ˆR/defines/radicalBigg
ˆV
W(24.74)
860 Chapter24. MarkovchainMonteCarlo(MCMC)inference
0 200 400 600 800 1000−1001020304050MH N(0,1.0002), Rhat = 1.493
(a)0 200 400 600 800 1000−60−40−200204060MH N(0,8.0002), Rhat = 1.039
(b)
0 200 400 600 800 1000−50−40−30−20−1001020304050MH N(0,500.0002), Rhat = 1.005
(c)0 200 400 600 800 1000−60−40−200204060gibbs, Rhat = 1.007
(d)
Figure 24.12 Traceplots for MCMC samplers. Each color represents the samples from a different starting
point. (a-c) MH with proposal N(x/prime|x,σ2)forσ2∈{1,8,500}, corresponding to Figure 24.7. (d) Gibbs
sampling. Figure generated by mcmcGmmDemo .
This quantity, which was ﬁrst proposed in (Gelman and Rubin 1992), measures the degree to
which the posterior variance would decrease if we were to continue sampling in the S→
∞limit. If ˆR≈1for any given quantity, then that estimate is reliable (or at least is not
unreliable). The ˆRvalues for the four samplers in Figure 24.12 are 1.493, 1.039, 1.005 and 1.007.
So this diagnostic has correctly identiﬁed that the sampler using the ﬁrst (σ2=1) proposal is
untrustworthy.
24.4.4 Accuracy of MCMC
The samples produced by MCMC are auto-correlated, and this reduces their information contentrelative to independent or “perfect” samples. We can quantify this as follows.
4Suppose we want
4. This Section is based on (Hoff 2009, Sec 6.6).
24.4. SpeedandaccuracyofMCMC 861
0 5 10 15 20 25 30 35 40 4500.10.20.30.40.50.60.70.80.91MH N(0,1.0002)
(a)0 5 10 15 20 25 30 35 40 4500.10.20.30.40.50.60.70.80.91MH N(0,8.0002)
(b)
0 5 10 15 20 25 30 35 40 45−0.200.20.40.60.811.2MH N(0,500.0002)
(c)0 5 10 15 20 25 30 35 40 45−0.200.20.40.60.811.2gibbs
(d)
Figure 24.13 Autocorrelation functions corresponding to Figure 24.12. Figure generated by mcmcGmmDemo .
to estimate the mean of f(X), for some function f,w h e r eX∼p(). Denote the true mean by
f∗/definesE[f(X)] (24.75)
A Monte Carlo estimate is given by
f=1
SS/summationdisplay
s=1fs (24.76)
862 Chapter24. MarkovchainMonteCarlo(MCMC)inference
wherefs/definesf(xs)andxs∼p(x). An MCMC estimate of the variance of this estimate is given
by
VarMCMC[f]=E/bracketleftbig
(f−f∗)2/bracketrightbig
(24.77)
=E⎡
⎣/braceleftBigg
1
SS/summationdisplay
s=1(fs−f∗)/bracerightBigg2⎤⎦ (24.78)
=1
S2E/bracketleftBiggS/summationdisplay
s=1(fs−f∗)2/bracketrightBigg
+1
S2/summationdisplay
s/negationslash=tE[(fs−f∗)(ft−f∗)] (24.79)
=V a r MC(f)+1
S2/summationdisplay
s/negationslash=tE[(fs−f∗)(ft−f∗)] (24.80)
where the ﬁrst term is the Monte Carlo estimate of the variance if the samples weren’t correlated,
and the second term depends on the correlation of the samples. We can measure this as follows.Deﬁne the sample-based auto-correlation at lag tof a set of samples f
1,...,f Sas follows:
ρt/defines1
S−t/summationtextS−t
s=1(fs−f)(fs+t−f)
1
S−1/summationtextS
s=1(fs−f)2(24.81)
This is called the autocorrelation function (ACF). This is plotted in Figure 24.13 for our four
samplers for the Gaussian mixture model. We see that the ACF of the Gibbs sampler (bottom
right) dies off to 0 much more rapidly than the MH samplers, indicating that each Gibbs sampleis “worth” more than each MH sample.
A simple method to reduce the autocorrelation is to use thinning, in which we keep every
n’th sample. This does not increase the efficiency of the underlying sampler, but it does savespace, since it avoids storing highly correlated samples.
We can estimate the information content of a set of samples by computing the effective
sample size (ESS)Seff, deﬁned by
Seff/definesVar
MC(f)
VarMCMC(f)(24.82)
From Figure 24.12, it is clear that the effective sample size of the Gibbs sampler is higher thanthat of the other samplers (in this example).
24.4.5 How many chains?
A natural question to ask is: how many chains should we run? We could either run one longchain to ensure convergence, and then collect samples spaced far apart, or we could run manyshort chains, but that wastes the burnin time. In practice it is common to run a mediumnumber of chains (say 3) of medium length (say 100,000 steps), and to take samples from eachafter discarding the ﬁrst half of the samples. If we initialize at a local mode, we may be able touse all the samples, and not wait for burn-in.
24.5. AuxiliaryvariableMCMC* 863
Model Goal Method Reference
Probit MAP Gradient Section 9.4.1
Probit MAP EM Section 11.4.6
Probit Post EP (Nickisch and Rasmussen 2008)Probit Post Gibbs+ Exercise 24.6Probit Post Gibbs with ARS (Dellaportas and Smith 1993)Probit Post MH using IRLS proposal (Gamerman 1997)
Logit MAP Gradient Section 8.3.4
Logit Post Gibbs+ with Student (Fruhwirth-Schnatter and Fruhwirth 2010)Logit Post Gibbs+ with KS (Holmes and Held 2006)
Table 24.1 Summary of some possible algorithms for estimation and inference for binary classiﬁcation
problems using Gaussian priors. Abbreviations: Aux. = auxiliary variable sampling, ARS = adaptive rejection
sampling, EP = expectation propagation, Gibbs+ = Gibbs sampling with auxiliary variables, IRLS = iterativereweighted least squares, KS = Kolmogorov Smirnov, MAP = maximum a posteriori, MH = MetropolisHastings, Post = posterior.
24.5 Auxiliary variable MCMC *
Sometimes we can dramatically improve the efficiency of sampling by introducing dummy
auxiliary variables, in order to reduce correlation between the original variables. If the originalvariables are denoted by x, and the auxiliary variables by z, we require that/summationtext
zp(x,z)=p(x),
and that p(x,z)is easier to sample from than just p(x). If we meet these two conditions,
we can sample in the enlarged model, and then throw away the sampled zvalues, thereby
recovering samples from p(x). We give some examples below.
24.5.1 Auxiliary variable sampling for logistic regression
In Section 9.4.2, we discussed the latent variable interpretation of probit regression. Recall thatthis had the form
z
i/defineswTxi+/epsilon1i (24.83)
/epsilon1i∼N(0,1) (24.84)
yi=1 = I(zi≥0) (24.85)
We exploited this representation in Section 11.4.6, where we used EM to ﬁnd an ML estimate. Itis straightforward to convert this into an auxiliary variable Gibbs sampler (Exercise 24.6), sincep(w|D)is Gaussian and p(z
i|xi,yi,w)is truncated Gaussian, both of which are easy to sample
from.
Now let us discuss how to derive an auxiliary variable Gibbs sampler for logistic regression.
Let/epsilon1ifollow alogistic distribution, with pdf
pLogistic(/epsilon1)=e−/epsilon1
(1+e−/epsilon1)2(24.86)
with mean E[/epsilon1]=0and variance var[/epsilon1]=π2/3. The cdf has the form F(/epsilon1) = sigm(/epsilon1 ), which
864 Chapter24. MarkovchainMonteCarlo(MCMC)inference
is the logistic function. Since yi=1iffwTxi+/epsilon1>0, we have, by symmetry, that
p(yi=1|xi,w)=/integraldisplay∞
−wTxif(/epsilon1)d/epsilon1=/integraldisplaywTxi
−∞f(/epsilon1)d/epsilon1=F(wTxi) = sigm(wTxi)(24.87)
as required.
WecanderiveanauxiliaryvariableGibbssamplerbysamplingfrom p(z|w,D)andp(w|z,D).
Unfortunately, sampling directly from p(w|z,D)is not possible. One approach is to deﬁne
/epsilon1i∼N(0,λi),w h e r eλi=( 2ψi)2andψi∼KS, the Kolmogorov Smirnov distribution, and then
to sample w,z,λandψ(Holmes and Held 2006).
A simpler approach is to approximate the logistic distribution by the Student distribution
(Albert and Chib 1993). Speciﬁcally, we will make the approximation /epsilon1i∼T(0,1,ν),w h e r e
ν≈8. We can now use the scale mixture of Gaussians representation of the Student to simplify
inference. In particular, we write
λi∼Ga(ν/2,ν/2) (24.88)
/epsilon1i∼N(0,λ−1
i) (24.89)
zi/defineswTxi+/epsilon1i (24.90)
yi=1|zi=I(zi≥0) (24.91)
All of the full conditionals now have a simple form; see Exercise 24.7 for the details.
N o t et h a ti fw es e t ν=1, thenzi∼N(wTxi,1), which is equivalent to probit regression (see
Section 9.4). Rather than choosing between probit or logit regression, we can simply estimate
theνparameter. There is no convenient conjugate prior, but we can consider a ﬁnite range of
possible values and evaluate the posterior as follows:
p(ν|λ)∝p(ν)N/productdisplay
i=11
Γ(ν/2)(ν/2)ν/2λν/2−1
ie−νλi/2(24.92)
Furthermore, if we deﬁne V0=v0I, we can sample v0as well. For example, suppose we use
aIG(δ1,δ2)prior forv0. The posterior is given by p(v0|w)=I G (δ1+1
2D,δ2+1
2/summationtextD
j=1w2
j).
This can be interleaved with the other Gibbs sampling steps, and provides an appealing Bayesian
alternative to cross validation for setting the strength of the regularizer.
See Table 24.1 for a summary of various algorithms for ﬁtting probit and logit models. Many
of these methods can also be extended to the multinomial logistic regression case. For details,see (Scott 2009; Fruhwirth-Schnatter and Fruhwirth 2010).
24.5.2 Slice sampling
Consider sampling from a univariate, but multimodal, distribution ˜p(x). We can sometimes
improve the ability to make large moves by adding an auxiliary variable u. We deﬁne the joint
distribution as follows:
ˆp(x,u)=/braceleftbigg1/Zpif0≤u≤˜p(x)
0otherwise(24.93)
24.5. AuxiliaryvariableMCMC* 865
x xx u(i+1)
(i)(i+1)f(x  )(i)
(a)−5 −4 −3 −2 −1 0 1 2 3 4020406080100120140160180
(b)
Figure 24.14 (a) Illustration of the principle behind slice sampling. Given a previous sample xi,w e
sampleui+1uniformly on [0,f(xi)],w h e r efis the target density. We then sample xi+1along the slice
wheref(x)≥ui+1. Source: Figure 15 of (Andrieu et al. 2003) . Used with kind permission of Nando de
Freitas. (b) Slice sampling in action. Figure generated by sliceSamplingDemo1d .
3456
−2.5
−2
−1.5
−101234x 10−11
InterceptSlopePosterior density
(a)
 (b)
Figure 24.15 Binomial regression for 1d data. (a) Grid approximation to posterior. (b) Slice sampling
approximation. Figure generated by sliceSamplingDemo2d .
whereZp=/integraltext
˜p(x)dx. The marginal distribution over xis given by
/integraldisplay
ˆp(x,u)du=/integraldisplay˜p(x)
01
Zpdu=˜p(x)
Zp=p(x) (24.94)
so we can sample from p(x)by sampling from ˆp(x,u)and then ignoring u. The full conditionals
have the form
p(u|x)=U[0,˜p(x)](u) (24.95)
p(x|u)=UA(x) (24.96)
whereA={x:˜p(x)≥u}is the set of points on or above the chosen height u. This
corresponds to a slice through the distribution, hence the term slice sampling (Neal 2003a).
See Figure 24.14(a).
In practice, it can be difficult to identify the set A. So we can use the following approach:
construct an interval xmin≤x≤xmaxaround the current point xsof some width. We then
866 Chapter24. MarkovchainMonteCarlo(MCMC)inference
test to see if each end point lies within the slice. If it does, we keep extending in that direction
until it lies outside the slice. This is called stepping out. A candidate value x/primeis then chosen
uniformly from this region. If it lies within the slice, it is kept, so xs+1=x/prime. Otherwise we
shrink the region such that x/primeforms one end and such that the region still contains xs. Then
another sample is drawn. We continue in this way until a sample is accepted.
To apply the method to multivariate distributions, we can sample one extra auxiliary variable
for each dimension. The advantage of slice sampling over Gibbs is that it does not needa speciﬁcation of the full-conditionals, just the unnormalized joint. The advantage of slicesampling over MH is that it does not need a user-speciﬁed proposal distribution (although itdoes require a speciﬁcation of the width of the stepping out interval).
Figure 24.14(b) illustrates the algorithm in action on a synthetic 1d problem. Figure 24.15
illustrates its behavior on a slightly harder problem, namely binomial logistic regression. Themodel has the form
y
i∼Bin(ni,logit(β1+β2xi)) (24.97)
We use a vague Gaussian prior for the βj’s. Figure 24.15(a) shows a grid-based approximation
to the posterior, and Figure 24.15(b) shows a sample-based approximation. In this example, thegrid is faster to compute, but for any problem with more than 2 dimensions, the grid approachis infeasible.
24.5.3 Swendsen Wang
Consider an Ising model of the following form:
p(x)=1
Z/productdisplay
efe(xe) (24.98)
wherexe=(xi,xj)for edgee=(i,j),xi∈{+1,−1}, and the edge factor feis deﬁned by/parenleftbiggeJe−J
e−JeJ/parenrightbigg
,w h e r eJis the edge strength. Gibbs sampling in such models can be slow when
Jis large in absolute value, because neighboring states can be highly correlated. The Swendsen
Wangalgorithm (Swendsen and Wang 1987) is a auxiliary variable MCMC sampler which mixes
much faster, at least for the case of attractive or ferromagnetic models, with J>0.
Suppose we introduce auxiliary binary variables, one per edge.5These are called bond
variables, and will be denoted by z. We then deﬁne an extended model p(x,z)of the form
p(x,z)=1
Z/prime/productdisplay
ege(xe,ze) (24.99)
whereze∈{0,1}, and we deﬁne the new factor as follows: ge(xe,ze=0 )=/parenleftbigge−Je−J
e−Je−J/parenrightbigg
,
andge(xe,ze=1 )=/parenleftbiggeJ−e−J0
0eJ−e−J/parenrightbigg
. It is clear that/summationtext1
ze=0ge(xe,ze)=fe(xe),
5. Our presentation of the method is based on some notes by David Mackay, available from http://www .inference
.phy.cam.ac.uk/mackay/itila/swendsen .pdf.
24.5. AuxiliaryvariableMCMC* 867
Figure 24.16 Illustration of the Swendsen Wang algorithm on a 2d grid. Used with kind permission of
Kevin Tang.
and hence that/summationtext
zp(x,z)=p(x). So if we can sample from this extended model, we can just
throw away the zsamples and get valid xsamples from the original distribution.
Fortunately, it is easy to apply Gibbs sampling to this extended model. The full conditional
p(z|x)factorizes over the edges, since the bond variables are conditionally independent given
the node variables. Furthermore, the full conditional p(ze|xe)is simple to compute: if the
nodes on either end of the edge are in the same state ( xi=xj), we set the bond zeto 1 with
probability p=1−e−2J, otherwise we set it to 0. In Figure 24.16 (top right), the bonds that
could be turned on (because their corresponding nodes are in the same state) are represented
by dotted edges. In Figure 24.16 (bottom right), the bonds that are randomly turned on are
represented by solid edges.
To sample p(x|z), we proceed as follows. Find the connected components deﬁned by the
graph induced by the bonds that are turned on. (Note that a connected component may consist
of a singleton node.) Pick one of these components uniformly at random. All the nodes in each
such component must have the same state, since the off-diagonal terms in the ge(xe,ze=1 )
factor are 0. Pick a state ±1uniformly at random, and force all the variables in this component
to adopt this new state. This is illustrated in Figure 24.16 (bottom left), where the green square
868 Chapter24. MarkovchainMonteCarlo(MCMC)inference
denotes the selected connected component, and we choose to force all nodes within in to enter
the white state.
The validity of this algorithm is left as an exercise, as is the extension to handle local evidence
and non-stationary potentials.
It should be intuitively clear that Swendsen Wang makes much larger moves through the state
space than Gibbs sampling. In fact, SW mixes much faster than Gibbs sampling on 2d latticeIsing models for a variety of values of the coupling parameter, provided J>0. More precisely,
let the edge strength be parameterized by J/T,w h e r eT>0is a computational temperature.
For large T, the nodes are roughly independent, so both methods work equally well. However,
asTapproaches a critical temperature T
c, the typical states of the system have very long
correlation lengths, and Gibbs sampling takes a very long time to generate independent samples.As the temperature continues to drop, the typical states are either all on or all off. The frequencywith which Gibbs sampling moves between these two modes is exponentiall small. By contrast,SW mixes rapidly at all temperatures.
Unfortunately, if any of the edge weights are negative, J<0, the system is frustrated, and
there are exponentially many modes, even at low temperature. SW does not work very well inthis setting, since it tries to force many neighboring variables to have the same state. In fact,computation in this regime is provably hard for any algorithm (Jerrum and Sinclair 1993, 1996).
24.5.4 Hybrid/Hamiltonian MCMC *
In this section, we brieﬂy mention a way to perform MCMC sampling for continuous statespaces, for which we can compute the gradient of the (unnormalized) log-posterior. This is thecase in neural network models, for example.
The basic idea is to think of the parameters as a particle in space, and to create auxiliary
variables which represent the “momentum” of this particle. We then update this parameter/momentum pair according to certain rules (see e.g., (Duane et al. 1987; Neal 1993; MacKay 2003;Neal 2010) for details). The resulting method is called hybrid MCMC orHamiltonian MCMC.
The two main parameters that the user must specify are how many leapfrog steps to take
when updating the position/ momentum, and how big to make these steps. Performance canbe quite sensitive to these parameters (although see (Hoffman and Gelman 2011) for a recentway to set them automatically). This method can be combined with stochastic gradient descent(Section 8.5.2) in order to handle large datasets, as explained in (Ahn et al. 2012).
Recently, a more powerful extension of this method has been developed, that exploits second-
order gradient information. See (Girolami et al. 2010) for details.
24.6 Annealing methods
Many distributions are multimodal and hence hard to sample from. However, by analogy to theway metals are heated up and then cooled down in order to make the molecules align, we canimagine using a computational temperature parameter to smooth out a distribution, graduallycooling it to recover the original “bumpy” distribution. We ﬁrst explain this idea in more detailin the context of an algorithm for MAP estimation. We then discuss extensions to the samplingcase.
24.6. Annealingmethods 869
01020304050
02040600246810
xtemp 1.000
y
(a)01020304050
02040600246810x 105
xtemp 0.200
y
(b)
Figure 24.17 An energy surface at different temperatures. Note the different vertical scales. (a) T=1.
(b)T=0.5. Figure generated by saDemoPeaks .
24.6.1 Simulated annealing
Simulated annealing (Kirkpatrick et al. 1983) is a stochastic algorithm that attempts to ﬁnd
the global optimum of a black-box function f(x). It is closely related to the Metropolis-
Hastings algorithm for generating samples from a probability distribution, which we discussed
in Section 24.3. SA can be used for both discrete and continuous optimization.
The method is inspired by statistical physics. The key quantity is the Boltzmann distribution,
which speciﬁes that the probability of being in any particular state xis given by
p(x)∝exp(−f(x)/T) (24.100)
wheref(x)is the “energy” of the system and Tis the computational temperature. As the
temperature approaches 0 (so the system is cooled), the system spends more and more time inits minimum energy (most probable) state.
Figure 24.17 gives an example of a 2d function at different temperatures. At high temperatures,
T/greatermuch1, the surface is approximately ﬂat, and hence it is easy to move around (i.e., to avoid
local optima). As the temperature cools, the largest peaks become larger, and the smallest peaksdisappear. By cooling slowly enough, it is possible to “track” the largest peak, and thus ﬁnd theglobal optimum. This is an example of a continuation method.
We can generate an algorithm from this as follows. At each step, sample a new state according
to some proposal distribution x
/prime∼q(·|xk). For real-valued parameters, this is often simply a
random walk proposal, x/prime=xk+/epsilon1k,w h e r e/epsilon1k∼N(0,Σ). For discrete optimization, other
kinds of local moves must be deﬁned.
Having proposed a new state, we compute
α= exp((f (x)−f(x/prime))/T) (24.101)
We then accept the new state (i.e., set xk+1=x/prime) with probability min(1,α), otherwise we stay
in the current state (i.e., set xk+1=xk). This means that if the new state has lower energy (is
more probable), we will deﬁnitely accept it, but it it has higher energy (is less probable), we mightstill accept, depending on the current temperature. Thus the algorithm allows “down-hill” movesin probability space (up-hill in energy space), but less frequently as the temperature drops.
870 Chapter24. MarkovchainMonteCarlo(MCMC)inference
0 200 400 600 800 1000 120000.10.20.30.40.50.60.70.80.91temperature vs iteration
(a)0 200 400 600 800 1000−8.5−8−7.5−7−6.5−6−5.5−5−4.5energy vs iteration
(b)
Figure 24.18 A run of simulated annealing on the energy surface in Figure 24.17. (a) Temperature vs
iteration. (b) Energy vs iteration. Figure generated by saDemoPeaks .
353637383940
22242628300102030405060
x
iter 550, temp 0.064
y
(a)353637383940
2224262830050100150
x
iter 1000, temp 0.007
y
(b)
Figure 24.19 Histogram of samples from the annealed “posterior” at 2 different time points produced by
simulated annealing on the energy surface shown in Figure 24.17. Note that at cold temperatures, most of
the samples are concentrated near the peak at (38,25). Figure generated by saDemoPeaks .
The rate at which the temperature changes over time is called the cooling schedule .I t
has been shown (Kirkpatrick et al. 1983) that if one cools sufficiently slowly, the algorithm will
provably ﬁnd the global optimum. However, it is not clear what “sufficient slowly” means.
In practice it is common to use an exponential cooling schedule of the following form:
Tk=T0Ck,w h e r eT0is the initial temperature (often T0∼1) andCis the cooling rate (often
C∼0.8). See Figure 24.18(a) for a plot of this cooling schedule. Cooling too quickly means one
can get stuck in a local maximum, but cooling too slowly just wastes time. The best cooling
schedule is difficult to determine; this is one of the main drawbacks of simulated annealing.
Figure 24.18(b) shows an example of simulated annealing applied to the function in Figure 24.17
using a random walk proposal. We see that the method stochastically reduces the energy
over time. Figures 24.19 illustrate (a histogram of) samples drawn from the cooled probability
distribution over time. We see that most of the samples are concentrated near the global
maximum. When the algorithm has converged, we just return the largest value found.
24.6. Annealingmethods 871
24.6.2 Annealed importance sampling
We now describe a method known as annealed importance sampling (Neal 2001) that com-
bines ideas from simulated annealing and importance sampling in order to draw independent
samples from difficult (e.g., multimodal) distributions.
Suppose we want to sample from p0(x)∝f0(x), but we cannot do so easily; for example,
this might represent a multimodal posterior. Suppose however that there is an easier distributionwhich we can sample from, call it p
n(x)∝fn(x); for example, this might be the prior. We
can now construct a sequence of intermediate distributions than move slowly from pntop0as
follows:
fj(x)=f0(x)βjfn(x)1−βj(24.102)
where1=β0>β1>···>βn=0,w h e r eβjis an inverse temperature. (Contrast this to the
scheme used by simulated annealing which has the form fj(x)=f0(x)βj; this makes it hard
to sample from pn.) Furthermore, suppose we have a series of Markov chains Tj(x,x/prime)(fromx
tox/prime) which leave each pjinvariant. Given this, we can sample xfromp0by ﬁrst sampling a
sequence z=(zn−1,...,z0)as follows: sample zn−1∼pn; samplezn−2∼Tn−1(zn−1,·); ...;
samplez0∼T1(z1,·). Finally we set x=z0and give it weight
w=fn−1(zn−1)
fn(zn−1)fn−2(zn−2)
fn−1(zn−2)···f1(z1)
f2(z1)f0(z0)
f1(z0)(24.103)
This can be shown to be correct by viewing the algorithm as a form of importance sampling
in an extended state space z=(z0,...,zn−1). Consider the following distribution on this state
space:
p(z)∝f(z)=f0(z0)˜T1(z0,z1)˜T2(z1,z2)···˜Tn−1(zn−2,zn−1) (24.104)
where˜Tjis the reversal of Tj:
˜Tj(z,z/prime)=Tj(z/prime,z)pj(z/prime)/pj(z)=Tj(z/prime,z)fj(z/prime)/fj(z) (24.105)
It is clear that/summationtext
z1,...,zn−1f(z)=f0(z0), so we can safely just use the z0part of these
sequences to recover the original ditribution.
Now consider the proposal distribution deﬁned by the algorithm:
q(z)∝g(z)=fn(zn−1)Tn−1(zn−1,zn−2)···T2(z2,z1)T1(z1,z0) (24.106)
One can show that the importance weights w=f(z0,...,zn−1)
g(z0,...,zn−1)are given by Equation 24.103.
24.6.3 Parallel tempering
Another way to combine MCMC and annealing is to run multiple chains in parallel at differenttemperatures, and allow one chain to sample from another chain at a neighboring temperature.In this way, the high temperature chain can make long distance moves through the state space,and have this inﬂuence lower temperature chains. This is known as parallel tempering. See
e.g., (Earl and Deem 2005) for details.
872 Chapter24. MarkovchainMonteCarlo(MCMC)inference
24.7 Approximating the marginal likelihood
The marginal likelihood p(D|M)is a key quantity for Bayesian model selection, and is given by
p(D|M)=/integraldisplay
p(D|θ,M)p(θ|M)dθ (24.107)
Unfortunately, this integral is often intractable to compute, for example if we have non conjugate
priors, and/or we have hidden variables. In this section, we brieﬂy discuss some ways toapproximate this expression using Monte Carlo. See (Gelman and Meng 1998) for a moreextensive review.
24.7.1 The candidate method
There is a simple method for approximating the marginal likelihood known as the Candidate
method(Chib 1995). This exploits the following identity:
p(D|M)=p(D|θ,M)p(θ|M)
p(θ|D,M)(24.108)
This holds for any value of θ. Once we have picked some value, we can evaluate p(D|θ,M)
andp(θ|M)quite easily. If we have some estimate of the posterior near θ, we can then evaluate
the denominator as well. This posterior is often approximated using MCMC.
The ﬂaw with this method is that it relies on the assumption that p(θ|D,M)has marginalized
over all the modes of the posterior, which in practice is rarely possible. Consequently the methodcan give very inaccurate results in practice (Neal 1998).
24.7.2 Harmonic mean estimate
Newton and Raftery (1994) proposed a simple method for approximating p(D)using the output
of MCMC, as follows:
1/p(D)≈1
SS/summationdisplay
s=11
p(D|θs)(24.109)
whereθs∼p(θ|D). This expression is the harmonic mean of the likelihood of the data under
each sample. The theoretical correctness of this expression follows from the following identity:
/integraldisplay1
p(D|θ)p(θ|D)dθ=/integraldisplay1
p(D|θ)p(D|θ)p(θ)
p(D)dθ=1
p(D)/integraldisplay
p(θ|D)dθ=1
p(D)(24.110)
Unfortunately, in practice this method works very poorly. Indeed, Radford Neal called this “theworst Monte Carlo method ever”.
6. The reason it is so bad is that it depends only on samples
drawn from the posterior. But the posterior is often very insensitive to the prior, whereas themarginal likelihood is not. We only mention this method in order to warn against its use. Wepresent a better method below.
6. Source: radfordneal .wordpress .com/2008/08/17/the-harmonic-mean-of-the-likelihood-worst-mon
te-carlo-method-ever .
24.7. Approximatingthemarginallikelihood 873
24.7.3 Annealed importance sampling
We can use annealed importance sampling (Section 24.6.2) to evaluate a ratio of partition
functions. Notice that Z0=/integraltext
f0(x)dx=/integraltext
f(z)dz, andZn=/integraltext
fn(x)dx=/integraltext
g(z)dz. Hence
Z0
Zn=/integraltext
f(z)dz/integraltext
g(z)dz=/integraltextf(z)
g(z)g(z)dz/integraltext
g(z)dz=Eq/bracketleftbiggf(z)
g(z)/bracketrightbigg
≈1
SS/summationdisplay
s=1ws (24.111)
Iffnis a prior and f0is the posterior, we can estimate Zn=p(D)using the above equation,
provided the prior has a known normalization constant Z0. This is generally considered the
method of choice for evaluating difficult partition functions.
Exercises
Exercise 24.1 Gibbs sampling from a 2D Gaussian
Suppose x∼N(μ,Σ),w h e r eμ=( 1,1)andΣ=( 1,−0.5;−0.5,1). Derive the full condition-
alsp(x1|x2)andp(x2|x1). Implement the algorithm and plot the 1d marginals p(x1)andp(x2)as
histograms. Superimpose a plot of the exact marginals.
Exercise 24.2 Gibbs sampling for a 1D Gaussian mixture model
Consider applying Gibbs sampling to a univariate mixture of Gaussians, as in Section 24.2.3. Derive the
expressions for the full conditionals. Hint: if we know zn=j(say), then μjgets “connected” to xn, but
all other values of μi, for alli/negationslash=j, are irrelevant. (This is an example of context-speciﬁc independence,
where the structure of the graph simpliﬁes once we have assigned values to some of the nodes.) Hence,given all the z
nvalues, the posteriors of the μ’s should be independent, so the conditional of μjshould
be independent of μ−j. (Similarly for σj.)
Exercise 24.3 Gibbs sampling from the Potts model
Modify the code in gibbsDemoIsing to draw samples from a Potts prior at different temperatures, as in
Figure 19.8.
Exercise 24.4 Full conditionals for hierarchical model of Gaussian means
Let us reconsider the Gaussian-Gaussian model in Section 5.6.2 for modelling multiple related mean
parameters θj. In this exercise we derive a Gibbs sampler instead of using EB. Suppose, following (Hoff
2009, p134)), that we use the following conjugate priors on the hyper-parameters:
μ∼N(μ0,γ2
0) (24.112)
τ2∼IG(η0/2,η0τ2
0/2) (24.113)
σ2∼IG(ν0/2,ν0σ2
0/2) (24.114)
874 Chapter24. MarkovchainMonteCarlo(MCMC)inference
We can set η=(μ0,γ0,η0,τ0,ν0,σ0)to uninformative values. Given this model speciﬁcation, show that
the full conditionals for μ,τ,σand theθjare as follows:
p(μ|θ1:D,τ2)=N (μ|Dθ/τ2+μ0/γ2
0
D/τ2+1/γ2
0,[D/τ2+1/γ2
0]−1) (24.115)
p(θj|μ,τ2,Dj,σ2)=N (θj|Njxj/σ2+1/τ2
Nj/σ2+1/τ2,[Nj/σ2+1/τ2]−1) (24.116)
p(τ2|θ1:D,μ)=I G ( τ2|η0+D
2,η0τ2
0+/summationtext
j(θj−μ)2
2) (24.117)
p(σ2|θ1:D,D)=I G ( σ2|1
2[ν0+D/summationdisplay
j=1Nj],1
2[ν0σ2
0+D/summationdisplay
j=1Nj/summationdisplay
i=1(xij−θj)2]) (24.118)
Exercise 24.5 Gibbs sampling for robust linear regression with a Student t likelihood
Modify the EM algorithm in Exercise 11.12 to perform Gibbs sampling for p(w,σ2,z|D,ν).
Exercise 24.6 Gibbs sampling for probit regression
Modify the EM algorithm in Section 11.4.6 to perform Gibbs sampling for p(w,z|D). Hint: we can
sample from a truncated Gaussian, N(z|μ,σ)I(a≤z≤b)in two steps: ﬁrst sample u∼U(Φ((a−
μ)/σ),Φ((b−μ)/σ)), then set z=μ+σΦ−1(u)(Robert 1995).
Exercise 24.7 Gibbs sampling for logistic regression with the Student approximation
Derive the full conditionals for the joint model deﬁned by Equations 24.88 to 24.91.
25 Clustering
25.1 Introduction
Clustering is the process of grouping similar objects together. There are two kinds of inputs we
might use. In similarity-based clustering, the input to the algorithm is an N×Ndissimilarity
matrixordistance matrix D.I nfeature-based clustering, the input to the algorithm is an
N×Dfeature matrix or design matrix X. Similarity-based clustering has the advantage that it
allows for easy inclusion of domain-speciﬁc similarity or kernel functions (Section 14.2). Feature-
based clustering has the advantage that it is applicable to “raw”, potentially noisy data. We willsee examples of both below.
In addition to the two types of input, there are two possible types of output: ﬂat cluster-
ing, also called partitional clustering, where we partition the objects into disjoint sets; and
hierarchical clustering , where we create a nested tree of partitions. We will discuss both of
these below. Not surprisingly, ﬂat clusterings are usually faster to create (O (ND)for ﬂat vs
O(N
2logN)for hierarchical), but hierarchical clusterings are often more useful. Furthermore,
most hierarchical clustering algorithms are deterministic and do not require the speciﬁcation ofK, the number of clusters, whereas most ﬂat clustering algorithms are sensitive to the initial
conditions and require some model selection method for K. (We will discuss how to choose K
in more detail below.)
The ﬁnal distinction we will make in this chapter is whether the method is based on a
probabilistic model or not. One might wonder why we even bother discussing non-probabilisticmethods for clustering. The reason is two-fold: ﬁrst, they are widely used, so readers shouldknow about them; second, they often contain good ideas, which can be used to speed upinference in a probabilistic models.
25.1.1 Measuring (dis)similarity
A dissimilarity matrix Dis a matrix where di,i=0anddi,j≥0is a measure of “distance”
between objects iandj. Subjectively judged dissimilarities are seldom distances in the strict
sense, since the triangle inequality, di,j≤di,k+dj,k, often does not hold. Some algorithms
requireDto be a true distance matrix, but many do not. If we have a similarity matrix S,w e
can convert it to a dissimilarity matrix by applying any monotonically decreasing function, e.g.,D= max(S )−S.
The most common way to deﬁne dissimilarity between objects is in terms of the dissimilarity
876 Chapter25. Clustering
of their attributes:
Δ(xi,xi/prime)=D/summationdisplay
j=1Δj(xij,xi/primej) (25.1)
Some common attribute dissimilarity functions are as follows:
• Squared (Euclidean) distance:
Δj(xij,xi/primej)=(xij−xi/primej)2(25.2)
Of course, this only makes sense if attribute jis real-valued.
• Squared distance strongly emphasizes large differences (because differences are squared). A
more robust alternative is to use an /lscript1distance:
Δj(xij,xi/primej)=|xij−xi/primej| (25.3)
This is also called city block distance, since, in 2D, the distance can be computed by
counting how many rows and columns we have to move horizontally and vertically to get
fromxitoxi/prime.
•I fxiis a vector (e.g., a time-series of real-valued data), it is common to use the correlation
coefficient (see Section 2.5.1). If the data is standardized, then corr[xi,xi/prime]=/summationtext
jxijxi/primej,
and hence/summationtext
j(xij−xi/primej)2=2 ( 1−corr[xi,xi/prime]). So clustering based on correlation
(similarity) is equivalent to clustering based on squared distance (dissimilarity).
• For ordinal variables, such as {low, medium, high}, it is standard to encode the values as
real-valued numbers, say 1/3,2/3,3/3if there are 3 possible values. One can then apply
any dissimilarity function for quantitative variables, such as squared distance.
• For categorical variables, such as {red, green, blue}, we usually assign a distance of 1 if the
features are different, and a distance of 0 otherwise. Summing up over all the categoricalfeatures gives
Δ(x
i,xi)=D/summationdisplay
j=1I(xij/negationslash=xi/primej) (25.4)
This is called the hamming distance.
25.1.2 Evaluating the output of clustering methods *
The validation of clustering structures is the most difficult and frustrating part of clusteranalysis. Without a strong effort in this direction, cluster analysis will remain a black artaccessible only to those true believers who have experience and great courage. — Jainand Dubes (Jain and Dubes 1988)
25.1. Introduction 877
$$$
$$%$%%%%&$$&&&
Figure 25.1 Three clusters with labeled objects inside. Based on Figure 16.4 of (Manning et al. 2008).
Clustering is an unupervised learning technique, so it is hard to evaluate the quality of the output
of any given method. If we use probabilistic models, we can always evaluate the likelihood ofa test set, but this has two drawbacks: ﬁrst, it does not directly assess any clustering that isdiscovered by the model; and second, it does not apply to non-probabilistic methods. So nowwe discuss some performance measures not based on likelihood.
Intuitively, the goal of clustering is to assign points that are similar to the same cluster,
and to ensure that points that are dissimilar are in different clusters. There are several waysof measuring these quantities e.g., see (Jain and Dubes 1988; Kaufman and Rousseeuw 1990).However, these internal criteria may be of limited use. An alternative is to rely on some externalform of data with which to validate the method. For example, suppose we have labels for eachobject, as in Figure 25.1. (Equivalently, we can have a reference clustering; given a clustering, wecan induce a set of labels and vice versa.) Then we can compare the clustering with the labelsusing various metrics which we describe below. We will use some of these metrics later, whenwe compare clustering methods.
25.1.2.1 Purity
LetN
ijbe the number of objects in cluster ithat belong to class j, and letNi=/summationtextC
j=1Nijbe
the total number of objects in cluster i. Deﬁne pij=Nij/Ni; this is the empirical distribution
over class labels for cluster i. We deﬁne the purityof a cluster as pi/definesmaxjpij, and the
overall purity of a clustering as
purity/defines/summationdisplay
iNi
Npi (25.5)
For example, in Figure 25.1, we have that the purity is
6
175
6+6
174
6+5
173
5=5+4+3
17=0.71 (25.6)
The purity ranges between 0 (bad) and 1 (good). However, we can trivially achieve a purity of
1 by putting each object into its own cluster, so this measure does not penalize for the number
of clusters.
25.1.2.2 Rand index
LetU={u1,...,u R}andV={v1,...,V C}be two different partitions of the Ndata points,
i.e., two different (ﬂat) clusterings. For example, Umight be the estimated clustering and V
is reference clustering derived from the class labels. Now deﬁne a 2×2contingency table,
878 Chapter25. Clustering
containing the following numbers: TPis the number of pairs that are in the same cluster in
bothUandV(true positives); TNis the number of pairs that are in the different clusters in
bothUandV(true negatives); FNis the number of pairs that are in the different clusters in
Ubut the same cluster in V(false negatives); and FPis the number of pairs that are in the
same cluster in Ubut different clusters in V(false positives). A common summary statistic is
theRand index:
R/definesTP+TN
TP+FP+FN+TN(25.7)
This can be interpreted as the fraction of clustering decisions that are correct. Clearly 0≤R≤
1.
For example, consider Figure 25.1, The three clusters contain 6, 6 and 5 points, so the number
of “positives” (i.e., pairs of objects put in the same cluster, regardless of label) is
TP+FP=/parenleftbigg6
2/parenrightbigg
+/parenleftbigg62/parenrightbigg
+/parenleftbigg52/parenrightbigg
=4 0 (25.8)
Of these, the number of true positives is given by
TP=/parenleftbigg52/parenrightbigg
+/parenleftbigg52/parenrightbigg
+/parenleftbigg32/parenrightbigg
+/parenleftbigg22/parenrightbigg
=2 0 (25.9)
where the last two terms come from cluster 3: there are/parenleftbigg32/parenrightbigg
pairs labeled Cand/parenleftbigg22/parenrightbigg
pairs
labeledA.S oFP=4 0−20 = 20. Similarly, one can show FN=2 4andTN=7 2. So the
Rand index is (20+72) /(20+20+24+72) = 0. 68.
The Rand index only achieves its lower bound of 0 if TP=TN=0, which is a rare event.
One can deﬁne an adjust
 ed Rand index (Hubert and Arabie 1985) as follows:
AR/definesindex−expected index
max index−expected index(25.10)
Here the model of randomness is based on using the generalized hyper-geometric distribution,i.e., the two partitions are picked at random subject to having the original number of classesand objects in each, and then the expected value of TP+TNis computed. This model can
be used to compute the statistical signiﬁcance of the Rand index.
The Rand index weights false positives and false negatives equally. Various other summary
statistics for binary decision problems, such as the F-score (Section 5.7.2.2), can also be used.One can compute their frequentist sampling distribution, and hence their statistical signiﬁcance,using methods such as bootstrap.
25.1.2.3 Mutual information
Another way to measure cluster quality is to compute the mutual information between Uand
V(Vaithyanathan and Dom 1999). To do this, let p
UV(i,j)=|ui∩vj|
Nbe the probability that
a randomly chosen object belongs to cluster uiinUandvjinV. Also, let pU(i)=|ui|/N
be the be the probability that a randomly chosen object belongs to cluster uiinU; deﬁne
25.2. Dirichletprocessmixturemodels 879
pV(j)=|vj|/Nsimilarly. Then we have
I(U,V)=R/summationdisplay
i=1C/summationdisplay
j=1pUV(i,j)logpUV(i,j)
pU(i)pV(j)(25.11)
This lies between 0 and min{H(U),H(V)}. Unfortunately, the maximum value can be
achieved by using lots of small clusters, which have low entropy. To compensate for this,
we can use the normalized mutual information,
NMI(U,V)/definesI(U,V)
(H(U)+H(V))/2(25.12)
This lies between 0 and 1. A version of this that is adjusted for chance (under a particularrandom data model) is described in (Vinh et al. 2009). Another variant, called variation of
information, is described in (Meila 2005).
25.2 Dirichlet process mixture models
The simplest approach to (ﬂat) clustering is to use a ﬁnite mixture model, as we discussed inSection 11.2.3. This is sometimes called model-based clustering, since we deﬁne a probabilistic
model of the data, and optimize a well-deﬁned objective (the likelihood or posterior), as opposedto just using some heuristic algorithm.
The principle problem with ﬁnite mixture models is how to choose the number of components
K. We discussed several techniques in Section 11.5. However, in many cases, there is no well-
deﬁned number of clusters. Even in the simple 2d height-weight data (Figure 1.8), it is not clearif the “correct” value of Kshould be 2, 3, or 4. It would be much better if we did not have to
chooseKat all.
In this section, we discuss inﬁnite mixture models , in which we do not impose any a priori
bound on K. To do this, we will use a non-parametric prior based on the Dirichlet process
(DP). This allows the number of clusters to grow as the amount of data increases. It will alsoprove useful later when we discuss hiearchical clustering.
The topic of non-parametric Bayes is currently very active, and we do not have space to
go into details (see (Hjort et al. 2010) for a recent book on the topic). Instead we just give abrief review of the DP and its application to mixture modeling, based on the presentation in(Sudderth 2006, sec 2.2).
25.2.1 From ﬁnite to inﬁnite mixture models
Consider a ﬁnite mixture model, as shown in Figure 25.2(a). The usual representation is asfollows:
p(x
i|zi=k,θ)=p( xi|θk) (25.13)
p(zi=k|π)=π k (25.14)
p(π|α)=D i r ( π|(α/K)1K) (25.15)
The form of p(θk|λ)is chosen to be conjugate to p(xi|θk). We can write p(xi|θk)asxi∼
F(θzi),w h e r eFis the observation distribution. Similarly, we can write θk∼H(λ),w h e r eH
is the prior.
880 Chapter25. Clustering
(a) (b)
Figure 25.2 Two different representations of a ﬁnite mixture model. Left: traditional representation.
Right: representation where parameters are samples from G, a discrete measure. The picture on the right
illustrates the case where K=4, and we sample 4 Gaussian means θkfrom a Gaussian prior H(.|λ). The
height of the spikes reﬂects the mixing weights πk. This weighted sum of delta functions is G. We then
generate two parameters, θ1andθ2,f r o mG, one per data point. Finally, we generate two data points,
x1andx2,f r o mN(θ1,σ2)andN(θ2,σ2). Source: Figure 2.9 of (Sudderth 2006) . Used with kind
permission of Erik Sudderth.
An equivalent representation for this model is shown in Figure 25.2(b). Here θiis the
parameter used to generate observation xi; these parameters are sampled from distribution G,
which has the form
G(θ)=K/summationdisplay
k=1πkδθk(θ) (25.16)
whereπ∼Dir(α
K1), andθk∼H. Thus we see that Gis a ﬁnite mixture of delta functions,
centered on the cluster parameters θk. The probability that θiis equal to θkis exactly πk, the
prior probability for that cluster.
If we sample from this model, we will always (with probability one) get exactly Kclusters,
with data points scattered around the cluster centers. We would like a more ﬂexible model,
that can generate a variable number of clusters. Furthermore, the more data we generate, themore likely we should be to see a new cluster. The way to do this is to replace the discretedistribution Gwith arandom probability measure. Below we will show that the Dirichlet
process, denoted G∼DP(α,H ), is one way to do this.
Before we go into the details, we show some samples from this non-parametric model in
Figure 25.3. We see that it has the desired properties of generating a variable number of clusters,with more clusters as the amount of data increases. The resulting samples look much more likereal data than samples from a ﬁnite mixture model.
Of course, working with an “inﬁnite” model sounds scary. Fortunately, as we show below,
even though this model is potentially inﬁnite, we can perform inference using an amount ofcomputation that is not only tractable, but is often much less than that required to ﬁt a set
25.2. Dirichletprocessmixturemodels 881
(a) (b)
(c) (d)
(e) (f)
Figure 25.3 Some samples from a Dirichlet process mixture model of 2D Gaussians, with concentration
parameter α=1. From left to right, we show N=5 0,N= 500andN= 1000samples. Each row is a
different run. We also show the model parameters as ellipses, which are sampled from a vague NIW base
distribution. Based on Figure 2.25 of (Sudderth 2006). Figure generated by dpmSampleDemo , written by
Yee-Whye Teh.
of ﬁnite mixture models for different K. The intuitive reason is that we can get evidence that
certain values of Kare appropriate (have high posterior support) long before we have been able
to estimate the parameters, so we can focus our computational efforts on models of appropriate
complexity. Thus going to the inﬁnite limit can sometimes be faster. This is especially truewhen we have multiple model selection problems to solve.
882 Chapter25. Clustering
(a) (b) (c)
Figure 25.4 (a) A base measure Hon a 2d space Θ. (b) One possible partition into K=3regions,
where the shading of cell Tkis proportional to E[G(Tk)] =H(Tk). (c) A reﬁned partition into K=5
regions. Source: Figure 2.21 of (Sudderth 2006). Used with kind permission of Erik Sudderth.
25.2.2 The Dirichlet process
Recall from Chapter 15 that a Gaussian process is a distribution over functions of the form
f:X→R. It is deﬁned implicitly by the requirement that p(f(x1),...,f(xN))be jointly
Gaussian, for any set of points xi∈X. The parameters of this Gaussian can be computed using
a mean function μ()and covariance (kernel) function K(). We write f∼GP(μ(),K()). Fur-
thermore, the GP is consistently deﬁned, so that p(f(x1))can be derived from p(f(x1),f(x2)),
etc.
ADirichlet process is a distribution over probability measures G:Θ→R+,w h e r ew e
requireG(θ)≥0and/integraltext
ΘG(θ)dθ=1. The DP is deﬁned implicitly by the requirement that
(G(T1),...,G(TK))has a joint Dirichlet distribution
Dir(αH(T1),...,αH (TK)) (25.17)
for any ﬁnite partition (T1,...,T K)ofΘ. If this is the case, we write G∼DP(α,H),w h e r e
αis called the concentration parameter andHis called the base measure .1
An example of a DP is shown in Figure 25.4, where the base measure is a 2d Gaussian. The
distribution over all the cells, p(G(T1),...,G(TK)), is Dirichlet, so the marginals in each cell
are beta distributed:
Beta(αH(Ti),α/summationdisplay
j/negationslash=iH(Tj)) (25.18)
The DP is consistently deﬁned in the sense that if T1andT2form a partition of ˜T1, then
G(T1)+G(T2)andG(˜T1)both follow the same beta distribution.
Recall that if π∼Dir(α), andz|π∼Cat(π), then we can integrate out πto get the
predictive distribution for the Dirichlet-multinoulli model:
z∼Cat(α1/α0,...,α K/α0) (25.19)
1. Unlike a GP, knowing something about G(Tk)does not tell us anything about G(Tk/prime), beyond the sum-to-one
constraint; we say that the DP is a neutral process . Other stochastic processes can be deﬁned that do not have this
property, but they are not so computationally convenient.
25.2. Dirichletprocessmixturemodels 883
β1
π1
π2
π3
π4
π5β2
β3
β4
β51−β 1
1−β 2
1−β 3
1−β 4
(a)0 10 20 3000.10.20.30.40.5α = 2
0 10 20 3000.10.20.30.4α = 2
0 10 20 3000.10.20.30.4α = 5
0 10 20 3000.050.10.150.2α = 5
(b)
Figure 25.5 Illustration of the stick breaking construction. (a) We have a unit length stick, which we
break at a random point β1; the length of the piece we keep is called π1; we then recursively break off
pieces of the remaining stick, to generate π2,π3,.... Source: Figure 2.22 of (Sudderth 2006). Used with
kind permission of Erik Sudderth. (b) Samples of πkfrom this process for α=2(top row) and α=5
(bottom row). Figure generated by stickBreakingDemo , written by Yee-Whye Teh.
whereα0=/summationtext
kαk. In other words, p(z=k|α)=αk/α0. Also, the updated posterior for π
given one observation is given by
π|z∼Dir(α1+I(z=1 ),...,α K+I(z=K)) (25.20)
The DP generalizes this to arbitrary partitions. If G∼DP(α,H ), thenp(θ∈Ti)=H(Ti)and
the posterior is
p(G(T1),...,G(TK)|θ,α,H) = Dir(αH(T1)+I(θ∈T1),...,αH (TK)+I(θ∈TK))(25.21)
This holds for any set of partitions. Hence if we observe multiple samples θi∼G, the new
posterior is given by
G|θ1,...,θN,α,H∼DP/parenleftBigg
α+N,1
α+N/parenleftBigg
αH+N/summationdisplay
i=1δθi/parenrightBigg/parenrightBigg
(25.22)
Thus we see that the DP effectively deﬁnes a conjugate prior for arbitrary measurable spaces.
The concentration parameter αis like the effective sample size of the base measure H.
25.2.2.1 Stick breaking construction of the DP
Our discussion so far has been very abstract. We now give a constructive deﬁnition for the DP,known as the stick-breaking construction.
Letπ={π
k}∞
k=1be an inﬁnite sequence of mixture weights derived from the following
process:
βk∼Beta(1,α) (25.23)
πk=βkk−1/productdisplay
l=1(1−βl)=βk(1−k−1/summationdisplay
l=1πl) (25.24)
884 Chapter25. Clustering
This is often denoted by
π∼GEM(α) (25.25)
where GEM stands for Griffiths, Engen and McCloskey (this term is due to (Ewens 1990)). Some
samples from this process are shown in Figure 25.5. One can show that this process processwill terminate with probability 1, although the number of elements it generates increases withα. Furthermore, the size of the π
kcomponents decreases on average.
Now deﬁne
G(θ)=∞/summationdisplay
k=1πkδθk(θ) (25.26)
whereπ∼GEM(α)andθk∼H. Then one can show that G∼DP(α,H ).
As a consequence of this construction, we see that samples from a DP are discrete with
probability one. In other words, if you keep sampling it, you will get more and more repetitionsof previously generated values. So if we sample
θi∼G, we will see repeated values; let us
number the unique values θ1,θ2, etc. Data sampled from θiwill therefore cluster around the
θk. This is evident in Figure 25.3, where most data comes from the Gaussians with large πk
values, represented by ellipses with thick borders. This is our ﬁrst indication that the DP mightbe useful for clustering.
25.2.2.2 The Chinese restaurant process (CRP)
Working with inﬁnite dimensional sticks is problematic. However, we can exploit the clusteringproperty to draw samples form a GP, as we now show.
The key result is this: If
θi∼GareNobservations from G∼DP(α,H ), taking on K
distinct values θk, then the predictive distribution of the next observation is given by
p(θN+1=θ|θ1:N,α,H)=1
α+N/parenleftBigg
αH(θ)+K/summationdisplay
k=1Nkδθk(θ)/parenrightBigg
(25.27)
whereNkis the number of previous observations equal to θk. This is called the Polya urn or
Blackwell-MacQueen sampling scheme. This provides a constructive way to sample from a DP.
It is much more convenient to work with discrete variables ziwhich specify which value of
θkto use. That is, we deﬁne θi=θzi. Based on the above expression, we have
p(zN+1=z|z1:N,α)=1
α+N/parenleftBigg
αI(z=k∗)+K/summationdisplay
k=1NkI(z=k)/parenrightBigg
(25.28)
wherek∗represents a new cluster index that has not yet been used. This is called the Chinese
restaurant process orCRP, based on the seemingly inﬁnite supply of tables at certain Chinese
restaurants. The analogy is as follows: The tables are like clusters, and the customers are likeobservations. When a person enters the restaurant, he may choose to join an existing table withprobability proportional to the number of people already sitting at this table (the N
k); otherwise,
with a probability that diminishes as more people enter the room (due to the 1/(α+N)term),
25.2. Dirichletprocessmixturemodels 885
(a) (b)
Figure 25.6 Two views of a DP mixture model. Left: inﬁnite number of clusters parameters, θk, and
π∼GEM(α). Right:Gis drawn from a DP. Compare to Figure 25.2. Source: Figure 2.24 of (Sudderth
2006). Used with kind permission of Erik Sudderth.
he may choose to sit at a new table k∗. The result is a distribution over partitions of the
integers, which is like a distribution of customers to tables.
The fact that currently occupied tables are more likely to get new customers is sometimes
called the rich get richer phenomenon. Indeed, one can derive an expression for the distri-
bution of cluster sizes induced by this prior process; it is basically a power law. The number
of occupied tables Kalmost surely approaches αlog(N)asN→∞, showing that the model
complexity will indeed grow logarithmically with dataset size. More ﬂexible priors over clustersizes can also be deﬁned, such as the two-parameter Pitman-Yor process.
25.2.3 Applying Dirichlet processes to mixture modeling
The DP is not particularly useful as a model for data directly, since data vectors rarely repeatexactly. However, it is useful as a prior for the parameters of a stochastic data generatingmechanism, such as a mixture model. To create such a model, we follow exactly the same setupas Section 11.2, but we deﬁne G∼DP(α,H ). Equivalently, we can write the model as follows:
π∼GEM(α) (25.29)
z
i∼π (25.30)
θk∼H(λ) (25.31)
xi∼F(θzi) (25.32)
This is illustrated in Figure 25.6. We see that Gis now a random draw of an unbounded number
of parameters θkfrom the base distribution H, each with weight πk. Each data point xiis
generated by sampling its own “private” parameter θifromG. As we get more and more data,
it becomes increasingly likely that θiwill be equal to one of the θk’s we have seen before, and
thusxiwill be generated close to an existing datapoint.
886 Chapter25. Clustering
25.2.4 Fitting a DP mixture model
The simplest way to ﬁt a DPMM is to modify the collapsed Gibbs sampler of Section 24.2.4.
From Equation 24.23 we have
p(zi=k|z−i,x,α,λ)∝p(zi=k|z−i,α)p(xi|x−i,zi=k,z−i,λ) (25.33)
By exchangeability, we can assume that ziis the last customer to enter the restaurant. Hence
the ﬁrst term is given by
p(zi|z−i,α)=1
α+N−1/parenleftBigg
αI(zi=k∗)+K/summationdisplay
k=1Nk,−iI(zi=k)/parenrightBigg
(25.34)
whereKis the number of clusters used by z−i, andk∗is a new cluster. Another way to write
this is as follows:
p(zi=k|z−i,α)=/braceleftBigg
Nk,−i
α+N−1ifkhas been seen before
α
α+N−1ifkis a new cluster(25.35)
Interestingly, this is equivalent to Equation 24.26, which has the form p(zi=k|z−i,α)=
Nk,−i+α/K
α+N−1,i nt h eK→∞limit (Rasmussen 2000; Neal 2000).
To compute the second term, p(xi|x−i,zi=k,z−i,λ), let us partition the data x−iinto
clusters based on z−i.L e tx−i,c={xj:zj=c,j/negationslash=i}be the data assigned to cluster c.I f
zi=k, thenxiis conditionally independent of all the data points except those assigned to
clusterk. Hence we have
p(xi|x−i,z−i,zi=k,λ)=p( xi|x−i,k,λ)=p(xi,x−i,k|λ)
p(x−i,k|λ)(25.36)
where
p(xi,x−i,k|λ)=/integraldisplay
p(xi|θk)⎡
⎣/productdisplay
j/negationslash=i:zj=kp(xj|θk)⎤⎦H(θ
k|λ)dθk (25.37)
is the marginal likelihood of all the data assigned to cluster k, including i, andp(x−i,k|λ)is an
analogous expression excluding i. Thus we see that the term p(xi|x−i,z−i,zi=k,λ)is the
posterior preditive distribution for cluster kevaluated at xi.
Ifzi=k∗, corresponding to a new cluster, we have
p(xi|x−i,z−i,zi=k∗,λ)=p(xi|λ)=/integraldisplay
p(xi|θ)H(θ|λ)dθ (25.38)
which is just the prior predictive distribution for a new cluster evaluated at xi.
See Algorithm 1 for the pseudocode. (This is called “Algorithm 3” in (Neal 2000).) This is very
similar to collapsed Gibbs for ﬁnite mixtures except that we have to consider the case zi=k∗.
An example of this procedure in action is shown in Figure 25.7. The sample clusterings, and
the induced posterior over K, seems reasonable. The method tends to rapidly discover a good
clustering. By contrast, Gibbs sampling (and EM) for a ﬁnite mixture model often gets stuck in
25.3. Affinitypropagation 887
Algorithm 25.1: Collapsed Gibbs sampler for DP mixtures
1foreachi=1:Ninrandomorder do
2Removexi’s sufficient statistics from old cluster zi;
3foreachk=1:Kdo
4 Compute pk(xi)=p(xi|x−i(k));
5 SetNk,−i=d i m (x−i(k));
6 Compute p(zi=k|z−i,D)=Nk,−i
α+N−1;
7Compute p∗(xi)=p(xi|λ);
8Compute p(zi=∗|z−i,D)=α
α+N−1;
9Normalize p(zi|·);
10Samplezi∼p(zi|·);
11Addxi’s sufficient statistics to new cluster zi;
12If any cluster is empty, remove it and decrease K;
poor local optima (not shown). This is because the DPMM is able to create extra redundant
clusters early on, and to use them to escape local optima. Figure 25.8 shows that most of thetime, the DPMM converges more rapidly than a ﬁnite mixture model.
A variety of other ﬁtting methods have been proposed. (Daume 2007a) shows how one can use
A star search and beam search to quickly ﬁnd an approximate MAP estimate. (Mansinghka et al.2007) discusses how to ﬁt a DPMM online using particle ﬁltering, which is a like a stochasticversion of beam search. This can be more efficient than Gibbs sampling, particularly for largedatasets. (Kurihara et al. 2006) develops a variational approximation that is even faster (see also(Zobay 2009)). Extensions to the case of non-conjugate priors are discussed in (Neal 2000).
Another important issue is how to set the hyper-parameters. For the DP, the value of α
does not have much impact on predictive accuracy, but it does affect the number of clusters.One approach is to put a Ga(a,b) prior forα, and then to from its posterior, p(α|K,N,a,b ),
using auxiliary variable methods (Escobar and West 1995). Alternatively, one can use empiricalBayes (McAuliffe et al. 2006). Similarly, for the base distribution, we can either sample thehyper-parameters λ(Rasmussen 2000) or use empirical Bayes (McAuliffe et al. 2006).
25.3 Affinity propagation
Mixture models, whether ﬁnite or inﬁnite, require access to the raw N×Ddata matrix, and
need to specify a generative model of the data. An alternative approach takes as input an N×N
similarity matrix, and then tries to identify examplars, which will act as cluster centers. TheK-medoids or K-centers algorithm (Section 14.4.2) is one approach, but it can suffer from local
minima. Here we describe an alternative approach called affinity propagation (Frey and Dueck
2007) that works substantially better in practice.
The idea is that each data point must choose another data point as its exemplar or centroid;
some data points will choose themselves as centroids, and this will automatically determine thenumber of clusters. More precisely, let c
i∈{1,...,N}represent the centroid for datapoint i.
888 Chapter25. Clustering
−6 −4 −2 0 2 4−6−4−2024iter# 50
(a)−6 −4 −2 0 2 4−6−4−2024iter# 100
(b)
−6 −4 −2 0 2 4−6−4−2024iter# 200
(c)1 2 3 4 5 600.10.20.30.40.50.60.7
(d)
Figure 25.7 100 data points in 2d are clustered using a DP mixture ﬁt with collapsed Gibbs sampling.
We show samples from the posterior after 50,100, 200 samples. We also show the posterior over K, based
on 200 samples, discarding the ﬁrst 50 as burnin. Figure generated by dpmGauss2dDemo , written by Yee
Whye Teh.
The goal is to maximize the following function
S(c)=N/summationdisplay
i=1s(i,ci)+N/summationdisplay
k=1δk(c) (25.39)
The ﬁrst term measures the similarity of each point to its centroid. The second term is a penalty
term that is−∞if some data point ihas chosen kas its exemplar (i.e., ci=k), butkhas not
chosen itself as an exemplar (i.e., we do not have ck=k). More formally,
δk(c)=/braceleftbigg−∞ifck/negationslash=kbut∃i:ci=k
0otherwise(25.40)
The objective function can be represented as a factor graph. We can either use Nnodes,
25.3. Affinitypropagation 889
100101102103−600−550−500−450−400−350
Iterationlog p(x | π, θ)
  
Dirichlet Process Mixture
Finite Mixture
(a)100101102103−600−550−500−450−400−350
Iterationlog p(x | π, θ)
  
Dirichlet Process Mixture
Finite Mixture
(b)
Figure 25.8 Comparison of collapsed Gibbs samplers for a DP mixture (dark blue) and a ﬁnite mixture
(light red) with K=4applied to N= 300data points (shown in Figure 25.7). Left: logprob vs iteration
for 20 different starting values. Right: median (thick line) and quantiles (dashed lines) over 100 different
starting values. Source: Figure 2.27 of (Sudderth 2006). Used with kind permission of Erik Sudderth.
c1 c2
1
 2
s(1,
) s(2,
)A
cN c32
 N
 3
s(3,
) s(N,
)…
k
…
s(i,
)… …
ci
Figure 25.9 Factor graphs for affinity propagation. Circles are variables, squares are factors. Each cinode
hasNpossible states. From Figure S2 of (Frey and Dueck 2007). Used with kind permission of Brendan
Frey.
each with Npossible values, as shown in Figure 25.9, or we can use N2binary nodes (see
(Givoni and Frey 2009) for the details). We will assume the former representation.
We can ﬁnd a strong local maximum of the objective by using max-product loopy belief
propagation (Section 22.2). Referring to the model in Figure 25.9, each variable nodes cisends
a message to each factor node δk. It turns out that this vector of Nnumbers can be reduced
to a scalar message, denote ri→k, known as the responsibility. This is a measure of how much
ithinkskwould make a good exemplar, compared to all the other exemplars ihas looked at.
In addition, each factor node δksends a message to each variable node ci. Again this can be
reduced to a scalar message, ai←k, known as the availability. This is a measure of how strongly
kbelieves it should an exemplar for i, based on all the other data points khas looked at.
As usual with loopy BP, the method might oscillate, and convergence is not guaranteed.
890 Chapter25. Clustering
/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15


 













/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15





 












/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15



 













/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15



 
















/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15



 















/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15















/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15














/g8/g15 /g10 /g6/g15/g8/g15/g10/g6/g15











/g23/g25/g23/g29/g23/g17/g24/g23/g31/g17/g29/g23/g26/g25
/g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g16 /g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g15 /g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g14/g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g13 /g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g12 /g23/g29/g20/g27/g17/g29/g23/g26/g25/g1/g2/g11
/g18/g26/g25/g30/g20/g27/g22/g20/g25/g18/g20
/g44/g45/g44/g8/g36/g52/g36/g43/g46/g42/g32/g47/g1 /g36/g52/g36/g43/g46/g42/g32/g47
Figure 25.10 Example of affinity propagation. Each point is colored coded by how much it wants to be
an exemplar (red is the most, green is the least). This can be computed by summing up all the incoming
availability messages and the self-similarity term. The darkness of the i→karrow reﬂects how much
pointiwants to belong to exemplar k. From Figure 1 of (Frey and Dueck 2007). Used with kind permission
of Brendan Frey.
However, by using damping, the method is very reliable in practice. If the graph is densely
connected, message passing takes O(N2)time, but with sparse similarity matrices, it only takes
O(E)time, where Eis the number of edges or non-zero entries in S.
The number of clusters can be controlled by scaling the diagonal terms S(i,i), which reﬂect
how much each data point wants to be an exemplar. Figure 25.10 gives a simple example of some
2d data, where the negative Euclidean distance was used to measured similarity. The S(i,i)
values were set to be the median of all the pairwise similarities. The result is 3 clusters. Many
other results are reported in (Frey and Dueck 2007), who show that the method signiﬁcantly
outperforms K-medoids.
25.4 Spectral clustering
An alternative view of clustering is in terms of graph cuts . The idea is we create a weighted
undirected graph Wfrom the similarity matrix S, typically by using the nearest neighbors of
each point; this ensures the graph is sparse, which speeds computation. If we want to ﬁnd a
partition into Kclusters, say A1,...,A K, one natural criterion is to minimize
cut(A1,...,A K)/defines1
2K/summationdisplay
k=1W(Ak,Ak) (25.41)
25.4. Spectralclustering 891
whereAk=V\Akis the complement of Ak, andW(A,B)/defines/summationtext
i∈A,j∈Bwij.F o rK=2this
problem is easy to solve. Unfortunately the optimal solution often just partitions off a single
data point from the rest. To ensure the sets are reasonably large, we can deﬁne the normalized
cutto be
Ncut(A1,...,A K)/defines1
2K/summationdisplay
k=1cut(Ak,Ak)
vol(Ak)(25.42)
where vol (A)/defines/summationtext
i∈Adi, anddi=/summationtextN
j=1wijis the weighted degree of node i. This splits
the graph into Kclusters such that nodes within each cluster are similar to each other, but are
different to nodes in other clusters.
We can formulate the Ncut problem in terms of searching for binary vectors ci∈{0,1}N,
wherecik=1if pointibelongs to cluster k, that minimize the objective. Unfortunately this
is NP-hard (Wagner and Wagner 1993). Affinity propagation is one way to solve the problem.
Another is to relax the constraints that cibe binary, and allow them to be real-valued. The
result turns into an eigenvector problem known as spectral clustering (see e.g., (Shi and Malik
2000)). In general, the technique of performing eigenalysis of graphs is called spectral graph
theory(Chung 1997).
Going into the details would take us too far aﬁeld, but below we give a very brief summary,
based on (von Luxburg 2007), since we will encounter some of these ideas later on.
25.4.1 Graph Laplacian
LetWbe a symmetric weight matrix for a graph, where wij=wji≥0.L e tD=d i a g (di)be a
diaogonal matrix containing the weighted degree of each node. We deﬁne the graph Laplacian
as follows:
L/definesD−W (25.43)
This matrix has various important properties. Because each row sums to zero, we have
that1is an eigenvector with eigenvalue 0. Furthermore, the matrix is symmetric and positive
semi-deﬁnite. To see this, note that
fTLf=fTDf−fTWf=/summationdisplay
idif2
i−/summationdisplay
i,jfifjwij (25.44)
=1
2⎛
⎝/summationdisplay
idif2
i−2/summationdisplay
i,jfifjwij+/summationdisplay
jdjf2
j⎞⎠=1
2/summationdisplay
i,jwij(fi−fj)2(25.45)
HencefTLf≥0for allf∈RN. Consequently we see that LhasNnon-negative, real-valued
eigenvalues, 0≤λ1≤λ2≤...≤λN.
To get some intuition as to why Lmight be useful for graph-based clustering, we note the
following result.
Theorem 25.4.1. Thesetofeigenvectorsof Lwitheigenvalue0isspannedbytheindicatorvectors
1A1,...,1AK,whereAkaretheKconnectedcomponentsofthegraph.
892 Chapter25. Clustering
Proof.Let us start with the case K=1.I ffis an eigenvector with eigenvalue 0, then
0=/summationtext
ijwij(fi−fj)2. If two nodes are connected, so wij>0, we must have that fi=fj.
Hencefis constant for all vertices which are connected by a path in the graph. Now suppose
K>1. In this case, Lwill be block diagonal. A similar argument to the above shows that we
will have Kindicator functions, which “select out” the connected components.
This suggests the following algorithm. Compute the ﬁrst Keigenvectors ukofL.L e t
U=[u1,...,uK]be anN×Kmatrix with the eigenvectors in its columns. Let yi∈RKbe
thei’th row of U. Since these yiwill be piecewise constant, we can apply K-means clustering
to them to recover the connected components. Now assign point ito cluster kiff rowiofY
was assigned to cluster k.
In reality, we do not expect a graph derived from a real similarity matrix to have isolated
connected components — that would be too easy. But it is reasonable to suppose the graph is
a small “perturbation” from such an ideal. In this case, one can use results from perturbationtheory to show that the eigenvectors of the perturbed Laplacian will be close to these idealindicator functions (Ng et al. 2001).
Note that this approach is related to kernel PCA (Section 14.4.4). In particular, KPCA uses the
largest eigenvectors of W; these are equivalent to the smallest eigenvectors of I−W. This is
similar to the above method, which computes the smallest eigenvectors of L=D−W. See
(Bengio et al. 2004) for details. In practice, spectral clustering gives much better results thanKPCA.
25.4.2 Normalized graph Laplacian
In practice, it is important to normalize the graph Laplacian, to account for the fact that somenodes are more highly connected than others. There are two comon ways to do this. Onemethod, used in e.g., (Shi and Malik 2000; Meila 2001), creates a stochastic matrix where eachrow sums to one:
L
rw/definesD−1L=I−D−1W (25.46)
The eigenvalues and eigenvectors of LandLrware closely related to each other (see (von
Luxburg 2007) for details). Furthemore, one can show that for Lrw, the eigenspace of 0 is
again spanned by the indicator vectors 1Ak. This suggests the following algorithm: ﬁnd the
smallestKeigenvectors of Lrw,c r e a t eU, cluster the rows of Uusing K-means, then infer the
partitioning of the original points (Shi and Malik 2000). (Note that the eigenvectors/ values ofL
rware equivalent to the generalized eigenvectors/ values of L, which solve Lu=λDU.)
Another method, used in e.g., (Ng et al. 2001), creates a symmetric matrix
Lsym/definesD−1
2LD−1
2=I−D−1
2WD−1
2 (25.47)
This time the eigenspace of 0 is spanned by D1
21Ak. This suggest the following algorithm: ﬁnd
the smallest Keigenvectors of Lsym,c r e a t eU, normalize each row to unit norm by creating
tij=uij//radicalbig
(/summationtext
ku2
ik), cluster the rows of Tusing K-means, then infer the partitioning of the
original points (Ng et al. 2001).
There is an interesting connection between Ncuts and random walks on a graph (Meila
2001). First note that P=D−1W=I−Lrwis a stochastic matrix, where pij=wij/di
25.5. Hierarchicalclustering 893
−6 −4 −2 0 2 4 6−5−4−3−2−1012345k−means clustering
xy
(a)−6 −4 −2 0 2 4 6−5−4−3−2−1012345spectral clustering
xy
(b)
Figure 25.11 Clustering data consisting of 2 spirals. (a) K-means. (b) Spectral clustering. Figure generated
byspectralClusteringDemo , written by Wei-Lwun Lu.
can be interpreted as the probability of going from itoj. If the graph is connected and
non-bipartite, it possesses a unique stationary distribution π=(π1,...,πN),w h e r eπi=
di/vol(V). Furthermore, one can show that
Ncut(A,A)=p(A|A)+p(A|A) (25.48)
This means that we are looking for a cut such that a random walk rarely makes transitions from
AtoAor vice versa.
25.4.3 Example
Figure 25.11 illustrates the method in action. In Figure 25.11(a), we see that K-means does a poorjob of clustering, since it implicitly assumes each cluster corresponds to a spherical Gaussian.Next we try spectral clustering. We deﬁne a similarity matrix using the Gaussian kernel. Wecompute the ﬁrst two eigenvectors of the Laplacian. From this we can infer the clustering inFigure 25.11(b).
Since the method is based on ﬁnding the smallest Keigenvectors of a sparse matrix, it takes
O(N
3)time. However, a variety of methods can be used to scale it up for large datasets (see
e.g., (Yan et al. 2009)).
25.5 Hierarchical clustering
Mixture models, whether ﬁnite or inﬁnite, produce a “ﬂat” clustering. Often we want to learn ahierarchical clustering, where clusters can be nested inside each other.
There are two main approaches to hierarchical clustering: bottom-up or agglomerative clus-
tering, and top-down or divisive clustering. Both methods take as input a dissimilarity matrix
between the objects. In the bottom-up approach, the most similar groups are merged at each
894 Chapter25. Clustering
0 1 2 3 4 5 6 7 800.511.522.533.544.55
12
3
45
(a)4 5 1 3 211.522.5
(b)
Figure 25.12 (a) An example of single link clustering using city block distance. Pairs (1,3) and (4,5) are
both distance 1 apart, so get merged ﬁrst. (b) The resulting dendrogram. Based on Figure 7.5 of (Alpaydin
2004). Figure generated by agglomDemo .
(a)0 10 20−3−2−10
0 10 20−2−10
0 10 20−2.5−2−1.5−1−0.5
0 10 20−3−2−101
0 10 20−202
0 10 20−202
0 10 20−4−20
0 10 20−2024
0 10 20−4−202
0 10 20−2024
0 10 20−1012
0 10 200.511.522.5
0 10 200.511.52
0 10 20012
0 10 20−2−10Hierarchical Clustering of Profiles
0 10 20−1012
(b)
Figure 25.13 Hierarchical clustering applied to the yeast gene expression data. (a) The rows are permuted
according to a hierarchical clustering scheme (average link agglomerative clustering), in order to bring
similar rows close together. (b) 16 clusters induced by cutting the average linkage tree at a certain height.
Figure generated by hclustYeastDemo .
step. In the top-down approach, groups are split using various different criteria. We give the
details below.
Note that agglomerative and divisive clustering are both just heuristics, which do not optimize
any well-deﬁned objective function. Thus it is hard to assess the quality of the clustering they
produce in any formal sense. Furthermore, they will always produce a clustering of the input
data, even if the data has no structure at all (e.g., it is random noise). Later in this section we
will discuss a probabilistic version of hierarchical clustering that solves both these problems.
25.5. Hierarchicalclustering 895
Algorithm 25.2: Agglomerative clustering
1initialize clusters as singletons: fori←1tondoCi←{i};
2initialize set of clusters available for merging: S←{1,...,n};
3repeat
4Pick 2 most similar clusters to merge: (j,k)←argmin j,k∈Sdj,k;
5Create new cluster C/lscript←Cj∪Ck;
6Markjandkas unavailable: S←S\{j,k};
7ifC/lscript/negationslash={1,...,n}then
8 Mark/lscriptas available, S←S∪{/lscript};
9foreachi∈Sdo
10 Update dissimilarity matrix d(i,/lscript);
11untilnomoreclustersareavailableformerging ;
(a)
 (b)
 (c)
Figure 25.14 Illustration of (a) Single linkage. (b) Complete linkage. (c) Average linkage.
25.5.1 Agglomerative clustering
Agglomerative clustering starts with Ngroups, each initially containing one object, and then at
each step it merges the two most similar groups until there is a single group, containing all the
data. See Algorithm 11 for the pseudocode. Since picking the two most similar clusters to merge
takesO(N2)time, and there are O(N)steps in the algorithm, the total running time is O(N3).
However, by using a priority queue, this can be reduced to O(N2logN) (see e.g., (Manning
et al. 2008, ch. 17) for details). For large N, a common heuristic is to ﬁrst run K-means, which
takesO(KND)time, and then apply hierarchical clustering to the estimated cluster centers.
The merging process can be represented by a binary tree , called a dendrogram , as shown
in Figure 25.12(b). The initial groups (objects) are at the leaves (at the bottom of the ﬁgure),
and every time two groups are merged, we join them in the tree. The height of the branches
represents the dissimilarity between the groups that are being joined. The root of the tree (which
is at the top) represents a group containing all the data. If we cut the tree at any given height,
we induce a clustering of a given size. For example, if we cut the tree in Figure 25.12(b) at
height 2, we get the clustering {{{4,5},{1,3}},{2}}. We discuss the issue of how to choose
the height/ number of clusters below.
A more complex example is shown in Figure 25.13(a), where we show some gene expression
data. If we cut the tree in Figure 25.13(a) at a certain height, we get the 16 clusters shown in
Figure 25.13(b).
There are actually three variants of agglomerative clustering, depending on how we deﬁne
the dissimilarity between groups of objects. These can give quite different results, as shown in
896 Chapter25. Clustering
0.050.10.150.20.250.3single link
(a)
0.20.40.60.811.21.41.61.82complete link
(b)
0.20.40.60.811.21.41.61.8average link
(c)
Figure 25.15 Hierarchical clustering of yeast gene expression data. (a) Single linkage. (b) Complete linkage.
(c) Average linkage. Figure generated by hclustYeastDemo .
25.5. Hierarchicalclustering 897
Figure 25.15. We give the details below.
25.5.1.1 Single link
Insingle link clustering, also called nearest neighbor clustering, the distance between two
groupsGandHis deﬁned as the distance between the two closest members of each group:
dSL(G,H)= m i n
i∈G,i/prime∈Hdi,i/prime (25.49)
See Figure 25.14(a).
The tree built using single link clustering is a minimum spanning tree of the data, which
is a tree that connects all the objects in a way that minimizes the sum of the edge weights
(distances). To see this, note that when we merge two clusters, we connect together the twoclosest members of the clusters; this adds an edge between the corresponding nodes, and thisis guaranteed to be the “lightest weight” edge joining these two clusters. And once two clustershave been merged, they will never be considered again, so we cannot create cycles. As aconsequence of this, we can actually implement single link clustering in O(N
2)time, whereas
the other variants take O(N3)time.
25.5.1.2 Complete link
Incomplete link clustering, also called furthest neighbor clustering, the distance between
two groups is deﬁned as the distance between the two most distant pairs:
dCL(G,H)= m a x
i∈G,i/prime∈Hdi,i/prime (25.50)
See Figure 25.14(b).
Single linkage only requires that a single pair of objects be close for the two groups to
be considered close together, regardless of the similarity of the other members of the group.Thus clusters can be formed that violate the compactness property, which says that all the
observations within a group should be similar to each other. In particular if we deﬁne thediameter of a group as the largest dissimilarity of its members, d
G=m a x i∈G,i/prime∈Gdi,i/prime, then
we can see that single linkage can produce clusters with large diameters. Complete linkagerepresents the opposite extreme: two groups are considered close only if all of the observationsin their union are relatively similar. This will tend to produce clusterings with small diameter,i.e., compact clusters.
25.5.1.3 Average link
In practice, the preferred method is average link clustering, which measures the average
distance between all pairs:
d
avg(G,H)=1
nGnH/summationdisplay
i∈G/summationdisplay
i/prime∈Hdi,i/prime (25.51)
wherenGandnHare the number of elements in groups GandH. See Figure 25.14(c).
Average link clustering represents a compromise between single and complete link clustering.
It tends to produce relatively compact clusters that are relatively far apart. However, since it
898 Chapter25. Clustering
involves averaging of the di,i/prime’s, any change to the measurement scale can change the result. In
contrast, single linkage and complete linkage are invariant to monotonic transformations of di,i/prime,
since they leave the relative ordering the same.
25.5.2 Divisive clustering
Divisive clustering starts with all the data in a single cluster, and then recursively divides each
cluster into two daughter clusters, in a top-down fashion. Since there are 2N−1−1ways to split
a group of Nitems into 2 groups, it is hard to compute the optimal split, so various heuristics
are used. One approach is pick the cluster with the largest diameter, and split it in two using theK-means or K-medoids algorithm with K=2. This is called the bisecting K-means algorithm
(Steinbach et al. 2000). We can repeat this until we have any desired number of clusters. Thiscan be used as an alternative to regular K-means, but it also induces a hierarchical clustering.
Another method is to build a minimum spanning tree from the dissimilarity graph, and then
to make new clusters by breaking the link corresponding to the largest dissimilarity. (Thisactually gives the same results as single link agglomerative clustering.)
Yet another method, called dissimilarity analysis (Macnaughton-Smith et al. 1964), is as
follows. We start with a single cluster containing all the data, G={1,...,N}. We then
measure the average dissimilarity of i∈Gto all the other i
/prime∈G:
dG
i=1
nG/summationdisplay
i/prime∈Gdi,i/prime (25.52)
We remove the most dissimilar object and put it in its own cluster H:
i∗=a r gm a x
i∈GdGi,G=G\{i∗},H={i∗} (25.53)
We now continue to move objects from GtoHuntil some stopping criterion is met. Speciﬁcally,
we pick a point i∗to move that maximizes the average dissimilarity to each i/prime∈Gbut minimizes
the average dissimilarity to each i/prime∈H:
dHi=1
nH/summationdisplay
i/prime∈Hdi,i/prime,i∗=a r gm a x
i∈GdGi−dHi(25.54)
We continue to do this until dG
i−dHiis negative. The ﬁnal result is that we have split Ginto
two daughter clusters, GandH. We can then recursively call the algorithm on Gand/orH,o r
on any other node in the tree. For example, we might choose to split the node Gwhose average
dissimilarity is highest, or whose maximum dissimilarity (i.e., diameter) is highest. We continue
the process until the average dissimilarity within each cluster is below some threshold, and/orall clusters are singletons.
Divisive clustering is less popular than agglomerative clustering, but it has two advantages.
First, it can be faster, since if we only split for a constant number of levels, it takes just O(N)
time. Second, the splitting decisions are made in the context of seeing all the data, whereasbottom-up methods make myopic merge decisions.
25.5. Hierarchicalclustering 899
25.5.3 Choosing the number of clusters
It is difficult to choose the “right” number of clusters, since a hierarchical clustering algorithm
will always create a hierarchy, even if the data is completely random. But, as with choosing K
for K-means, there is the hope that there will be a visible “gap” in the lengths of the links in thedendrogram (represent the dissimilarity between merged groups) between natural clusters andunnatural clusters. Of course, on real data, this gap might be hard to detect. In Section 25.5.4,we will present a Bayesian approach to hierarchical clustering that nicely solves this problem.
25.5.4 Bayesian hierarchical clustering
There are several ways to make probabilistic models which produce results similar to hierarchicalclustering, e.g., (Williams 2000; Neal 2003b; Castro et al. 2004; Lau and Green 2006). Here wepresent one particular approach called Bayesian hierarchical clustering (Heller and Ghahra-
mani 2005). Algorithmically it is very similar to standard bottom-up agglomerative clustering,and takes comparable time, whereas several of the other techniques referenced above are muchslower. However, it uses Bayesian hypothesis tests to decide which clusters to merge (if any),rather than computing the similarity between groups of points in some ad-hoc way. Thesehypothesis tests are closely related to the calculations required to do inference in a Dirichletprocess mixture model, as we will see. Furthermore, the input to the model is a data matrix,not a dissimilarity matrix.
25.5.4.1 The algorithm
LetD={x
1,...,xN}represent all the data, and let Dibe the set of datapoints at the leaves
of the substree Ti. At each step, we compare two trees TiandTjto see if they should be
merged into a new tree. Deﬁne Dijas their merged data, and let Mij=1if they should be
merged, and Mij=0otherwise.
The probability of a merge is given by
rij/definesp(Dij|Mij=1 )p(Mij=1 )
p(Dij|Tij)(25.55)
p(Dij|Tij)=p(Dij|Mij=1 )p(Mij=1 )+p(Dij|Mij=0 )p(Mij=0 ) (25.56)
Herep(Mij=1 )is the prior probability of a merge, which can be computed using a bottom-up
algorithm described below. We now turn to the likelihood terms. If Mij=1, the data inDijis
assumed to come from the same model, and hence
p(Dij|Mij=1 )=/integraldisplay⎡
⎣/productdisplay
xn∈Dijp(xn|θ)⎤⎦p(θ|λ)dθ (25.57)
IfM
ij=0, the data inDijis assumed to have been generated by each tree independently, so
p(Dij|Mij=0 )=p(Di|Ti)p(Dj|Tj) (25.58)
These two terms will have already been computed by the bottom-up process. Consequently
we have all the quantities we need to decide which trees to merge. See Algorithm 9 for thepseudocode, assuming p(M
ij)is uniform. When ﬁnished, we can cut the tree at points where
rij<0.5.
900 Chapter25. Clustering
Algorithm 25.3: Bayesian hierarchical clustering
1InitializeDi={xi},i=1:N;
2Compute p(Di|Ti),i=1:N;
3repeat
4foreachpairofclusters i,jdo
5 Compute p(Dij|Tij)
6Find the pairDiandDjwith highest merge probability rij;
7MergeDk:=Di∪Dj;
8DeleteDi,Dj;
9untilallclustersmerged ;
25.5.4.2 The connection with Dirichlet process mixture models
In this section, we will establish the connection between BHC and DPMMs. This will in turn
give us an algorithm to compute the prior probabilities p(Mij=1 ).
Note that the marginal likelihood of a DPMM, summing over all 2N−1partitions, is given by
p(Dk)=/summationdisplay
v∈Vp(v)p(Dv) (25.59)
p(v)=αmv/producttextmv
l=1Γ(nv
l)
Γ(nk+α)
Γ(α)(25.60)
p(Dv)=mv/productdisplay
l=1p(Dv
l) (25.61)
whereVis the set of all possible partitions of Dk,p(v)is the probability of partition v,mvis
the number of clusters in partition v,nvlis the number of points in cluster lof partition v,Dv
l
are the points in cluster lof partition v, andnkare the number of points in Dk.
One can show (Heller and Ghahramani 2005) that p(Dk|Tk)computed by the BHC algorithm
is similar to p(Dk)given above, except for the fact that it only sums over partitions which are
consistent with tree Tk. (The number of tree-consistent partitions is exponential in the number
of data points for balanced binary trees, but this is obviously a subset of all possible partitions.)
In this way, we can use the BHC algorithm to compute a lower bound on the marginal likelihoodof the data from a DPMM. Furthermore, we can interpret the algorithm as greedily searchingthrough the exponentially large space of tree-consistent partitions to ﬁnd the best ones of agiven size at each step.
We are now in a position to compute π
k=p(Mk=1 ), for each node kwith children iand
j. This is equal to the probability of cluster Dkcoming from the DPMM, relative to all other
partitions ofDkconsistent with the current tree. This can be computed as follows: initialize
di=αandπi=1for each leaf i; then as we build the tree, for each internal node k, compute
dk=αΓ(nk)+didj, andπk=αΓ(nk)
dk,w h e r ei andjarek’s left and right children.
25.6. Clusteringdatapointsandfeatures 901
Data Set Single Linkage Complete Linkage Average Linkage BHC
Synthetic 0.599±0.033 0.634±0.024 0. 668±0.0400.828±0.025
Newsgroups 0.275±0.001 0.315±0.008 0. 282±0.0020.465±0.016
Spambase 0.598±0.017 0.699±0.017 0. 668±0.0190.728±0.029
Digits 0.224±0.004 0.299±0.006 0. 342±0.0050.393±0.015
Fglass 0.478±0.009 0.476±0.009 0.491±0.009 0.467±0.011
Table 25.1 Purity scores for various hierarchical clustering schemes applied to various data sets. The
synthetic data has N= 200,D =2,C=4and real features. Newsgroups is extracted from the 20
newsgroups dataset (D = 500,N = 800,C =4, binary features). Spambase has N= 100,C =2,D=
57, binary features. Digits is the CEDAR Buffalo digits (N = 200,C =1 0,D=6 4, binarized features).
Fglass is forensic glass dataset (N = 214,C =6,D=9, real features). Source: Table 1 of (Heller and
Ghahramani 2005). Used with kind permission of Katherine Heller.
25.5.4.3 Learning the hyper-parameters
The model has two free-parameters: αandλ,w h e r e λare the hyper-parameters for the prior
on the parameters θ. In (Heller and Ghahramani 2005), they show how one can back-propagate
gradients of the form∂p(Dk|Tk)
∂λthrough the tree, and thus perform an empirical Bayes estimate
of the hyper-parameters.
25.5.4.4 Experimental results
(Heller and Ghahramani 2005) compared BHC with traditional agglomerative clustering algo-
rithms on various data sets in terms of purity scores. The results are shown in Table 25.1. Wesee that BHC did much better than the other methods on all datasets except the forensic glassone.
Figure 25.16 visualizes the tree structure estimated by BHC and agglomerative hierarchical
clustering (AHC) on the newsgroup data (using a beta-Bernoulli model). The BHC tree is clearlysuperior (look at the colors at the leaves, which represent class labels). Figure 25.17 is a zoom-inon the top few nodes of these two trees. BHC splits off clusters concerning sports from clustersconcerning cars and space. AHC keeps sports and cars merged together. Although sports andcars both fall under the same “rec” newsgroup heading (as opposed to space, that comes underthe “sci” newsgroup heading), the BHC clustering still seems more reasonable, and this is borneout by the quantitative purity scores.
BHC has also been applied to gene expression data, with good results (Savage et al. 2009).
25.6 Clustering datapoints and features
So far, we have been concentrating on clustering datapoints. But each datapoint is oftendescribed by multiple features, and we might be interested in clustering them as well. Below wedescribe some methods for doing this.
902 Chapter25. Clustering
4 Newsgroups Average Linkage Clustering
(a)
4 Newsgroups Bayesian Hierarchical Clustering
(b)
Figure 25.16 Hierarchical clustering applied to 800 documents from 4 newsgroups (red is rec.autos, blue
is rec.sport.baseball, green is rec.sport.hockey, and magenta is sci.space). Top: average linkage hierarchical
clustering. Bottom: Bayesian hierarchical clustering. Each of the leaves is labeled with a color, accordingto which newsgroup that document came from. We see that the Bayesian method results in a clusteringthat is more consistent with these labels (which were not used during model ﬁtting). Source: Figure 7 of(Heller and Ghahramani 2005). Used with kind permission of Katherine Heller.
25.6. Clusteringdatapointsandfeatures 903
All Data
Game
Team PlayCarSpace NASA
Baseball  Pitch     HitNHLHockey Round CarDealer DriveSpaceNASA Orbit354 446
205 149 284 162
(a)All Data
Car
Baseball Engine
PitcherBoston BallCarPlayer SpaceQuebecJet Boston
VehicleDealer DriverTeamGame Hockey1 799
2 797
1 796
(b)
Figure 25.17 Zoom-in on the top nodes in the trees of Figure 25.16. (a) Bayesian method. (b) Average
linkage. We show the 3 most probable words per cluster. The number of documents at each cluster is also
given. Source: Figure 5 of (Heller and Ghahramani 2005). Used with kind permission of Katherine Heller.
25.6.1 Biclustering
Clustering the rows and columns is known as biclustering orcoclustering. This is widely used
in bioinformatics, where the rows often represent genes and the columns represent conditions.
It can also be used for collaborative ﬁltering, where the rows represent users and the columnsrepresent movies.
A variety of ad hoc methods for biclustering have been proposed; see (Madeira and Oliveira
2004) for a review. Here we present a simple probabilistic generative model, based on (Kempet al. 2006) (see also (Sheng et al. 2003) for a related approach). The idea is to associate eachrow and each column with a latent indicator, r
i∈{1,...,Kr},cj∈{1,...,Kc}. We then
assume the data are iid across samples and across features within each block:
p(x|r,c,θ)=/productdisplay
i/productdisplay
jp(xij|ri,cj,θ)=p(xij|θri,cj) (25.62)
whereθa,bare the parameters for row cluster aand column cluster b. Rather than using a ﬁnite
number of clusters for the rows and columns, we can use a Dirchlet process, as in the inﬁniterelational model which we discuss in Section 27.6.1. We can ﬁt this model using e.g., (collapsed)Gibbs sampling.
The behavior of this model is illustrated in Figure 25.18. The data has the form X(i,j)=1
iff animal ihas feature j,w h e r ei=1:5 0andj=1:8 5. The animals represent whales, bears,
horses, etc. The features represent properties of the habitat (jungle, tree, coastal), or anatomicalproperties (has teeth, quadrapedal), or behavioral properties (swims, eats meat), etc. The model,using a Bernoulli likelihood, was ﬁt to the data. It discovered 12 animal clusters and 33 featureclusters. For example, it discovered a bicluster that represents the fact that mammals tend tohave aquatic features.
25.6.2 Multi-view clustering
The problem with biclustering is that each object (row) can only belong to one cluster. Intuitively,an object can have multiple roles, and can be assigned to different clusters depending on which
904 Chapter25. Clustering
O1 killer whale, blue whale, humpback, seal, walrus, dolphin
O2 antelope, horse, giraffe, zebra, deer
O3 monkey, gorilla, chimp
O4 hippo, elephant, rhino
O5 grizzly bear, polar bear
F1 ﬂippers, strain teeth, swims, arctic, coastal, ocean, water
F2 hooves, long neck, horns
F3 hands, bipedal, jungle, tree
F4 bulbous body shape, slow, inactive
F5 meat teeth, eats meat, hunter, ﬁerce
F6 walks, quadrapedal, groundF1 2 4 35
O1
O2
O3
O4
O56
Figure 25.18 Illustration of biclustering . We show 5 of the 12 animal clusters, and 6 of the 33 feature
clusters. The original data matrix is shown, partitioned according to the discovered clusters. From Figure
3 of (Kemp et al. 2006). Used with kind permission of Charles Kemp.
(a)riv
v=1:∞xij
i=1:Nβcj θjk
k=1:∞
j=1:Dα γ
(b)
Figure 25.19 (a) Illustration of multi-view clustering. Here we have 3 views (column partitions). In the
ﬁrst view, we have 2 clusters (row partitions). In the second view, we have 3 clusters. In the third view,
we have 2 clusters. The number of views and partitions are inferred from data. Rows within each colored
block are assumed to generated iid; however, each column can have a different distributional form, which
is useful for modeling discrete and continuous data. From Figure 1 of (Guan et al. 2010). Used with kind
permission of Jennifer Dy. (b) Corresponding DGM.
subset of features you use. For example, in the animal dataset, we may want to group the
animals on the basis of anatomical features (e.g., mammals are warm blooded, reptiles are not),
or on the basis of behavioral features (e.g., predators vs prey).
We now present a model that can capture this phenomenon. This model was indepen-
dently proposed in (Shafto et al. 2006; Mansinghka et al. 2011), who call it crosscat (for cross-
categorization), and in (Guan et al. 2010; Cui et al. 2010), who call it (non-parametric) multi-clust .
(See also (Rodriguez and Ghosh 2011) for a very similar model.) The idea is that we partition the
columns (features) into Vgroups or views,s ocj∈{1,...,V},w h e r ej∈{1,...,D}indexes
25.6. Clusteringdatapointsandfeatures 905
features. We will use a Dirichlet process prior for p(c), which allows Vto grow automatically.
Then for each partition of the columns (i.e., each view), call it v, we partition the rows, again
using a DP, as illustrated in Figure 25.19(a). Let riv∈{1,...,K(v)}be the cluster to which
thei’th row belongs in view v. Finally, having partitioned the rows and columns, we generate
the data: we assume all the rows and columns within a block are iid. We can deﬁne the model
more precisely as follows:
p(c,r,D)=p( c)p(r|c)p(D|r,c) (25.63)
p(c)=DP( c|α) (25.64)
p(r|c)=V(c)/productdisplay
v=1DP(rv|β) (25.65)
p(D|r,c,θ)=V(c)/productdisplay
v=1/productdisplay
j:cj=v⎡
⎣K(rv)/productdisplay
k=1/integraldisplay/productdisplay
i:riv=kp(xij|θjk)p(θjk)dθjk⎤⎦ (25.66)
See Figure 25.19(b) for the DGM.
2
If the data is binary, and we use a Beta(γ,γ)prior forθjk, the likelihood reduces to
p(D|r,c,γ)=V(c)/productdisplay
v=1/productdisplay
j:cj=vK(rv)/productdisplay
k=1Beta(n j,k,v+γ,nj,k,v+γ)
Beta(γ,γ)(25.67)
wherenj,k,v=/summationtext
i:ri,v=kI(xij=1 )counts the number of features which are on in the j’th
column for view vand for row cluster k. Similarly, nj,k,vcounts how many features are off.
The model is easily extended to other kinds of data, by replacing the beta-Bernoulli with, say,
the Gaussian-Gamma-Gaussian model, as discussed in (Guan et al. 2010; Mansinghka et al. 2011).
Approximate MAP estimation can be done using stochastic search (Shafto et al. 2006), and
approximate inference can be done using variational Bayes (Guan et al. 2010) or Gibbs sampling(Mansinghka et al. 2011). The hyper-parameter γfor the likelihood can usually be set in a non-
informative way, but results are more sensitive to the other two parameters, since αcontrols
the number of column partitions, and βcontrols the number of row partitions. Hence a more
robust technique is to infer the hyper-parameters using MH. This also speeds up convergence(Mansinghka et al. 2011).
Figure 25.20 illustrates the model applied to some binary data containing 22 animals and 106
features. The ﬁgures shows the (approximate) MAP partition. The ﬁrst partition of the columnscontains taxonomic features, such as “has bones”, “is warm-blooded”, “lays eggs”, etc. Thisdivides the animals into birds, reptiles/ amphibians, mammals, and invertebrates. The secondpartition of the columns contains features that are treated as noise, with no apparent structure(except for the single row labeled “frog”). The third partition of the columns contains ecologicalfeatures like “dangerous”, “carnivorous”, “lives in water”, etc. This divides the animals into prey,land predators, sea predators and air predators. Thus each animal (row) can belong to a different
2. The dependence between randcis not shown, since it is not a dependence between the values of rivandcj, but
between the cardinality of vandcj. In other words, the number of row partitions we need to specify (the number of
views, indexed by v) depends on the number of column partitions (clusters) that we have.
906 Chapter25. Clustering
lives in lakes
is an amphibian
is a rodent
is tall
is a fish
is slimy
has horns
has hooves
is a feline
roars
has fins
has webbed feet
eats nuts
is smooth
lives in trees
is large
lives in cold climates 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
is ferocious
is dangerous
is a carnivore
is a predator
lives in water
flies
is long
eats leaves
eats animals
lives in grass
eats fish
lives in hot climatesLeopard
Alligator
Python
Seal
Dolphin
Frog
Jellyfish
Octopus
Penguin
Finch
Seagull
Owl
Eagle
Dragonfly
Bat
Grasshopper
Ant
Bee
Sheep
Monkey
Iguana
Ostrich
has bones
lays eggs
is warm−blooded
is a mammal
squawks
has a beak
has a tongue
is green
has a spinal cord
is a lizard
has antennae
has flippers
has paws
has a large brain
has a tail
is furry
eats mice
eats rodents
has a snout
is brown
makes loud noises
has teeth
has feet
is smart
travels in groupsLeopard
Sheep
Seal
Dolphin
Monkey
Bat
Alligator
Iguana
Frog
Python
Finch
Ostrich
Seagull
Owl
Penguin
Eagle
Grasshopper
Ant
Bee
Jellyfish
Octopus
DragonflyA BC
Frog
Figure 25.20 MAP estimate produced by the crosscat system when applied to a binary data matrix of
animals (rows) by features (columns). See text for details. Source: Figure 7 of (Shafto et al. 2006) . Used
with kind permission of Vikash Mansingkha.
cluster depending on what set of features are considered. Uncertainty about the partitions can
be handled by sampling.
It is interesting to compare this model to a standard inﬁnite mixture model. While the
standard model can represent any density on ﬁxed-sized vectors as N→∞, it cannot cope
withD→∞, since it has no way to handle irrelevant, noisy or redundant features. By contrast,
the crosscat/multi-clust system is robust to irrelevant features: it can just partition them off,
and cluster the rows only using the relevant features. Note, however, that it does not need a
separate “background” model, since everything is modelled using the same mechanism. This is
useful, since one’s person’s noise is another person’s signal. (Indeed, this symmetry may explain
why multi-clust outperformed the sparse mixture model approach of (Law et al. 2004) in the
experiments reported in (Guan et al. 2010).)
26 Graphical model structure learning
26.1 Introduction
We have seen how graphical models can be used to express conditional independence assump-
tions between variables. In this chapter, we discuss how to learn the structure of the graphicalmodel itself. That is, we want to compute p(G|D),w h e r eG is the graph structure, represented
as anV×Vadjacency matrix.
As we discussed in Section 1.3.3, there are two main applications of structure learning: knowl-
edge discovery and density estimation. The former just requires a graph topology, whereas thelatter requires a fully speciﬁed model.
The main obstacle in structure learning is that the number of possible graphs is exponential in
the number of nodes: a simple upper bound is O(2
V(V−1)/2). Thus the full posterior p(G|D)
is prohibitively large: even if we could afford to compute it, we could not even store it. So wewill seek appropriate summaries of the posterior. These summary statistics depend on our task.
If our goal is knowledge discovery, we may want to compute posterior edge marginals,
p(G
st=1|D); we can then plot the corresponding graph, where the thickness of each edge
represents our conﬁdence in its presence. By setting a threshold, we can generate a sparsegraph, which can be useful for visualization purposes (see Figure 1.11).
Ifourgoalisdensityestimation, wemaywanttocomputetheMAPgraph, ˆG∈argmax
Gp(G|D).
In most cases, ﬁnding the globally optimal graph will take exponential time, so we will use dis-crete optimization methods such as heuristic search. However, in the case of trees, we canﬁnd the globally optimal graph structure quite efficiently using exact methods, as we discuss inSection 26.3.
If density estimation is our only goal, it is worth considering whether it would be more
appropriate to learn a latent variable model, which can capture correlation between the visiblevariables via a set of latent common causes (see Chapters 12 and 27). Such models are ofteneasier to learn and, perhaps more importantly, they can be applied (for prediction purposes)much more efficiently, since they do not require performing inference in a learned graph withpotentially high treewidth. The downside with such models is that the latent factors are oftenunidentiﬁable, and hence hard to interpret. Of course, we can combine graphical model structurelearning and latent variable learning, as we will show later in this chapter.
In some cases, we don’t just want to model the observed correlation between variables;
instead, we want to model the causalstructure behind the data, so we can predict the effects
of manipulating variables. This is a much more challenging task, which we brieﬂy discuss in
908 Chapter26. Graphicalmodelstructurelearning
bible
christian
god
jesuscase
factchildren
government
religion computer
science
universitycourse
earth
orbitevidence
human
worldjews law president
rights
statewargun israellaunch
nasa
shuttle
spacelunar
moonmission
solar
Figure 26.1 Part of a relevance network constructed from the 20-news data shown in Figure 1.2. We
show edges whose mutual information is greater than or equal to 20% of the maximum pairwise MI. For
clarity, the graph has been cropped, so we only show a subset of the nodes and edges. Figure generatedbyrelevanceNetworkNewsgroupDemo .
Section 26.6.
26.2 Structure learning for knowledge discovery
Since computing the MAP graph or the exact posterior edge marginals is in general computa-
tionally intractable (Chickering 1996), in this section we discuss some “quick and dirty” methodsfor learning graph structures which can be used to visualize one’s data. The resulting models donot constitute consistent joint probability distributions, so they cannot be used for prediction,and they cannot even be formally evaluated in terms of goodness of ﬁt. Nevertheless, thesemethods are a useful ad hoc tool to have in one’s data visualization toolbox, in view of theirspeed and simplicity.
26.2.1 Relevance networks
Arelevance network is a way of visualizing the pairwise mutual information between multiple
random variables: we simply choose a threshold and draw an edge from node ito nodejif
I(Xi;Xj)is above this threshold. In the Gaussian case, I(Xi;Xj)=−1
2log(1−ρ2
ij),w h e r e
ρijis the correlation coefficient (see Exercise 2.13), so we are essentially visualizing Σ; this is
known as the covariance graph (Section 19.4.4.1).
This method is quite popular in systems biology (Margolin et al. 2006), where it is used to
visualize the interaction between genes. The trouble with biological examples is that they are
hard for non-biologists to understand. So let us instead illustrate the idea using natural languagetext. Figure 26.1 gives an example, where we visualize the MI between words in the newsgroupdataset from Figure 1.2. The results seem intuitively reasonable.
However, relevance networks suffer from a major problem: the graphs are usually very dense,
since most variables are dependent on most other variables, even after thresholding the MIs.For example, suppose X
1directly inﬂuences X2which directly inﬂuences X3(e.g., these form
components of a signalling cascade, X1−X2−X3). ThenX1has non-zero MI with X3(and
vice versa), so there will be a 1−3edge in the relevance network. Indeed, most pairs will be
26.2. Structurelearningforknowledgediscovery 909
aids
healthbaseball
fans
games hit
league
playersbible
god
jesus
orbitbmw
engine
honda
cancer
disease
patientscar
dealerdrive
driver guninsurance oil card
graphics
videocase children
food christian
mission
religion sciencecomputercourse
data
solar
problem evidencemedicinedisk
filesmemory scsi
spacedisplay
imageserverdoctor
helpdos
windows
formatearth
marsmoon
email
phonepower
msgfact
hockey
team
ftphuman
vitaminwater
number
versionnhl puck season
win
wongovernment
jews president
rightswar
law systemisrael
researchstate launch
shuttle
lunarmac
pc
studiesnasa
satelliteprogramquestion
university software
technologyworld
Figure 26.2 A dependency network constructed from the 20-news data. We show all edges with regres-
sion weight above 0.5 in the Markov blankets estimated by /lscript1penalized logistic regression. Undirected
edges represent cases where a directed edge was found in both directions. From Figure 4.9 of (Schmidt
2010). Used with kind permission of Mark Schmidt.
connected.
A better approach is to use graphical models, which represent conditional independence,
rather than dependence. In the above example, X1is conditionally independent of X3given
X2, so there will not be a 1−3edge. Consequently graphical models are usually much sparser
than relevance networks, and hence are a more useful way of visualizing interactions between
multiple variables.
26.2.2 Dependency networks
A simple and efficient way to learn a graphical model structure is to independently ﬁt Dsparse
full-conditional distributions p(xt|x−t); this is called a dependency network (Heckerman et al.
2000). The chosen variables constitute the inputs to the node, i.e., its Markov blanket. Wecan then visualize the resulting sparse graph. The advantage over relevance networks is thatredundant variables will not be selected as inputs.
We can use any kind of sparse regression or classiﬁcation method to ﬁt each CPD. (Heckerman
et al. 2000) uses classiﬁcation/ regression trees, (Meinshausen and Buhlmann 2006) use /lscript
1-
regularized linear regression, (Wainwright et al. 2006) use /lscript1-regularized logistic regression (see
depnetFit for some code), (Dobra 2009) uses Bayesian variable selection, etc. (Meinshausen
910 Chapter26. Graphicalmodelstructurelearning
and Buhlmann 2006) discuss theoretical conditions under which /lscript1-regularized linear regression
can recover the true graph structure, assuming the data was generated from a sparse Gaussian
graphical model.
Figure 26.2 shows a dependency network that was learned from the 20-newsgroup data using
/lscript1regularized logistic regression, where the penalty parameter λwas chosen by BIC. Many
of the words present in these estimated Markov blankets represent fairly natural associations(aids:disease, baseball:fans, bible:god, bmw:car, cancer:patients, etc.). However, some of the esti-mated statistical dependencies seem less intuitive, such as baseball:windows and bmw:christian.We can gain more insight if we look not only at the sparsity pattern, but also the values of theregression weights. For example, here are the incoming weights for the ﬁrst 5 words:
•aids: children (0.53), disease (0.84), fact (0.47), health (0.77), president (0.50), research (0.53)
•baseball:christian(-0.98),drive(-0.49), games (0.81), god(-0.46),government (-0.69), hit (0.62),
memory(-1.29), players (1.16), season (0.31), software(-0.68),windows(-1.45)
•bible:car(-0.72),card(-0.88), christian (0.49), fact (0.21), god (1.01), jesus (0.68), orbit (0.83),
program(-0.56), religion (0.24), version (0.49)
•bmw: car (0.60), christian (-11.54), engine (0.69), god(-0.74),government (-1.01),help(-0.50),
windows(-1.43)
•cancer: disease (0.62), medicine (0.58), patients (0.90), research (0.49), studies (0.70)
Words in italic red have negative weights, which represents a dissociative relationship. For
example, the model reﬂects that baseball:windows is an unlikely combination. It turns out thatmost of the weights are negative (1173 negative, 286 positive, 8541 zero) in this model.
In addition to visualizing the data, a dependency network can be used for inference. However,
the only algorithm we can use is Gibbs sampling, where we repeatedly sample the nodes withmissing values from their full conditionals. Unfortunately, a product of full conditionals doesnot, in general, constitute a representation of any valid joint distribution (Heckerman et al.2000), so the output of the Gibbs sampler may not be meaningful. Nevertheless, the method cansometimes give reasonable results if there is not much missing data, and it is a useful methodfor data imputation (Gelman and Raghunathan 2001). In addition, the method can be used asan initialization technique for more complex structure learning methods that we discuss below.
26.3 Learning tree structures
For the rest of this chapter, we focus on learning fully speciﬁed joint probability models, whichcan be used for density estimation, prediction and knowledge discovery.
Since the problem of structure learning for general graphs is NP-hard (Chickering 1996), we
start by considering the special case of trees. Trees are special because we can learn theirstructure efficiently, as we disuscs below, and because, once we have learned the tree, we canuse them for efficient exact inference, as discussed in Section 20.2.
26.3. Learningtreestructures 911
4312
(a)4312
(b)4312
(c)
Figure 26.3 An undirected tree and two equivalent directed trees.
26.3.1 Directed or undirected tree?
Before continuing, we need to discuss the issue of whether we should use directed or undirected
trees. A directed tree, with a single root node r, deﬁnes a joint distribution as follows:
p(x|T)=/productdisplay
t∈Vp(xt|xpa(t)) (26.1)
where we deﬁne pa(r)=∅. For example, in Figure 26.3(b-c), we have
p(x1,x2,x3,x4|T)=p( x1)p(x2|x1)p(x3|x2)p(x4|x2) (26.2)
=p(x2)p(x1|x2)p(x3|x2)p(x4|x2) (26.3)
We see that the choice of root does not matter: both of these models are equivalent.
To make the model more symmetric, it is preferable to use an undirected tree. This can be
represented as follows:
p(x|T)=/productdisplay
t∈Vp(xt)/productdisplay
(s,t)∈Ep(xs,xt)
p(xs)p(xt)(26.4)
wherep(xs,xt)is an edge marginal and p(xt)is a node marginal. For example, in Figure 26.3(a)
we have
p(x1,x2,x3,x4|T)=p(x1)p(x2)p(x3)p(x4)p(x1,x2)p(x2,x3)p(x2,x4)
p(x1)p(x2)p(x2)p(x3)p(x2)p(x4)(26.5)
To see the equivalence with the directed representation, let us cancel terms to get
p(x1,x2,x3,x4|T)=p( x1,x2)p(x2,x3)
p(x2)p(x2,x4)
p(x2)(26.6)
=p(x1)p(x2|x1)p(x3|x2)p(x4|x2) (26.7)
=p(x2)p(x1|x2)p(x3|x2)p(x4|x2) (26.8)
wherep(xt|xs)=p(xs,xt)/p(xs).
Thus a tree can be represented as either an undirected or directed graph: the number of
parameters is the same, and hence the complexity of learning is the same. And of course,inference is the same in both representations, too. The undirected representation, which issymmetric, is useful for structure learning, but the directed representation is more convenientfor parameter learning.
912 Chapter26. Graphicalmodelstructurelearning
26.3.2 Chow-Liu algorithm for ﬁnding the ML tree structure
Using Equation 26.4, we can write the log-likelihood for a tree as follows:
logp(D|θ,T)=/summationdisplay
t/summationdisplay
kNtklogp(xt=k|θ)
+/summationdisplay
s,t/summationdisplay
j,kNstjklogp(xs=j,xt=k|θ)
p(xs=j|θ)p(xt=k|θ)(26.9)
whereNstjkis the number of times node sis in state jand node tis in state k, andNtkis
the number of times node tis in state k. We can rewrite these counts in terms of the empirical
distribution: Nstjk=Npemp(xs=j,xt=k)andNtk=Npemp(xt=k). Setting θto the
MLEs, this becomes
logp(D|θ,T)
N=/summationdisplay
t∈V/summationdisplay
kpemp(xt=k)logpemp(xt=k) (26.10)
+/summationdisplay
(s,t)∈E(T)I(xs,xt|ˆθst) (26.11)
where I(xs,xt|ˆθst)≥0is the mutual information between xsandxtgiven the empirical
distribution:
I(xs,xt|ˆθst)=/summationdisplay
j/summationdisplay
kpemp(xs=j,xt=k)logpemp(xs=j,xt=k)
pemp(xs=j)pemp(xt=k)(26.12)
Since the ﬁrst term in Equation 26.11 is independent of the topology T, we can ignore it when
learning structure. Thus the tree topology that maximizes the likelihood can be found by
computing the maximum weight spanning tree, where the edge weights are the pairwise mutualinformations, I(y
s,yt|ˆθst). This is called the Chow-Liu algorithm (Chow and Liu 1968).
There are several algorithms for ﬁnding a max spanning tree (MST). The two best known are
Prim’s algorithm and Kruskal’s algorithm. Both can be implemented to run in O(ElogV)time,
whereE=V2is the number of edges and Vis the number of nodes. See e.g., (Sedgewick and
Wayne 2011, 4.3) for details. Thus the overall running time is O(NV2+V2logV), where the
ﬁrst term is the cost of computing the sufficient statistics.
Figure 26.4 gives an example of the method in action, applied to the binary 20 newsgroups
data shown in Figure 1.2. The tree has been arbitrarily rooted at the node representing “email”.The connections that are learned seem intuitively reasonable.
26.3.3 Finding the MAP forest
Since all trees have the same number of parameters, we can safely used the maximum likelihoodscore as a model selection criterion without worrying about overﬁtting. However, sometimes wemay want to ﬁt a forestrather than a single tree, since inference in a forest is much faster than
in a tree (we can run belief propagation in each tree in the forest in parallel). The MLE criterionwill never choose to omit an edge. However, if we use the marginal likelihood or a penalizedlikelihood (such as BIC), the optimal solution may be a forest. Below we give the details for themarginal likelihood case.
26.3. Learningtreestructures 913
aidsbaseball
hit
biblebmw
cancercar
dealer engine hondacard
graphics video
casechildrenchristian
computer coursedata
diseasedisk
drive memory system
display
server
doctordos
scsidriver
earth
godemail
ftp phone
oil
evidencefact
questionfansfiles
format windows
food
msg waterimage
games
jesus religion
government
power president rights state war
gunhealth
insurance medicinehelp hockey
nhl
humanisraeljewslaunch
lawleague
lunarmac
mars
patients studiesmissionmoon nasanumber
orbit
satellite solar
vitaminpc
software
playersproblemprogram
space
puck
research scienceseason shuttle technology
universityteamversion
worldwin
won
Figure 26.4 The MLE tree on the 20-newsgroup data. From Figure 4.11 of (Schmidt 2010). Used with kind
permission of Mark Schmidt. (A topologically equivalent tree can be produced using chowliuTreeDemo .)
In Section 26.4.2.2, we explain how to compute the marginal likelihood of any DAG using a
Dirichlet prior for the CPTs. The resulting expression can be written as follows:
logp(D|T)=/summationdisplay
t∈Vlog/integraldisplayN/productdisplay
i=1p(xit|xi,pa(t)|θt)p(θt)dθt=/summationdisplay
tscore(Nt,pa(t)) (26.13)
whereNt,pa(t)are the counts (sufficient statistics) for node tand its parents, and score is
deﬁned in Equation 26.28.
Now suppose we only allow DAGs with at most one parent. Following (Heckerman et al. 1995,
p227), let us associate a weight with each s→tedge,ws,t/definesscore(t|s)−score(t|0),w h e r e
score(t|0)is the score when thas no parents. Note that the weights might be negative (unlike
the MLE case, where edge weights are aways non-negative because they correspond to mutual
information). Then we can rewrite the objective as follows:
logp(D|T)=/summationdisplay
tscore(t|pa(t)) =/summationdisplay
twpa(t),t+/summationdisplay
tscore(t|0) (26.14)
The last term is the same for all trees T, so we can ignore it. Thus ﬁnding the most probable
tree amounts to ﬁnding a maximal branching in the corresponding weighted directed graph.
This can be found using the algorithm in (Gabow et al. 1984).
914 Chapter26. Graphicalmodelstructurelearning
If the scoring function is prior and likelihood equivalent (these terms are explained in Sec-
tion 26.4.2.3), we have
score(s|t)+score( t|0) =score(t|s)+score( s|0) (26.15)
and hence the weight matrix is symmetric. In this case, the maximal branching is the same
as the maximal weight forest. We can apply a slightly modiﬁed version of the MST algorithmto ﬁnd this (Edwards et al. 2010). To see this, let G=(V,E)be a graph with both positive
and negative edge weights. Now let G
/primebe a graph obtained by omitting all the negative edges
fromG. This cannot reduce the total weight, so we can ﬁnd the maximum weight forest of G
by ﬁnding the MST for each connected component of G/prime. We can do this by running Kruskal’s
algorithm directly on G/prime: there is no need to ﬁnd the connected components explicitly.
26.3.4 Mixtures of trees
A single tree is rather limited in its expressive power. Later in this chapter we discuss ways tolearn more general graphs. However, the resulting graphs can be expensive to do inference in.An interesting alternative is to learn a mixture of trees (Meila and Jordan 2000), where each
mixture component may have a different tree topology. This is like an unsupervised version ofthe TAN classiﬁer discussed in Section 10.2.1. We can ﬁt a mixture of trees by using EM: in theE step, we compute the responsibilities of each cluster for each data point, and in the M step,we use a weighted version of the Chow-Liu algorithm. See (Meila and Jordan 2000) for details.
In fact, it is possible to create an “inﬁnite mixture of trees”, by integrating out over all possible
trees. Remarkably, this can be done in V
3time using the matrix tree theorem. This allows us to
perform exact Bayesian inference of posterior edge marginals etc. However, it is not tractable touse this inﬁnite mixture for inference of hidden nodes. See (Meila and Jaakkola 2006) for details.
26.4 Learning DAG structures
In this section, we discuss how to compute (functions of) p(G|D),w h e r eGis constrained to be
a DAG. This is often called Bayesian network structure learning. In this section, we assume
there is no missing data, and that there are no hidden variables. This is called the complete
data assumption. For simplicity, we will focus on the case where all the variables are categoricaland all the CPDs are tables, although the results generalize to real-valued data and other kindsof CPDs, such as linear-Gaussian CPDs.
Our presentation is based in part on (Heckerman et al. 1995), although we will follow the
notation of Section 10.4.2. In particular, let x
it∈{1,...,K t}be the value of node tin casei,
whereKtis the number of states for node t.L e tθtck/definesp(xt=k|xpa(t)=c),f o rk=1:K t,
andc=1:C t,w h e r eCtis the number of parent combinations (possible conditioning cases).
For notational simplicity, we will often assume Kt=K, so all nodes have the same number of
states. We will also let dt=d i m ( p a ( t))be the degree or fan-in of node t, so that Ct=Kdt.
26.4.1 Markov equivalence
In this section, we discuss some fundamental limits to our ability to learn DAG structures fromdata.
26.4. LearningDAGstructures 915
X1
X2X3
X4X5X1
X2X3
X4X5X1
X2X3
X4X5G1 G2 G3
Figure 26.5 Three DAGs. G1andG3are Markov equivalent, G2is not.
Consider the following 3 DGMs: X→Y→Z,X←Y←ZandX←Y→Z. These all
represent the same set of CI statements, namely
X⊥Z|Y, X/negationslash⊥Z (26.16)
We say these graphs are Markov equivalent, since they encode the same set of CI assumptions.
That is, they all belong to the same Markov equivalence class. However, the v-structure
X→Y←ZencodesX⊥ZandX/negationslash⊥Z|Y, which represents the opposite set of CI
assumptions.
One can prove the following theorem.
Theorem 26.4.1 (Verma and Pearl (Verma and Pearl 1990)). TwostructuresareMarkovequivalent
ifftheyhavethesameundirectedskeletonandthesamesetofv-structures.
For example, referring to Figure 26.5, we see that G1/negationslash≡G2, since reversing the 2→4arc
creates a new v-structure. However, G1≡G3, since reversing the 1→5arc does not create a
new v-structure.
We can represent a Markov equivalence class using a single partially directed acyclic graph
(PDAG), also called an essential graph orpattern, in which some edges are directed and some
undirected. The undirected edges represent reversible edges; any combination is possible so
long as no new v-structures are created. The directed edges are called compelled edges, since
changing their orientation would change the v-structures and hence change the equivalenceclass. For example, the PDAG X−Y−Zrepresents{X→Y→Z,X←Y←Z,X←Y→
Z}which encodes X/negationslash⊥ZandX⊥Z|Y. See Figure 26.6.
The signiﬁcance of the above theorem is that, when we learn the DAG structure from data,
we will not be able to uniquely identify all of the edge directions, even given an inﬁnite amountof data. We say that we can learn DAG structure “up to Markov equivalence”. This also cautionsus not to read too much into the meaning of particular edge orientations, since we can oftenchange them without changing the model in any observable way.
916 Chapter26. Graphicalmodelstructurelearning
ZYX
ZYX
ZYX
ZYX
ZYX
ZYX
≡≡
Figure 26.6 PDAG representation of Markov equivalent DAGs.
26.4.2 Exact structural inference
In this section, we discuss how to compute the exact posterior over graphs, p(G|D), ignoring
for now the issue of computational tractability.
26.4.2.1 Deriving the likelihood
Assuming there is no missing data, and that all CPDs are tabular, the likelihood can be written
as follows:
p(D|G,θ)=N/productdisplay
i=1V/productdisplay
t=1Cat(xit|xi,pa(t),θt) (26.17)
=N/productdisplay
i=1V/productdisplay
t=1Ct/productdisplay
c=1Cat(xit|θtc)I(xi,pa(t )=c)(26.18)
=N/productdisplay
i=1V/productdisplay
t=1Ct/productdisplay
c=1Kt/productdisplay
k=1θI(xi,t=k,xi,pa(t)=c)
tck(26.19)
=V/productdisplay
t=1Ct/productdisplay
c=1Kt/productdisplay
k=1θNtck
tck(26.20)
whereNtckis the number of times node tis in state kand its parents are in state c. (Technically
these counts depend on the graph structure G, but we drop this from the notation.)
26.4.2.2 Deriving the marginal likelihood
Of course, choosing the graph with the maximum likelihood will always pick a fully connectedgraph (subject to the acyclicity constraint), since this maximizes the number of parameters. Toavoid such overﬁtting, we will choose the graph with the maximum marginal likelihood, p(D|G);
the magic of the Bayesian Occam’s razor will then penalize overly complex graphs.
To compute the marginal likelihood, we need to specify priors on the parameters. We will
make two standard assumptions. First, we assume global prior parameter independence,
which means
p(θ)=
V/productdisplay
t=1p(θt) (26.21)
26.4. LearningDAGstructures 917
Second, we assume local prior parameter independence, which means
p(θt)=Ct/productdisplay
c=1p(θtc) (26.22)
for eacht. It turns out that these assumtions imply that the prior for each row of each CPT
must be a Dirichlet (Geiger and Heckerman 1997), that is,
p(θtc)=D i r (θtc|αtc) (26.23)
Given these assumptions, and using the results of Section 5.3.2.2, we can write down the
marginal likelihood of any DAG as follows:
p(D|G)=V/productdisplay
t=1Ct/productdisplay
c=1/integraldisplay⎡
⎣/productdisplay
i:xi,pa(t )=cCat(xit|θtc)⎤⎦Dir(θ
tc)dθtc (26.24)
=V/productdisplay
t=1Ct/productdisplay
c=1B(Ntc+αtc)
B(αtc)(26.25)
=V/productdisplay
t=1Ct/productdisplay
c=1Γ(Ntc)
Γ(Ntc+αtc)Kt/productdisplay
k=1Γ(Ntck+αG
tck)
Γ(αG
ijk)(26.26)
=V/productdisplay
t=1score(Nt,pa(t)) (26.27)
whereNtc=/summationtext
kNtck,αtc=/summationtext
kαtck,Nt,pa(t)is the vector of counts (sufficient statistics) for
nodetand its parents, and score() is a local scoring function deﬁned by
score(Nt,pa(t))/definesCt/productdisplay
c=1B(Ntc+αtc)
B(αtc)(26.28)
We say that the marginal likelihood decomposes or factorizes according to the graph structure.
26.4.2.3 Setting the prior
How should we set the hyper-parameters αtck? It is tempting to use a Jeffreys prior of the form
αtck=1
2(Equation 5.62). However, it turns out that this violates a property called likelihood
equivalence, which is sometimes considered desirable. This property says that if G1andG2are
Markov equivalent (Section 26.4.1), they should have the same marginal likelihood, since they are
essentially equivalent models. Geiger and Heckerman (1997) proved that, for complete graphs,the only prior that satisﬁes likelihood equivalence and parameter independence is the Dirichletprior, where the pseudo counts have the form
α
tck=αp0(xt=k,xpa(t)=c) (26.29)
whereα>0is called the equivalent sample size , andp0is some prior joint probability dis-
tribution. This is called the BDeprior, which stands for Bayesian Dirichlet likelihood equivalent.
918 Chapter26. Graphicalmodelstructurelearning
To derive the hyper-parameters for other graph structures, Geiger and Heckerman (1997)
invoked an additional assumption called parameter modularity, which says that if node Xt
has the same parents in G1andG2, thenp(θt|G1)=p(θt|G2). With this assumption, we
can always derive αtfor a node tin any other graph by marginalizing the pseudo counts in
Equation 26.29.
Typically the prior distribution p0is assumed to be uniform over all possible joint conﬁgura-
tions. In this case, we have
αtck=α
KtCt(26.30)
sincep0(xt=k,xpa(t)=c)=1
KtCt. Thus if we sum the pseudo counts over all Ct×Kt
entries in the CPT, we get a total equivalent sample size of α. This is called the BDeuprior,
where the “u” stands for uniform. This is the most widely used prior for learning Bayes net
structures. For advice on setting the global tuning parameter α, see (Silander et al. 2007).
26.4.2.4 Simple worked example
We now give a very simple worked example from (Neapolitan 2003, p.438). Suppose we havejust 2 binary nodes, and the following 8 data cases:
X
1X2
1112112211211122
Suppose we are interested in two possible graphs: G
1isX1→X2andG2is the disconnected
graph. The empirical counts for node 1 in G1areN1=( 5,3)and for node 2 are
X2=1X2=2
X1=141
X1=212
The BDeu prior for G1isα1=(α/2,α/2),α2|x 1=1=(α/4,α/4)andα2|x 1=2=
(α/4,α/4).F o rG2, the prior for θ1is the same, and for θ2it isα2|x 1=1=(α/2,α/2)
andα2|x 1=2=(α/2,α/2). I fw es e tα =4, and use the BDeu prior, we ﬁnd p(D|G1)=
7.2150×10−6andp(D|G2)=6.7465×10−6. Hence the posterior probabilites, under a
uniform graph prior, are p(G1|D)=0.51678andp(G2|D)=0.48322.
26.4.2.5 Example: analysis of the college plans dataset
We now consider a more interesting example from (Heckerman et al. 1997). Consider the dataset collected in 1968 by Sewell and Shah which measured 5 variables that might inﬂuence thedecision of high school students about whether to attend college. Speciﬁcally, the variables areas follows:
26.4. LearningDAGstructures 919
Figure 26.7 The two most probable DAGs learned from the Sewell-Shah data. Source: (Heckerman et al.
1997) . Used with kind permission of David Heckerman
•SexMale or female
•SESSocio economic status: low, lower middle, upper middle or high.
•IQIntelligence quotient: discretized into low, lower middle, upper middle or high.
•PEParental encouragment: low or high
•CPCollege plans: yes or no.
These variables were measured for 10,318 Wisconsin high school seniors. There are 2×4×
4×2×= 128possible joint conﬁgurations.
Heckerman et al. computed the exact posterior over all 29,281 possible 5 node DAGs, except
for ones in which SEX and/or SES have parents, and/or CP have children. (The prior probability
of these graphs was set to 0, based on domain knowledge.) They used the BDeu score with
α=5, although they said that the results were robust to any αin the range 3 to 40. The top
two graphs are shown in Figure 26.7. We see that the most probable one has approximately all
of the probability mass, so the posterior is extremely peaked.
It is tempting to interpret this graph in terms of causality (see Section 26.6). In particular,
it seems that socio-economic status, IQ and parental encouragment all causally inﬂuence the
decision about whether to go to college, which makes sense. Also, sex inﬂuences college plans
only indirectly through parental encouragement, which also makes sense. However, the direct
link from socio economic status to IQ seems surprising; this may be due to a hidden common
cause. In Section 26.5.1.4 we will re-examine this dataset allowing for the presence of hidden
variables.
26.4.2.6 The K2 algorithm
Suppose we know a total ordering of the nodes. Then we can compute the distribution over
parents for each node independently, without the risk of introducing any directed cycles: we
920 Chapter26. Graphicalmodelstructurelearning
simply enumerate over all possible subsets of ancestors and compute their marginal likelihoods.1
If we just return the best set of parents for each node, we get the the K2 algorithm (Cooper
and Herskovits 1992).
26.4.2.7 Handling non-tabular CPDs
If all CPDs are linear Gaussian, we can replace the Dirichlet-multinomial model with the normal-
gamma model, and thus derive a different exact expression for the marginal likelihood. See(Geiger and Heckerman 1994) for the details. In fact, we can easily combine discrete nodesand Gaussian nodes, as long as the discrete nodes always have discrete parents; this is called aconditional Gaussian DAG. Again, we can compute the marginal likelihood in closed form. See
(Bottcher and Dethlefsen 2003) for the details.
In the general case (i.e., everything except Gaussians and CPTs), we need to approximate the
marginal likelihood. The simplest approach is to use the BIC approximation, which has the form
/summationdisplay
tlogp(Dt|ˆθt)−KtCt
2logN (26.31)
26.4.3 Scaling up to larger graphs
The main challenge in computing the posterior over DAGs is that there are so many possiblegraphs. More precisely, (Robinson 1973) showed that the number of DAGs on Dnodes satisﬁes
the following recurrence:
f(D)=D/summationdisplay
i=1(−1)i+1/parenleftbiggD
i/parenrightbigg
2i(D−i)f(D−i) (26.32)
forD>2. The base case is f(1) = 1. Solving this recurrence yields the following sequence:
1, 3, 25, 543, 29281, 3781503, etc.2In view of the enormous size of the hypothesis space, we are
generally forced to use approximate methods, some of which we review below.
26.4.3.1 Approximating the mode of the posterior
We can use dynamic programming to ﬁnd the globally optimal MAP DAG (up to Markov equiv-alence) (Koivisto and Sood 2004; Silander and Myllmaki 2006). Unfortunately this method takesV2
Vtime and space, making it intractable beyond about 16 nodes. Indeed, the general problem
of ﬁnding the globally optimal MAP DAG is provably NP-complete (Chickering 1996),
Consequently, we must settle for ﬁnding a locally optimal MAP DAG. The most common
method is greedy hill climbing: at each step, the algorithm proposes small changes to thecurrent graph, such as adding, deleting or reversing a single edge; it then moves to the neigh-boring graph which most increases the posterior. The method stops when it reaches a lo-cal maximum. It is important that the method only proposes local changes to the graph,
1. We can make this method more efficient by using /lscript1-regularization to select the parents (Schmidt et al. 2007). In this
case, we need to approximate the marginal likelhood as we discuss below.
2. A longer list of values can be found at http://www .research .att.com/~njas/sequences/A003024 . Interest-
ingly, the number of DAGs is equal to the number of (0,1) matrices all of whose eigenvalues are positive real numbers(McKay et al. 2004).
26.4. LearningDAGstructures 921
aidsbaseball
fans leaguebible bmw
cancer
healthcar
dealer
driverengine
honda
insuranceoil
card
graphicscase
children
foodwaterchristian
jesus religion
computer
sciencecourse
dataproblemdisease
medicinepatientsdisk
dos
files
macmemoryprogramspace
displaydoctor
helpversion
windowsdrive
formatscsi
earth
imagemarsmoon
email
phonepowerevidence
fact msg
studiesgod
ftp
vitaminnumbergames
hockey
nhl puckseason
team
winwongovernment
jews law
presidentrights
wargun
hit human
israel
research statelaunch
lunar
pcsoftware
servervideomission
orbit
solarnasa
satelliteshuttle
playersquestion
universitysystemtechnology
world
Figure 26.8 A locally optimal DAG learned from the 20-newsgroup data. From Figure 4.10 of (Schmidt
2010). Used with kind permission of Mark Schmidt.
since this enables the change in marginal likelihood (and hence the posterior) to be computed
in constant time (assuming we cache the sufficient statistics). This is because all but oneor two of the terms in Equation 26.25 will cancel out when computing the log Bayes factorδ(G→G
/prime)=l o gp(G/prime|D)−logp(G|D).
We can initialize the search from the best tree, which can be found using exact methods
discussed in Section 26.3. For speed, we can restrict the search so it only adds edges which arepart of the Markov blankets estimated from a dependency network (Schmidt 2010). Figure 26.8gives an example of a DAG learned in this way from the 20-newsgroup data.
We can use techniques such as multiple random restarts to increase the chance of ﬁnding a
good local maximum. We can also use more sophisticated local search methods, such as geneticalgorithms or simulated annealing, for structure learning.
26.4.3.2 Approximating other functions of the posterior
If our goal is knowledge discovery, the MAP DAG can be misleading, for reasons we discussed inSection 5.2.1. A better approach is to compute the probability that each edge is present, p(G
st=
1|D), of the probability there is a path from stot. We can do this exactly using dynamic
programming (Koivisto 2006; Parviainen and Koivisto 2011). Unfortunately these methods takeV2
Vtime in the general case, making them intractable for graphs with more than about 16
922 Chapter26. Graphicalmodelstructurelearning
nodes.
An approximate method is to sample DAGs from the posterior, and then to compute the
fraction of times there is an s→tedge or path for each (s,t)pair. The standard way to draw
samples is to use the Metropolis Hastings algorithm (Section 24.3), where we use the same local
proposal as we did in greedy search (Madigan and Raftery 1994).
A faster-mixing method is to use a collapsed MH sampler, as suggested in (Friedman and
Koller 2003). This exploits the fact that, if a total ordering of the nodes is known, we canselect the parents for each node independently, without worrying about cycles, as discussed inSection 26.4.2.6. By summing over all possible choice of parents, we can marginalize out thispart of the problem, and just sample total orders. (Ellis and Wong 2008) also use order-space(collapsed) MCMC, but this time with a parallel tempering MCMC algorithm.
26.5 Learning DAG structure with latent variables
Sometimes the complete data assumption does not hold, either because we have missing data,and/ or because we have hidden variables. In this case, the marginal likelihood is given by
p(D|G)=/integraldisplay/summationdisplay
hp(D,h|θ,G)p(θ|G)dθ=/summationdisplay
h/integraldisplay
p(D,h|θ,G)p(θ|G)dθ (26.33)
wherehrepresents the hidden or missing data.
In general this is intractable to compute. For example, consider a mixture model, where
we don’t observe the cluster label. In this case, there are KNpossible completions of the
data (assuming we have Kclusters); we can evaluate the inner integral for each one of these
assignments to h, but we cannot afford to evaluate all of the integrals. (Of course, most of these
integrals will correspond to hypotheses with little posterior support, such as assigning singledata points to isolated clusters, but we don’t know ahead of time the relative weight of theseassignments.)
In this section, we discuss some ways for learning DAG structure when we have latent variables
and/or missing data.
26.5.1 Approximating the marginal likelihood when we have missing data
The simplest approach is to use standard structure learning methods for fully visible DAGs,but to approximate the marginal likelihood. In Section 24.7, we discussed some Monte Carlomethods for approximating the marginal likelihood. However, these are usually too slow to useinside of a search over models. Below we mention some faster deterministic approximations.
26.5.1.1 BIC approximation
A simple approximation is to use the BIC score, which is given by
BIC(G)/defineslogp(D|ˆθ,G)−logN
2dim(G) (26.34)
wheredim(G)is the number of degrees of freedom in the model and ˆθis the MAP or ML
estimate. However, the BIC score often severely underestimates the true marginal likelihood(Chickering and Heckerman 1997), resulting in it selecting overly simple models.
26.5. LearningDAGstructurewithlatentvariables 923
26.5.1.2 Cheeseman-Stutz approximation
We now present a better method known as the Cheeseman-Stutz approximation (CS) (Cheese-
man and Stutz 1996). We ﬁrst compute a MAP estimate of the parameters ˆθ(e.g., using EM).
Denote the expected sufficient statistics of the data by D=D(ˆθ); in the case of discrete
variables, we just “ﬁll in” the hidden variables with their expectation. We then use the exact
marginal likelihood equation on this ﬁlled-in data:
p(D|G)≈p(D|G)=/integraldisplay
p(D|θ,G)p(θ|G)dθ (26.35)
However, comparing this to Equation 26.33, we can see that the value will be exponentiallysmaller, since it does not sum over all values of h. To correct for this, we ﬁrst write
logp(D|G)=l o g p(
D|G)+log p(D|G)−logp(D|G) (26.36)
and then we apply a BIC approximation to the last two terms:
logp(D|G)−logp(D|G)≈/bracketleftbigg
logp(D|ˆθ,G)−N
2dim(ˆθ)/bracketrightbigg
(26.37)
−/bracketleftbigg
logp(D|ˆθ,G)−N
2dim(ˆθ)/bracketrightbigg
(26.38)
=l o gp(D|ˆθ,G)−logp(D|ˆθ,G) (26.39)
Putting it altogether we get
logp(D|G)≈logp(D|G)+log p(D|ˆθ,G)−logp(D|ˆθ,G) (26.40)
The ﬁrst term p(D|G)can be computed by plugging in the ﬁlled-in data into the exact marginal
likelihood. The second term p(D|ˆθ,G), which involves an exponential sum (thus matching the
“dimensionality” of the left hand side) can be computed using an inference algorithm. The ﬁnaltermp(
D|ˆθ,G)can be computed by plugging in the ﬁlled-in data into the regular likelihood.
26.5.1.3 Variational Bayes EM
An even more accurate approach is to use the variational Bayes EM algorithm. Recall fromSection 21.6 that the key idea is to make the following factorization assumption:
p(θ,z
1:N|D)≈q(θ)q(z)=q(θ)/productdisplay
iq(zi) (26.41)
whereziare the hidden variables in case i. In the E step, we update the q(zi), and in the
M step, we update q(θ). The corresponding variational free energy provides a lower bound on
the log marginal likelihood. In (Beal and Ghahramani 2006), it is shown that this bound is amuch better approximation to the true log marginal likelihood (as estimated by a slow annealedimportance sampling procedure) than either BIC or CS. In fact, one can prove that the variationalbound will always be more accurate than CS (which in turn is always more accurate than BIC).
924 Chapter26. Graphicalmodelstructurelearning
p(male) = 0.48
SESH
SEX
PE
IQ
CPp(H= 0) = 0.63
p(H= 1) = 0.37
H
0
1
0
1PE
lowlow
highhighp(IQ=high|PE,H)
0.098
0.220.210.49H
01p(SES=high| H)
0.088
0.51
SEX
male
female
male
femaleSES
low
low
high
highp(PE=high|SES,SEX)
0.32
0.166
0.860.81SES
lowlowlowlow
highhighhigh
highPE
low
high
low
high
low
high
low
highIQ
low
low
highhigh
lowlow
high
highp(CP=yes|SES,IQ,PE)
0.011
0.1700.124
0.53
0.093
0.390.24
0.84
Figure 26.9 The most probable DAG with a single binary hidden variable learned from the Sewell-Shah
data. MAP estimates of the CPT entries are shown for some of the nodes. Source: (Heckerman et al. 1997).
Used with kind permission of David Heckerman.
26.5.1.4 Example: college plans revisited
Let us revisit the college plans dataset from Section 26.4.2.5. Recall that if we ignore the
possibility of hidden variables there was a direct link from socio economic status to IQ in theMAP DAG. Heckerman et al. decided to see what would happen if they introduced a hiddenvariableH, which they made a parent of both SES and IQ, representing a hidden common cause.
They also considered a variant in which Hpoints to SES, IQ and PE. For both such cases, they
considered dropping none, one, or both of the SES-PE and PE-IQ edges. They varied the numberof states for the hidden node from 2 to 6. Thus they computed the approximate posterior over8×5=4 0different models, using the CS approximation.
The most probable model which they found is shown in Figure 26.9. This is 2·10
10times
more likely than the best model containing no hidden variable. It is also 5·109times more
likely than the second most probable model with a hidden variable. So again the posterior isvery peaked.
These results suggests that there is indeed a hidden common cause underlying both the
socio-economic status of the parents and the IQ of the children. By examining the CPT entries,we see that both SES and IQ are more likely to be high when Htakes on the value 1. They
interpret this to mean that the hidden variable represents “parent quality” (possibly a geneticfactor). Note, however, that the arc between H and SES can be reversed without changing the v-structures in the graph, and thus without affecting the likelihood; this underscores the difficultyin interpreting hidden variables.
Interestingly, the hidden variable model has the same conditional independence assumptions
amongst the visible variables as the most probable visible variable model. So it is not pos-sible to distinguish between these hypotheses by merely looking at the empirical conditionalindependencies in the data (which is the basis of the constraint-based approach to structure
learning (Pearl and Verma 1991; Spirtes et al. 2000)). Instead, by adopting a Bayesian approach,which takes parsimony into account (and not just conditional independence), we can discover
26.5. LearningDAGstructurewithlatentvariables 925
the possible existence of hidden factors. This is the basis of much of scientiﬁc and everday
human reasoning (see e.g. (Griffiths and Tenenbaum 2009) for a discussion).
26.5.2 Structural EM
One way to perform structural inference in the presence of missing data is to use a standardsearch procedure (deterministic or stochastic), and to use the methods from Section 26.5.1 toestimate the marginal likelihood. However, this approach is very efficient, because the marginallikelihood does not decompose when we have missing data, and nor do its approximations.For example, if we use the CS approximation or the VBEM approximation, we have to performinference in every neighboring model, just to evaluate the quality of a single move!
(Friedman 1997b; Thiesson et al. 1998) presents a much more efficient approach called the
structural EM algorithm. The basic idea is this: instead of ﬁtting each candidate neighboring
graph and then ﬁlling in its data, ﬁll in the data once, and use this ﬁlled-in data to evaluatethe score of all the neighbors. Although this might be a bad approximation to the marginallikelihood, it can be a good enough approximation of the difference in marginal likelihoodsbetween different models, which is all we need in order to pick the best neighbor.
More precisely, deﬁne
D(G0,ˆθ0)to be the data ﬁlled in using model G0with MAP parameters
ˆθ0. Now deﬁne a modiﬁed BIC score as follows:
scoreBIC(G,D)/defineslogp(D|ˆθ,G)−logN
2dim(G)+log p(G)+log p(ˆθ|G) (26.42)
where we have included the log prior for the graph and parameters. One can show (Friedman1997b) that if we pick a graph Gwhich increases the BIC score relative to G
0on the expected
data, it will also increase the score on the actual data, i.e.,
scoreBIC(G,D(G0,ˆθ0))−scoreBIC(G0,D(G0,ˆθ0)≤scoreBIC(G,D)−scoreBIC(G0,D)(26.43)
To convert this into an algorithm, we proceed as follows. First we initialize with some graph
G0and some set of parameters θ0. Then we ﬁll-in the data using the current parameters — in
practice, this means when we ask for the expected counts for any particular family, we perform
inference using our current model. (If we know which counts we will need, we can precomputeall of them, which is much faster.) We then evaluate the BIC score of all of our neighbors usingthe ﬁlled-in data, and we pick the best neighbor. We then reﬁt the model parameters, ﬁll-in thedata again, and repeat. For increased speed, we may choose to only reﬁt the model every fewsteps, since small changes to the structure hopefully won’t invalidate the parameter estimatesand the ﬁlled-in data too much.
One interesting application is to learn a phylogenetic tree structure. Here the observed leaves
are the DNA or protein sequences of currently alive species, and the goal is to infer the topologyof the tree and the values of the missing internal nodes. There are many classical algorithms forthis task (see e.g., (Durbin et al. 1998)), but one that uses SEM is discussed in (Friedman et al.2002).
Another interesting application of this method is to learn sparse mixture models (Barash and
Friedman 2002). The idea is that we have one hidden variable Cspecifying the cluster, and we
have to choose whether to add edges C→X
tfor each possible feature Xt. Thus some features
will be dependent on the cluster id, and some will be independent. (See also (Law et al. 2004)
926 Chapter26. Graphicalmodelstructurelearning



 
 


 
 



 

  	 

 

	
	 	


"    

 
 !   ! ! ! !! " "
Figure 26.10 Part of a hierarchical latent tree learned from the 20-newsgroup data. From Figure 2 of
(Harmeling and Williams 2011). Used with kind permission of Stefan Harmeling.
for a different way to perform this task, using regular EM and a set of bits, one per feature, that
are free to change across data cases.)
26.5.3 Discovering hidden variables
In Section 26.5.1.4, we introduced a hidden variable “by hand”, and then ﬁgured out the localtopology by ﬁtting a series of different models and computing the one with the best marginallikelihood. How can we automate this process?
Figure 11.1 provides one useful intuition: if there is a hidden variable in the “true model”,
then its children are likely to be densely connected. This suggest the following heuristic (Elidanet al. 2000): perform structure learning in the visible domain, and then look for structural
signatures, such as sets of densely connected nodes (near-cliques); introduce a hidden variableand connect it to all nodes in this near-clique; and then let structural EM sort out the details.Unfortunately, this technique does not work too well, since structure learning algorithms arebiased against ﬁtting models with densely connected cliques.
Another useful intuition comes from clustering. In a ﬂat mixture model, also called a latent
class model, the discrete latent variable provides a compressed representation of its children.Thus we want to create hidden variables with high mutual information with their children.
One way to do this is to create a tree-structured hierarchy of latent variables, each of which
only has to explain a small set of children. (Zhang 2004) calls this a hierarchical latent class
model. They propose a greedy local search algorithm to learn such structures, based on addingor deleting hidden nodes, adding or deleting edges, etc. (Note that learning the optimal latent
26.5. LearningDAGstructurewithlatentvariables 927
programearth
launchlunar
marsmission moon
nasaorbit satellite
shuttlesolar
spacetechnology
h1h17
card
computerdatadisk displaydos
drivedriveremail
files formatftp
graphics
helpimage
macmemorynumber
pcphone
problemresearch sciencescsiserver software
system
universityversion
videowindowsh9
h10h11h12
h16h18
h19
h22
h23 h24h25
h26casechildren
course evidence factgovernment
gunhuman israel lawpower president
questionrights statewar
world
h2h3
h4 h20
baseball fans games
hithockey league nhl playerspuck season team win
wonh5
h6 h7aids
cancer disease doctorfoodhealth
medicine msg
patientsstudies
vitaminwater h13h21
bmwcar
dealer
engine hondainsurance
oilh15bible
christian jesusreligion
h8h14
godjews
Figure 26.11 A partially latent tree learned from the 20-newsgroup data. Note that some words can
have multiple meanings, and get connected to different latent variables, representing different “topics”. For
example, the word “win” can refer to a sports context (represented by h5) or the Microsoft Windows context(represented by h25). From Figure 12 of (Choi et al. 2011). Used with kind permission of Jin Choi.
tree is NP-hard (Roch 2006).)
Recently (Harmeling and Williams 2011) proposed a faster greedy algorithm for learning such
models based on agglomerative hierarchical clustering. Rather than go into details, we just give
an example of what this system can learn. Figure 26.10 shows part of a latent forest learnedfrom the 20-newsgroup data. The algorithm imposes the constraint that each latent node hasexactly two children, for speed reasons. Nevertheless, we see interpretable clusters arising. Forexample, Figure 26.10 shows separate clusters concerning medicine, sports and religion. Thisprovides an alternative to LDA and other topic models (Section 4.2.2), with the added advantagethat inference in latent trees is exact and takes time linear in the number of nodes.
An alternative approach is proposed in (Choi et al. 2011), in which the observed data is not
constrained to be at the leaves. This method starts with the Chow-Liu tree on the observeddata, and then adds hidden variables to capture higher-order dependencies between internalnodes. This results in much more compact models, as shown in Figure 26.11. This model alsohas better predictive accuracy than other approaches, such as mixture models, or trees whereall the observed data is forced to be at the leaves. Interestingly, one can show that this methodcan recover the exact latent tree structure, providing the data is generated from a tree. See
928 Chapter26. Graphicalmodelstructurelearning
Figure 26.12 Google’s rephil model. Leaves represent presence or absence of words. Internal nodes
represent clusters of co-occuring words, or “concepts”. All nodes are binary, and all CPDs are noisy-OR.
The model contains 12 million word nodes, 1 million latent cluster nodes, and 350 million edges. Used
with kind permission of Brian Milch.
(Choi et al. 2011) for details. Note, however, that this approach, unlike (Zhang 2004; Harmeling
and Williams 2011), requires that the cardinality of all the variables, hidden and observed, be
the same. Furthermore, if the observed variables are Gaussian, the hidden variables must be
Gaussian also.
26.5.4 Case study: Google’s Rephil
In this section, we describe a huge DGM called Rephil, which was automatically learned from
data.3The model is widely used inside Google for various purposes, including their famous
AdSense system.4
The model structure is shown in Figure 26.12. The leaves are binary nodes, and represent
the presence or absence of words or compounds (such as “New York City”) in a text document
or query. The latent variables are also binary, and represent clusters of co-occuring words. All
CPDs are noisy-OR, since some leaf nodes (representing words) can have many parents. This
means each edge can be augmented with a hidden variable specifying if the link was activated
or not; if the link is not active, then the parent cannot turn the child on. (A very similar model
was proposed independently in (Singliar and Hauskrecht 2006).)
Parameter learning is based on EM, where the hidden activation status of each edge needs
to be inferred (Meek and Heckerman 1997). Structure learning is based on the old neuroscience
3. The original system, called “Phil”, was developed by Georges Harik and Noam Shazeer,. It has been published as US
Patent #8024372, “Method and apparatus for learning a probabilistic generative model for text”, ﬁled in 2004. Rephil is
a more probabilistically sound version of the method, developed by Uri Lerner et al. The summary below is based on
notes by Brian Milch (who also works at Google).
4. AdSense is Google’s system for matching web pages with content-appropriate ads in an automatic way, by extracting
semantic keywords from web pages. These keywords play a role analogous to the words that users type in when
searching; this latter form of information is used by Google’s AdWords system. The details are secret, but (Levy 2011)
gives an overview.
26.5. LearningDAGstructurewithlatentvariables 929
idea that “nodes that ﬁre together should wire together”. To implement this, we run inference
and check for cluster-word and cluster-cluster pairs that frequently turn on together. We thenadd an edge from parent to child if the link can signiﬁcantly increase the probability of thechild. Links that are not activated very often are pruned out. We initialize with one cluster per“document” (corresponding to a set of semantically related phrases). We then merge clusters A
andBifAexplainsB’s top words and vice versa. We can also discard clusters that are used
too rarely.
The model was trained on about 100 billion text snippets or search queries; this takes several
weeks, even on a parallel distributed computing architecture. The resulting model contains 12million word nodes and about 1 million latent cluster nodes. There are about 350 million linksin the model, including many cluster-cluster dependencies. The longest path in the graph haslength 555, so the model is quite deep.
Exact inference in this model is obviously infeasible. However note that most leaves will be
off, since most words do not occur in a given query; such leaves can be analytically removed, asshown in Exercise 10.7. We an also prune out unlikely hidden nodes by following the strongestlinks from the words that are on up to their parents to get a candidate set of concepts. Wethen perform iterative conditional modes to ﬁnd a good set of local maxima. At each step ofICM, each node sets its value to its most probable state given the values of its neighbors in itsMarkov blanket. This continues until it reaches a local maximum. We can repeat this processa few times from random starting conﬁgurations. At Google, this can be made to run in 15milliseconds!
26.5.5 Structural equation models *
Astructural equation model (Bollen 1989) is a special kind of directed mixed graph (Sec-
tion 19.4.4.1), possibly cyclic, in which all CPDs are linear Gaussian, and in which all bidirectededges represent correlated Gaussian noise. Such models are also called path diagrams. SEMs
are widely used, especially in economics and social science. It is common to interpret the edgedirections in terms of causality, where directed cycles are interpreted is in terms of feedback
loops(see e.g., (Pearl 2000, Ch.5)). However, the model is really just a way of specifying a joint
Gaussian, as we show below. There is nothing inherently “causal” about it at all. (We discusscausality in Section 26.6.)
We can deﬁne an SEM as a series of full conditionals as follows:
x
i=μi+/summationdisplay
j/negationslash=iwijxj+/epsilon1i (26.44)
where/epsilon1∼N(0,Ψ). We can rewrite the model in matrix form as follows:
x=Wx+μ+/epsilon1⇒x=(I−W)−1(/epsilon1+μ) (26.45)
Hence the joint distribution is given by p(x)=N(μ,Σ)where
Σ=(I−W)−1Ψ(I−W)−T(26.46)
We draw an arc Xi←Xjif|wij|>0.I fWis lower triangular then the graph is acyclic. If,
in addition, Ψis diagonal, then the model is equivalent to a Gaussian DGM, as discussed in
Section 10.2.5; such models are called recursive.I f Ψis not diagonal, then we draw a bidirected
930 Chapter26. Graphicalmodelstructurelearning
Y3Z3Z1 Z1Y1 Y2
Figure 26.13 A cyclic directed mixed graphical model (non-recursive SEM). Note the Z1→Z2→Z3→
Z1feedback loop.
arcXi↔Xjfor each non-zero off-diagonal term. Such edges represent correlation, possibly
due to a hidden common cause.
When using structural equation models, it is common to partition the variables into latent
variables, Zt, and observed or manifest variables Yt. For example, Figure 26.13 illustrates the
following model:
⎛
⎜⎜⎜⎜⎜⎜⎝X
1
X2
X3
X4
X5
X6⎞
⎟⎟⎟⎟⎟⎟⎠=⎛
⎜⎜⎜⎜⎜⎜⎝Z
1
Z2
Z3
Y1
Y2
Y3⎞
⎟⎟⎟⎟⎟⎟⎠=⎛
⎜⎜⎜⎜⎜⎜⎝00 w
13000
w210 0 000
0w320 000
w410 0 000
0w520 000
00 w63000⎞
⎟⎟⎟⎟⎟⎟⎠⎛
⎜⎜⎜⎜⎜⎜⎝Z
1
Z2
Z3
Y1
Y2
Y3⎞
⎟⎟⎟⎟⎟⎟⎠+⎛
⎜⎜⎜⎜⎜⎜⎝/epsilon1
1
/epsilon12
/epsilon13
/epsilon14
/epsilon15
/epsilon16⎞
⎟⎟⎟⎟⎟⎟⎠, (26.47)
where
Ψ=⎛
⎜⎜⎜⎜⎜⎜⎝Ψ
1100000
0Ψ 220000
00 Ψ 33000
000 Ψ 44Ψ450
000 Ψ 54Ψ550
00000 Ψ 66⎞
⎟⎟⎟⎟⎟⎟⎠(26.48)
The presence of a feedback loop Z
1→Z2→Z3is evident from the fact that Wis not lower
triangular. Also the presence of confounding between Y1andY2is evident in the off-diagonal
terms inΨ.
Often we assume there are multiple observations for each latent variable. To ensure identiﬁa-
bility, we can set the mean of the latent variables Ztto 0, and we can set the regression weights
ofZt→Ytto 1. This essentially deﬁnes the scale of each latent variable. (In addition to the
Z’s, there are the extra hidden variables implied by the presence of the bidirected edges.)
The standard practice in the SEM community, as exempliﬁed by the popular commercial
software package called LISREL(available from http://www .ssicentral .com/lisrel/ ), is to
26.6. LearningcausalDAGs 931
build the structure by hand, to estimate the parameters by maximum likelihood, and then to
test if any of the regression weights are signiﬁcantly different from 0, using standard frequentistmethods. However, one can also use Bayesian inference for the parameters (see e.g., (Dunsonet al. 2005)). Structure learning in SEMs is rare, but since recursive SEMs are equivalent toGaussian DAGs, many of the techniques we have been discussing in this section can be applied.
SEMs are closely related to factor analysis (FA) models (Chapter 12). The basic difference is
that in an FA model, the latent Gaussian has a low-rank covariance matrix, and the observednoise has a diagonal covariance (hence no bidirected edges). In an SEM, the covariance of thelatent Gaussian has a sparse Cholesky decomposition (at least if Wis acyclic), and the observed
noise might have a full covariance matrix.
Note that SEMs can be extended in many ways. For example, we can add covariates/ input
variables (possibly noisily observed), we can make some of the observations be discrete (e.g., byusing probit links), and so on.
26.6 Learning causal DAGs
Causal models are models which can predict the effects of interventions to, or manipulations
of, a system. For example, an electronic circuit diagram implicitly provides a compact encodingof what will happen if one removes any given component, or cuts any wire. A causal medicalmodel might predict that if I continue to smoke, I am likely to get lung cancer (and hence ifI cease smoking, I am less likely to get lung cancer). Causal claims are inherently stronger,yet more useful, than purely associative claims, such as “people who smoke often have lung
cancer”.
Causal models are often represented by DAGs (Pearl 2000), although this is somewhat contro-
versial (Dawid 2010). We explain this causal interpretation of DAGs below. We then show howto use a DAG to do causal reasoning. Finally, we brieﬂy discuss how to learn the structure ofcausal DAGs. A more detailed description of this topic can be found in (Pearl 2000) and (Kollerand Friedman 2009, Ch.21).
26.6.1 Causal interpretation of DAGs
In this section, we deﬁne a directed edge A→Bin a DAG to mean that “A directly causes B”,
so if we manipulate A, thenBwill change. This is known as the causal Markov assumption.
(Of course, we have not deﬁned the word “causes”, and we cannot do that by appealing to aDAG, lest we end up with a cyclic deﬁnition; see (Dawid 2010) for further disussion of this point.)
We will also assume that all relevant variables are included in the model, i.e., there are no
unknown confounders, reﬂecting hidden common causes. This is called the causal sufficiency
assumption. (If there are known to be confounders, they should be added to the model, althoughone can sometimes use mixed directed graphs (Section 26.5.5) as a way to avoid having to modelconfounders explicitly.)
Assuming we are willing to make the causal Markov and causal sufficiency assumptions, we
can use DAGs to answer causal questions. The key abstraction is that of a perfect intervention;
this represents the act of setting a variable to some known value, say setting X
itoxi. A real
world example of such a perfect intervention is a gene knockout experiment, in which a geneis “silenced”. We need some notational convention to distinguish this from observing that X
i
932 Chapter26. Graphicalmodelstructurelearning
X XGGdo(X=x)
Figure 26.14 Surgical intervention on X. Based on (Pe’er 2005).
happens to have value xi. We use Pearl’s do calculus notation (as in the verb “to do”) and write
do(Xi=xi)to denote the event that we set Xitoxi. A causal model can be used to make
inferences of the form p(x|do(Xi=xi)), which is different from making inferences of the form
p(x|Xi=xi).
To understand the difference between conditioning on interventions and conditioning on
observations (i.e., the difference between doing and seeing), consider a 2 node DGM S→Y,i n
whichS=1if you smoke and S=0otherwise, and Y=1if you have yellow-stained ﬁngers,
andY=0otherwise. If I observe you have yellow ﬁngers, I am licensed to infer that you are
probably a smoker (since nicotine causes yellow stains):
p(S=1|Y=1 )>p (S=1 ) (26.49)
However, if I intervene and paintyour ﬁngers yellow, I am no longer licensed to infer this, since
I have disrupted the normal causal mechanism. Thus
p(S=1|do(Y=1 ) )=p( S=1 ) (26.50)
One way to model perfect interventions is to use graph surgery: represent the joint distri-
bution by a DGM, and then cut the arcs coming into any nodes that were set by intervention.
See Figure 26.14 for an example. This prevents any information ﬂow from the nodes that wereintervened on from being sent back up to their parents. Having perform this surgery, we canthen perform probabilistic inference in the resulting “mutilated” graph in the usual way to reasonabout the effects of interventions. We state this formally as follows.
Theorem26.6.1 (Manipulationtheorem(Pearl2000;Spirtesetal.2000)). . Tocompute p(X
i|do(Xj))
forsetsofnodes i,j,wecanperformsurgicalinterventiononthe Xjnodesandthenusestandard
probabilisticinferenceinthemutilatedgraph.
We can generalize the notion of a perfect intervention by adding interventions as explicit
action nodes to the graph. The result is like an inﬂuence diagram, except there are no utility
nodes (Lauritzen 2000; Dawid 2002). This has been called the augmented DAG (Pearl 2000). We
26.6. LearningcausalDAGs 933
xy
Figure 26.15 Illustration of Simpson’s paradox. Figure generated by simpsonsParadoxGraph .
can then deﬁne the CPD p(Xi|do(Xi))to be anything we want. We can also allow an action to
affect multiple nodes. This is called a fat hand intervention, a reference to someone trying to
change a single component of some system (e.g., an electronic circuit), but accidently touching
multiple components and thereby causing various side effects (see (Eaton and Murphy 2007) fora way to model this using augmented DAGs).
26.6.2 Using causal DAGs to resolve Simpson’s paradox
In this section, we assume we know the causal DAG. We can then do causal reasoning byapplying d-separation to the mutilated graph. In this section, we give an example of this, andshow how causal reasoning can help resolve a famous paradox, known as Simpon’s paradox.
Simpson’s paradox says that any statistical relationship between two variables can be reversed
by including additional factors in the analysis. For example, suppose some cause C(say, taking
a drug) makes some effect E(say getting better) more likely
P(E|C)>P(E|¬C)
and yet, when we condition on the gender of the patient, we ﬁnd that taking the drug makesthe effect less likely in both females (F ) and males (¬ F):
P(E|C,F)<P(E|¬C,F)
P(E|C,¬F)<P(E|¬C,¬F)
This seems impossible, but by the rules of probability, this is perfectly possible, because theevent space where we condition on (¬C,F)or(¬C,¬F)can be completely different to the
event space when we just condition on ¬C. The table of numbers below shows a concrete
example (from (Pearl 2000, p175)):
Combined Male Female
E¬E Total Rate E¬ETotal Rate E¬ETotal Rate
C20 20 40 50% 18 12 30 60% 2 8 10 20%
¬C16 24 40 40% 7 3 10 70% 9 21 30 30%
Total36 44 80 25 15 40 11 29 40
934 Chapter26. Graphicalmodelstructurelearning
From this table of numbers, we see that
p(E|C)=2 0/40 = 0.5 >p(E|¬C)=1 6/40 = 0.4 (26.51)
p(E|C,F)=2/10 = 0.2 <p(E|¬C,F)=9/30 = 0.3 (26.52)
p(E|C,¬F)=1 8/30 = 0.6 <p(E|¬,¬F)=7/10 = 0.7 (26.53)
A visual representation of the paradox is given in in Figure 26.15. The line which goes up and
to the right shows that the effect (y -axis) increases as the cause (x-axis) increases. However, the
dots represent the data for females, and the crosses represent the data for males. Within eachsubgroup, we see that the effect decreases as we increase the cause.
It is clear that the effect is real, but it is still very counter-intuitive. The reason the paradox
arises is that we are interpreting the statements causally, but we are not using proper causalreasoning when performing our calculations. The statement that the drug Ccauses recovery E
is
P(E|do(C))>P(E|do(¬C)) (26.54)
whereas the data merely tell us
P(E|C)>P(E|¬C) (26.55)
Thisis
not a contradiction. Observing Cis positive evidence for E, since more males than
females take the drug, and the male recovery rate is higher (regardless of the drug). ThusEquation 26.55 does not imply Equation 26.54.
Nevertheless, we are left with a practical question: should we use the drug or not? It seems
like if we don’t know the patient’s gender, we should use the drug, but as soon as we discoverif they are male or female, we should stop using it. Obviously this conclusion is ridiculous.
To answer the question, we need to make our assumptions more explicit. Suppose reality can
be modeled by the causal DAG in Figure 26.16(a). To compute the causal effect of ConE,w e
need toadjust for (i.e., condition on) the confounding variable F. This is necessary because
there is a backdoor path fromCtoEviaF, so we need to check the C→Erelationship for
each value of Fseparately, to make sure the relationship between CandEis not affected by
any value of F.
Suppose that for each value of F, taking the drug is harmful, that is,
p(E|do(C),F)<p(E|do(¬C),F) (26.56)
p(E|do(C),¬F)<p(E|do(¬C),¬F) (26.57)
Thenw
e can show that taking the drug is harmful overall:
p(E|do(C))<p(E|do(¬C)) (26.58)
The proof is as follows (Pearl 2000, p181). First, from our assumptions in Figure 26.16(a), we seethat drugs have no effect on gender
p(F|do(C)) =p(F|do(¬C)) =p(F) (26.59)
Now using the law of total probability,
p(E|do(C)) =p(E|do(C),F)p(F|do(C))+p(E|do(C),¬F)p(¬F|do(C))(26.60)
=p(E|do(C),F)p(F)+p(E|do(C),¬F)p(¬F) (26.61)
26.6. LearningcausalDAGs 935
C F
ETreatment Gender
Recovery
(a)C F
ETreatment Blood Pressure
Recovery
(b)
Figure26.16 Twodifferent modelsuses toillustrate Simpson’sparadox. (a) Fisgender andis aconfounder
for C and E. (b) F is blood pressure and is caused by C.
Similarly,
p(E|do(¬C)) =p(E|do(¬C),F)p(F)+p(E|do(¬C),¬F)p(¬F) (26.62)
Since every term in Equation 26.61 is less than the corresponding term in Equation 26.62, we
conclude that
p(E|do(C))<p(E|do(¬C)) (26.63)
So if the model in Figure 26.16(a) is correct, we should not administer the drug, since it reducesthe probability of the effect.
Now consider a different version of this example. Suppose we keep the data the same but
interpretFas something that is affected by C, such as blood pressure. See Figure 26.16(b). In
this case, we can no longer assume
p(F|do(C)) =p(F|do(¬C)) =p(F) (26.64)
and the above proof breaks down. So p(E|do(C))−p(E|do(¬C))may
 be positive or negaitve.
In the true model is Figure 26.16(b), then we should not condition on Fwhen assessing the
effect of ConE, since there is no backdoor path in this case, because of the v-structure at
F. That is, conditioning on Fmight block one of the causal pathways. In other words, by
comparing patients with the same post-treatment blood pressure (value of F), we may mask the
effect of one of the two pathways by which the drug operates to bring about recovery.
Thus we see that different causal assumptions lead to different causal conclusions, and hence
different courses of action. This raises the question on whether we can learn the causal modelfrom data. We discuss this issue below.
26.6.3 Learning causal DAG structures
In this section, we discuss some ways to learn causal DAG structures.
936 Chapter26. Graphicalmodelstructurelearning
26.6.3.1 Learning from observational data
In Section 26.4, we discussed various methods for learning DAG structures from observational
data. It is natural to ask whether these methods can recover the “true” DAG structure that wasused to generate the data. Clearly, even if we have inﬁnite data, an optimal method can onlyidentify the DAG up to Markov equivalence (Section 26.4.1). That is, it can identify the PDAG(partially directed acylic graph), but not the complete DAG structure, because all DAGs which areMarkov equivalent have the same likelihood.
There are several algorithms (e.g., the greedy equivalence search method of (Chickering
2002)) that are consistent estimators of PDAG structure, in the sense that they identify thetrue Markov equivalence class as the sample size goes to inﬁnity, assuming we observe all thevariables. However, we also have to assume that the generating distribution pisfaithfulto
the generating DAG G. This means that all the conditional indepence (CI) properties of pare
exactly captured by the graphical structure, so I(p)=I(G); this means there cannot be any CI
properties in pthat are due to particular settings of the parameters (such as zeros in a regression
matrix) that are not graphically explicit. For this reason, a faithful distribution is also called astabledistribution.
Suppose the assumptions hold and we learn a PDAG. What can we do with it? Instead of
recovering the full graph, we can focus on the causal analog of edge marginals, by computingthe magnitude of the causal effect of one node on another (say A on B). If we know the DAG, wecan do this using techniques described in (Pearl 2000). If the DAG is unknown, we can computea lower bound on the effect as follows (Maathuis et al. 2009): learn an equivalence class (PDAG)from data; enumerate all the DAGs in the equivalence class; apply Pearl’s do-calculus to computethe magnitude of the causal effect of A on B in each DAG; ﬁnally, take the minimum of theseeffects as the lower bound. It is usually computationally infeasible to compute all DAGs in theequivalence class, but fortunately one only needs to be able to identify the local neighborhoodofAandB, which can be esimated more efficiently, as described in (Maathuis et al. 2009). This
technique is called IDA, which is short for “intervention-calculus when the DAG is absent”.
In (Maathuis et al. 2010), this technique was applied to some yeast gene expression data. Gene
knockout data was used to estimate the “ground truth” effect of each 234 single-gene deletionson the remaining 5,361 genes. Then the algorithm was applied to 63 unperturbed (wild-type)samples, and was used to rank order the likely targets of each of the 234 genes. The methodhad a precision of 66% when the recall was set to 10%; while low, this is substantially more thanrival variable-selection methods, such as lasso and elastic net, which were only slightly abovechance.
26.6.3.2 Learning from interventional data
If we want to distinguish between DAGs within the equivalence class, we need to use interven-
tional data, where certain variables have been set, and the consequences have been measured.An example of this is the dataset in Figure 26.17(a), where proteins in a signalling pathwaywere perturbed, and their phosphorylation status was measured using a technique called ﬂowcytometry (Sachs et al. 2005).
It is straightforward to modify the standard Bayesian scoring criteria, such as the marginal
likelihood or BIC score, to handle learning from mixed observational and experimental data: we
26.6. LearningcausalDAGs 937
(a)
B2cAMPf
erkakt
jnkPsitect AKT inh U0126
PMA
p38G06967mek12rafpkc
pip3plcy
pip2
pka
Present
Missing
Int. edge
(b)
Figure 26.17 (a) A design matrix consisting of 5400 data points (rows) measuring the status (using ﬂow
cytometry) of 11 proteins (columns) under different experimental conditions. The data has been discretized
into 3 states: low (black), medium (grey) and high (white). Some proteins were explicitly controlled using
activating or inhibiting chemicals. (b) A directed graphical model representing dependencies between
various proteins (blue circles) and various experimental interventions (pink ovals), which was inferred from
this data. We plot all edges for which p(Gst=1|D)>0.5. Dotted edges are believed to exist in nature
but were not discovered by the algorithm (1 false negative). Solid edges are true positives. The light colored
edges represent the effects of intervention. Source: Figure 6d of (Eaton and Murphy 2007) . This ﬁgure can
be reproduced using the code at http://www .cs.ubc.ca/~murphyk/Software/BDAGL/index .html.
938 Chapter26. Graphicalmodelstructurelearning
just compute the sufficient statistics for a CPD’s parameter by skipping over the cases where that
node was set by intervention (Cooper and Yoo 1999). For example, when using tabular CPDs, wemodify the counts as follows:
N
tck/defines/summationdisplay
i:xitnot setI(xi,t=k,xi,pa(t)=c) (26.65)
The justiﬁcation for this is that in cases where node tis set by force, it is not sampled from its
usual mechanism, so such cases should be ignored when inferring the parameter θt. The mod-
iﬁed scoring criterion can be combined with any of the standard structure learning algorithms.(He and Geng 2009) discusses some methods for choosing which interventions to perform, soas to reduce the posterior uncertainty as quickly as possible (a form of active learning).
The preceeding method assumes the interventions are perfect. In reality, experimenters can
rarely control the state of individual molecules. Instead, they inject various stimulant or inhibitorchemicals which are designed to target speciﬁc molecules, but which may have side effects. Wecan model this quite simply by adding the intervention nodes to the DAG, and then learninga larger augmented DAG structure, with the constraint that there are no edges between theintervention nodes, and no edges from the “regular” nodes back to the intervention nodes.
Figure 26.17(b) shows the augmented DAG that was learned from the interventional ﬂow
cytometry data depicted in Figure 26.17(a). In particular, we plot the median graph, whichincludes all edges for which p(G
ij=1|D)>0.5. These were computed using the exact
algorithm of (Koivisto 2006). It turns out that, in this example, the median model has exactlythe same structure as the optimal MAP model, argmax
Gp(G|D), which was computed using
the algorithm of (Koivisto and Sood 2004; Silander and Myllmaki 2006).
26.7 Learning undirected Gaussian graphical models
Learning the structured of undirected graphical models is easier than learning DAG structurebecause we don’t need to worry about acyclicity. On the other hand, it is harder than learningDAG structure since the likelihood does not decompose (see Section 19.5). This precludes thekind of local search methods (both greedy search and MCMC sampling) we used to learn DAGstructures, because the cost of evaluating each neighboring graph is too high, since we have toreﬁt each model from scratch (there is no way to incrementally update the score of a model).
In this section, we discuss several solutions to this problem, in the context of Gaussian
random ﬁelds or undirected Gaussian graphical models (GGM)s. We consider structure learning
for discrete undirected models in Section 26.8.
26.7.1 MLE for a GGM
Before discussing structure learning, we need to discuss parameter estimation. The task ofcomputing the MLE for a (non-decomposable) GGM is called covariance selection (Dempster
1972).
From Equation 4.19, the log likelihood can be written as
/lscript(Ω)=l o gd e t Ω−tr(SΩ) (26.66)
26.7. LearningundirectedGaussiangraphicalmodels 939
whereΩ=Σ−1is the precision matrix, and S=1
N/summationtextN
i=1(xi−x)(xi−x)Tis the empirical
covariance matrix. (For notational simplicity, we assume we have already estimated ˆμ=x.)
One can show that the gradient of this is given by
∇/lscript(Ω)=Ω−1−S (26.67)
However, we have to enforce the constraints that Ωst=0ifGst=0(structural zeros), and
thatΩis positive deﬁnite. The former constraint is easy to enforce, but the latter is somewhat
challenging (albeit still a convex constraint). One approach is to add a penalty term to the
objective if Ωleaves the positive deﬁnite cone; this is the approach used in ggmFitMinfunc
(see also (Dahl et al. 2008)). Another approach is to use a coordinate descent method, describedin (Hastie et al. 2009, p633), and implemented in ggmFitHtf . Yet another approach is to use
iterative proportional ﬁtting, described in Section 19.5.7. However, IPF requires identifying thecliques of the graph, which is NP-hard in general.
Interestingly, one can show that the MLE must satisfy the following property: Σ
st=Sstif
Gst=1ors=t, i.e., the covariance of a pair that are connected by an edge must match the
empirical covariance. In addition, we have Ωst=0ifGst=0, by deﬁnition of a GGM, i.e.,
the precision of a pair that are not connected must be 0. We say that Σis a positive deﬁnite
matrix completion ofS, since it retains as many of the entries in Sas possible, corresponding
to the edges in the graph, subject to the required sparsity pattern on Σ−1, corresponding to the
absent edges; the remaining entries in Σare ﬁlled in so as to maximize the likelihood.
Let us consider a worked example from (Hastie et al. 2009, p652). We will use the following
adjacency matrix, representing the cyclic structure, X1−X2−X3−X4−X1, and the following
empirical covariance matrix:
G=⎛
⎜⎜⎝0101
101001011010⎞
⎟⎟⎠,S=⎛
⎜⎜⎝1 0 154
11 02 6
5 2 10 3463 1 0⎞
⎟⎟⎠(26.68)
The MLE is given by
Σ=⎛
⎜⎜⎝10.00 1.001.314.00
1.00 10.00 2.000.87
1.312.00 10.00 3.00
4.000.873.00 10.00⎞
⎟⎟⎠,Ω=⎛
⎜⎜⎝0.12−0.010−0.05
−0.010
.11−0.020
0−0.02 0.11−0.03
−0.050−0.03 0.13⎞
⎟⎟⎠(26.69)
(SeeggmFitDemo for the code to reproduce these numbers.) The constrained elements in Ω,
and the free elements in Σ, both of which correspond to absent edges, have been highlighted.
26.7.2 Graphical lasso
We now discuss one way to learn a sparse GRF structure, which exploits the fact that there is a
1:1 correspondence between zeros in the precision matrix and absent edges in the graph. Thissuggests that we can learn a sparse graph structure by using an objective that encourages zerosin the precision matrix. By analogy to lasso (see Section 13.3), one can deﬁne the following /lscript
1
penalized NLL:
J(Ω)=−logdetΩ+tr(SΩ)+λ||Ω||1 (26.70)
940 Chapter26. Graphicalmodelstructurelearning
lambda=36.00, nedges=8
(a)
lambda=27.00, nedges=11
(b)
lambda=7.00, nedges=18
(c)
lambda=0.00, nedges=55
(d)
Figure 26.18 Sparse GGMs learned using graphical lasso applied to the ﬂow cytometry data. (a) λ=3 6.
(b)λ=2 7. (c)λ=7. (d)λ=0. Figure generated by ggmLassoDemo .
where||Ω||1=/summationtext
j,k|ωjk|is the 1-norm of the matrix. This is called the graphical lasso or
Glasso.
Although the objective is convex, it is non-smooth (because of the non-differentiable /lscript1
penalty) and is constrained (because Ωmust be a positive deﬁnite matrix). Several algorithms
have been proposed for optimizing this objective (Yuan and Lin 2007; Banerjee et al. 2008; Duchi
et al. 2008), although arguably the simplest is the one in (Friedman et al. 2008), which uses a
coordinate descent algorithm similar to the shooting algorithm for lasso. See ggmLassoHtf for
an implementation. (See also (Mazumder and Hastie 2012) for a more recent version of this
algorithm.)
As an example, let us apply the method to the ﬂow cytometry dataset from (Sachs et al. 2005).
A discretized version of the data is shown in Figure 26.17(a). Here we use the original continuous
data. However, we are ignoring the fact that the data was sampled under intervention. In
Figure 26.18, we illustrate the graph structures that are learned as we sweep λfrom 0 to a large
value. These represent a range of plausible hypotheses about the connectivity of these proteins.
It is worth comparing this with the DAG that was learned in Figure 26.17(b). The DAG has the
advantage that it can easily model the interventional nature of the data, but the disadvantage
that it cannot model the feedback loops that are known to exist in this biological pathway (see
the discussion in (Schmidt and Murphy 2009)). Note that the fact that we show many UGMs and
only one DAG is incidental: we could easily use BIC to pick the “best” UGM, and conversely, we
26.7. LearningundirectedGaussiangraphicalmodels 941
could easily display several DAG structures, sampled from the posterior.
26.7.3 Bayesian inference for GGM structure *
Although the graphical lasso is reasonably fast, it only gives a point estimate of the structure.
Furthermore, it is not model-selection consistent (Meinshausen 2005), meaning it cannot recoverthe true graph even as N→∞. It would be preferable to integrate out the parameters, and
perform posterior inference in the space of graphs, i.e., to compute p(G|D). We can then extract
summaries of the posterior, such as posterior edge marginals, p(G
ij=1|D), just as we did for
DAGs. In this section, we discuss how to do this.
Note that the situation is analogous to Chapter 13, where we discussed variable selection. In
Section 13.2, we discussed Bayesian variable selection, where we integrated out the regressionweights and computed p(γ|D)and the marginal inclusion probabilities p(γ
j=1|D). Then
in Section 13.3, we discussed methods based on /lscript1regularization. Here we have the same
dichotomy, but we are presenting them in the opposite order.
If the graph is decomposable, and if we use conjugate priors, we can compute the marginal
likelihood in closed form (Dawid and Lauritzen 1993). Furthermore, we can efficiently identifythe decomposable neighbors of a graph (Thomas and Green 2009), i.e., the set of legal edgeadditions and removals. This means that we can perform relatively efficient stochastic localsearch to approximate the posterior (see e.g. (Giudici and Green 1999; Armstrong et al. 2008;Scott and Carvalho 2008)).
However, the restriction to decomposable graphs is rather limiting if one’s goal is knowledge
discovery, since the number of decomposable graphs is much less than the number of generalundirected graphs.
5
A few authors have looked at Bayesian inference for GGM structure in the non-decomposable
case (e.g., (Dellaportas et al. 2003; Wong et al. 2003; Jones et al. 2005)), but such methods cannotscale to large models because they use an expensive Monte Carlo approximation to the marginallikelihood (Atay-Kayis and Massam 2005). (Lenkoski and Dobra 2008) suggested using a Laplaceapproxmation. This requires computing the MAP estimate of the parameters for Ωunder a G-
Wishart prior (Roverato 2002). In (Lenkoski and Dobra 2008), they used the iterative proportional
scaling algorithm (Speed and Kiiveri 1986; Hara and Takimura 2008) to ﬁnd the mode. However,this is very slow, since it requires knowing the maximal cliques of the graph, which is NP-hardin general.
In (Moghaddam et al. 2009), a much faster method is proposed. In particular, they modify
the gradient-based methods from Section 26.7.1 to ﬁnd the MAP estimate; these algorithms donot need to know the cliques of the graph. A further speedup is obtained by just using adiagonal Laplace approximation, which is more accurate than BIC, but has essentially the samecost. This, plus the lack of restriction to decomposable graphs, enables fairly fast stochasticsearch methods to be used to approximate p(G|D)and its mode. This approach signiﬁcantly
outperfomed graphical lasso, both in terms of predictive accuracy and structural recovery, for acomparable computational cost.
5. The number of decomposable graphs on Vnodes, for V=2,...,8, is as follows ((Armstrong 2005, p158)): 2; 8; 61;
822; 18,154; 61,7675; 30,888,596. If we divide these numbers by the number of undirected graphs, which is 2V(V−1)/2,
we ﬁnd the ratios are: 1, 1, 0.95, 0.8, 0.55, 0.29, 0.12. So we see that decomposable graphs form a vanishing fraction of
the total hypothesis space.
942 Chapter26. Graphicalmodelstructurelearning
26.7.4 Handling non-Gaussian data using copulas *
The graphical lasso and variants is inhertently limited to data that is jointly Gaussian, which is
a rather severe restriction. Fortunately the method can be generalized to handle non-Gaussian,but still continuous, data in a fairly simple fashion. The basic idea is to estimate a set of D
univariate monotonic transformations f
j, one per variable j, such that the resulting transformed
data is jointly Gaussian. If this is possible, we say the data belongs to the nonparametricNormal distribution, or nonparanormal distribution (Liu et al. 2009). This is equivalent to the
family of Gaussian copulas (Klaassen and Wellner 1997). Details on how to estimate the f
j
transformations from the empirical cdf’s of each variable can be found in (Liu et al. 2009). Aftertransforming the data, we can compute the correlation matrix and then apply glasso in the usualway. One can show, under various assumptions, that this is a consistent estimator of the graphstructure, representing the CI assumptions of the original distribution(Liu et al. 2009).
26.8 Learning undirected discrete graphical models
The problem of learning the structure for UGMs with discrete variables is harder than theGaussian case, because computing the partition function Z(θ), which is needed for parameter
estimation, has complexity comparable to computing the permanent of a matrix, which ingeneral is intractable (Jerrum et al. 2004). By contrast, in the Gaussian case, computing Zonly
requires computing a matrix determinant, which is at most O(V
3).
Since stochastic local search is not tractable for general discrete UGMs, below we mention
some possible alternative approaches that have been tried.
26.8.1 Graphical lasso for MRFs/CRFs
It is possible to extend the graphical lasso idea to the discrete MRF and CRF case. However, nowthere is a set of parameters associated with each edge in the graph, so we have to use the graphanalog of group lasso (see Section 13.5.1). For example, consider a pairwise CRF with ternarynodes, and node and edge potentials given by
ψ
t(yt,x)=⎛
⎝vT
t1x
vT
t2x
vT
t3x⎞⎠,ψ
st(ys,yt,x)=⎛⎝w
T
t11xwT
st12xwT
st13x
wT
st21xwT
st22xwT
st23x
wT
st31xwT
st32xwT
st33x⎞⎠ (26.71)
where we assume xbegins with a constant 1 term, to account for the offset. (If xonly contains
1, the CRF reduces to an MRF.) Note that we may choose to set some of the v
tkandwstjk
weights to 0, to ensure identiﬁability, although this can also be taken care of by the prior, as
shown in Exercise 8.5.
To learn sparse structure, we can minimize the following objective:
J=−N/summationdisplay
i=1/bracketleftBigg/summationdisplay
tlogψt(yit,xi,vt)+V/summationdisplay
s=1V/summationdisplay
t=s+1logψst(yis,yit,xi,wst)/bracketrightBigg
+λ1V/summationdisplay
s=1V/summationdisplay
t=s+1||wst||p+λ2V/summationdisplay
t=1||vt||2
2 (26.72)
26.8. Learningundirecteddiscretegraphicalmodels 943
baseball
games
league
playersbible
christian
god
jesus
questioncar
dealer drive enginecard
drivergraphics
pcproblem
systemvideo
windowscase
course
evidence
fact
government
human
law number power
rights
state
worldchildren
president
religion warcomputer
dataemail
program
sciencesoftware
universitymemory
research
spacedisk
filesdisplay
image dos
mac scsiearth
orbitformat
ftphelp
phonejews
fans
hockey
team
versionnhl
season
wingunhealth
insurance
israel
launch moonnasa
shuttle
technology
won
Figure 26.19 An MRF estimated from the 20-newsgroup data using group /lscript1regularization with λ= 256.
Isolated nodes are not plotted. From Figure 5.9 of (Schmidt 2010). Used with kind permission of Mark
Schmidt.
where||wst||pis thep-norm; common choices are p=2orp=∞, as explained in Sec-
tion 13.5.1. This method of CRF structure learning was ﬁrst suggested in (Schmidt et al. 2008).
(The use of /lscript1regularization for learning the structure of binary MRFs was proposed in (Lee
et al. 2006).)
Although this objective is convex, it can be costly to evaluate, since we need to perform
inference to compute its gradient, as explained in Section 19.6.3 (this is true also for MRFs). Weshould therefore use an optimizer that does not make too many calls to the objective functionor its gradient, such as the projected quasi-Newton method in (Schmidt et al. 2009). In addition,we can use approximate inference, such as convex belief propagation (Section 22.4.2), to computean approximate objective and gradient more quickly. Another approach is to apply the grouplasso penalty to the pseudo-likelihood discussed in Section 19.5.4. This is much faster, sinceinference is no longer required (Hoeﬂing and Tibshirani 2009). Figure 26.19 shows the result ofapplying this procedure to the 20-newsgroup data, where y
itindicates the presence of word t
in document i, andxi=1(so the model is an MRF).
944 Chapter26. Graphicalmodelstructurelearning
3& ) 3& 7
 
& 36 ) 36 7
)  
7  & 35 ) 35 7
)  7  
65 3: ) 3: 7
))  7)  )7  
77  &ORXG\
6SULQNOHU 5DLQ
:HW
*UDVV
Figure 26.20 Water sprinkler DGM with corresponding binary CPTs. T and F stand for true and false.
26.8.2 Thin junction trees
So far, we have been concerned with learning “sparse” graphs, but these do not necessarily have
low treewidth. For example, a D×Dgrid is sparse, but has treewidth O(D). This means that
the models we learn may be intractable to use for inference purposes, which defeats one of thetwo main reasons to learn graph structure in the ﬁrst place (the other reason being “knowledgediscovery”). There have been various attempts to learn graphical models with bounded treewidth(e.g., (Bach and Jordan 2001; Srebro 2001; Elidan and Gould 2008; Shahaf et al. 2009)), also knownasthin junction trees, but the exact problem in general is hard.
An alternative approach is to learn a model with low circuit complexity (Gogate et al.
2010; Poon and Domingos 2011). Such models may have high treewidth, but they exploit context-speciﬁc independence and determinism to enable fast exact inference (see e.g., (Darwiche 2009)).
Exercises
Exercise 26.1 Causal reasoning in the sprinkler network
Consider the causal network in Figure 26.20. Let Trepresent true and Frepresent false.
a. Suppose I perform a perfect intervention and make the grass wet. What is the probability the sprinkler
is on,p(S=T|do(W=T))?
b. Suppose I perform a perfect intervention and make the grass dry. What is the probability the sprinkler
is on,p(S=T|do(W=F))?
c. Suppose I perform a perfect intervention and make the clouds “turn on” (e.g., by seeding them). What
is the probability the sprinkler is on, p(S=T|do(C=T))?
27 Latent variable models for discrete data
27.1 Introduction
In this chapter, we are concerned with latent variable models for discrete data, such as bit vectors,
sequences of categorical variables, count vectors, graph structures, relational data, etc. Thesemodels can be used to analyze voting records, text and document collections, low-intensityimages, movie ratings, etc. However, we will mostly focus on text analysis, and this will bereﬂected in our terminology.
Since we will be dealing with so many different kinds of data, we need some precise notation
to keep things clear. When modeling variable-length sequences of categorical variables (i.e.,symbols or tokens), such as words in a document, we will let y
il∈{1,...,V}represent
the identity of the l’th word in document i,w h e r eVis the number of possible words in
the vocabulary. We assume l=1:Li,w h e r eLiis the (known) length of document i, and
i=1:N,w h e r eN is the number of documents.
We will often ignore the word order, resulting in a bag of words. This can be reduced to
a ﬁxed length vector of counts (a histogram). We will use niv∈{0,1,...,L i}to denote the
number of times word voccurs in document i,f o rv=1:V. Note that the N×Vcount
matrixNis often large but sparse, since we typically have many documents, but most words
do not occur in any given document.
In some cases, we might have multiple different bags of words, e.g., bags of text words and
bags of visual words. These correspond to different “channels” or types of features. We willdenote these by y
irl,f o rr=1:R(the number of responses) and l=1:L ir.I fLir=1,i t
means we have a single token (a bag of length 1); in this case, we just write yir∈{1,...,V r}
for brevity. If every channel is just a single token, we write the ﬁxed-size response vector asy
i,1:R; in this case, the N×Rdesign matrix Ywill not be sparse. For example, in social
science surveys, yircould be the response of person ito ther’th multi-choice question.
Out goal is to build joint probability models of p(yi)orp(ni)using latent variables to capture
the correlations. We will then try to interpret the latent variables, which provide a compressedrepresentation of the data. We provide an overview of some approaches in Section 27.2, beforegoing into more detail in later sections.
Towards the end of the chapter, we will consider modeling graphs and relations, which can
also be represented as sparse discrete matrices. For example, we might want to model the graphof which papers mycite which other papers. We will denote these relations by R, reserving the
symbolYfor any categorical data (e.g., text) associated with the nodes.
946 Chapter27. Latentvariablemodelsfordiscretedata
27.2 Distributed state LVMs for discrete data
In this section, we summarize a variety of possible approaches for constructing models of the
formp(yi,1:Li), for bags of tokens; p(y1:R), for vectors of tokens; and p(ni), for vectors of
integer counts.
27.2.1 Mixture models
The simplest approach is to use a ﬁnite mixture model (Chapter 11). This associates a singlediscrete latent variable, q
i∈{1,...,K}, with every document, where Kis the number of
clusters. We will use a discrete prior, qi∼Cat(π). For variable length documents, we can
deﬁnep(yil|qi=k)=bkv,w h e r ebkvis the probability that cluster kgenerates word v. The
value ofqiis known as a topic, and the vector bkis thek’th topic’s word distribution. That is,
the likelihood has the form
p(yi,1:Li|qi=k)=Li/productdisplay
l=1Cat(yil|bk) (27.1)
The induced distribution on the visible data is given by
p(yi,1:Li)=/summationdisplay
kπk/bracketleftBiggLi/productdisplay
l=1Cat(yil|bk)/bracketrightBigg
(27.2)
The “generative story” which this encodes is as follows: for document i, pick a topic qifrom
π, call itk, and then for each word l=1:L i, pick a word from bk. We will consider more
sophisticated generative models later in this chapter.
If we have a ﬁxed set of categorical observations, we can use a different topic matrix for each
output variable:
p(yi,1:R|qi=k)=R/productdisplay
r=1Cat(yil|b(r)
k) (27.3)
This is an unsupervised analog of naive Bayes classiﬁcation.
We can also model count vectors. If the sum Li=/summationtext
vnivis known, we can use a
multinomial:
p(ni|Li,qi=k)=M u (ni|Li,bk) (27.4)
If the sum is unknown, we can use a Poisson class-conditional density to give
p(ni|qi=k)=V/productdisplay
v=1Poi(niv|λvk) (27.5)
In this case, Li|qi=k∼Poi(/summationtext
vλvk).
27.2. DistributedstateLVMsfordiscretedata 947
27.2.2 Exponential family PCA
Unfortunately, ﬁnite mixture models are very limited in their expressive power. A more ﬂexible
model is to use a vector of real-valued continuous latent variables, similar to the factor analysis(FA) and PCA models in Chapter 12. In PCA, we use a Gaussian prior of the form p(z
i)=
N(μ,Σ),w h e r ezi∈RK, and a Gaussian likelihood of the form p(yi|zi)=N(Wzi,σ2I).
This method can certainly be applied to discrete or count data. Indeed, the method knownaslatent semantic analysis (LSA)o rlatent semantic indexing (LSI) (Deerwester et al. 1990;
Dumais and Landauer 1997) is exactly equivalent to applying PCA to a term by document countmatrix.
A better method for modeling categorical data is to use a multinoulli or multinomial distribu-
tion. We just have to change the likelihood to
p(y
i,1:Li|zi)=Li/productdisplay
l=1Cat(yil|S(Wzi)) (27.6)
whereW∈RV×Kis a weight matrix and Sis the softmax function. If we have a ﬁxed number
of categorical responses, we can use
p(y1:R|zi)=R/productdisplay
r=1Cat(yir|S(Wrzi)) (27.7)
whereWr∈RV×Kis the weight matrix for the r’th response variable. This model is called
categorical PCA , and is illustrated in Figure 27.1(a); see Section 12.4 for further discussion. If we
have counts, we can use a multinomial model
p(ni|Li,zi)=M u (ni|Li,S(Wzi)) (27.8)
or a Poisson model
p(ni|zi)=V/productdisplay
v=1Poi(niv|exp(wT
v,:zi)) (27.9)
All of these models are examples of exponential family PCA orePCA(Collins et al. 2002;
Mohamed et al. 2008), which is an unsupervised analog of GLMs. The corresponding induceddistribution on the visible variables has the form
p(y
i,1:Li)=/integraldisplay/bracketleftBiggLi/productdisplay
l=1p(yil|zi,W)/bracketrightBigg
N(zi|μ,Σ)dzi (27.10)
Fitting this model is tricky, due to the lack of conjugacy. (Collins et al. 2002) proposed acoordinate ascent method that alternates between estimating the z
iandW. This can be
regarded as a degenerate version of EM, that computes a point estimate of ziin the E step. The
problem with the degenerate approach is that it is very prone to overﬁtting, since the numberof latent variables is proportional to the number of datacases (Welling et al. 2008). A true EMalgorithm would marginalize out the latent variables z
i. A way to do this for categorical PCA,
using variational EM, is discussed in Section 12.4. For more general models, one can use MCMC(Mohamed et al. 2008).
948 Chapter27. Latentvariablemodelsfordiscretedata
γW1,K,V WR,K,V...yi,1 yi,R ...zi
Nμ Σ
(a)BK,Vni,1...ni,Vπiα
Li
N
(b)
Figure 27.1 Two LVMs for discrete data. Circles are scalar nodes, ellipses are vector nodes, squares are
matrix nodes. (a) Categorical PCA. (b) Multinomial PCA.
27.2.3 LDA and mPCA
In ePCA, the quantity Wzirepresents the natural parameters of the exponential family. Some-
times it is more convenient to use the dual parameters. For example, for the multinomial, the
dual parameter is the probability vector, whereas the natural parameter is the vector of log odds.
If we want to use the dual parameters, we need to constrain the latent variables so they live
in the appropriate parameter space. In the case of categorical data, we will need to ensure thelatent vector lives in S
K, theK-dimensional probability simplex. To avoid confusion with ePCA,
we will denote such a latent vector by πi. In this case, the natural prior for the latent variables
is the Dirichlet, πi∼Dir(α). Typically we set α=α1K.I fw es e t α/lessmuch1, we encourage πi
to be sparse, as shown in Figure 2.14.
When we have a count vector whose total sum is known, the likelihood is given by
p(ni|Li,πi)=M u (ni|Li,Bπi) (27.11)
This model is called multinomial PCA ormPCA(Buntine 2002; Buntine and Jakulin 2004,
2006). See Figure 27.1(b). Since we are assuming niv=/summationtext
kbvkπiv, this can be seen as a form
of matrix factorization for the count matrix. Note that we use bv,kto denote the parameter
vector, rather than wv,k, since we impose the constraints that 0≤bv,k≤1and/summationtext
vbv,k=1.
The corresponding marginal distribution has the form
p(ni|Li)=/integraldisplay
Mu(ni|Li,Bπi)Dir(π i|α)dπi (27.12)
Unfortunately, this integral cannot be computed analytically.
If we have a variable length sequence (of known length), we can use
p(yi,1:Li|πi)=Li/productdisplay
l=1Cat(yil|Bπi) (27.13)
27.2. DistributedstateLVMsfordiscretedata 949
This is called latent Dirichlet allocation orLDA(Blei et al. 2003), and will be described in
much greater detail below. LDA can be thought of as a probabilistic extension of LSA, where the
latent quantities πikare non-negative and sum to one. By contrast, in LSA, zikcan be negative
which makes interpetation difficult.
A predecessor to LDA, known as probabilistic latent semantic indexing orPLSI(Hofmann
1999), uses the same model but computes a point estimate of πifor each document (similar to
ePCA), rather than integrating it out. Thus in PLSI, there is no prior for πi.
We can modify LDA to handle a ﬁxed number of different categorical responses as follows:
p(yi,1:R|πi)=R/productdisplay
r=1Cat(yil|B(r)πi) (27.14)
This has been called the user rating proﬁle (URP) model (Marlin 2003), and the simplex factor
model(Bhattacharya and Dunson 2011).
27.2.4 GaP model and non-negative matrix factorization
Now consider modeling count vectors where we do not constrain the sum to be observed. Inthis case, the latent variables just need to be non-negative, so we will denote them by z
+
i. This
can be ensured by using a prior of the form
p(z+i)=K/productdisplay
k=1Ga(z+
ik|αk,βk) (27.15)
The likelihood is given by
p(ni|z+i)=V/productdisplay
v=1Poi(niv|bT
v,:z+
i) (27.16)
This is called the GaP(Gamma-Poisson) model (Canny 2004). See Figure 27.2(a).
In (Buntine and Jakulin 2006), it is shown that the GaP model, when conditioned on a ﬁxed
Li, reduces to the mPCA model. This follows since a set of Poisson random variables, when
conditioned on their sum, becomes a multinomial distribution (see e.g., (Ross 1989)).
If we set αk=βk=0in the GaP model, we recover a method known as non-negative
matrix factorization orNMF(Lee and Seung 2001), as shown in (Buntine and Jakulin 2006).
NMF is not a probabilistic generative model, since it does not specify a proper prior for z+i.
Furthermore, the algorithm proposed in (Lee and Seung 2001) is another degenerate EM algo-
rithm, so suffers from overﬁtting. Some procedures to ﬁt the GaP model, which overcome theseproblems, are given in (Buntine and Jakulin 2006).
To encourage z
+
ito be sparse, we can modify the prior to be a spike-and-Gamma type prior
as follows:
p(z+
ik)=ρkI(z+
ik=0 )+( 1−ρk)Ga(z+
ik|αk,βk) (27.17)
whereρkis the probability of the spike at 0. This is called the conditional Gamma Poisson
model (Buntine and Jakulin 2006). It is simple to modify Gibbs sampling to handle this kind of
prior, although we will not go into detail here.
950 Chapter27. Latentvariablemodelsfordiscretedata
γBni,1...ni,Vz+
i,1...z+
i,K
Nα1β1
...αKβK
(a)γByilqil
Liπi
Nα
(b)
Figure 27.2 (a) Gaussian-Poisson (GAP) model. (b) Latent Dirichlet allocation (LDA) model.
27.3 Latent Dirichlet allocation (LDA)
In this section, we explain the latent Dirichlet allocation orLDA(Blei et al. 2003) model in
detail.
27.3.1 Basics
In a mixture of multinoullis, every document is assigned to a single topic, qi∈{1,...,K},
drawn from a global distribution π. In LDA, every word is assigned to its own topic, qil∈
{1,...,K}, drawn from a document-speciﬁc distribution πi. Since a document belongs to a
distribution over topics, rather than a single topic, the model is called an admixture mixture
ormixed membership model (Erosheva et al. 2004). This model has many other applications
beyond text analysis, e.g., genetics (Pritchard et al. 2000), health science (Erosheva et al. 2007),
social network analysis (Airoldi et al. 2008), etc.
Adding conjugate priors to the parameters, the full model is as follows:1
πi|α∼Dir(α1K) (27.18)
qil|πi∼Cat(π i) (27.19)
bk|γ∼Dir(γ1V) (27.20)
yil|qil=k,B∼Cat(b k) (27.21)
This is illustrated in Figure 27.2(b). We can marginalize out the qivariables, thereby creating a
1. Our notation is similar to the one we use elsewhere in this book, but is different from that used by most LDA papers.
They typically use wndfor the identity of word nin document d,zndto represent the discrete indicator, θdas the
continuous latent vector for document d, andβkas thek’th topic vector.
27.3. LatentDirichletallocation(LDA) 951
P(word3)P(word1)
01
1
1P(word2)=   observed
document
=   generated
document=   topic
Figure 27.3 Geometric interpretation of LDA. We have K=2topics and V=3words. Each document
(white dots), and each topic (black dots), is a point in the 3d simplex. Source: Figure 5 of (Steyvers and
Griffiths 2007). Used with kind permission of Tom Griffiths.
direct arc from πitoyil, with the following CPD:
p(yil=v|πi)=/summationdisplay
kp(yil=v|qil=k)p(qil=k)=/summationdisplay
kπikbkv (27.22)
As we mentioned in the introduction, this is very similar to the multinomial PCA model proposed
in (Buntine 2002), which in turn is closely related to categorical PCA, GaP, NMF, etc.
LDA has an interesting geometric interpretation. Each vector bkdeﬁnes a distribution over
Vwords; each kis known as a topic. Each document vector πideﬁnes a distribution over K
topics. So we model each document as an admixture over topics. Equivalently, we can thinkof LDA as a form of dimensionality reduction (assuming K<V, as is usually the case), where
we project a point in the V-dimensional simplex (a normalized document count vector x
i) onto
theK-dimensional simplex. This is illustrated in Figure 27.3, where we have V=3words and
K=2topics. The observed documents (which live in the 3d simplex) are approximated as
living on a 2d simplex spanned by the 2 topic vectors, each of which lives in the 3d simplex.
One advantage of using the simplex as our latent space rather than Euclidean space is that
the simplex can handle ambiguity. This is importance since in natural language, words can oftenhave multiple meanings, a phenomomen known as polysemy. For example, “play” might refer
to a verb (e.g., “to play ball” or “to play the coronet”), or to a noun (e.g., “Shakespeare’s play”).In LDA, we can have multiple topics, each of which can generate the word “play”, as shown inFigure 27.4, reﬂecting this ambiguity.
Given word lin document i, we can compute p(q
il=k|yi,θ), and thus infer its most likely
topic. By looking at the word in isolation, it might be hard to know what sense of the word ismeant, but we can disambiguate this by looking at other words in the document. In particular,givenx
i, we can infer the topic distribution πifor the document; this acts as a prior for
disambiguating qil. This is illustrated in Figure 27.5, where we show three documents from the
TASA corpus.2In the ﬁrst document, there are a variety of music related words, which suggest
2. The TASA corpus is a collection of 37,000 high-school level English documents, comprising over 10 million words,
952 Chapter27. Latentvariablemodelsfordiscretedata
word prob. word prob. word prob.
MUSIC .090 LITERATURE .031 PLAY .136
DANCE .034 POEM .028 BALL .129
SONG .033 POETRY .027 GAME .065
PLAY .030 POET .020 PLAYING .042
SING .026 PLAYS .019 HIT .032
SINGING .026 POEMS .019 PLAYED .031
BAND .026 PLAY .015 BASEBALL .027
PLAYED .023 LITERARY .013 GAMES .025
SANG .022 WRITERS .013 BAT .019
SONGS .021 DRAMA .012 RUN .019
DANCING .020 WROTE .012 THROW .016
PIANO .017 POETS .011 BALLS .015
PLAYING .016 WRITER .011 TENNIS .011
RHYTHM .015 SHAKESPEARE .010 HOME .010
ALBERT .013 WRITTEN .009 CATCH .010
MUSICAL .013 STAGE .009 FIELD .010Topic 166 Topic 82 Topic 77
Figure 27.4 Three topics related to the word play. Source: Figure 9 of (Steyvers and Griffiths 2007).
Used with kind permission of Tom Griffiths.
Document #29795 
Bix beiderbecke, at  age060 fifteen207, sat174on the  slope071of a bluff055 overlooking027the mississippi137 river137.H e
was listening077to music077 coming009from a  passing043riverboat. The  music077had already  captured006his heart157
as well as his  ear119. It was jazz077. Bix beiderbecke had already had  music077 lessons077.H e showed002 promise134on
the piano077, and his  parents035 hoped268he might  consider118becoming a  concert077 pianist077. But bix was
interested268in another  kind050of music077.H e wanted268to play077the cornet. And he wanted268to play077 jazz077...  
Document #1883 There is a  simple
050 reason106why there are so few  periods078of really great  theater082in our whole  western046world.
Too many  things300have to come right at the very same time. The dramatists must have the right  actors082,t h e
actors082must have the right playhouses, the playhouses must have the right  audiences082.W em u s t  remember288that
plays082 exist143to be performed077,n o t merely050to be read254. ( even when you  read254a play082to yourself,  try288to
perform062it, to  put174it on a stage078, as you go along.) as  soon028as a play082has to be  performed082, then some 
kind126of theatrical082...
Document #21359 
Jim296has a  game166 book254. Jim296 reads254the book254. Jim296 sees081a game166for one.  Jim296 plays166the game166.
Jim296 likes081the game166for one. The  game166 book254 helps081 jim296. Don180 comes040into the  house038. Don180and
jim296 read254the game166 book254.T h e  boys020see a game166for two. The two  boys020 play166the game166.T h e
boys020 play166the game166for two. The  boys020like the  game166. Meg282 comes040into the house282. Meg282and
don180and jim296 read254the book254.T h e ys e ea  game166for three.  Meg282and don180and jim296 play166the game166.
They play166...
Figure 27.5 Three documents from the TASA corpus containing different senses of the word play.G r a y e d
out words were ignored by the model, because they correspond to uninteresting stop words (such as “and”,
“the”, etc.) or very low frequency words. Source: Figure 10 of (Steyvers and Griffiths 2007). Used withkind permission of Tom Griffiths.
27.3. LatentDirichletallocation(LDA) 953
πiwill put most of its mass on the music topic (number 77); this in turn makes the music
interpretation of “play” the most likely, as shown by the superscript. The second document
interprets play in the theatrical sense, and the third in the sports sense. Note that is crucialthatπ
ibe a latent variable, so information can ﬂow between the qil’s, thus enabling local
disambiguation to use the full set of words.
27.3.2 Unsupervised discovery of topics
One of the main purposes of LDA is discover topics in a large collection or corpusof docu-
ments (see Figure 27.12 for an example). Unfortunately, since the model is unidentiﬁable, theinterpertation of the topics can be difficult (Chang et al. 2009).. One approach, known as la-beled LDA (Ramage et al. 2009), exploits the existence of tags on documents as a way to ensureidentiﬁability. In particular, it forces the topics to correspond to the tags, and then it learns adistribution over words for each tag. This can make the results easier to interpret.
27.3.3 Quantitatively evaluating LDA as a language model
In order to evaluate LDA quantitatively, we can treat it as a language model , i.e., a probability
distribution over sequences of words. Of course, it is not a very good language model, since itignores word order and just looks at single words (unigrams), but it is interesting to compareLDA to other unigram-based models, such as mixtures of multinoullis, and pLSI. Such simplelanguage models are sometimes useful for information retrieval purposes. The standard way tomeasure the quality of a language model is to use perplexity, which we now deﬁne below.
27.3.3.1 Perplexity
Theperplexity of language model qgiven a stochastic process
3pis deﬁned as
perplexity( p,q)/defines2H(p,q)(27.23)
whereH(p,q)is the cross-entropy of the two stochastic processes, deﬁned as
H(p,q)/defineslim
N→∞−1
N/summationdisplay
y1:Np(y1:N)logq(y1:N) (27.24)
The cross entropy (and hence perplexity) is minimized if q=p; in this case, the model can
predict as well as the “true” distribution.
We can approximate the stochastic process by using a single long test sequence (composed
of multiple documents and multiple sentences, complete with end-of-sentence markers), callity
∗
1:N. (This approximation becomes more and more accurate as the sequence gets longer,
provided the process is stationary and ergodic (Cover and Thomas 2006).) Deﬁne the empiricaldistribution (an approximation to the stochastic process) as
p
emp(y1:N)=δy∗
1:N(y1:N) (27.25)
collated by a company formerly known as Touchstone Applied Science Associates, but now known as Questar Assessment
Incwww.questarai .com.
3. A stochastic process is one which can deﬁne a joint distribution over an arbitrary number of random variables. Wecan think of natural language as a stochastic process, since it can generate an inﬁnite stream of words.
954 Chapter27. Latentvariablemodelsfordiscretedata
In this case, the cross-entropy becomes
H(pemp,q)=−1
Nlogq(y∗
1:N) (27.26)
and the perplexity becomes
perplexity( pemp,q)=2H(pemp,q)=q(y∗
1:N)−1/N=N/radicaltp/radicalvertex/radicalvertex/radicalbtN/productdisplay
i=11
q(y∗
i|y∗
1:i−1)(27.27)
We see that this is the geometric mean of the inverse predictive probabilities, which is the usual
deﬁnition of perplexity (Jurafsky and Martin 2008, p96).
In the case of unigram models, the cross entropy term is given by
H=−1
NN/summationdisplay
i=11
LiLi/summationdisplay
l=1logq(yil) (27.28)
whereNis the number of documents and Liis the number of words in document i. Hence
the perplexity of model qis given by
perplexity( pemp,p)=e x p/parenleftBigg
−1
NN/summationdisplay
i=11
LiLi/summationdisplay
l=1logq(yil)/parenrightBigg
(27.29)
Intuitively, perplexity mesures the weighted average branching factor of the model’s predic-
tive distribution. Suppose the model predicts that each symbol (letter, word, whatever) is equallylikely, so p(y
i|y1:i−1)=1/K. Then the perplexity is ((1/K)N)−1/N=K. If some symbols
are more likely than others, and the model correctly reﬂects this, its perplexity will be lowerthanK. Of course, H(p,p)=H (p)≤H(p,q), so we can never reduce the perplexity below
the entropy of the underlying stochastic process.
27.3.3.2 Perplexity of LDA
The key quantity is p(v), the predictive distribution of the model over possible words. (It is
implicitly conditioned on the training set.) For LDA, this can be approximated by plugging inB(e.g., the posterior mean estimate) and approximately integrating out qusing mean ﬁeld
inference (see (Wallach et al. 2009) for a more accurate way to approximate the predictivelikelihood).
In Figure 27.6, we compare LDA to several other simple unigram models, namely MAP estima-
tion of a multinoulli, MAP estimation of a mixture of multinoullis, and pLSI. (When performingMAP estimation, the same Dirichlet prior on Bwas used as in the LDA model.) The metric
is perplexity, as in Equation 27.29, and the data is a subset of the TREC AP corpus containing16,333 newswire articles with 23,075 unique terms. We see that LDA signiﬁcantly outperformsthese other methods.
27.3. LatentDirichletallocation(LDA) 955
0 20 40 60 80 100 120 140 160 180 2002500300035004000450050005500600065007000
Number of TopicsPerplexity
  
Unigram
Mixtures of Unigrams
LDA
Fold in pLSI
Figure 27.6 Perplexity vs number of topics on the TREC AP corpus for various language models. Based
on Figure 9 of (Blei et al. 2003). Figure generated by bleiLDAperplexityPlot .
γb1...bKy1,1...y1,L1q1,1...q1,L1π1
......... ...
yN,1...yN,LNqN,1...qN,LNπNα
(a)γy1,1...y1,L1q1,1...q1,L1
......yN,1...yN,LNqN,1...qN,LNα
(b)
Figure 27.7 (a) LDA unrolled for Ndocuments. (b) Collapsed LDA, where we integrate out the πiand
thebk.
27.3.4 Fitting using (collapsed) Gibbs sampling
It is straightforward to derive a Gibbs sampling algorithm for LDA. The full conditionals are as
follows:
p(qil=k|·)∝exp[logπik+logbk,xil] (27.30)
p(πi|·) = Dir({αk+/summationdisplay
lI(zil=k)}) (27.31)
p(bk|·) = Dir({γv+/summationdisplay
i/summationdisplay
lI(xil=v,zil=k)}) (27.32)
However, one can get better performance by analytically integrating out the πi’s and the bk’s,
956 Chapter27. Latentvariablemodelsfordiscretedata
both of which have a Dirichlet distribution, and just sampling the discrete qil’s. This approach
was ﬁrst suggested in (Griffiths and Steyvers 2004), and is an example of collapsed Gibbs
sampling. Figure 27.7(b) shows that now all the qilvariables are fully correlated. However, we
can sample them one at a time, as we explain below.
First, we need some notation. Let civk=/summationtextLi
l=1I(qil=k,yil=v)be the number of times
wordvis assigned to topic kin document i.L e tcik=/summationtext
vcivkbe the number of times any
word from document ihas been assigned to topic k.L e tcvk=/summationtext
icivkbe the number of times
wordvhas been assigned to topic kin any document. Let niv=/summationtext
kcivkbe the number of
times word voccurs in document i; this is observed. Let ck=/summationtext
vcvkbe the number of words
assigned to topic k. Finally, let Li=/summationtext
kcikbe the number of words in document i; this is
observed.
We can now derive the marginal prior. By applying Equation 5.24, one can show that
p(q|α)=/productdisplay
i/integraldisplay/bracketleftBiggLi/productdisplay
l=1Cat(qil|πi)/bracketrightBigg
Dir(πi|α1K)dπi (27.33)
=/parenleftbiggΓ(Kα)
Γ(α)K/parenrightbiggNN/productdisplay
i=1/producttextK
k=1Γ(cik+α)
Γ(Li+Kα)(27.34)
By similar reasoning, one can show
p(y|q,γ)=/productdisplay
k/integraldisplay⎡
⎣/productdisplay
il:qil=kCat(yil|bk)⎤⎦Dir(b
k|γ1V)dbk (27.35)
=/parenleftbiggΓ(Vβ)
Γ(β)V/parenrightbiggKK/productdisplay
k=1/producttextV
v=1Γ(cvk+β)
Γ(ck+Vβ)(27.36)
From the above equations, and using the fact that Γ(x+1)/Γ(x)=x, we can derive the full
conditional for p(qil|q−i,l). Deﬁnec−
ivkto be the same as civkexcept it is compute by summing
over all locations in document iexcept for qil. Also, let yil=v. Then
p(qi,l=k|q−i,l,y,α,γ)∝c−v,k+γ
c−k+Vγc−i,k+α
Li+Kα(27.37)
We see that a word in a document is assigned to a topic based both on how often that word is
generated by the topic (ﬁrst term), and also on how often that topic is used in that document(second term).
Given Equation 27.37, we can implement the collapsed Gibbs sampler as follows. We randomly
assign a topic to each word, q
il∈{1,...,K}. We can then sample a new topic as follows: for
a given word in the corpus, decrement the relevant counts, based on the topic assigned to thecurrent word; draw a new topic from Equation 27.37, update the count matrices; and repeat.This algorithm can be made efficient since the count matrices are very sparse.
27.3.5 Example
This process is illustrated in Figure 27.8 on a small example with two topics, and ﬁve words.The left part of the ﬁgure illustrates 16 documents that were sampled from the LDA model using
27.3. LatentDirichletallocation(LDA) 957
River Stream Bank Money Loan
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
(a)River Stream Bank Money Loan
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
(b)
Figure 27.8 Illustration of (collapsed) Gibbs sampling applied to a small LDA example. There are N=1 6
documents, each containing a variable number of words drawn from a vocabulary of V=5words, There
are two topics. A white dot means word the word is assigned to topic 1, a black dot means the word is
assigned to topic 2. (a) The initial random assignment of states. (b) A sample from the posterior after 64steps of Gibbs sampling. Source: Figure 7 of (Steyvers and Griffiths 2007). Used with kind permission ofTom Griffiths.
p(money|k=1 )=p(loan| k=1 )=p(bank| k=1 )=1 /3andp(river|k=2 )=p(stream| k=
2) =p(bank|k=2 )=1 /3. For example, we see that the ﬁrst document contains the word
“bank” 4 times (indicated by the four dots in row 1 of the “bank” column), as well as various
other ﬁnancial terms. The right part of the ﬁgure shows the state of the Gibbs sampler after64 iterations. The “correct” topic has been assigned to each token in most cases. For example,in document 1, we see that the word “bank” has been correctly assigned to the ﬁnancial topic,based on the presence of the words “money” and “loan”. The posterior mean estimate of theparameters is given by ˆp(money|k=1 )=0 .32,ˆp(loan|k=1 )=0 .29,ˆp(bank|k=1 )=
0.39,ˆp(river|k=2 )=0 .25,ˆp(stream|k=2 )=0 .4, andˆp(bank|k=2 )=0 .35, w
 hich is
impressively accurate, given that there are only 16 training examples.
27.3.6 Fitting using batch variational inference
A faster alternative to MCMC is to use variational EM. (We cannot use exact EM since exactinference of π
iandqiis intractable.) We give the details below.
27.3.6.1 Sequence version
Following (Blei et al. 2003), we will use a fully factorized (mean ﬁeld) approximation of the form
q(πi,qi) = Dir(πi|˜πi)/productdisplay
lCat(qil|˜qil) (27.38)
We will follow the usual mean ﬁeld recipe. For q(qil), we use Bayes’ rule, but where we need to
take expectations over the prior:
˜qilk∝byi,l,kexp(E[logπik]) (27.39)
where
E[logπik]=ψk(˜πi.)/definesΨ(˜πik)−Ψ(/summationdisplay
k/prime˜πik/prime) (27.40)
958 Chapter27. Latentvariablemodelsfordiscretedata
whereΨis the digamma function. The update for q(πi)is obtained by adding up the expected
counts:
˜πik=αk+/summationdisplay
l˜qilk (27.41)
The M step is obtained by adding up the expected counts and normalizing:
ˆbvk∝γv+N/summationdisplay
i=1Li/summationdisplay
l=1˜qilkI(yil=v) (27.42)
27.3.6.2 Count version
Note that the E step takes O((/summationtext
iLi)VK)space to store the ˜qilk. It is much more space
efficient to perform inference in the mPCA version of the model, which works with counts; these
only take O(NVK)space, which is a big savings if documents are long. (By contrast, the
collapsed Gibbs sampler must work explicitly with the qilvariables.)
We will focus on approximating p(πi,ci|ni,Li), where we write cias shorthand for ci...W e
will again use a fully factorized (mean ﬁeld) approximation of the form
q(πi,ci)=D i r (πi|˜πi)/productdisplay
vMu(civ.|niv,˜civ.) (27.43)
The new E step becomes
˜πik=αk+/summationdisplay
vniv˜civk (27.44)
˜civk∝bvkexp(E[logπik]) (27.45)
The new M step becomes
ˆbvk∝γv+/summationdisplay
iniv˜civk (27.46)
27.3.6.3 VB version
We now modify the algorithm to use VB instead of EM, so that we infer the parameters aswell as the latent variables. There are two advantages to this. First, by setting γ/lessmuch1, VB will
encourage Bto be sparse (as in Section 21.6.1.6). Second, we will be able to generalize this to
the online learning setting, as we discuss below.
Our new posterior approximation becomes
q(π
i,ci,B)=D i r ( πi|˜πi)/productdisplay
vMu(civ.|niv,˜civ.)/productdisplay
kDir(b.k|˜b.k) (27.47)
The update for ˜civkchanges, to the following:
˜civk∝exp(E[logbvk]+E[logπik]) (27.48)
27.3. LatentDirichletallocation(LDA) 959
Algorithm 27.1: Batch VB for LDA
1Input:niv,K,αk,γv;
2Estimate˜bvkusing EM for multinomial mixtures;
3Initialize counts niv;
4whilenotconverged do
5/ /Es t e p;
6svk=0// expected sufficient statistics;
7foreachdocument i=1:Ndo
8 (˜πi,˜ci)=Estep(ni,˜B,α);
9 svk+=niv˜civk;
10/ /Ms t e p;
11foreachtopic k=1:Kdo
12 ˜bvk=γv+svk;
13function(˜πi,˜ci)=Estep(ni,˜B,α);
14Initialize ˜πik=αk;
15repeat
16˜πold
i.=˜πi.,˜πik=αk;
17foreachword v=1:Vdo
18 foreachtopic k=1:Kdo
19 ˜civk=e x p/parenleftBig
ψk(˜bv.)+ψk(˜πold
i.)/parenrightBig
;
20 ˜civ.=normalize( ˜civ.);
21 ˜πik+=niv˜civk
22until1
K/summationtext
k|˜πik−˜πold
ik|<thresh;
Also, the M step becomes
˜bvk=γv+/summationdisplay
i˜civk (27.49)
No normalization is required, since we are just updating the pseudcounts. The overall algorithm
is summarized in Algorithm 22.
27.3.7 Fitting using online variational inference
In the bathc version, the E step clearly takes O(NKVT)time, where Tis the number of
mean ﬁeld updates (typically T∼5). This can be slow if we have many documents. This can
be reduced by using stochastic gradient descent (Section 8.5.2) to perform online variationalinference, as we now explain.
We can derive an online version, following (Hoffman et al. 2010). We perform an E step in the
usual way. We then compute the variational parameters for Btreating the expected sufficient
statistics from the single data case as if the whole data set had those statistics. Finally, we make
960 Chapter27. Latentvariablemodelsfordiscretedata
Algorithm 27.2: Online variational Bayes for LDA
1Input:niv,K,αk,γv,τ0,κ;
2Initialize˜bvkrandomly;
3fort=1:∞do
4Set step size ρt=(τ0+t)−κ;
5Pick document i=i(t);;
6(˜πi,˜ci)=Estep(ni,˜B,α);
7˜bnew
vk=γv+Nniv˜civk;
8˜bvk=( 1−ρt)˜bvk+ρt˜bnewvk;
Documents seen (log scale)Perplexity
600650700750800850900
103.5104104.5105105.5106106.5Batch 98KOnline 98K
Online 3.3M
Figure 27.9 Test perplexity vs number of training documents for batch and online VB-LDA. From Figure
1 of (Hoffman et al. 2010). Used with kind permission of David Blei.
a partial update for the variational parameters for B, putting weight ρton the new estimate
and weight 1−ρton the old estimate. The step size ρtdecays over time, as in Equation 8.83.
The overall algorithm is summarized in Algorithm 3. In practice, we should use mini-batches,
as explained in Section 8.5.2.3. In (Hoffman et al. 2010), they used a batch of size 256–4096.
Figure 27.9 plots the perplexity on a test set of size 1000 vs number of analyzed documents (E
steps), where the data is drawn from (English) Wikipedia. The ﬁgure shows that online variationalinference is much faster than offline inference, yet produces similar results.
27.3.8 Determining the number of topics
Choosing K, the number of topics, is a standard model selection problem. Here are some
approaches that have been taken:
• Use annealed importance sampling (Section 24.6.2) to approximate the evidence (Wallach
et al. 2009).
• Cross validation, using the log likelihood on a test set.
27.4. ExtensionsofLDA 961
• Use the variational lower bound as a proxy for logp(D|K).
• Use non-parametric Bayesian methods (Teh et al. 2006).
27.4 Extensions of LDA
Many extensions of LDA have been proposed since the ﬁrst paper came out in 2003. We brieﬂy
discuss a few of these below.
27.4.1 Correlated topic model
One weakness of LDA is that it cannot capture correlation between topics. For example, if adocument has the “business” topic, it is reasonable to expect the “ﬁnance” topic to co-occcur.The source of the problem is the use of a Dirichlet prior for π
i. The problem with the Dirichelt
it that it is characterized by just a mean vector and a strength parameter, but its covariance isﬁxed (Σ
ij=−αiαj), rather than being a free parameter.
One way around this is to replace the Dirichlet prior with the logistic normal distribution, as
in categorical PCA (Section 27.2.2). The model becomes
bk|γ∼Dir(γ1V) (27.50)
zi∼N(μ,Σ) (27.51)
πi|zi=S(zi) (27.52)
qil|πi∼Cat(π i) (27.53)
yil|qil=k,B∼Cat(b k) (27.54)
This is known as the correlated topic model (Blei and Lafferty 2007). This is very similar to
categorical PCA, but slightly different. To see the difference, let us marginalize out the qiland
πi. Then in the CTM we have
yil∼Cat(BS(zi)) (27.55)
whereBis a stochastic matrix. By contrast, in catPCA we have
yil∼Cat(S(Wzi)) (27.56)
whereWis an unconstrained matrix.
Fitting this model is tricky, since the prior for πiis no longer conjugate to the multinomial
likelihood for qil. However, we can use any of the variational methods in Section 21.8.1.1, where
we discussed Bayesian multiclass logistic regression. In the CTM case, things are even hardersince the categorical response variables q
iare hidden, but we can handle this by using an
additional mean ﬁeld approximation. See (Blei and Lafferty 2007) for details.
Having ﬁt the model, one can then convert ˆΣto a sparse precision matrix ˆΣ−1by pruning
low-strength edges, to get a sparse Gaussian graphical model. This allows you to visualize thecorrelation between topics. Figure 27.10 shows the result of applying this procedure to articlesfromSciencemagazine, from 1990-1999. (This corpus contains 16,351 documents, and 5.7M words
(19,088 of them unique), after stop-word and low-frequency removal.) Nodes represent topics,with the top 5 words per topic listed inside. The font size reﬂects the overall prevalence of thetopic in the corpus. Edges represent signiﬁcant elements of the precision matrix.
962 Chapter27. Latentvariablemodelsfordiscretedata
wild type
mutant
mutations
mutants
mutation
plants
plant
gene
genes
arabidopsisp53
cell cycle
activity
cyclin
regulation
amino acids
cdna
sequence
isolated
protein
gene
disease
mutations
families
mutationrna
dna
rna polymerase
cleavage
site
cells
cell
expression
cell lines
bone marrowunited states
women
universities
students
educationscience
scientists
says
research
peopleresearch
funding
support
nih
programsurface
tip
image
sample
device
laser
optical
light
electrons
quantummaterials
organic
polymer
polymers
molecules
volcanic
deposits
magma
eruption
volcanismmantle
crust
upper mantle
meteorites
ratios
earthquake
earthquakes
fault
images
dataancient
found
impact
million years ago
africa
climate
ocean
ice
changes
climate changecells
proteins
researchers
protein
foundpatients
disease
treatment
drugs
clinicalgenetic
population
populations
differences
variationfossil record
birds
fossils
dinosaurs
fossilsequence
sequences
genome
dna
sequencing
bacteria
bacterial
host
resistance
parasitedevelopment
embryos
drosophila
genes
expressionspecies
forest
forests
populations
ecosystemssynapses
ltp
glutamate
synaptic
neuronsneurons
stimulus
motor
visual
cortical
ozone
atmospheric
measurements
stratosphere
concentrationssun
solar wind
earth
planets
planet
co2
carbon
carbon dioxide
methane
waterreceptor
receptors
ligand
ligands
apoptosisproteins
protein
binding
domain
domainsactivated
tyrosine phosphorylation
activation
phosphorylation
kinase
magnetic
magnetic ﬁeld
spin
superconductivity
superconductingphysicists
particles
physics
particle
experimentsurface
liquid
surfaces
ﬂuid
model reaction
reactions
molecule
molecules
transition stateenzyme
enzymes
iron
active site
reduction
pressure
high pressure
pressures
core
inner corebrain
memory
subjects
left
task
computer
problem
information
computers
problems
stars
astronomers
universe
galaxies
galaxy
virus
hiv
aids
infection
virusesmice
antigen
t cells
antigens
immune response
Figure 27.10 Output of the correlated topic model (with K=5 0topics) when applied to articles from
Science. Nodes represent topics, with the 5 most probable phrases from each topic shown inside. Fontsize reﬂects overall prevalence of the topic. See http://www .cs.cmu.edu/~lemur/science/ for an
interactive version of this model with 100 topics. Source: Figure 2 of (Blei and Lafferty 2007). Used withkind permission of David Blei.
27.4.2 Dynamic topic model
In LDA, the topics (distributions over words) are assumed to be static. In some cases, it makes
sense to allow these distributions to evolve smoothly over time. For example, an article mightuse the topic “neuroscience”, but if it was written in the 1900s, it is more likely to use wordslike “nerve”, whereas if it was written in the 2000s, it is more likely to use words like “calciumreceptor” (this reﬂects the general trend of neuroscience towards molecular biology).
One way to model this is use a dynamic logistic normal model, as illustrated in Figure 27.11.
In particular, we assume the topic distributions evolve according to a Gaussian random walk,and then we map these Gaussian vectors to probabilities via the softmax function:
b
t,k|bt−1,k∼N(bt−1,k,σ21V) (27.57)
πt
i∼Dir(α1K) (27.58)
qt
il|πti∼Cat(πti) (27.59)
yt
il|qt
il=k,Bt∼Cat(S(btk)) (27.60)
This is known as a dynamic topic model (Blei and Lafferty 2006b).
27.4. ExtensionsofLDA 963
bt−1
kyt−1
ilqt−1
ilπt−1
i
N
bt
kyt
ilqt
ilπt
i
N
bt+1
kyt+1
ilqt+1
ilπt+1
i
N
Kα
Figure 27.11 The dynamic topic model.
One can perform approximate infernece in this model using a structured mean ﬁeld method
(Section 21.4), that exploits the Kalman smoothing algorithm (Section 18.3.1) to perform exact
inference on the linear-Gaussian chain between the bt,knodes (see (Blei and Lafferty 2006b) for
details).
Figure 27.12 illustrates a typical output of the system when applied to 100 years of articles
fromScience. On the top, we visualize the top 10 words from a speciﬁc topic (which seems to
be related to neuroscience) after 10 year intervals. On the bottom left, we plot the probabilityof some speciﬁc words belonging to this topic. On the bottom right, we list the titles of somearticles that contained this topic.
One interesting application of this model is to perform temporally-corrected document re-
trieval. That is, suppose we look for documents about the inheritance of disease. Modernarticles will use words like “DNA”, but older articles (before the discovery of DNA) may use otherterms such as “heritable unit”. But both articles are likely to use the same topics. Similar ideascan be used to perform cross-language information retrieval, see e.g., (Cimiano et al. 2009).
27.4.3 LDA-HMM
The LDA model assumes words are exchangeable, which is clearly not true. A simple wayto model sequential dependence between words is to use a hidden Markov model or HMM.The trouble with HMMs is that they can only model short-range dependencies, so they cannotcapture the overall gist of a document. Hence they can generate syntactically correct sentences(see e.g., Table 17.1). but not semantically plausible ones.
It is possible to combine LDA with HMM to create a model called LDA-HMM (Griffiths et al.
964 Chapter27. Latentvariablemodelsfordiscretedata
"Neuroscience" 1881
brain
movement
action
right
eye
hand
left
muscle
nerve
sound  1890
movement
eye
right
hand
brain
left
action
muscle
sound
experiment 1900
brain
eye
movement
right
left
hand
nerve
vision
sound
muscle  1910
movement
brain
sound
nerve
active
muscle
left
eye
right
nervous  1920
movement
sound
muscle
active
nerve
stimulate
ﬁber
reaction
brain
response  1930
stimulate
muscle
sound
movement
response
nerve
frequency
ﬁber
active
brain  1940
record
nerve
stimulate
response
muscle
electrode
active
brain
ﬁber
potential  1950
respons
record
stimulate
nerve
muscle
active
frequency
electrode
potential
study  1960
response
stimulate
record
condition
active
potential
stimulus
nerve
subject
eye  1970
respons
cell
potential
stimul
neuron
active
nerve
eye
record
abstract  1980
cell
neuron
response
active
brain
stimul
muscle
system
nerve
receptor  1990
cell
channel
neuron
ca2
active
brain
receptor
muscle
respons
current  2000
neuron
active
brain
cell
ﬁg
response
channel
receptor
synapse
signal 
1880 1900 1920 1940 1960 1980 2000ca2
neuronnerve1887 Mental Science
1900 Hemianopsia in Migraine
1912 A Defence of the ``New Phrenology''
1921 The Synchronal Flashing of Fireﬂies
1932 Myoesthesis and Imageless Thought
1943 Acetylcholine and the Physiology of the Nervous System
1952 Brain Waves and Unit Discharge in Cerebral Cortex
1963 Errorless Discrimination Learning in the Pigeon
1974 Temporal Summation of Light by a Vertebrate Visual Receptor
1983 Hysteresis in the Force-Calcium Relation in Muscle
1993 GABA-Activated Chloride Channels in Secretory Nerve Endings
Figure 27.12 Part of the output of the dynamic topic model when applied to articles from Science.W e
show the top 10 words for the neuroscience topic over time. We also show the probability of three words
within this topic over time, and some articles that contained this topic. Source: Figure 4 of (Blei andLafferty 2006b). Used with kind permission of David Blei.
2004). This model uses the HMM states to model function or syntactic words, such as “and” or
“however”, and uses the LDA to model content or semantic words, which are harder to predict.There is a distinguished HMM state which speciﬁes when the LDA model should be used togenerate the word; the rest of the time, the HMM generates the word.
More formally, for each document i, the model deﬁnes an HMM with states z
il∈{0,...,C}.
In addition, each document has an LDA model associated with it. If zil=0, we generate word
yilfrom the semantic LDA model, with topic speciﬁed by qil; otherwise we generate word yil
from the syntactic HMM model. The DGM is shown in Figure 27.13. The CPDs are as follows:
p(πi)=D i r ( πi|α1K) (27.61)
p(qil=k|πi)=π ik (27.62)
p(zil=c/prime|zi,l−1=c)=AHMM(c,c/prime) (27.63)
p(yil=v|qil=k,zil=c)=/braceleftbiggBLDA(k,v)ifc=0
BHMM(c,v)ifc>0(27.64)
whereBLDAis the usual topic-word matrix, BHMMis the state-word HMM emission matrix
andAHMMis the state-state HMM transition matrix.
Inference in this model can be done with collapsed Gibbs sampling, analytically integrating
out all the continuous quantities. See (Griffiths et al. 2004) for the details.
The results of applying this model (with K= 200LDA topics and C=2 0HMM states) to the
combined Brown and TASA corpora4are shown in Table 27.1. We see that the HMM generally is
4. The Brown corpus consists of 500 documents and 1,137,466 word tokens, with part-of-speech tags for each token.
27.4. ExtensionsofLDA 965
AHMMBHMMBLDA
zi,l−1 zi,l zi,l+1...yi,l−1 yi,l yi,l+1...qi,l−1 qi,l qi,l+1...πiα
N
Figure 27.13 LDA-HMM model.
1.In contrast to this approach, we study here how the overall network activity can control single cell
parameters such as input resistance, as well as time andspace constants, parameters that are crucial for
excitability andspariotemporal (sic) integration .
The integrated architecture in this paper combines feed forward control anderror feedback adaptive
control using neural networks.
2.In other words, for our proof ofconvergence , we require the softassign algorithm toreturn adoubly
stochastic matrix as *sinkhorn theorem guarantees that it will instead of a matrix which is merely close
to being doubly stochastic based on some reasonable metric.
The aim is to construct a portfolio with a maximal expected return for a given risklevel andtime
horizon while simultaneously obeying *institutional or*legally required constraints.
3.The left graph is the standard experiment the right from atraining with #samples .
The graphGis called the *guest graph, andHis called the host graph.
Figure 27.14 Function and content words in the NIPS corpus, as distinguished by the LDA-HMM model.
Graylevel indicates posterior probability of assignment to LDA component, with black being highest. The
boxed word appears as a function word in one sentence, and as a content word in another sentence.Asterisked words had low frequency, and were treated as a single word type by the model. Source: Figure4 of (Griffiths et al. 2004). Used with kind permission of Tom Griffiths.
966 Chapter27. Latentvariablemodelsfordiscretedata
the the the the the a the the the
blood , , of a the , , ,
, and and , of of of a a
of of of to , , a of in
body a in in in in and and game
heart in land and to water in drink ball
and trees to classes picture is story alcohol and
in tree farmers government ﬁlm and is to team
to with for a image matter to bottle to
is on farm state lens are as in play
blood forest farmers government light water story drugs ball
heart trees land state eye matter stories drug game
pressure forests crops federal lens molecules poem alcohol team
body land farm public image liquid characters people *
lungs soil food local mirror particles poetry drinking baseball
oxygen areas people act eyes gas character person players
vessels park farming states glass solid author effects football
arteries wildlife wheat national object substance poems marijuana player
* area farms laws objects temperature life body ﬁeld
breathing rain corn department lenses changes poet use basketball
the in he * be said can time ,
a for it new have made would way ;
his to you other see used will years (
this on they ﬁrst make came could day :
their with i same do went may part )
these at she great know found had number
your by we good get called must kind
her from there small go do place
my as this little take have
some into who old ﬁnd did
Table 27.1 Upper row: Topics extracted by the LDA model when trained on the combined Brown and
TASA corpora. Middle row: topics extracted by LDA part of LDA-HMM model. Bottom row: topics extracted
by HMM part of LDA-HMM model. Each column represents a single topic/class, and words appear in orderof probability in that topic/class. Since some classes give almost all probability to only a few words, a listis terminated when the words account for 90% of the probability mass. Source: Figure 2 of (Griffiths et al.2004). Used with kind permission of Tom Griffiths.
responsible for syntactic words, and the LDA for semantics words. If we did not have the HMM,
the LDA topics would get “polluted” by function words (see top of ﬁgure), which is why suchwords are normally removed during preprocessing.
The model can also help disambiguate when the same word is being used syntactically or
semantically. Figure 27.14 shows some examples when the model was applied to the NIPScorpus.
5We see that the roles of words are distinguished, e.g., “we require the algorithm to
returna matrix” (verb) vs “the maximal expected return” (noun). In principle, a part of speech
tagger could disambiguate these two uses, but note that (1) the LDA-HMM method is fullyunsupervised (no POS tags were used), and (2) sometimes a word can have the same POS tag,but different senses, e.g., “the left graph” (a synactic role) vs “the graph G” (a semantic role).
The topic of probabilistic models for syntax and semantics is a vast one, which we do not
The TASA corpus is an untagged collection of educational materials consisting of 37,651 documents and 12,190,931 word
tokens. Words appearing in fewer than 5 documents were replaced with an asterisk, but punctuation was included. The
combined vocabulary was of size 37,202 unique words.
5. NIPS stands for “Neural Information Processing Systems”. It is one of the top machine learning conferences. The
NIPS corpus volumes 1–12 contains 1713 documents.
27.4. ExtensionsofLDA 967
Byilqil
ci¯qi
wπi
Nα
(a)BA
yilqilciπi
Nα
(b)
Figure 27.15 (a) Supervised LDA. (b) Discriminative LDA.
have space to delve into any more. See e.g., (Jurafsky and Martin 2008) for further information.
27.4.4 Supervised LDA
In this section, we discuss extensions of LDA to handle side information of various kinds beyond
just words.
27.4.4.1 Generative supervised LDA
Suppose we have a variable length sequence of words yil∈{1,...,V}as usual, but we also
have a class label ci∈{1,...,C}. How can we predict cifromyi? There are many possible
approaches, but most are direct mappings from the words to the class. In some cases, suchassentiment analysis , we can get better performance by ﬁrst performing inference, to try
to disambiguate the meaning of words. For example, suppose the goal is to determine if adocument is a favorable review of a movie or not. If we encounter the phrase “Brad Pitt wasexcellent until the middle of the movie”, the word “excellent” may lead us to think the review ispositive, but clearly the overall sentiment is negative.
One way to tackle such problems is to build a joint model of the form p(c
i,yi|θ). (Blei
and McAuliffe 2010) proposes an approach, called supervised LDA, where the class label ciis
generated from the topics as follows:
p(ci|qi) = Ber(sigm(wTqi)) (27.65)
Hereqiis the empirical topic distribution for document i:
qik/defines1
LiLi/summationdisplay
i=1qilk (27.66)
See Figure 27.15(a) for an illustration.
968 Chapter27. Latentvariablemodelsfordiscretedata
Byilqilπixi
NW
(a)Byilqilπixi
NWiμ Σ
(b)Byilqilπiαixi
NW
(c)
Figure 27.16 Discriminative variants of LDA. (a) Mixture of experts aka MR-LDA. The double ring denotes
a node that πia deterministic function of its parents. (b) Mixture of experts with random effects. (c)
DMR-LDA.
We can ﬁt this model using Monte Carlo EM: run the collapsed Gibbs sampler in the E step, to
compute E[qik], and then use this as the input feature to a standard logistic regression package.
27.4.4.2 Discriminative supervised LDA
An alternative approach, known as discriminative LDA (Lacoste-Julien et al. 2009), is shown in
Figure 27.15(b). This is a discriminative model of the form p(yi|ci,θ). The only change from
regular LDA is that the topic prior becomes input dependent, as follows:
p(qil|πi,ci=c,θ)=C a t (Acπ) (27.67)
whereAcis aK×Kstochastic matrix.
So far, we have assumed the “side information” is a single categorical variable ci.O f t e nw e
have high dimensional covariates xi∈RD. For example, consider the task of image tagging.
The idea is that yilrepresent correlated tags or labels, which we want to predict given xi.W e
now discuss several attempts to extend LDA so that it can generate tags given the inputs.
The simplest approach is to use a mixture of experts (Section 11.2.4) with multiple outputs.
This is just like LDA except we replace the Dirichlet prior on πiwith a deterministic function
of the input:
πi=S(Wxi) (27.68)
In (Law et al. 2010), this is called multinomial regression LDA. See Figure 27.16(a). Eliminating
the deterministic πiwe have
p(qil|xi,W)=C a t (S(Wxi)) (27.69)
We can ﬁt this with EM in the usual way. However, (Law et al. 2010) suggest an alternative.
First ﬁt an unsupervised LDA model based only on yi; then treat the inferred πias data, and
27.4. ExtensionsofLDA 969
ﬁt a multinomial logistic regression model mapping xitoπi. Although this is fast, ﬁtting LDA
in an unsupervised fashion does not necessarily result in a discriminative set of latent variables,
as discussed in (Blei and McAuliffe 2010).
There is a more subtle problem with this model. Since πiis a deterministic function of the
inputs, it is effectively observed, rendering the qil(and hence the tags yil) independent. In other
words,
p(yi|xi,θ)=Li/productdisplay
l=1p(yil|xi,θ)=Li/productdisplay
l=1/summationdisplay
kp(yil|qil=k,B)p(qil=k|xi,W) (27.70)
This means that if we observe the value of one tag, it will have no inﬂuence on any of theothers. This may explain why the results in (Law et al. 2010) only show negligible improvementover predicting each tag independently.
One way to induce correlations is to make Wa random variable. The resulting model is
shown in Figure 27.16(b). We call this a random effects mixture of experts . We typically
assume a Gaussian prior on W
i.I fxi=1, thenp(qil|xi,wi)=C a t (S(wi)),s ow er e c o v e r
the correlated topic model. It is possible to extend this model by adding Markovian dynamicsto theq
ilvariables. This is called a conditional topic random ﬁeld (Zhu and Xing 2010).
A closely related approach, known as Dirichlet multinomial regression LDA (Mimno and
McCallum 2008), is shown in Figure 27.16(c). This is identical to standard LDA except we makeαa function of the input
α
i=e x p (Wxi) (27.71)
whereWis aK×Dmatrix. Eliminating the deterministic αiwe have
πi∼Dir(exp(Wx i)) (27.72)
Unlike (Law et al. 2010), this model allows information to ﬂow between tags via the latent πi.
A variant of this model, where xicorresponds to a bag of discrete labels and πi∼Dir(α⊙
xi), is known as labeled LDA (Ramage et al. 2009). In this case, the labels xiare in 1:1
correspondence with the latent topics, which makes the resulting topics much more interpretable.An extension, known as partially labeled LDA (Ramage et al. 2011), allows each label to have
multiple latent sub-topics; this model includes LDA, labeled LDA and a multinomial mixturemodel as special cases.
27.4.4.3 Discriminative categorical PCA
An alternative to using LDA is to expand the categorical PCA model with inputs, as shown inFigure 27.17(a). Since the latent space is now real-valued, we can use simple linear regressionfor the input-hidden mapping. For the hidden-output mapping, we use traditional catPCA:
p(z
i|xi,V)=N (Vxi,Σ) (27.73)
p(yi|zi,W)=/productdisplay
lCat(yil|S(Wzi)) (27.74)
This model is essentially a probabilistic neural network with one hidden layer, as shown inFigure 27.17(b), but with exchangeable output (e.g., to handle variable numbers of tags). The
970 Chapter27. Latentvariablemodelsfordiscretedata
yilzixi
NWV
(a)Wyi1... ...yiLizi1...ziKxi1... ...xiD
Nv1 vK
(b)
Figure 27.17 (a) Categorical PCA with inputs and exchangeable outputs. (b) Same as (a), but with the
vector nodes expanded out.
key difference from a neural net is that information can ﬂow between the yil’s via the latent
bottleneck layer zi. This should work better than a conventional neural net when the output
labels are highly correlated, even after conditioning on the features; this problem frequently
arises in multi label classiﬁcation. Note that we could allow a direct xitoyiarc, but this would
require too many parameters if the number of labels is large.6
We can ﬁt this model with a small modiﬁcation of the variational EM algorithm in Section 12.4.
If we use this model for regression, rather than classiﬁcation, we can perform the E step exactly,by modifying the EM algorithm for factor analysis. (Ma et al. 1997) reports that this methodconverges faster than standard backpropagation.
We can also extend the model so that the prior on z
iis a mixture of Gaussians using input-
dependent means. If the output is Gaussian, this corresponds to a mixture of discriminativefactor analysers (Fokoue 2005; Zhou and Liu 2008). If the output is categorical, this would bean (as yet unpublished) model, which we could call “discriminative mixtures of categorical factoranalyzers”.
27.5 LVMs for graph-structured data
Another source of discrete data is when modeling graph or network structures. To see theconnection, recall that any graph on Dnodes can be represented as a D×Dadjacency
matrixG,w h e r e G(i,j)=1iff there is an edge from node ito nodej. Such matrices are
binary, and often very sparse. See Figure 27.19 for an example.
Graphs arise in many application areas, such as modeling social networks, protein-protein
interaction networks, or patterns of disease transmission between people or animals. There areusually two primary goals when analysing such data: ﬁrst, try to discover some “interesting
6. A non-probabilistic version of this idea, using squared loss, was proposed in (Ji et al. 2010). This is similar to a linear
feed-forward neural network with an additional edge from xidirectly to yi.
27.5. LVMsforgraph-structureddata 971
789456123
(a)978235164
(b)
Figure 27.18 (a) A directed graph. (b) The same graph, with the nodes partitioned into 3 groups, making
the block structure more apparent.
1
2
3
4
5
6
7
8
9123456789
(a)
0.1
 0.9
 0.1
0.1
 0.1
 0.9
0.9
 0.1
 0.1
1
6
4
8
2
3
5
9
7164823597
Rz97382
5164η
(b)
Figure 27.19 (a) Adjacency matrix for the graph in Figure 27.18(a). (b) Rows and columns are shown
permuted to show the block structure. We also sketch of how the stochastic block model can generate this
graph. From Figure 1 of (Kemp et al. 2006). Used with kind permission of Charles Kemp.
structure” in the graph, such as clusters or communities; second, try to predict which links
might occur in the future (e.g., who will make friends with whom). Below we summarize some
models that have been proposed for these tasks, some of which are related to LDA. Futher details
on these and other approaches can be found in e.g., (Goldenberg et al. 2009) and the references
therein.
27.5.1 Stochastic block model
In Figure 27.18(a) we show a directed graph on 9 nodes. There is no apparent structure. However,
if we look more deeply, we see it is possible to partition the nodes into three groups or blocks,
B1={1,4,6},B2={2,3,5,8}, andB3={7,9}, such that most of the connections go from
nodes in B1toB2,o rf r o m B2toB3,o rf r o m B3toB1. This is illustrated in Figure 27.18(b).
972 Chapter27. Latentvariablemodelsfordiscretedata
A
D C B A
DCBAE CD AB F G H
A
B
C
D
E
GF
H
CD
D C B A
DCB
Relational system Sorted matrix
E D C B A
EDCBAB
DA
ECE
GHFBA
CA
DBC
DBA
Figure 27.20 Some examples of graphs generated using the stochastic block model with different kinds
of connectivity patterns between the blocks. The abstract graph (between blocks) represent a ring, a
dominance hierarchy, a common-cause structure, and a common-effect structure. From Figure 4 of (Kemp
et al. 2010). Used with kind permission of Charles Kemp.
The problem is easier to understand if we plot the adjacency matrices. Figure 27.19(a) shows
the matrix for the graph with the nodes in their original ordering. Figure 27.19(b) shows the
matrix for the graph with the nodes in their permtuted ordering. It is clear that there is block
structure.
We can make a generative model of block structured graphs as follows. First, for every
node, sample a latent block qi∼Cat(π),w h e r eπkis the probability of choosing block k,f o r
k=1:K. Second, choose the probability of connecting group ato group b, for all pairs of
groups; let us denote this probability by ηa,b. This can come from a beta prior. Finally, generate
each edge Rijusing the following model:
p(Rij=r|qi=a,qj=b,η)=B e r (r|ηa,b) (27.75)
This is called the stochastic block model (Nowicki and Snijders 2001). Figure 27.21(a) illustrates
the model as a DGM, and Figure 27.19(c) illustrates how this model can be used to cluster the
nodes in our example.
Note that this is quite different from a conventional clustering problem. For example, we
see that all the nodes in block 3 are grouped together, even though there are no connections
between them. What they share is the property that they “like to” connect to nodes in block 1,
and to receive connections from nodes in block 2. Figure 27.20 illustrates the power of the model
for generating many different kinds of graph structure. For example, some social networks have
hierarchical structure, which can be modeled by clustering people into different social strata,
whereas others consist of a set of cliques.
Unlike a standard mixture model, it is not possible to ﬁt this model using exact EM, because
all the latent qivariables become correlated. However, one can use variational EM (Airoldi et al.
27.5. LVMsforgraph-structureddata 973
qi
ηa,bRi,j
Iπqj
J
(a)qi→j
ηa,bRi,j
Iπiqi←jπjα
J
(b)
Figure 27.21 (a) Stochastic block model. (b) Mixed membership stochastic block model.
2008), collapsed Gibbs sampling (Kemp et al. 2006), etc. We omit the details (which are similar
to the LDA case).
In (Kemp et al. 2006), they lifted the restriction that the number of blocks Kbe ﬁxed, by
replacing the Dirichlet prior on πby a Dirichlet process (see Section 25.2.2). This is known as
the inﬁnite relational model. See Section 27.6.1 for details.
If we have features associated with each node, we can make a discriminative version of this
model, for example by deﬁning
p(Rij=r|qi=a,qj=b,xi,xj,θ)=B e r (r|wT
a,bf(xi,xj)) (27.76)
wheref(xi,xj)is some way of combining the feature vectors. For example, we could use
concatenation, [xi,xj], or elementwise product xi⊗xjas in supervised LDA. The overall
model is like a relational extension of the mixture of experts model.
27.5.2 Mixed membership stochastic block model
In (Airoldi et al. 2008), they lifted the restriction that each node only belong to one cluster. Thatis, they replaced q
i∈{1,...,K}withπi∈SK. This is known as the mixed membership
stochastic block model, and is similar in spirit to fuzzy clustering orsoft clustering.N o t e
thatπikis not the same as p(zi=k|D); the former represents ontological uncertainty (to
what degree does each object belong to a cluster) wheras the latter represents epistemological
uncertainty (which cluster does an object belong to). If we want to combine epistemological
and ontological uncertainty, we can compute p(πi|D).
In more detail, the generative process is as follows. First, each node picks a distribution over
blocks,πi∼Dir(α). Second, choose the probability of connecting group ato group b, for all
pairs of groups, ηa,b∼β(α,β). Third, for each edge, sample two discrete variables, one for
each direction:
qi→j∼Cat(π i),qi←j∼Cat(π j) (27.77)
Finally, generate each edge Rijusing the following model:
p(Rij=1|qi→j=a,qi←j=b,η)=ηa,b (27.78)
974 Chapter27. Latentvariablemodelsfordiscretedata
(a)   1    2   3
   4   5   6   7
   8   9
   10   11   12
   13
   14   15
   16   17
   18Outcasts
Loyal
Opposition Young
TurksWaverers1 Ambrose
2 Boniface
3 Mark4 Winfrid5 Elias6 Basil7 Simplicius8 Berthold9 John Bosco10 Victor11 Bonaventure12 Amand13 Louis14 Albert15Ramuald16 Peter17 Gregory18 Hugh
(b)
Figure 27.22 (a) Who-likes-whom graph for Sampson’s monks. (b) Mixed membership of each monk in
one of three groups. From Figures 2-3 of (Airoldi et al. 2008). Used with kind permission of Edo Airoldi.
See Figure 27.21(b) for the DGM.
Unlike the regular stochastic block model, each node can play a different role, depending on
who it is connecting to. As an illustration of this, we will consider a data set that is widely usedin the social networks analysis literature. The data concerns who-likes-whom amongst of groupof 18 monks. It was collected by hand in 1968 by Sampson (Sampson 1968) over a period ofmonths. (These days, in the era of social media such as Facebook, a social network with only 18people is trivially small, but the methods we are discussing can be made to scale.) Figure 27.22(a)plots the raw data, and Figure 27.22(b) plots E[π]
ifor each monk, where K=3. We see that
most of the monk belong to one of the three clusters, known as the “young turks”, the “outcasts”and the “loyal opposition”. However, some individuals, notably monk 15, belong to two clusters;Sampson called these monks the “waverers”. It is interesting to see that the model can recoverthe same kinds of insights as Sampson derived by hand.
One prevalent problem in social network analysis is missing data. For example, if R
ij=0,
it may be due to the fact that person iandjhave not had an opportunity to interact, or
that data is not available for that interaction, as opposed to the fact that these people don’twant to interact. In other words, absence of evidence is not evidence of absence. We can model
this by modifying the observation model so that with probability ρ, we generate a 0 from the
background model, and we only force the model to explain observed 0s with probability 1−ρ.
In other words, we robustify the observation model to allow for outliers, as follows:
p(R
ij=r|qi→j=a,qi←j=b,η)=ρδ0(r)+(1−ρ)Ber(r|ηa,b) (27.79)
See (Airoldi et al. 2008) for details.
27.5.3 Relational topic model
In many cases, the nodes in our network have atttributes. For example, if the nodes representacademic papers, and the edges represent citations, then the attributes include the text of thedocument itself. It is therefore desirable to create a model that can explain the text and the linkstructure concurrently. Such a model can predict links given text, or even vice versa.
Therelational topic model (RTM) (Chang and Blei 2010) is one way to do this. This is a
27.6. LVMsforrelationaldata 975
yilqilπi
¯qiRij
I¯qjqjlyjl
πj
JαB
w
Figure 27.23 DGM for the relational topic model.
simple extension of supervised LDA (Section 27.4.4.1), where the response variable Rij(which
represents whether there is an edge between nodes iandj) is modeled as follows:
p(Rij=1|qi,qj,θ) = sigm(wT(qi⊗qj)+w0) (27.80)
Recall that qiis the empirical topic distribution for document i,qik/defines1
Li/summationtextLi
i=1qilk. See
Figure 27.23
Note that it is important that Rijdepend on the actual topics chosen, qiandqj, and not
on the topic distributions, πiandπj, otherwise predictive performance is not as good. The
intuitive reason for this is as follows: if Rijis a child of πiandπj, it will be treated as just
another word, similar to the qil’s andyil’s; but since there are many more words than edges,
the graph structure information will get “washed out”. By making Rija child of qiandqj, the
graph information can inﬂuence the choice of topics more directly.
One can ﬁt this model in a manner similar to SLDA. See (Chang and Blei 2010) for details.
The method does better at predicting missing links than the simpler approach of ﬁrst ﬁtting an
LDA model, and then using the qi’s as inputs to a logistic regression problem. The reason is
analogous to the superiority of partial least squares (Section 12.5.2) to PCA+ linear regression,namely that the RTM learns a latent space that is forced to be predictive of the graph structureand words, whereas LDA might learn a latent space that is not useful for predicting the graph.
27.6 LVMs for relational data
Graphs can be used to represent data which represents the relation amongst variables of acertain type, e.g., friendship relationships between people. But often we have multiple types ofobjects, and multiple types of relations. For example, Figure 27.24 illustrates two relations, onebetween people and people, and one between people and movies.
In general, we deﬁne a k-aryrelationRas a subset of k-tuples of the appropriate types:
R⊆T
1×T2×···×T k (27.81)
976 Chapter27. Latentvariablemodelsfordiscretedata
Figure 27.24 Example of relational data. There are two types of objects, peopleandmovies; one 2-ary
relation,friends:people×people→{0,1}and one 2-ary function, rates:people×movie→R.Ageand
sexare attributes (unary functions) of the peopleclass.
whereTiare sets or types. A binary, pairwise or dyadic relation is a relation deﬁned on pairs
of objects. For example, the seenrelation between people and movies might be represented as
the set of movies that people have seen. We can either represent this explicitly as a set, such as
seen = { (Bob, StarWars), (Bob, TombRaider), (Alice, Jaws)}
or implicitly, using an indicator function for the set:
seen(Bob, StarWars)=1, seen(Bob, TombRaider)=1, seen(Alice, Jaws)=1
A relation between two entities of types T1andT2can be represented as a binary function
R:T1×T2→{0,1}, and hence as a binary matrix. This can also be represented as a bipartite
graph, in which we have nodes of two types. If T1=T2, this becomes a regular directed graph,
as in Section 27.5. However, there are some situations that are not so easily modelled by graphs,
but which can still be modelled by relations. For example, we might have a ternary relation,
R:T1×T1×T2→{0,1}, where, say, R(i,j,k)=1iff protein iinteracts with protein j
when chemical kis present. This can be modelled by a 3d binary matrix. We will give some
examples of this in Section 27.6.1.
Making probabilistic models of relational data is called statistical relational learning (Getoor
and Taskar 2007). One approach is to directly model the relationship between the variables using
graphical models; this is known as probabilistic relational modeling . Another approach is to
use latent variable models, as we discuss below.
27.6.1 Inﬁnite relational model
It is straightforward to extend the stochastic block model to model relational data: we just
associate a latent variable qt
i∈{1,...,K t}with each entity iof each type t. We then deﬁne
the probability of the relation holding between speciﬁc entities by looking up the probability of
the relation holding between entities of that type. For example, if R:T1×T1×T2→{0,1},
we have
p(R(i,j,k)=1|q1
i=a,q1
j=b,q2
k=c,η)=ηa,b,c (27.82)
If we allow the number of clusters Ktfor each type to be unbounded, by using a Dirichlet pro-
cess, the model is called the inﬁnite relational model (IRM) (Kemp et al. 2006). An essentially
27.6. LVMsforrelationaldata 977
/g4/g9/g6/g12/g10/g4/g2/g11/g16
/g5/g10/g16/g6/g2/g16/g6/g16
/g16/g10/g8/g13/g16 /g14/g15/g8/g2/g13/g10/g16/g12/g16/g3/g10/g14/g2/g4/g17/g10/g19/g6/g1/g16/g18/g3/g16/g17/g2/g13/g4/g6/g16
/g3/g10/g14/g11/g14/g8/g10/g4/g2/g11/g1/g7/g18/g13/g4/g17/g10/g14/g13/g16
/g2/g3/g13/g14/g15/g12/g2/g11/g10/g17/g10/g6/g16causes,
result ofaffects,
complicates
disrupts
result of, manifestation ofaffects, process of,
affects,
process of
associated withcauses
manifestation ofaffects
affects,process of,
result ofaffects,
result ofcomplicates,
manifestation ofinteract with
process of,
result of
affects,
process ofcauses,
manifestation of,associated withcomplicatesaffects,causes
manifestation of,complicatesaffects,
Figure 27.25 Illustration of an ontology learned by IRM applied to the Uniﬁed Medical Language System.
The boxes represent 7 of the 14 concept clusters. Predicates that belong to the same cluster are grouped
together, and associated with edges to which they pertain. All links with weight above 0.8 have beenincluded. From Figure 9 of (Kemp et al. 2010). Used with kind permission of Charles Kemp.
identical model, under the name inﬁnite hidden relational model (IHRM), was concurrently
proposed in (Xu et al. 2006). We can ﬁt this model with variational Bayes (Xu et al. 2006, 2007)
or collapsed Gibbs sampling (Kemp et al. 2006). Rather than go into algorithmic detail, we justsketch some interesting applications.
27.6.1.1 Learning ontologies
Anontology refers to an organisation of knowledge. In AI, ontologies are often built by hand
(see e.g., (Russell and Norvig 2010)), but it is interesting to try and learn them from data. In(Kemp et al. 2006), they show how this can be done using the IRM.
The data comes from the Uniﬁed Medical Language System (McCray 2003), which deﬁnes
a semantic network with 135 concepts (such as “disease or syndrome”, “diagnostic procedure”,“animal”), and 49 binary predicates (such as “affects”, “prevents”). We can represent this as aternary relation R:T
1×T1×T2→{0,1},w h e r e T1is the set of concepts and T2is the
set of binary predicates. The result is a 3d cube. We can then apply the IRM to partition thecube into regions of roughly homogoneous response. The system found 14 concept clusters and21 predicate clusters. Some of these are shown in Figure 27.25. The system learns, for example,that biological functions affect organisms (since η
a,b,c≈1wherearepresents the biological
function cluster, brepresents the organism cluster, and crepresents the affects cluster).
27.6.1.2 Clustering based on relations and features
We can also use IRM to cluster objects based on their relations and their features. For example,(Kemp et al. 2006) consider a political dataset (from 1965) consisting of 14 countries, 54 binary
978 Chapter27. Latentvariablemodelsfordiscretedata
joint
membership
of IGOs
joint
membership
of NGOs
negative
behavior
negative
communications
 accusations
 protests
treaties
 conferences
common bloc
membership
economic
aid
 emigration
military
alliance
sends
tourists to
exports
books to
 exports to
Brazil
Netherlands
UK
USA
Burma
Indonesia
Jordan
Egypt
India
Israel
China
Cuba
Poland
USSR
noncommunist
western bloc
constitutional govt
free elections
communist bloc
communists
totalitarian
elitist
high censorship
no free elections
illiteracy
domestic violence
purges
far from US
rainfall
religious books
exports/GNP
govt education $
military personnel
seaborne goods
govt crisis
UN delinquent
neutral bloc
assassinations
govt revolution
num religions
intervening military
some censorship
energy consumed
telephone
population
defense $
threats
GNP
protests
Catholics
US aid taken
popn. density
land area
railroad length
foreign students
age of country
law NGOs
num languages
aid $ taken
female workers
foreign mail sent
protein in diet
investments
arts NGOs
monarchy
road length
arable
emigrants
unemployed
calories in dieta)
c) d)
e) g) h) i)b)
book
translationsf)
Figure 27.26 Illustration of IRM applied to some political data containing features and pairwise interac-
tions. Top row (a). the partition of the countries into 5 clusters and the features into 5 clusters. Every
second column is labelled with the name of the corresponding feature. Small squares at bottom (a-i): these
are 8 of the 18 clusters of interaction types. From Figure 6 of (Kemp et al. 2006). Used with kind permission
of Charles Kemp.
predicates representing interaction types between countries (e.g., “sends tourists to”, “economic
aid”), and 90 features (e.g., “communist”, “monarchy”). To create a binary dataset, real-valued
features were thresholded at their mean, and categorical variables were dummy-encoded. The
data has 3 types: T1represents countries, T2represents interactions, and T3represents features.
We have two relations: R1:T1×T1×T2→{0,1}, andR2:T1×T3→{0,1}. (This problem
therefore combines aspects of both the biclustering model and the ontology discovery model.)
When given multiple relations, the IRM treats them as conditionally independent. In this case,
we have
p(R1,R2,q1,q2,q3|θ)=p(R1|q1,q2,θ)p(R2|q1,q3,θ) (27.83)
The results are shown in Figure 27.26. The IRM divides the 90 features into 5 clusters, the
ﬁrst of which contains “noncommunist”, which captures one of the most important aspects of
this Cold-War era dataset. It also clusters the 14 countries into 5 clusters, reﬂecting natural
geo-political groupings (e.g., US and UK, or the Communist Bloc), and the 54 predicates into 18
clusters, reﬂecting similar relationships (e.g., “negative behavior and “accusations”).
27.6. LVMsforrelationaldata 979
27.6.2 Probabilistic matrix factorization for collaborative ﬁltering
As discussed in Section 1.3.4.2, collaborative ﬁltering (CF) requires predicting entries in a matrix
R:T1×T2→R, where for example R(i,j)is the rating that user igave to movie j. Thus
we see that CF is a kind of relational learning problem (and one with particular commercialimportance).
Much of the work in this area makes use of the data that Netﬂix made available in their
competition. In particular, a large 17,770 ×480,189 movie x user ratings matrix is provided. The
full matrix would have ∼8.6×10
9entries, but only 100,480,507 (about 1%) of the entries are
observed, so the matrix is extremely sparse. In addition the data is quite imbalanced, with manyusers rating fewer than 5 movies, and a few users rating over 10,000 movies. The validationset is 1,408,395 (movie,user) pairs. Finally, there is a separate test set with 2,817,131 (movie,user)pairs, for which the ranking is known but withheld from contestants. The performance measureis root mean square error:
RMSE=/radicaltp/radicalvertex/radicalvertex/radicalbt
1
NN/summationdisplay
i=1(X(mi,ui)−ˆX(mi,ui))2 (27.84)
whereX(mi,ui)is the true rating of user uion movie mi, andˆX(mi,ui)is the prediction.
The baseline system, known as Cinematch, had an RMSE on the training set of 0.9514, and on
the test set of 0.9525. To qualify for the grand prize, teams needed to reduce the test RMSE by10%, i.e., get a test RMSE of 0.8563 or less. We will discuss some of the basic methods used bytthe winning team below.
Since the ratings are drawn from the set {0,1,2,3,4,5}, it is tempting to use a categorical
observation model. However, this does not capture the fact that the ratings are ordered. Althoughwe could use an ordinal observation model, in practice people use a Gaussian observation modelfor simplicity. One way to make the model better match the data is to pass the model’s predictedmean response through a sigmoid, and then to map the [0,1]interval to [0,5](Salakhutdinov
and Mnih 2008). Alternatively we can make the data a better match to the Gaussian model bytransforming the data using R
ij=/radicalbig
6−Rij(Aggarwal and Merugu 2007).
We could use the IRM for the CF task, by associating a discrete latent variable for each user
qu
iand for each movie or video qv
j, and then deﬁning
p(Rij=r|qu
i=a,qv
j=b,θ)=N(r|μa,b,σ2) (27.85)
This is just another example of co-clustering. We can also extend the model to generate sideinformation, such as attributes about each user and/or movie. See Figure 27.27 for an illustration.
Another possibility is to replace the discrete latent variables with continuous latent variables
π
u
i∈SKuandπvj∈SKv. However, it has been found (see e.g., (Shan and Banerjee 2010)) that
one obtains much better results by using unconstrained real-valued latent factors for each user
ui∈RKand each movie vj∈RK.7We then use a likelihood of the form
p(Rij=r|ui,vj)=N(r|uT
ivj,σ2) (27.86)
7. Good results with discrete latent variables have been obtained on some datasets that are smaller than Netﬂix, such as
MovieLens and EachMovie. However, these datasets are much easier to predict, because there is less imbalance between
the number of reviews performed by different users (in Netﬂix, some users have rated more than 10,000 movies, whereas
others have rated less than 5).
980 Chapter27. Latentvariablemodelsfordiscretedata
Figure 27.27 Visualization of a small relational dataset, where we have one relation, likes(user, movie),
and features for movies (here, genre) and users (here, occupation). From Figure 5 of (Xu et al. 2008). Used
with kind permission of Zhao Xu.
Rijuiμu
ΣuT1vj
T2μvΣv
σ2
(a)−1.5 −1.0 −0.5 0.0 0.5 1.0−1.5 −1.0 −0.5 0.0 0.5 1.0 1.5
Factor Vector 1Factor Vector 2Freddy Got Fingered
Freddy vs. JasonHalf Baked
Road Trip
The Sound of MusicSophie’s Choice
Moonstruck
Maid in ManhattanThe Way We Were
Runaway Bride Coyote UglyThe Royal TenenbaumsPunch−Drunk Love
I Heart Huckabees
ArmageddonCitizen Kane
The Waltons: Season 1
StepmomJulien Donkey−Boy
Sister Act The Fast and the FuriousThe Wizard of OzKill Bill: Vol. 1
ScarfaceNatural Born KillersAnnie Hall Belle de JourLost in Translation
The Longest YardBeing John Malkovich
Catwoman
(b)
Figure 27.28 (a) A DGM for probabilistic matrix factorization. (b) Visualization of the ﬁrst two factors in
the PMF model estimated from the Netﬂix challenge data. Each movie jis plotted at the location speciﬁed
ˆvj. On the left we have low-brow humor and horror movies ( Half Baked ,Freddy vs Jason ), and on the
right we have more serious dramas ( Sophie’s Choice ,Moonstruck ). On the top we have critically acclaimed
independent movies ( Punch-Drunk Love ,I Heart Huckabees ), and on the bottom we have mainstream
Hollywood blockbusters ( Armageddon ,RunwayBride ). TheWizardofOz is right in the middle of these axes.
From Figure 3 of (Koren et al. 2009). Used with kind permission of Yehuda Koren.
This has been called probabilistic matrix factorization (PMF) (Salakhutdinov and Mnih 2008).
See Figure 27.28(a) for the DGM. The intuition behind this method is that each user and each
movie get embedded into the same low-dimensional continuous space (see Figure 27.28(b)). If a
user is close to a movie in that space, they are likely to rate it highly. All of the best entries in
the Netﬂix competition used this approach in one form or another.8
PMF is closely related to the SVD. In particular, if there is no missing data, then computing
the MLE for the ui’s and the vj’s is equivalent to ﬁnding a rank Kapproximation to R.
However, as soon as we have missing data, the problem becomes non-convex, as shown in
8. The winning entry was actually an ensemble of different methods, including PMF, nearest neighbor methods, etc.
27.6. LVMsforrelationaldata 981
0 5 10 15 20 25 30 35 40 45 50 55 600.90.910.920.930.940.950.960.97
EpochsRMSE
PMF
Constrained 
PMFNetflix Baseline Score
SVD
(a)10 100 1000 10000 1000000.8750.880.8850.890.8950.90.9050.9140
60
90
128
180 50
100200
50
100
200
50
100200500 1000
1500
Millions of ParametersRMSEPlain
w/Biases
w/Implicit feedback
w/Temporal dynamics
(b)
Figure 27.29 (a) RMSE on the validation set for different PMF variants vs number of passes through
the data. “SVD” is the unregularized version, λU=λV=0. “PMF1” corresponds to λU=0.01and
λV=0.001, while “PMF2” corresponds to λU=0.001andλV=0.0001. “PMFA1” corresponds to a
version where the mean and diagonal covariance of the Gaussian prior were learned from data. From
Figure 2 of (Salakhutdinov and Mnih 2008). Used with kind permission of Ruslan Salakhutdinov. (b) RMSEon the test set (quiz portion) vs number of parameters for several different models. “Plain” is the baselinePMF with suitably chosen λ
U,λV. “With biases” adds fiandgjoffset terms. “With implicit feedback”
“With temporal dynamics” allows the offset terms to change over time. The Netﬂix baseline system achievesan RMSE of 0.9514, and the grand prize’s required accuracy is 0.8563 (which was obtained on 21 September2009). Figure generated by netflixResultsPlot . From Figure 4 of (Koren et al. 2009). Used with kind
permission of Yehuda Koren.
(Srebro and Jaakkola 2003), and standard SVD methods cannot be applied. (Recall that in the
Netﬂix challenge, only about 1% of the matrix is observed.)
The most straightforward way to ﬁt the PMF model is to minimize the overall NLL:
J(U,V)=−logp(R|U,V,O)=−log⎛
⎝N/productdisplay
i=1M/productdisplay
j=1/bracketleftbig
N(Rij|uT
ivj,σ2)/bracketrightbigI(Oij=1)⎞
⎠(27.87)
whereOij=1if userihas seen movie j. Since this is non-convex, we can just ﬁnd a locally
optimal MLE. Since the Netﬂix data is so large (about 100 million observed entries), it is common
to use stochastic gradient descent (Section 8.5.2) for this task. The gradient for uiis given by
dJ
dui=d
dui1
2/summationdisplay
ijI(Oij=1 ) (Rij−uT
ivj)2=−/summationdisplay
j:Oij=1eijvj (27.88)
whereeij=Rij−uT
ivjis the error term. By stochastically sampling a single movie jthat user
ihas watched, the update takes the following simple form:
ui=ui+ηeijvj (27.89)
whereηis the learning rate. The update for vjis similar.
982 Chapter27. Latentvariablemodelsfordiscretedata
Of course, just maximizing the likelihood results in overﬁtting, as shown in Figure 27.29(a).
We can regularize this by imposing Gaussian priors:
p(U,V)=/productdisplay
iN(ui|μu,Σu)/productdisplay
jN(vj|μv,Σv) (27.90)
If we use μu=μv=0,Σu=σ2
UIK, andΣv=σ2
VIK, the new objective becomes
J(U,V)=− logp(R,U,V|O,θ) (27.91)
=/summationdisplay
i/summationdisplay
jI(Oij=1 ) (Rij−uT
ivj)2
+λU/summationdisplay
i||ui||22+λV/summationdisplay
j||vj||22+const (27.92)
where we have deﬁned λU=σ2/σ2
UandλV=σ2/σ2
V. By varying the regularizers, we can
reduce the effect of overﬁtting, as shown in Figure 27.29(a). We can ﬁnd MAP estimates using
stochastic gradient descent. We can also compute approximate posteriors using variational Bayes(Ilin and Raiko 2010).
If we use diagonal covariances for the priors, we can penalize each latent dimension by a
different amount. Also, if we use non-zero means for the priors, we can account for offset terms.Optimizing the prior parameters (μ
u,Σu,μv,Σv)at the same time as the model parameters
(U,V,σ2)is a way to create an adaptive prior. This avoids the need to search for the optimal
values of λUandλV, and gives even better results, as shown in Figure 27.29(a).
It turns out that much of the variation in the data can be explained by movie-speciﬁc or
user-speciﬁc effects. For example, some movies are popular for all types of users. And someusers give low scores for all types of movies. We can model this by allowing for user and moviespeciﬁc offset or bias terms as follows:
p(R
ij=r|ui,vj,θ)=N(r|uT
ivj+μ+fi+gj,σ2) (27.93)
whereμis the overall mean, fiis the user bias, gjis the movie bias, and uT
ivjis the
interaction term. This is equivalent to applying PMF just to the residual matrix, and gives much
better results, as shown in Figure 27.29(b). We can estimate the fi,gjandμterms using
stochastic gradient descent, just as we estimated U,Vandθ.
We can also allow the bias terms to evolve over time, to reﬂect the changing preferences of
users (Koren 2009b). This is important since in the Netﬂix competition, the test data was morerecent than the training data. Figure 27.29(b) shows that allowing for temporal dynamics canhelp a lot.
Often we also have side information of various kinds. In the Netﬂix competition, entrants
knew which movies the user had rated in the test set, even though they did not know thevalues of these ratings. That is, they knew the value of the (dense) Omatrix even on the
test set. If a user chooses to rate a movie, it is likely because they have seen it, which inturns means they thought they would like it. Thus the very act of rating reveals information.Conversely, if a user chooses not rate a movie, it suggests they knew they would not like it.So the data is not missing at random (see e.g., (Marlin and Zemel 2009)). Exploiting this canimprove performance, as shown in Figure 27.29(b). In real problems, information on the test setis not available. However, we often know which movies the user has watched or declined to
27.7. RestrictedBoltzmannmachines(RBMs) 983
watch, even if they did not rate them (this is called implicit feedback), and this can be used as
useful side information.
Another source of side information concerns the content of the movie, such as the movie
genre, the list of the actors, or a synopsis of the plot. This can be denoted by xv, the features
of the video. (In the case where we just have the id of the video, we can treat xvas a|V|-
dimensional bit vector with just one bit turned on.) We may also know features about the user,
which we can denote by xu. In some cases, we only know if the user clicked on the video or
not, that is, we may not have a numerical rating. We can then modify the model as follows:
p(R(u,v)|xu,xv,θ)=B e r (R(u,v)|(Uxu)T(Vxv)) (27.94)
whereUis a|U|×Kmatrix, and Vis a|V|×Kmatrix (we can incorporate an offset term
by appending a 1 to xuandxvin the usual way). A method for computing the approximate
posterior p(U,V|D)in an online fashion, using ADF and EP, was described in (Stern et al.
2009). This was implemented by Microsoft and has been deployed to predict click through rateson all the ads used by Bing.
Unfortunately, ﬁtting this model just from positive binary data can result in an over prediction
of links, since no negative examples are included. Better performance is obtained if one hasaccess to the set of all videos shown to the user, of which at most one was picked; data of thisform is known as an impression log. In this case, we can use a multinomial model instead of
a binary model; in (Yang et al. 2011), this was shown to work much better than a binary model.To understand why, suppose some is presented with a choice of an action movie starring ArnoldSchwarzenegger, an action movie starring Vin Diesel, and a comedy starring Hugh Grant. Ifthe user picks Arnold Schwarzenegger, we learn not only that they like prefer action movies tocomedies, but also that they prefer Schwarzenegger to Diesel. This is more informative than justknowing that they like Schwarzenegger and action movies.
27.7 Restricted Boltzmann machines (RBMs)
So far, all the models we have proposed in this chapter have been representable by directedgraphical models. But some models are better represented using undirected graphs. For example,theBoltzmann machine (Ackley et al. 1985) is a pairwise MRF with hidden nodes hand visible
nodesv, as shown in Figure 27.30(a). The main problem with the Boltzmann machine is that
exact inference is intractable, and even approximate inference, using e.g., Gibbs sampling, canbe slow. However, suppose we restrict the architecture so that the nodes are arranged in layers,and so that there are no connections between nodes within the same layer (see Figure 27.30(b)).Then the model has the form
p(h,v|θ)=1
Z(θ)R/productdisplay
r=1K/productdisplay
k=1ψrk(vr,hk) (27.95)
whereRis the number of visible (response) variables, Kis the number of hidden variables, and
vplays the role of yearlier in this chapter. This model is known as a restricted Boltzmann
machine (RBM) (Hinton 2002), or a harmonium (Smolensky 1986).
An RBM is a special case of a product of experts (PoE) (Hinton 1999), which is so-called
because we are multiplying together a set of “experts” (here, potential functions on each edge)
984 Chapter27. Latentvariablemodelsfordiscretedata
(a)H
V
(b)
Figure 27.30 (a) A general Boltzmann machine, with an arbitrary graph structure. The shaded (visible)
nodes are partitioned into input and output, although the model is actually symmetric and deﬁnes a joint
density on all the nodes. (b) A restricted Boltzmann machine with a bipartite structure. Note the lack of
intra-layer connections.
and then normalizing, whereas in a mixture of experts, we take a convex combination of
normalized distributions. The intuitive reason why PoE models might work better than a mixture
is that each expert can enforce a constraint (if the expert has a value which is /greatermuch1or/lessmuch1)
or a “don’t care” condition (if the expert has value 1). By multiplying these experts together
in different ways we can create “sharp” distributions which predict data which satisﬁes the
speciﬁed constraints (Hinton and Teh 2001). For example, consider a distributed model of text.
A given document might have the topics “government”, “maﬁa” and “playboy”. If we “multiply”
the predictions of each topic together, the model may give very high probability to the word
“Berlusconi”9(Salakhutdinov and Hinton 2010). By contrast, adding together experts can only
make the distribution broader (see Figure 14.17).
Typically the hidden nodes in an RBM are binary, so hspeciﬁes which constraints are active.
It is worth comparing this with the directed models we have discussed. In a mixture model, we
have one hidden variable q∈{1,...,K}. We can represent this using a set of Kbits, with the
restriction that exactly one bit is on at a time. This is called a localist encoding , since only
one hidden unit is used to generate the response vector. This is analogous to the hypothetical
notion of grandmother cells in the brain, that are able to recognize only one kind of object.
By contrast, an RBM uses a distributed encoding , where many units are involved in generating
each output. Models that used vector-valued hidden variables, such as π∈SK, as in mPCA/
LDA, orz∈RK, as in ePCA also use distributed encodings.
The main difference between an RBM and directed two-layer models is that the hidden
variables are conditionally independent given the visible variables, so the posterior factorizes:
p(h|v,θ)=/productdisplay
kp(hk|v,θ) (27.96)
This makes inference much simpler than in a directed model, since we can estimate each hk
9. Silvio Berlusconi is the current (2011) prime minister of Italy.
27.7. RestrictedBoltzmannmachines(RBMs) 985
Visible Hidden Name Reference
Binary Binary Binary RBM (Hinton 2002)
Gaussian Binary Gaussian RBM (Welling and Sutton 2005)
Categorical Binary Categorical RBM (Salakhutdinov et al. 2007)
Multiple categorical Binary Replicated softmax/ undirected LDA (Salakhutdinov and Hinton 2010)
Gaussian Gaussian Undirected PCA (Marks and Movellan 2001)
Binary Gaussian Undirected binary PCA (Welling and Sutton 2005)
Table 27.2 Summary of different kinds of RBM.
independently and in parallel, as in a feedforward neural network. The disadvantage is that
training undirected models is much harder, as we discuss below.
27.7.1 Varieties of RBMs
In this section, we describe various forms of RBMs, by deﬁning different pairwise potentialfunctions. See Table 27.2 for a summary. All of these are special cases of the exponential
family harmonium (Welling et al. 2004).
27.7.1.1 Binary RBMs
The most common form of RBM has binary hidden nodes and binary visible nodes. The jointdistribution then has the following form:
p(v,h|θ)=1
Z(θ)exp(−E(v,h;θ)) (27.97)
E(v,h;θ)/defines−R/summationdisplay
r=1K/summationdisplay
k=1vrhkWrk−R/summationdisplay
r=1vrbr−K/summationdisplay
k=1hkck (27.98)
=−(vTWh+vTb+hTc) (27.99)
Z(θ)=/summationdisplay
v/summationdisplay
hexp(−E(v,h;θ)) (27.100)
whereEis the energy function, Wis aR×Kweight matrix, bare the visible bias terms, care
the hidden bias terms, and θ=(W,b,c)are all the parameters. For notational simplicity, we
will absorb the bias terms into the weight matrix by clamping dummy units v0=1andh0=1
and setting w0,:=candw:,0=b. Note that naively computing Z(θ)takesO(2R2K)time
but we can reduce this to O(min{R2K,K2R})time (Exercise 27.1).
When using a binary RBM, the posterior can be computed as follows:
p(h|v,θ)=K/productdisplay
k=1p(hk|v,θ)=/productdisplay
kBer(hk|sigm(wT
:,kv)) (27.101)
By symmetry, one can show that we can generate data given the hidden variables as follows:
p(v|h,θ)=/productdisplay
rp(vr|h,θ)=/productdisplay
rBer(vr|sigm(wT
r,:h)) (27.102)
986 Chapter27. Latentvariablemodelsfordiscretedata
We can write this in matrix-vetor notation as follows:
E[h|vθ]=s i g m ( WTv) (27.103)
E[v|h,θ]=s i g m ( Wh) (27.104)
The weights in Ware called the generative weights, since they are used to generate the
observations, and the weights in WTare called the recognition weights, since they are used
to recognize the input.
From Equation 27.101, we see that we activate hidden node kin proportion to how much the
input vector v“looks like” the weight vector w:,k(up to scaling factors). Thus each hidden node
captures certain features of the input, as encoded in its weight vector, similar to a feedforward
neural network.
27.7.1.2 Categorical RBM
We can extend the binary RBM to categorical visible variables by using a 1-of-C encoding,
whereCis the number of states for each vir. We deﬁne a new energy function as follows
(Salakhutdinov et al. 2007; Salakhutdinov and Hinton 2010):
E(v,h;θ)/defines−R/summationdisplay
r=1K/summationdisplay
k=1C/summationdisplay
c=1vc
rhkWc
rk−R/summationdisplay
r=1C/summationdisplay
c=1vc
rbc
r−K/summationdisplay
k=1hkck (27.105)
The full conditionals are given by
p(vr|h,θ)=C a t (S({bcr+/summationdisplay
khkWc
rk}Cc=1)) (27.106)
p(hk=1|c,θ) = sigm(c k+/summationdisplay
r/summationdisplay
cvc
rWc
rk) (27.107)
27.7.1.3 Gaussian RBM
We can generalize the model to handle real-valued data. In particular, a Gaussian RBM has the
following energy function:
E(v,h|θ)=−R/summationdisplay
r=1K/summationdisplay
k=1Wrkhkvr−1
2R/summationdisplay
r=1(vr−br)2−K/summationdisplay
k=1akhk (27.108)
The parameters of the model are θ=(wrk,ak,br). (We have assumed the data is standardized,
so we ﬁx the variance to σ2=1.) Compare this to a Gaussian in information form:
Nc(v|η,Λ)∝exp(ηTv−1
2vTΛv) (27.109)
whereη=Λμ. We see that we have set Λ=I, andη=/summationtext
khkw:,k. Thus the mean is
given byμ=Λ−1η=/summationtext
khkw:,k. The full conditionals, which are needed for inference and
27.7. RestrictedBoltzmannmachines(RBMs) 987
learning, are given by
p(vr|h,θ)=N (vr|br+/summationdisplay
kwrkhk,1) (27.110)
p(hk=1|v,θ)=s i g m/parenleftBigg
ck+/summationdisplay
rwrkvr/parenrightBigg
(27.111)
We see that each visible unit has a Gaussian distribution whose mean is a function of the
hidden bit vector. More powerful models, which make the (co)variance depend on the hiddenstate, can also be developed (Ranzato and Hinton 2010).
27.7.1.4 RBMs with Gaussian hidden units
If we use Gaussian latent variables and Gaussian visible variables, we get an undirected versionof factor analysis. However, it turns out that it is identical to the standard directed version(Marks and Movellan 2001).
If we use Gaussian latent variables and categorical observed variables, we get an undirected
version of categorical PCA (Section 27.2.2). In (Salakhutdinov et al. 2007), this was applied to theNetﬂix collaborative ﬁltering problem, but was found to be signiﬁcantly inferior to using binarylatent variables, which have more expressive power.
27.7.2 Learning RBMs
In this section, we discuss some ways to compute ML parameter estimates of RBMs, usinggradient-based optimizers. It is common to use stochastic gradient descent, since RBMs oftenhave many parameters and therefore need to be trained on very large datasets. In addition, it isstandard to use /lscript
2regularization, a technique that is often called weight decay in this context.
This requires a very small change to the objective and gradient, as discussed in Section 8.3.6.
27.7.2.1 Deriving the gradient using p(h,v|θ)
To compute the gradient, we can modify the equations from Section 19.5.2, which show how toﬁt a generic latent variable maxent model. In the context of the Boltzmann machine, we haveone feature per edge, so the gradient is given by
∂/lscript
∂wrk=1
NN/summationdisplay
i=1E[vrhk|vi,θ]−E[vrhk|θ] (27.112)
We can write this in matrix-vector form as follows:
∇w/lscript=Epemp(·|θ)/bracketleftbig
vhT/bracketrightbig
−Ep(·|θ)/bracketleftbig
vhT/bracketrightbig
(27.113)
wherepemp(v,h|θ)/definesp(h|v,θ)pemp(v), andpemp(v)=1
N/summationtextN
i=1δvi(v)is the empirical
distribution. (We can derive a similar expression for the bias terms by setting vr=1or
hk=1.)
The ﬁrst term on the gradient, when vis ﬁxed to a data case, is sometimes called the
clamped phase, and the second term, when vis free, is sometimes called the unclamped
988 Chapter27. Latentvariablemodelsfordiscretedata
phase. When the model expectations match the empirical expectations, the two terms cancel
out, the gradient becomes zero and learning stops. This algorithm was ﬁrst proposed in (Ackleyet al. 1985). The main problem is efficiently computing the expectations. We discuss some waysto do this below.
27.7.2.2 Deriving the gradient using p(v|θ)
We now present an alternative way to derive Equation 27.112, which also applies to other energybased models. First we marginalize out the hidden variables and write the RBM in the formp(v|θ)=
1
Z(θ)exp(−F(v;θ)),w h e r eF (v;θ)is thefree energy:
F(v)/defines/summationdisplay
hE(v,h)=/summationdisplay
hexp/parenleftBiggR/summationdisplay
r=1K/summationdisplay
k=1vrhkWrk/parenrightBigg
(27.114)
=/summationdisplay
hK/productdisplay
k=1exp/parenleftBiggR/summationdisplay
r=1vrhkWrk/parenrightBigg
(27.115)
=K/productdisplay
k=1/summationdisplay
hr∈{0,1}exp/parenleftBiggR/summationdisplay
r=1vrhrWrk/parenrightBigg
(27.116)
=K/productdisplay
k=1/parenleftBigg
1+exp(R/summationdisplay
r=1vrWrk)/parenrightBigg
(27.117)
Next we write the (scaled) log-likelihood in the following form:
/lscript(θ)=1
NN/summationdisplay
i=1logp(vi|θ)=−1
NN/summationdisplay
i=1F(vi|θ)−logZ(θ) (27.118)
Using the fact that Z(θ)=/summationtext
vexp(−F(v;θ))we have
∇/lscript(θ)=−1
NN/summationdisplay
i=1∇F(vi)−∇Z
Z(27.119)
=−1
NN/summationdisplay
i=1∇F(vi)+/summationdisplay
v∇F(v)exp(−F(v))
Z(27.120)
=−1
NN/summationdisplay
i=1∇F(vi)+E[∇F(v)] (27.121)
Plugging in the free energy (Equation 27.117), one can show that
∂
∂wrkF(v)=−vrE[hk|v,θ]=−E[vrhk|v,θ] (27.122)
Hence
∂
∂wrk/lscript(θ)=1
NN/summationdisplay
i=1E[vrhk|v,θ]−E[vrhk|θ] (27.123)
which matches Equation 27.112.
27.7. RestrictedBoltzmannmachines(RBMs) 989
+M
;L;L+M! ;L+M! ;L+M! LQILQLW\
7 GDWD7 VWHS
UHFRQVWUXFWLRQV7 LQILQLW\HTXLOLEULXP
VDPSOHV
Figure 27.31 Illustration of Gibbs sampling in an RBM. The visible nodes are initialized at a datavector,
then we sample a hidden vector, then another visible vector, etc. Eventually (at “inﬁnity”) we will be
producing samples from the joint distribution p(v,h|θ).
27.7.2.3 Approximating the expectations
We can approximate the expectations needed to evaluate the gradient by performing block
Gibbs sampling, using Equations 27.101 and 27.102. In more detail, we can sample from thejoint distribution p(v,h|θ)as follows: initialize the chain at vv
1(e.g. by setting v1=vifor
some data vector), and then sample from h1∼p(h|v1), then from v2∼p(v|h1), then from
h2∼p(h|v2), etc. See Figure 27.31 for an illustration. Note, however, that we have to wait until
the Markov chain reaches equilibrium (i.e., until it has “burned in”) before we can interpret thesamples as coming from the joint distribution of interest, and this might take a long time.
A faster alternative is to use mean ﬁeld, where we make the approximation E[v
rhk]≈
E[vr]E[hk]. However, since p(v,h)is typically multimodal, this is usually a very poor approx-
imation, since it will average over different modes (see Section 21.2.2). Furthermore, there is amore subtle reason not to use mean ﬁeld: since the gradient has the form E[v
rhk|v]−E[vrhk],
we see that the negative sign in front means that the method will try to make the variationalbound as loose as possible (Salakhutdinov and Hinton 2009). This explains why earlier attemptsto use mean ﬁeld to learn Boltzmann machines (e.g., (Kappen and Rodriguez 1998)) did not work.
27.7.2.4 Contrastive divergence
The problem with using Gibbs sampling to compute the gradient is that it is slow. We nowpresent a faster method known as contrastive divergence orCD(Hinton 2002). CD was
originally derived by approximating an objective function deﬁned as the difference of two KLdivergences, rather than trying to maximize the likelihood itself. However, from an algorithmicpoint of view, it can be thought of as similar to stochastic gradient descent, except it approxi-mates the “unclamped” expectations with “brief” Gibbs sampling where we initialize each Markovchain at the data vectors. That is, we approximate the gradient for one datavector as follows:
∇
w/lscript≈E/bracketleftbig
vhT|vi/bracketrightbig
−Eq/bracketleftbig
vhT/bracketrightbig
(27.124)
whereqcorresponds to the distribution generated by Kup-down Gibbs sweeps, started at vi,
as in Figure 27.31. This is known as CD-K . In more detail, the procedure (for K=1)i sa s
990 Chapter27. Latentvariablemodelsfordiscretedata
follows:
hi∼p(h|vi,θ) (27.125)
v/prime
i∼p(v|hi,θ) (27.126)
h/prime
i∼p(h|v/prime
i,θ) (27.127)
We then make the approximation
Eq/bracketleftbig
vhT/bracketrightbig
≈vi(h/primei)T(27.128)
Such samples are sometimes called fantasy data. We can think of v/prime
ias the model’s best
attempt at reconstructing viafter being coded and then decoded by the model. This is similar
to the way we train auto-encoders, which are models which try to “squeeze” the data through a
restricted parametric “bottleneck” (see Section 28.3.2).
In practice, it is common to use E[h|v/prime
i]instead of a sampled value h/prime
iin the ﬁnal upwards
pass, since this reduces the variance. However, it is not valid to use E[h|vi]instead of sampling
hi∼p(h|vi)in the earlier upwards passes, because then each hidden unit would be able to
pass more than 1 bit of information, so it would not act as much of a bottleneck.
The whole procedure is summarized in Algorithm 3. (Note that we follow the positive gradient
since we are maximizing likelihood.) Various tricks can be used to speed this algorithm up, such
as using a momentum term (Section 8.3.2), using mini-batches, averaging the updates, etc. Suchdetails can be found in (Hinton 2010; Swersky et al. 2010).
Algorithm 27.3: CD-1 training for an RBM with binary hidden and visible units
1Initialize weights W∈RR×Krandomly;
2t:= 0;
3foreachepoch do
4t:=t+1;
5foreachminibatchofsize Bdo
6 Set minibatch gradient to zero, g:=0;
7 foreachcase viintheminibatch do
8 Compute μi=E[h|vi,W];
9 Samplehi∼p(h|vi,W);
10 Samplev/prime
i∼p(v|hi,W);
11 Compute μ/prime
i=E[h|v/prime
i,W];
12 Compute gradient ∇W=(vi)(μi)T−(v/prime
i)(μ/primei)T;
13 Accumulate g:=g+∇W;
14 Update parameters W:=W+(αt/B)g
27.7.2.5 Persistent CD
In Section 19.5.5, we presented a technique called stochastic maximum likelihood (SML) for
ﬁtting maxent models. This avoids the need to run MCMC to convergence at each iteration,
27.7. RestrictedBoltzmannmachines(RBMs) 991
by exploiting the fact that the parameters are changing slowly, so the Markov chains will not
be pushed too far from equilibrium after each update (Younes 1989). In other words, there aretwo dynamical processes running at different time scales: the states change quickly, and theparameters change slowly. This algorithm was independently rediscovered in (Tieleman 2008),who called it persistent CD. See Algorithm 3 for the pseudocode.
PCD often works better than CD (see e.g., (Tieleman 2008; Marlin et al. 2010; Swersky et al.
2010)), although CD can be faster in the early stages of learning.
Algorithm 27.4: Persistent CD for training an RBM with binary hidden and visible units
1Initialize weights W∈RD×Lrandomly;
2Initialize chains (vs,hs)S
s=1randomly ;
3fort=1,2,...do
4// Mean ﬁeld updates ;
5foreachcase i=1:Ndo
6 μik=s i g m (vT
iw:,k)
7// MCMC updates ;
8foreachsample s=1:Sdo
9 Generate (vs,hs)by brief Gibbs sampling from old (vs,hs)
10// Parameter updates ;
11g=1
N/summationtextN
i=1vi(μi)T−1
S/summationtextSs=1vs(hs)T;
12W:=W+αtg;
13Decrease αt
27.7.3 Applications of RBMs
The main application of RBMs is as a building block for deep generative models, which we
discuss in Section 28.2. But they can also be used as substitutes for directed two-layer models.They are particularly useful in cases where inference of the hidden states at test time must befast. We give some examples below.
27.7.3.1 Language modeling and document retrieval
We can use a categorical RBM to deﬁne a generative model for bag-of-words, as an alternativeto LDA. One subtlety is that the partition function in an undirected models depends on howbig the graph is, and therefore on how long the document is. A solution to this was proposedin (Salakhutdinov and Hinton 2010): use a categorical RBM with tied weights, but multiply thehidden activation bias terms c
kby the document length Lto compensate form the fact that the
observed word-count vector vis larger in magnitude:
E(v,h;θ)/defines−K/summationdisplay
k=1C/summationdisplay
c=1vchkWc
k−C/summationdisplay
c=1vcbc
r−LK/summationdisplay
k=1hkck (27.129)
992 Chapter27. Latentvariablemodelsfordiscretedata
Data set Number of docs K ¯D St. Dev. Avg. Test perplexity per word (in nats)
Train Test LDA-50 LDA-200 R. Soft-50 Unigram
NIPS 1,690 50 13,649 98.0 245.3 3576 3391 3405 4385
20-news 11,314 7,531 2,000 51.8 70.8 1091 1058 953 1335
Reuters 794,414 10,000 10,000 94.6 69.3 1437 1142 988 2208
Figure 27.32 Comparison of RBM (replicated softmax) and LDA on three corpora. Kis the number of
words in the vocabulary, Dis the average document length, and St. Dev. is the standard deviation of the
document length. Source: (Salakhutdinov and Hinton 2010) .
0.02    0.1     0.4     1.6     6.4     25.6    100 102030405060
Recall (%) Precision (%)Replicated 
Softmax 50−D
LDA 50−D
0.001     0.006     0.051     0.4        1.6       6.4       25.6      100 1020304050
Recall (%) Precision (%)Replicated 
Softmax 50−D
LDA 50−D20-newsgroups Reuters
Figure 27.33 Precision-recall curves for RBM (replicated softmax) and LDA on two corpora. From Figure
3 of (Salakhutdinov and Hinton 2010). Used with kind permission of Ruslan Salakhutdinov.
wherevc=/summationtextL
l=1I(yil=c). This is like having a single multinomial node (so we have dropped
thersubscript) with Cstates, where Cis the number of words in the vocabulary. This is
called the replicated softmax model (Salakhutdinov and Hinton 2010), and is an undirected
alternative to mPCA/ LDA.
We can compare the modeling power of RBMs vs LDA by measuring the perplexity on a test
set. This can be approximated using annealing importance sampling (Section 24.6.2). The results
are shown in Figure 27.32. We see that the LDA is signiﬁcantly better than a unigram model,
but that an RBM is signiﬁcantly better than LDA.
Another advantage of the LDA is that inference is fast and exact: just a single matrix-vector
multiply followed by a sigmoid nonlinearity, as in Equation 27.107. In addition to being faster,
the RBM is more accurate. This is illustrated in Figure 27.33, which shows precision-recall curves
for RBMs and LDA on two different corpora. These curves were generated as follows: a query
document from the test set is taken, its similarity to all the training documents is computed,
where the similarity is deﬁned as the cosine of the angle between the two topic vectors, and
then the top Mdocuments are returned for varying M. A retrieved document is considered
relevant if it has the same class label as that of the query’s (this is the only place where labels
are used).
27.7. RestrictedBoltzmannmachines(RBMs) 993
27.7.3.2 RBMs for collaborative ﬁltering
RBMs have been applied to the Netﬂix collaborative ﬁltering competition (Salakhutdinov et al.
2007). In fact, an RBM with binary hidden nodes and categorical visible nodes can slightlyoutperform SVD. By combining the two methods, performance can be further improved. (Thewinning entry in the challenge was an ensemble of many different types of model (Koren 2009a).)
Exercises
Exercise 27.1 Partition function for an RBM
Show how to compute Z(θ)for an RBM with Kbinary hidden nodes and Rbinary observed nodes in
O(R2K)time, assuming K<R.

28 Deep learning
28.1 Introduction
Many of the models we have looked at in this book have a simple two-layer architecture of
the form z→yfor unsupervised latent variable models, or x→yfor supervised models.
However, when we look at the brain, we seem many levels of processing. It is believed that eachlevel is learning features or representations at increasing levels of abstraction. For example, thestandard model of the visual cortex (Hubel and Wiesel 1962; Serre et al. 2005; Ranzato et al.
2007) suggests that (roughly speaking) the brain ﬁrst extracts edges, then patches, then surfaces,then objects, etc. (See e.g., (Palmer 1999; Kandel et al. 2000) for more information about howthe brain might perform vision.)
This observation has inspired a recent trend in machine learning known as deep learning
(see e.g., (Bengio 2009), deeplearning .net, and the references therein), which attempts to
replicate this kind of architecture in a computer. (Note the idea can be applied to non-visionproblems as well, such as speech and language.)
In this chapter, we give a brief overview of this new ﬁeld. However, we caution the reader
that the topic of deep learning is currently evolving very quickly, so the material in this chaptermay soon be outdated.
28.2 Deep generative models
Deep models often have millions of parameters. Acquiring enough labeled data to train suchmodels is diffcult, despite crowd sourcing sites such as Mechanical Turk. In simple settings, suchas hand-written character recognition, it is possible to generate lots of labeled data by makingmodiﬁed copies of a small manually labeled training set (see e.g., Figure 16.13), but it seemsunlikely that this approach will scale to complex scenes.
1
To overcome the problem of needing labeled training data, we will focus on unsupervised
learning. The most natural way to perform this is to use generative models. In this section, wediscuss three different kinds of deep generative models: directed, undirected, and mixed.
1. There have been some attempts to use computer graphics and video games to generate realistic-looking images of
complex scenes, and then to use this as training data for computer vision systems. However, often graphics programs
cut corners in order to make perceptually appealing images which are not reﬂective of the natural statistics of real-world
images.
996 Chapter28. Deeplearning
(a) (b)
 (c)
Figure 28.1 Some deep multi-layer graphical models. Observed variables are at the bottom. (a) A directed
model. (b) An undirected model (deep Boltzmann machine). (c) A mixed directed-undirected model (deep
belief net).
28.2.1 Deep directed networks
Perhaps the most natural way to build a deep generative model is to construct a deep directed
graphical model, as shown in Figure 28.1(a). The bottom level contains the observed pixels (or
whatever the data is), and the remaining layers are hidden. We have assumed just 3 layers for
notational simplicity. The number and size of layers is usually chosen by hand, although one
can also use non-parametric Bayesian methods (Adams et al. 2010) or boosting (Chen et al. 2010)
to infer the model structure.
We shall call models of this form deep directed networks or DDNs. If all the nodes are
binary, and all CPDs are logistic functions, this is called a sigmoid belief net (Neal 1992). In
this case, the model deﬁnes the following joint distribution:
p(h1,h2,h3,v|θ)=/productdisplay
iBer(vi|sigm(hT
1w0i))/productdisplay
jBer(h1j|sigm(hT
2w1j)) (28.1)
/productdisplay
kBer(h2k|sigm(hT
3w2k))/productdisplay
lBer(h3l|w3l) (28.2)
Unfortunately, inference in directed models such as these is intractable because the posterior
on the hidden nodes is correlated due to explaining away. One can use fast mean ﬁeld approxi-
mations (Jaakkola and Jordan 1996a; Saul and Jordan 2000), but these may not be very accurate,
since they approximate the correlated posterior with a factorial posterior. One can also use
MCMC inference (Neal 1992; Adams et al. 2010), but this can be quite slow because the variables
are highly correlated. Slow inference also results in slow learning.
28.2.2 Deep Boltzmann machines
A natural alternative to a directed model is to construct a deep undirected model. For example,
we can stack a series of RBMs on top of each other, as shown in Figure 28.1(b). This is known
as adeep Boltzmann machine orDBM(Salakhutdinov and Hinton 2009). If we have 3 hidden
layers, the model is deﬁned as follows:
p(h1,h2,h3,v|θ)=1
Z(θ)exp⎛
⎝/summationdisplay
ijvih1jW1ij+/summationdisplay
jkh1jh2jW2jk+/summationdisplay
klh2kh3lW3kl⎞
⎠(28.3)
28.2. Deepgenerativemodels 997
where we are ignoring constant offset or bias terms.
The main advantage over the directed model is that one can perform efficient block (layer-
wise) Gibbs sampling, or block mean ﬁeld, since all the nodes in each layer are conditionally
independent of each other given the layers above and below (Salakhutdinov and Larochelle2010). The main disadvantage is that training undirected models is more difficult, because of thepartition function. However, below we will see a greedy layer-wise strategy for learning deepundirected models.
28.2.3 Deep belief networks
An interesting compromise is to use a model that is partially directed and partially undirected.In particular, suppose we construct a layered model which has directed arrows, except at thetop, where there is an undirected bipartite graph, as shown in Figure 28.1(c). This model isknown as a deep belief network (Hinton et al. 2006) or DBN.
2If we have 3 hidden layers, the
model is deﬁned as follows:
p(h1,h2,h3,v|θ)=/productdisplay
iBer(vi|sigm(hT
1w1i)/productdisplay
jBer(h1j|sigm(hT2w2j) (28.4)
1
Z(θ)exp/parenleftBigg/summationdisplay
klh2kh3lW3kl/parenrightBigg
(28.5)
Essentially the top two layers act as an associative memory, and the remaining layers then
generate the output.
The advantage of this peculiar architecture is that we can infer the hidden states in a
fast, bottom-up fashion. To see why, suppose we only have two hidden layers, and thatW
2=WT
1, so the second level weights are tied to the ﬁrst level weights (see Figure 28.2(a)).
This deﬁnes a model of the form p(h1,h2,v|W1). One can show that the distribution
p(h1,v|W1)=/summationtext
h2p(h1,h2,v|W1)has the form p(h1,v|W1)=1
Z(W 1)exp(vTW1h1),
which is equivalent to an RBM. Since the DBN is equivalent to the RBM as far as p(h1,v|W1)
is concerned, we can infer the posterior p(h1|v,W1)in the DBN exactly as in the RBM. This
posterior is exact, even though it is fully factorized.
Now the only way to get a factored posterior is if the prior p(h1|W1)is acomplementary
prior. This is a prior which, when multiplied by the likelihood p(v|h1), results in a perfectly
factored posterior. Thus we see that the top level RBM in a DBN acts as a complementary priorfor the bottom level directed sigmoidal likelihood function.
If we have multiple hidden levels, and/or if the weights are not tied, the correspondence
between the DBN and the RBM does not hold exactly any more, but we can still use the factoredinference rule as a form of approximate bottom-up inference. Below we show that this is a validvariational lower bound. This bound also suggests a layer-wise training strategy, that we willexplain in more detail later. Note, however, that top-down inference in a DBN is not tractable,so DBNs are usually only used in a feedforward manner.
2. Unforuntately the acronym “DBN” also stands for “dynamic Bayes net” (Section 17.6.7). Geoff Hinton, who invented
deep belief networks, has suggested the acronyms DeeBNsandDyBNsfor these two different meanings. However, this
terminology is non-standard.
998 Chapter28. Deeplearning
(a)
 (b)
 (c)
Figure 28.2 (a) A DBN with two hidden layers and tied weights that is equivalent to an RBM. Source:
Figure 2.2 of (Salakhutdinov 2009). (b) A stack of RBMs trained greedily. (c) The corresponding DBN.
Source: Figure 2.3 of (Salakhutdinov 2009). Used with kind permission of Ruslan Salakhutdinov.
28.2.4 Greedy layer-wise learning of DBNs
The equivalence between DBNs and RBMs suggests the following strategy for learning a DBN.
• Fit an RBM to learn W1using methods described in Section 27.7.2.
• Unroll the RBM into a DBN with 2 hidden layers, as in Figure 28.2(a). Now “freeze” the
directed weights W1and letW2be “untied” so it is no longer forced to be equal to WT
1.
We will now learn a better prior for p(h1|W2)by ﬁtting a second RBM. The input data to
this new RBM is the activation of the hidden units E[h1|v,W1]which can be computed
using a factorial approximation.
• Continue to add more hidden layers until some stopping criterion is satisiﬁed, e.g., you run
out of time or memory, or you start to overﬁt the validation set. Construct the DBN from
these RBMs, as illustrated in Figure 28.2(c).
One can show (Hinton et al. 2006) that this procedure always increases a lower bound the
observed data likelihood. Of course this procedure might result in overﬁtting, but that is a
different matter.
In practice, we want to be able to use any number of hidden units in each level. This means
we will not be able to initialize the weights so that W/lscript=WT
/lscript−1. This voids the theoretical
guarantee. Nevertheless the method works well in practice, as we will see. The method can also
be extended to train DBMs in a greedy way (Salakhutdinov and Larochelle 2010).
After using the greedy layer-wise training strategy, it is standard to “ﬁne tune” the weights,
using a technique called backﬁtting . This works as follows. Perform an upwards sampling pass
to the top. Then perform brief Gibbs sampling in the top level RBM, and perform a CD update
of the RBM parameters. Finally, perform a downwards ancestral sampling pass (which is an
approximate sample from the posterior), and update the logistic CPD parameters using a small
gradient step. This is called the up-down procedure (Hinton et al. 2006). Unfortunately this
procedure is very slow.
28.3. Deepneuralnetworks 999
28.3 Deep neural networks
Given that DBNs are often only used in a feed-forward, or bottom-up, mode, they are effectively
acting like neural networks. In view of this, it is natural to dispense with the generative storyand try to ﬁt deep neural networks directly, as we discuss below. The resulting training methodsare often simpler to implement, and can be faster.
Note, however, that performance with deep neural nets is sometimes not as good as with
probabilistic models (Bengio et al. 2007). One reason for this is that probabilistic models supporttop-down inference as well as bottom-up inference. (DBNs do not support efficient top-downinference, but DBMs do, and this has been shown to help (Salakhutdinov and Larochelle 2010).)Top-down inference is useful when there is a lot of ambiguity about the correct interpretationof the signal.
It is interesting to note that in the mammalian visual cortex, there are many more feedback
connections than there are feedforward connections (see e.g., (Palmer 1999; Kandel et al. 2000)).The role of these feedback connections is not precisely understood, but they presumably providecontextual prior information (e.g., coming from the previous “frame” or retinal glance) whichcan be used to disambiguate the current bottom-up signals (Lee and Mumford 2003).
Of course, we can simulate the effect of top-down inference using a neural network. However
the models we discuss below do not do this.
28.3.1 Deep multi-layer perceptrons
Many decision problems can be reduced to classiﬁcation, e.g., predict which object (if any) ispresent in an image patch, or predict which phoneme is present in a given acoustic featurevector. We can solve such problems by creating a deep feedforward neural network or multi-layer perceptron (MLP), as in Section 16.5, and then ﬁtting the parameters using gradient descent(aka back-propagation).
Unfortunately, this method does not work very well. One problem is that the gradient becomes
weaker the further we move away from the data; this is known as the “vanishing gradient”problem (Bengio and Frasconi 1995). A related problem is that there can be large plateaus inthe error surface, which cause simple ﬁrst-order gadient-based methods to get stuck (Glorot andBengio 2010).
Consequently early attempts to learn deep neural networks proved unsuccesful. Recently there
has been some progress, due to the adoption of GPUs (Ciresan et al. 2010) and second-orderoptimization algorithms (Martens 2010). Nevertheless, such models remain difficult to train.
Below we discuss a way to initialize the parameters using unsupervised learning; this is called
generative pre-training. The advantage of performing unsupervised learning ﬁrst is that themodel is forced to model a high-dimensional response, namely the input feature vector, ratherthan just predicting a scalar response. This acts like a data-induced regularizer, and helpsbackpropagation ﬁnd local minima with good generalization properties (Erhan et al. 2010; Glorotand Bengio 2010).
1000 Chapter28. Deeplearning
/g21/g21
/g21/g1/g21
/g21/g21
/g21
/g21/g1
/g21/g1/g21/g1/g21/g21/g1/g21/g1/g21/g1
/g1
/g21/g21/g21/g21/g21/g21
/g3/g4/g2/g2/g2/g18/g11/g16/g4
/g4/g2/g2/g2/g3/g2/g2/g2/g7/g2/g2/g7/g2/g2
/g3/g2/g2/g2/g3/g2/g2/g2
/g7/g2/g2
/g3/g3/g4/g2/g2/g2
/g4/g2/g2/g2/g7/g2/g2 /g7/g2/g2
/g3/g2/g2/g2/g3/g2/g2/g2/g4/g2/g2/g2
/g7/g2/g2
/g4/g2/g2/g2/g19
/g6/g19
/g18/g11/g16
/g17/g32/g25/g33/g32/g22/g27/g29/g27/g29/g26 /g20/g29/g32/g30/g28/g28/g27/g29/g26/g3/g2/g2/g2/g18/g11/g16/g5/g6/g5/g2
/g5/g2
/g15/g27/g29/g25/g33/g34/g29/g27/g29/g26/g6/g6
/g4/g4/g5/g5/g6/g19
/g7/g5/g19
/g8/g4/g19
/g9/g3/g19
/g10
/g14/g29/g23/g30/g24/g25/g32/g3/g4/g5/g5/g2
/g6/g5/g4/g19/g3/g19
/g12/g30/g24/g25/g1/g28/g22/g35/g25/g32/g13/g25/g23/g30/g24/g25/g32
/g18/g11/g16/g19/g30/g31
Figure 28.3 Training a deep autoencoder. (a) First we greedily train some RBMs. (b) Then we construct
the auto-encoder by replicating the weights. (c) Finally we ﬁne-tune the weights using back-propagation.
From Figure 1 of (Hinton and Salakhutdinov 2006). Used with kind permission of Ruslan Salakhutdinov.
28.3.2 Deep auto-encoders
Anauto-encoder is a kind of unsupervised neural network that is used for dimensionality
reduction and feature discovery. More precisely, an auto-encoder is a feedforward neural network
that is trained to predict the input itself. To prevent the system from learning the trivial identity
mapping, the hidden layer in the middle is usually constrained to be a narrow bottleneck . The
system can minimize the reconstruction error by ensuring the hidden units capture the most
relevant aspects of the data.
Suppose the system has one hidden layer, so the model has the form v→h→v. Further,
suppose all the functions are linear. In this case, one can show that the weights to the K
hidden units will span the same subspace as the ﬁrst Kprincipal components of the data
(Karhunen and Joutsensalo 1995; Japkowicz et al. 2000). In other words, linear auto-encoders are
equivalent to PCA. However, by using nonlinear activation functions, one can discover nonlinear
representations of the data.
More powerful representations can be learned by using deep auto-encoders . Unfortunately
training such models using back-propagation does not work well, because the gradient signal
becomes too small as it passes back through multiple layers, and the learning algorithm often
gets stuck in poor local minima.
One solution to this problem is to greedily train a series of RBMs and to use these to initialize
an auto-encoder, as illustrated in Figure 28.3. The whole system can then be ﬁne-tuned using
backprop in the usual fashion. This approach, ﬁrst suggested in (Hinton and Salakhutdinov
28.4. Applicationsofdeepnetworks 1001
2000 top-level units
500 units 
500 units 
28 x 28    
pixel 
image10 label units
This could be the 
top level of 
another sensory 
pathway
(a)
 (b)
Figure 28.4 (a) A DBN architecture for classifying MNIST digits. Source: Figure 1 of (Hinton et al. 2006).
Used with kind permission of Geoff Hinton. (b) These are the 125 errors made by the DBN on the 10,000
test cases of MNIST. Above each image is the estimated label. Source: Figure 6 of (Hinton et al. 2006).
Used with kind permission of Geoff Hinton. Compare to Figure 16.15.
2006), works much better than trying to ﬁt the deep auto-encoder directly starting with random
weights.
28.3.3 Stacked denoising auto-encoders
A standard way to train an auto-encoder is to ensure that the hidden layer is narrower than the
visible layer. This prevents the model from learning the identity function. But there are other
ways to prevent this trivial solution, which allow for the use of an over-complete representation.
One approach is to impose sparsity constraints on the activation of the hidden units (Ranzato
et al. 2006). Another approach is to add noise to the inputs; this is called a denoising auto-
encoder (Vincent et al. 2010). For example, we can corrupt some of the inputs, for example
by setting them to zero, so the model has to learn to predict the missing entries. This can be
shown to be equivalent to a certain approximate form of maximum likelihood training (known
as score matching) applied to an RBM (Vincent 2011).
Of course, we can stack these models on top of each other to learn a deep stacked denoising
auto-encoder, which can be discriminatively ﬁne-tuned just like a feedforward neural network,
if desired.
28.4 Applications of deep networks
In this section, we mention a few applications of the models we have been discussing.
28.4.1 Handwritten digit classiﬁcation using DBNs
Figure 28.4(a) shows a DBN (from (Hinton et al. 2006)) consisting of 3 hidden layers. The visible
layer corresponds to binary images of handwritten digits from the MNIST data set. In addition,
the top RBM is connected to a softmax layer with 10 units, representing the class label.
1002 Chapter28. Deeplearning
(a)Legal/Judicial Leading          
Economic         Indicators       European Community Monetary/Economic  
Accounts/Earnings Interbank Markets
Government Borrowings Disasters and Accidents     Energy Markets
(b)
Figure 28.5 2d visualization of some bag of words data from the Reuters RCV1-v2 corpus. (a) Results of
using LSA. (b) results of using a deep auto-encoder. Source: Figure 4 of (Hinton and Salakhutdinov 2006).
Used with kind permission of Ruslan Salakhutdinov.
The ﬁrst 2 hidden layers were trained in a greedy unsupervised fashion from 50,000 MNIST
digits, using 30 epochs (passes over the data) and stochastic gradient descent, with the CD
heuristic. This process took “a few hours per layer” (Hinton et al. 2006, p1540). Then the toplayer was trained using as input the activations of the lower hidden layer, as well as the classlabels. The corresponding generative model had a test error of about 2.5%. The network weightswere then carefully ﬁne-tuned on all 60,000 training images using the up-down procedure. Thisprocess took “about a week” (Hinton et al. 2006, p1540). The model can be used to classifyby performing a deterministic bottom-up pass, and then computing the free energy for thetop-level RBM for each possible class label. The ﬁnal error on the test set was about 1.25%. Themisclassiﬁed examples are shown in Figure 28.4(b).
This was the best error rate of any method on the permutation-invariant version of MNIST
at that time. (By permutation-invariant, we mean a method that does not exploit the fact thatthe input is an image. Generic methods work just as well on permuted versions of the input(see Figure 1.5), and can therefore be applied to other kinds of datasets.) The only other methodthat comes close is an SVM with a degree 9 polynomial kernel, which has achieved an errorrate of 1.4% (Decoste and Schoelkopf 2002). By way of comparison, 1-nearest neighbor (usingall 60,000 examples) achieves 3.1% (see mnist1NNdemo ). This is not as good, although 1-NN is
much simpler.
3
28.4.2 Data visualization and feature discovery using deep auto-encoders
Deep autoencoders can learn informative features from raw data. Such features are often usedas input to standard supervised learning methods.
To illustrate this, consider ﬁtting a deep auto-encoder with a 2d hidden bottleneck to some
3. One can get much improved performance on this task by exploiting the fact that the input is an image. One way to do
this is to create distorted versions of the input, adding small shifts and translations (see Figure 16.13 for some examples).
Applying this trick reduced the SVM error rate to 0.56%. Similar error rates can be achieved using convolutional neural
networks (Section 16.5.1) trained on distorted images ((Simard et al. 2003) got 0.4%). However, the point of DBNs is that
they offer a way to learn such prior knowledge, without it having to be hand-crafted.
28.4. Applicationsofdeepnetworks 1003
/g6/g5/g7/g1 /g6/g5/g8/g1 /g6/g5/g10/g1 /g6/g5/g13/g1 /g7/g5/g12/g1 /g9/g5/g8/g1 /g12/g5/g10/g1 /g7/g8/g5/g13 /g8/g11/g5/g12 /g11/g7/g5/g8 /g7/g6/g6/g1/g7/g6/g8/g6/g9/g6/g10/g6/g11/g6
/g18/g23/g21/g20/g27/g27/g1/g3/g2/g4/g1/g17/g31/g23/g21/g26/g32/g26/g29/g28/g1/g3/g2/g4/g14/g34/g33/g29/g23/g28/g21/g29/g22/g23/g31/g1/g7/g6/g15
/g16/g19/g14/g1/g7/g6/g15
/g16/g19/g14/g1/g11/g6/g15
/g14/g34/g33/g29/g23/g28/g21/g29/g22/g23/g31/g1/g7/g6/g15
/g30/g31/g26/g29/g31/g1/g33/g29/g1/g24/g26/g28/g23 /g33/g34/g28/g26/g28/g25
Figure 28.6 Precision-recall curves for document retrieval in the Reuters RCV1-v2 corpus. Source: Figure
3.9 of (Salakhutdinov 2009). Used with kind permission of Ruslan Salakhutdinov.
text data. The results are shown in Figure 28.5. On the left we show the 2d embedding produced
by LSA (Section 27.2.2), and on the right, the 2d embedding produced by the auto-encoder. It isclear that the low-dimensional representation created by the auto-encoder has captured a lot ofthe meaning of the documents, even though class labels were not used.
4
Note that various other ways of learning low-dimensional continuous embeddings of words
have been proposed. See e.g., (Turian et al. 2010) for details.
28.4.3 Information retrieval using deep auto-encoders (semantic hashing)
In view of the sucess of RBMs for information retrieval discussed in Section 27.7.3.1, it is naturalto wonder if deep models can do even better. In fact they can, as is shown in Figure 28.6.
More interestingly, we can use a binary low-dimensional representation in the middle layer
of the deep auto-encoder, rather than a continuous representation as we used above. Thisenables very fast retrieval of related documents. For example, if we use a 20-bit code, wecan precompute the binary representation for all the documents, and then create a hash-tablemapping codewords to documents. This approach is known as semantic hashing, since the
binary representation of semantically similar documents will be close in Hamming distance.
For the 402,207 test documents in Reuters RCV1-v2, this results in about 0.4 documents per
entry in the table. At test time, we compute the codeword for the query, and then simply retrievethe relevant documents in constant time by looking up the contents of the relevant address in
memory. To ﬁnd other other related documents, we can compute all the codewords within a
4. Some details. Salakhutdinov and Hinton used the Reuters RCV1-v2 data set, which consists of 804,414 newswire
articles, manually classiﬁed into 103 topics. They represent each document by counting how many times each of the top
2000 most frequent words occurs. They trained a deep auto-encoder with 2000-500-250-125-2 layers on half of the data.
The 2000 visible units use a replicated softmax distribution, the 2 hidden units in the middle layer have a Gaussian
distribution, and the remaining units have the usual Bernoulli-logistic distribution. When ﬁne tuning the auto-encoder,
a cross-entropy loss function (equivalent to maximum likelihood under a multinoulli distribution) was used. See (Hinton
and Salakhutdinov 2006) for further details.
1004 Chapter28. Deeplearning
x1 x2 x3 x4h1
1h12h13 h21h22h23
w1w1w1
w2w2w2
Figure 28.7 A small 1d convolutional RBM with two groups of hidden units, each associated with a ﬁlter
of size 2. h1
1andh21are two different “views” of the data in the ﬁrst window, (x1,x2). The ﬁrst view is
computed using the ﬁlter w1, the second view using ﬁlter w2. Similarly, h12andh22are the views of the
data in the second window, (x2,x3), computed using w1andw2respectively.
Hamming distance of, say, 4. This results in retrieving about 6196×0.4≈2500documents5.
The key point is that the total time is independent of the size of the corpus.
Of course, there are other techniques for fast document retrieval, such as inverted indices.
These rely on the fact that individual words are quite informative, so we can simply intersect all
the documents that contain each word. However, when performing image retrieval, it is clear thatwe do not want to work at the pixel level. Recently (Krizhevsky and Hinton 2010) showed thata deep autoencoder could learn a good semantic hashing function that outperformed previoustechniques (Torralba et al. 2008; Weiss et al. 2008) on the 80 million tiny images dataset. Itis hard to apply inverted indexing techniques to real-valued data (although one could imaginevector quantizing image patches).
28.4.4 Learning audio features using 1d convolutional DBNs
To apply DBNs to time series of unbounded length, it is necessary to use some form of parametertying. One way to do this is to use convolutional DBNs (Lee et al. 2009; Desjardins and Bengio
2008), whichuseconvolutional RBMsas theirbasic unit. These modelsare agenerative versionofconvolutional neural nets discussed in Section 16.5.1. The basic idea is illustrated in Figure 28.7.The hidden activation vector for each group is computed by convolving the input vector withthat group’s ﬁlter (weight vector or matrix). In other words, each node within a hidden groupis a weighted combination of a subset of the inputs. We compute the activaton of all thehidden nodes by “sliding” this weight vector over the input. This allows us to model translation
invariance, since we use the same weights no matter where in the input vector the patternoccurs.
6Each group has its own ﬁlter, corresponding to its own pattern detector.
5. Note that 6196 =/summationtext4
k=0/parenleftbig20
k/parenrightbig
is the number of bit vectors that are up to a Hamming distance of 4 away.
6. It is often said that the goal of deep learnng is to discover invariant features, e.g., a representation of an object
that does not change even as nuisance variables, such as the lighting, do change. However, sometimes these so-called
“nuisance variables” may be the variables of interest. For example if the task is to determine if a photograph was taken
in the morning or the evening, then lighting is one of the more salient features, and object identity may be less relevant.
As always, one task’s “signal” is another task’s “noise”, so it unwise to “throw away” apparently irrelevant information
28.5. Discussion 1005
More formally, for binary 1d signals, we can deﬁne the full conditionals in a convolutional
RBM as follows (Lee et al. 2009):
p(hk
t=1|v)=s i g m ( ( wk⊗v)t+bt) (28.6)
p(vs=1|h) = sigm(/summationdisplay
k(wk⊗hk)s+cs) (28.7)
wherewkis the weight vector for group k,btandcsare bias terms, and a⊗brepresents the
convolution of vectors aandb.
It is common to add a max pooling layer as well as a convolutional layer, which computes
a local maximum over the ﬁltered response. This allows for a small amount of translation
invariance. It also reduces the size of the higher levels, which speeds up computation consider-ably. Deﬁning this for a neural network is simple, but deﬁning this in a way which allows forinformation ﬂow backwards as well as forwards is a bit more involved. The basic idea is similarto a noisy-OR CPD (Section 10.2.3), where we deﬁne a probabilistic relationship between the maxnode and the parts it is maxing over. See (Lee et al. 2009) for details. Note, however, that thetop-down generative process will be difficult, since the max pooling operation throws away somuch information.
(Lee et al. 2009) applies 1d convolutional DBNs of depth 2 to auditory data. When the input
consists of speech signals, the method recovers a representation that is similar to phonemes.When applied to music classiﬁcation and speaker identiﬁcation, their method outperforms tech-niques using standard features such as MFCC. (All features were fed into the same discriminativeclassiﬁer.)
In (Seide et al. 2011), a deep neural net was used in place of a GMM inside a conventional
HMM. The use of DNNs signiﬁcantly improved performance on conversational speech recogni-tion. In an interview, the tech lead of this project said “historically, there have been very fewindividual technologies in speech recognition that have led to improvements of this magnitude”.
7
28.4.5 Learning image features using 2d convolutional DBNs
We can extend a convolutional DBN from 1d to 2d in a straightforward way (Lee et al. 2009), asillustrated in Figure 28.8. The results o fa3l a y e rs y s t e mt r ained on four classes of visual objects
(cars, motorbikes, faces and airplanes) from the Caltech 101 dataset are shown in Figure 28.9.We only show the results for layers 2 and 3, because layer 1 learns Gabor-like ﬁlters that arevery similar to those learned by sparse coding, shown in Figure 13.21(b). We see that layer 2 haslearned some generic visual parts that are shared amongst object classes, and layer 3 seems tohave learned ﬁlters that look like grandmother cells, that are speciﬁc to individual object classes,and in some cases, to individual objects.
28.5 Discussion
So far, we have been discussing models inspired by low-level processing in the brain. Thesemodels have produced useful features for simple classiﬁcation tasks. But can this pure bottom-up
too early.
7. Source: http://research .microsoft .com/en-us/news/features/speechrecognition-082911 .aspx.
1006 Chapter28. Deeplearning
Figure 28.8 A 2d convolutional RBM with max-pooling layers. The input signal is a stack of 2d images
(e.g., color planes). Each input layer is passed through a different set of ﬁlters. Each hidden unit is
obtained by convolving with the appropriate ﬁlter, and then summing over the input planes. The ﬁnal layer
is obtained by computing the local maximum within a small window. Source: Figure 1 of (Chen et al.
2010) . Used with kind permission of Bo Chen.
faces, cars, airplanes, motorbikes
(a)
 (b)
Figure 28.9 Visualization of the ﬁlters learned by a convolutional DBN in layers two and three. Source:
Figure 3 of (Lee et al. 2009). Used with kind permission of Honglak Lee.
approach scale to more challenging problems, such as scene interpretation or natural language
understanding?
To put the problem in perspective, consider the DBN for handwritten digit classiﬁcation in
Figure 28.4(a). This has about 1.6M free parameters ( 28×28×500+500×500+510×2000 =
1,662,000). Although this is a lot, it is tiny compared to the number of neurons in the brain.
As Hinton says,
This is about as many parameters as 0.002 cubic millimetres of mouse cortex, and several
hundred networks of this complexity could ﬁt within a single voxel of a high-resolution
fMRI scan. This suggests that much bigger networks may be required to compete with
human shape recognition abilities. — (Hinton et al. 2006, p1547).
To scale up to more challenging problems, various groups are using GPUs (see e.g., (Raina
et al. 2009)) and/or parallel computing. But perhaps a more efficient approach is to work at a
higher level of abstraction, where inference is done in the space of objects or their parts, rather
28.5. Discussion 1007
than in the space of bits and pixels. That is, we want to bridge the signal-to-symbol divide,
where by “symbol” we mean something atomic, that can be combined with other symbols in a
compositional way.
The question of how to convert low level signals into a more structured/ “semantic” represen-
tation is known as the symbol grounding problem (Harnard 1990). Traditionally such symbols
are associated with words in natural language, but it seems unlikely we can jump directly fromlow-level signals to high-level semantic concepts. Instead, what we need is an intermediate levelof symbolic or atomic parts.
A very simple way to create such parts from real-valued signals, such as images, is to apply
vector quantization. This generates a set of visual words. These can then be modelled using
some of the techniques from Chapter 27 for modeling bags of words. Such models, however, arestill quite “shallow”.
It is possible to deﬁne, and learn, deep models which use discrete latent parts. Here we just
mention a few recent approaches, to give a ﬂavor of the possibilites. (Salakhutdinov et al. 2011)combine RBMs with hierarchical latent Dirichlet allocation methods, trained in an unsupervisedway. (Zhu et al. 2010) use latent and-or graphs, trained in a manner similar to a latent structuralSVM. A similar approach, based on grammars, is described in (Girshick et al. 2011). What isinteresting about these techniques is that they apply data-driven machine learning methodsto rich structured/symbolic “AI-style” models. This seems like a promising future direction formachine learning.

Notation
Introduction
It is very difficult to come up with a single, consistent notation to cover the wide variety of
data, models and algorithms that we discuss. Furthermore, conventions differ between machinelearning and statistics, and between different books and papers. Nevertheless, we have triedto be as consistent as possible. Below we summarize most of the notation used in this book,although individual sections may introduce new notation. Note also that the same symbol mayhave different meanings depending on the context, although we try to avoid this where possible.
General math notation
Symbol Meaning
⌊x⌋ Floor ofx, i.e., round down to nearest integer
⌈x⌉ Ceiling of x, i.e., round up to nearest integer
x⊗y Convolution of xandy
x⊙y Hadamard (elementwise) product of xandy
a∧b logical AND
a∨b logical OR
¬a logical NOT
I(x) Indicator function, I(x)=1ifxis true, else I(x)=0
∞ Inﬁnity
→ Tends towards, e.g., n→∞
∝ Proportional to, so y=axcan be written as y∝x
|x| Absolute value
|S| Size (cardinality) of a set
n! Factorial function
∇ Vector of ﬁrst derivatives
∇2Hessian matrix of second derivatives
/defines Deﬁned as
O(·) Big-O: roughly means order of magnitude
R The real numbers
1:n Range (Matlab convention): 1:n={1,2,...,n}
≈ Approximately equal to
argmaxxf(x)Argmax: the value xthat maximizes f
1010 Notation
B(a,b) Beta function, B(a,b)=Γ(a)Γ(b)
Γ(a+b)
B(α) Multivariate beta function,/producttext
kΓ(αk)
Γ(/summationtext
kαk) /parenleftbign
k/parenrightbig
nchoosek, equal to n!/(k!(n−k)!)
δ(x) Dirac delta function, δ(x)=∞ifx=0, elseδ(x)=0
δij Kronecker delta, equals 1 if i=j, otherwise equals 0
δx(y) Kronecker delta, equals 1 if x=y, otherwise equals 0
exp(x) Exponential function ex
Γ(x) Gamma function, Γ(x)=/integraltext∞
0ux−1e−udu
Ψ(x) Digamma function, Ψ(x)=d
dxlogΓ(x)
X A set from which values are drawn (e.g., X=RD)
Linear algebra notation
We use boldface lowercase to denote vectors, such as a, and boldface uppercase to denote
matrices, such as A. Vectors are assumed to be column vectors, unless noted otherwise.
Symbol Meaning
A/follows0 Ais a positive deﬁnite matrix
tr(A) Trace of a matrix
det(A) Determinant of matrix A
|A| Determinant of matrix A
A−1I n v e r s eo fam a t r i x
A†Pseudo-inverse of a matrix
ATTranspose of a matrix
aTTranspose of a vector
diag(a) Diagonal matrix made from vector a
diag(A)Diagonal vector extracted from matrix A
IorId Identity matrix of size d×d(ones on diagonal, zeros off)
1or1d Vector of ones (of length d)
0or0d Vector of zeros (of length d)
||x||=||x||2Euclidean or /lscript2norm/radicalBig/summationtextd
j=1x2
j
||x||1 /lscript1norm/summationtextd
j=1|xj|
A:,j j’th column of matrix
Ai,: transpose of i’th row of matrix (a column vector)
Aij Element(i,j)of matrix A
x⊗y Tensor product of xandy
Probability notation
We denote random and ﬁxed scalars by lower case, random and ﬁxed vectors by bold lower case,
and random and ﬁxed matrices by bold upper case. Occastionally we use non-bold upper caseto denote scalar random variables. Also, we use p()for both discrete and continuous random
variables.
Notation 1011
Symbol Meaning
X⊥YX is independent of Y
X/negationslash⊥YX is not independent of Y
X⊥Y|ZX is conditionally independent of YgivenZ
X/negationslash⊥Y|ZX is not conditionally independent of YgivenZ
X∼pX is distributed according to distribution p
α Parameters of a Beta or Dirichlet distribution
cov[x] Covariance of x
E[X] Expected value of X
Eq[X] Expected value of Xwrt distribution q
H(X)orH(p)Entropy of distribution p(X)
I(X;Y) Mutual information between XandY
KL(p||q) KL divergence from distribution ptoq
/lscript(θ) Log-likelihood function
L(θ,a) Loss function for taking action awhen true state of nature is θ
λ Precision (inverse variance) λ=1/σ2
Λ Precision matrix Λ=Σ−1
mode[X] Most probable value of X
μ Mean of a scalar distribution
μ Mean of a multivariate distribution
p(x) Probability density or mass function
p(x|y) Conditional probability density of xgiveny
Φ cdf of standard normal
φ pdf of standard normal
π multinomial parameter vector, Stationary distribution of Markov chain
ρ Correlation coefficient
sigm(x) Sigmoid (logistic) function,1
1+e−x
σ2Variance
Σ Covariance matrix
var[x] Variance of x
ν Degrees of freedom parameter
Z Normalization constant of a probability distribution
Machine learning/statistics notation
In general, we use upper case letters to denote constants, such as C,D,K,N,S,T, etc. We
use lower case letters as dummy indexes of the appropriate range, such as c=1:Cto index
classes,j=1:D to index input features, k=1:K to index states or clusters, s=1:Sto
index samples, t=1:Tto index time, etc. To index data cases, we use the notation i=1:N,
although the notation n=1:Nis also widely used.
We usexto represent an observed data vector. In a supervised problem, we use yoryto
represent the desired output label. We use zto represent a hidden variable. Sometimes we also
useqto represent a hidden discrete variable.
1012 Notation
Symbol Meaning
C Number of classes
D Dimensionality of data vector (number of features)
R Number of outputs (response variables)
D Training dataD={xi|i=1:N}orD={(xi,yi)|i=1:N}
Dtest Test data
J(θ) Cost function
K Number of states or dimensions of a variable (often latent)
κ(x,y)Kernel function
K Kernel matrix
λ Strength of /lscript2or/lscript1regularizer
N Number of data cases
Nc Number of examples of class c,Nc=/summationtextN
n=1I(yn=c)
φ(x) Basis function expansion of feature vector x
Φ Basis function expansion of design matrix X
q() Approximate or proposal distribution
Q(θ,θold)Auxiliary function in EM
S Number of samples
T Length of a sequence
T(D)Test statistic for data
T Transition matrix of Markov chain
θ Parameter vector
θ(s)s’th sample of parameter vector
ˆθ Estimate (usually MLE or MAP) of θ
ˆθML Maximum likelihood estimate of θ
ˆθMAP MAP estimate of θ
θ Estimate (usually posterior mean) of θ
w Vector of regression weights (called βin statistics)
W Matrix of regression weights
xij Component (i.e., feature) jof data case i,f o ri=1:N,j=1:D
xi Training case, i=1:N
X Design matrix of size N×D
x Empirical mean x=1
N/summationtextNi=1xi
˜x Future test case
x∗ Future test case
y Vector of all training labels y=(y1,...,y N)
zij Latent component jfor casei
Graphical model notation
In graphical models, we index nodes by s,t,u∈V, and states by i,j,k∈X.
Notation 1013
Symbol Meaning
s∼tNodesis connected to node t
bel Belief function
C Cliques of a graph
chjChild of node ji naD A G
descjDescendants of node ji naD A G
G A graph
E Edges of a graph
mbtMarkov blanket of node t
nbdtNeighborhood of node t
patParents of node ti naD A G
predtPredecessors of node tin a DAG wrt some ordering
ψc(xc)Potential function for clique c
S Separators of a graph
θsjkprob. node sis in state kgiven its parents are in states j
V Nodes of a graph
1014 Notation
List of commonly used abbreviations
Abbreviation Meaning
cdf Cumulative distribution function
CPD Conditional probability distributionCPT Conditional probability tableCRF Conditional random ﬁeldDAG Directed acyclic graphicDGM Directed graphical modelEB Empirical BayesEM Expectation maximization algorithmEP Expectation propagationGLM Generalized linear modelGMM Gaussian mixture modelHMM Hidden Markov modeliid Independent and identically distributediff If and only ifKL Kullback Leibler divergenceLDS Linear dynamical systemLHS Left hand side (of an equation)MAP Maximum A Posterior estimateMCMC Markov chain Monte CarloMH Metropolis HastingsMLE Maximum likelihood estimateMPM Maximum of Posterior MarginalsMRF Markov random ﬁeldMSE Mean squared errorNLL Negative log likelihoodOLS Ordinary least squarespd Positive deﬁnite (matrix)pdf Probability density functionpmf Probability mass functionRBPF Rao-Blackwellised particle ﬁlterRHS Right hand side (of an equation)RJMCMC Reversible jump MCMCRSS Residual sum of squaresSLDS Switching linear dynamical systemSSE Sum of squared errorsUGM Undirected graphical modelVB Variational Bayeswrt With respect to
Bibliography
Abend, K., T. J. Harley, and L. N. Kanal
(1965). Classiﬁcation of Binary Ran-
dom Patterns. IEEETransactionson
InformationTheory 11(4), 538–544.
Ackley, D., G. Hinton, and T. Sejnowski
(1985). A learning algorithm forboltzmann machines. Cognitive
Science 9, 147–169.
Adams, R. P., H. Wallach, and
Z. Ghahramani (2010). Learning thestructure of deep sparse graphicalmodels. InAI/Statistics.
Aggarwal, D. and S. Merugu (2007).
Predictive discrete latent factormodels for large scale dyadic data.
InProc. of the Int’l Conf. on Knowl-
edgeDiscoveryandDataMining.
Ahmed, A. and E. Xing (2007).
On tight approximate inference of
the logistic-normal topic admixturemodel. InAI/Statistics.
Ahn, J.-H. and J.-H. Oh (2003). A Con-
strained EM Algorithm for Princi-
pal Component Analysis. Neural
Computation 15, 57–65.
Ahn, S., A. Korattikara, and M. Welling
(2012). Bayesian Posterior Sam-
pling via Stochastic Gradient Fisher
Scoring. In Intl. Conf. on Machine
Learning.
Airoldi, E., D. Blei, S. Fienberg, and
E. Xing (2008). Mixed-membershipstochastic blockmodels. J. of Ma-
chine Learning Research 9, 1981–
2014.
Aitchison, J. (1982). The statistical
analysis of compositional data. J.of
Royal Stat. Soc. Series B 44 (2), 139–
177.Aji, S. M. and R. J. McEliece (2000,
March). The generalized distribu-
tive law. IEEE Trans. Info. The-
ory 46(2), 325–343.
Alag, S. and A. Agogino (1996). In-
ference using message propoga-
tion and topology transformationin vector Gaussian continuous net-works. InUAI.
Albers, C., M. Leisink, and H. Kap-
pen (2006). The Cluster VariationMethod for Efficient Linkage Anal-ysis on Extended Pedigrees. BMC
Bioinformatics 7.
Albert, J. and S. Chib (1993). Bayesian
analysis of binary and polychoto-
mous response data. J. of the Am.
Stat.Assoc. 88 (422), 669–679.
Allwein, E., R. Schapire, and Y. Singer
(2000). Reducing multiclass to bi-
nary: A unifying approach for mar-
gin classiﬁers. J.ofMachineLearn-
ingResearch , 113–141.
Aloise, D., A. Deshpande, P. Hansen,
and P. Popat (2009). NP-hardness
of Euclidean sum-of-squares clus-
tering.Machine Learning 75, 245–
249.
Alpaydin, E. (2004). Introduction to
machinelearning. MIT Press.
Altun, Y., T. Hofmann, and I. Tsochan-
taridis (2006). Large Margin Meth-
odsf
or Structured and Interde-
pendent Output Variables. InG. Bakir, T. Hofmann, B. Scholkopf,A. Smola, B. Taskar, and S. Vish-wanathan (Eds.), Machine Learning
withStructuredOutputs. MIT Press.
Amir, E. (2010). Approximation Al-
gorithms for Treewidth. Algorith-
mica 56(4), 448.
Amir, E. and S. McIlraith (2005).
Partition-based logical reason-ing for ﬁrst-order and propo-
sitional theories. Artiﬁcial
Intelligence 162 (1), 49–88.
Ando, R. and T. Zhang (2005). A
framework for learning predictive
structures from multiple tasks and
unlabeled data. J. of Machine
LearningResearch 6, 1817–1853.
Andrews, D. and C. Mallows (1974).
Scale mixtures of Normal distribu-
tions.J. of Royal Stat. Soc. Series
B3 6, 99–102.Andrieu, C., N. de Freitas, and
A. Doucet (2000). SequentialBayesian estimation and model se-lection for dynamic kernel ma-chines. Technical report, Cam-bridge Univ.
Andrieu, C., N. de Freitas, and
A. Doucet (2001). Robust FullBayesian Learning for Radial Ba-
sis Networks. Neural Computa-
tion 13(10), 2359–2407.
Andrieu, C., N. de Freitas, A. Doucet,
and M. Jordan (2003). An introduc-
tion to MCMC for machine learn-ing.MachineLearning 50, 5–43.
Andrieu, C., A. Doucet, and V. Tadic
(2005). Online EM for parameterestimation in nonlinear-non Gaus-sian state-space models. In Proc.
IEEECDC.
Andrieu, C. and J. Thoms (2008). A
tutorial on adaptive MCMC. Statis-
ticalComputing 18, 343–373.
Aoki, M. (1987). Statespacemodelingof
timeseries. Springer.
Archambeau, C. and F. Bach (2008).
Sparse probabilistic projections. InNIPS.
Argyriou, A., T. Evgeniou, and M. Pon-
til (2008). Convex multi-task fea-ture learning. Machine Learn-
ing 73(3), 243–272.
Armagan, A., D. Dunson, and J. Lee
(2011). Generalized double paretoshrinkage. Technical report, Duke.
Armstrong, H. (2005). Bayesian esti-
mation of decomposable Gaussian
graphical models. Ph.D. thesis,
UNSW.
Armstrong, H., C. Carter, K. Wong,
and R. Kohn (2008). Bayesian Co-variance Matrix Estimation using aMixture of Decomposable Graphi-
cal Models. Statistics and Comput-
ing, 1573–1375.
Arnborg, S., D. G. Corneil, and
A. Proskurowski (1987). Complex-
ity of ﬁnding embeddings in a k-
tree.SIAM J. on Algebraic and Dis-
creteMethods 8 , 277–284.
Arora, S. and B. Barak (2009). Com-
plexity
Theory: AModernApproach.
Cambridge.
Arthur, D. and S. Vassilvitskii (2007). k-
means++: the advantages of carefulseeding. In Proc. 18th ACM-SIAM
symp. on Discrete algorithms, pp.
1027â˘A¸S1035.
1016 BIBLIOGRAPHY
Arulampalam, M., S. Maskell, N. Gor-
don, and T. Clapp (2002, Febru-
ary). A Tutorial on Particle Fil-ters for Online Nonlinear/Non-Gaussian Bayesian Tracking. IEEE
Trans. on Signal Processing 50 (2),
174–189.
Asavathiratham, C. (2000). The Inﬂu-
enceModel: ATractableRepresenta-
tionfortheDynamicsofNetworkedMarkov Chains. Ph.D. thesis, MIT,
Dept. EECS.
Atay-Kayis, A. and H. Massam (2005).
A Monte Carlo method for comput-ing the marginal likelihood in non-decomposable Gaussian graphical
models.Biometrika 92, 317–335.
Attenberg, J., K. Weinberger, A. Smola,
A. Dasgupta, and M. Zinkevich
(2009). Collaborative spam ﬁlter-ing with the hashing trick. In Virus
Bulletin.
Attias, H. (1999). Independent factor
analysis.Neural Computation 11,
803–851.
Attias, H. (2000). A variational
Bayesian framework for graphicalmodels. InNIPS-12.
Bach, F. (2008). Bolasso: Model Con-
sistent Lasso Estimation through
the Bootstrap. In Intl.Conf.onMa-
chineLearning.
Bach, F. and M. Jordan (2001). Thin
junction trees. In NIPS.
Bach, F. and M. Jordan (2005). A prob-
abilistic interpretation of canonical
correlation analysis. Technical Re-port 688, U. C. Berkeley.
Bach, F. and E. Moulines (2011). Non-
asymptotic analysis of stochasticapproximation algorithms for ma-chine learning. In NIPS.
Bahmani, B., B. Moseley, A. Vattani,
R. Kumar, and S. Vassilvitskii (2012).Scalable k-Means++. In VLDB.
Bakker, B. and T. Heskes (2003). Task
Clustering and Gating for Bayesian
Multitask Learning. J. of Machine
LearningResearch 4, 83–99.
Baldi, P. and Y. Chauvin (1994).
Smooth online learning algorithmsfor hidden Markov models. Neural
Computation 6 , 305–316.
Balding, D. (2006). A tutorial on sta-
tistical methods for population as-
sociation studies. Nature Reviews
Genetics 7 , 81–91.Banerjee, O., L. E. Ghaoui, and
A. d’Aspremont (2008). Model se-lection through sparse maximumlikelihood estimation for multivari-ate gaussian or binary data. J. of
MachineLearningResearch 9, 485–516.
Bar-Shalom, Y. and T. Fortmann
(1988).Tracking and data associa-
tion. Academic Press.
Bar-Shalom, Y. and X. Li (1993). Es-
timation and Tracking: Principles,
Techniques and Software. Artech
House.
Barash, Y. and N. Friedman (2002).
Context-speciﬁc Bayesian cluster-ing for gene expression data. J.
Com
p.Bio. 9, 169–191.
Barber, D. (2006). Expectation Cor-
rection for Smoothed Inference inSwitching Linear Dynamical Sys-
tems.J. of Machine Learning Re-
search 7, 2515–2540.
Barber, D. and C. Bishop (1998).
Ensemble Learning in Bayesian
Neural Networks. In C. Bishop
(Ed.),NeuralNetworksandMachine
Learning, pp. 215–237. Springer.
Barber, D. and S. Chiappa (2007).
Uniﬁed inference for variational
bayesian linear gaussian statespace models. In NIPS.
Barbieri, M. and J. Berger (2004). Op-
timal predictive model selection.
AnnalsofStatistics 32, 870–897.
Bartlett, P., M. Jordan, and J. McAuliffe
(2006). Convexity, Classiﬁcation,and Risk Bounds. J.oftheAm.Stat.
Assoc. 101(473), 138–156.
Baruniak, R. (2007). Compressive sens-
ing.IEEE Signal Processing Maga-
zine.
Barzilai, J. and J. Borwein (1988). Two
point step size gradient methods.IMAJ.ofNumericalAnalysis 8, 141–
148.
Basu, S., T. Choudhury, B. Clarkson,
and A. Pentland (2001). Learn-ing human interactions withthe inﬂuence model. Techni-cal Report 539, MIT Media Lab.ftp://whitechapel.media.mit.edu/pub/tech-reports/TR-539-ABSTRACT.html.
Baum, L. E., T. Petrie, G. Soules, and
N. Weiss (1970). A maximizationtechnique occuring in the statisti-cal analysis of probabalistic func-
tions in markov chains. TheAnnals
of Mathematical Statistics 41, 164–
171.
Beal, M. (2003). VariationalAlgorithms
forApproximateBayesianInference.Ph.D. thesis, Gatsby Unit.
Beal, M. and Z. Ghahramani (2006).
Variational Bayesian Learning ofDirected Graphical Models with
Hidden Variables. Bayesian Anal-
ysis 1(4).
Beal, M. J., Z. Ghahramani, and C. E.
Rasmussen (2002). The inﬁnite hid-
den Markov model. In NIPS-14.
Beck, A. and M. Teboulle (2009). A fast
iterative shrinkage-thresholding al-gorothm for linear inverse prob-lems.SIAM J. on Imaging Sci-
ences 2(1), 183–202.
Beinlich, I., H. Suermondt, R. Chavez,
and G. Cooper (1989). The ALARMmonitoring system: A case studywith two probabilistic inferencetechniques for belief networks. In
Proc. of the Second European Conf.
onAIinMedicine, pp. 247–256.
Bekkerman, R., M. Bilenko, and
J. Langford (Eds.) (2011). ScalingUp
MachineLearning. Cambridge.
Bell, A. J. and T. J. Sejnowski (1995).
An information maximisation ap-
proach to blind separation and
blind deconvolution. Neural Com-
putation 7 (6), 1129–1159.
Bengio,Y
. (2009). Learning deep ar-
chitectures for AI. Foundationsand
TrendsinMachineLearning 2 (1), 1–
127.
Bengio, Y. and S. Bengio (2000).
Modeling high-dimensional dis-
crete data with multi-layer neuralnetworks. In NIPS.
Bengio, Y., O. Delalleau, N. Roux,
J. Paiement, P. Vincent, andM. Ouimet (2004). Learning eigen-functions links spectral embedding
and kernel PCA. Neural Computa-
tion 16, 2197–2219.
Bengio, Y. and P. Frasconi (1995). Dif-
fusion of context and credit infor-
mation in markovian models. J. of
AIResearch 3, 249–270.
Bengio, Y. and P. Frasconi (1996).
Input/output HMMs for sequence
processing. IEEE Trans. on Neural
Networks 7 (5), 1231–1249.
BIBLIOGRAPHY 1017
Bengio, Y., P. Lamblin, D. Popovici,
and H. Larochelle (2007). Greedy
layer-wise training of deep net-works. InNIPS.
Berchtold, A. (1999). The double chain
markov model. Comm. Stat. Theor.
Methods 28, 2569–2589.
Berger, J. (1985). Bayesian salesman-
ship. In P. K. Goel and A. Zellner
(Eds.),Bayesian Inference and De-
cisionTechniqueswithApplications:
Essays in Honor of Bruno deFinetti.
North-Holland.
Berger, J. and R. Wolpert (1988). The
Likelihood Principle. The Instituteof Mathematical Statistics. 2nd edi-tion.
Berkhin, P. (2006). A survey of
clustering datamining techniques.In J. Kogan, C. Nicholas, and
M. Teboulle (Eds.), Grouping Multi-
dimensional Data: Recent Advances
inClustering, pp. 25–71. Springer.
Bernardo, J. and A. Smith (1994).
BayesianTheory. John Wiley.
Berrou, C., A. Glavieux, and P. Thiti-
majashima (1993). Near Shannonlimit error-correcting coding anddecoding: Turbo codes. Proc. IEEE
Intl.Comm.Conf..
Berry, D. and Y. Hochberg (1999).
Bayesian perspectives on multiple
comparisons. J. Statist. Planning
andInference 82, 215–227.
Bertele, U. and F. Brioschi (1972). Non-
serialDynamicProgramming. Aca-
demic Press.
Bertsekas, D. (1997). Parallel and Dis-
tribution Computation: Numerical
Methods. Athena Scientiﬁc.
Bertsekas, D. (1999). Nonlinear Pro-
gramming (Second ed.). Athena
Scientiﬁc.
Bertsekas, D. and J. Tsitsiklis (2008).
Introduction to Probability. Athena
Scientiﬁc. 2nd Edition.
Besag, J. (1975). Statistical analysis of
non-lattice data. TheStatistician24 ,
179–196.
Bhatnagar, N., C. Bogdanov, and
E. Mossel (2010). The compu-tational complexity of estimatingconvergence time. Technical re-port, .Bhattacharya, A. and D. B. Dunson
(2011). Simplex factor models formultivariate unordered categorical
data.J. of the Am. Stat. Assoc..T o
appear.
Bickel, P. and E. Levina (2004). Some
theory for Fisher’s linear discrimi-
nant function, "Naive Bayes", andsome alternatives when there aremany more variables than obser-
vations.Bernoulli 10, 989–1010.
Bickson, D. (2009). Gaussian Belief
Propagation: Theory and Applica-
tion. Ph.D. thesis, Hebrew Univer-sity of Jerusalem.
Bilmes, J. (2000). Dynamic Bayesian
multinets. In UAI.
Bilmes, J. A. (2001). Graphical models
andaut
omatic speech recognition.
Technical Report UWEETR-2001-0005, Univ. Washington, Dept. ofElec. Eng.
Binder, J., D. Koller, S. J. Russell, and
K. Kanazawa (1997). Adaptive prob-abilistic networks with hidden vari-ables.Machine Learning 29, 213–
244.
Binder, J., K. Murphy, and S. Russell
(1997). Space-efficient inference indynamic probabilistic networks. In
Intl.JointConf.onAI.
Birnbaum, A. (1962). On the founda-
tions of statistical infernece. J. of
theAm.Stat.Assoc. 57, 269–326.
Bishop, C. (1999). Bayesian PCA. In
NIPS.
Bishop, C. (2006a). Patternrecognition
andmachinelearning. Springer.
Bishop, C. (2006b). Patternrecognition
andmachinelearning. Springer.
Bishop, C. and G. James (1993). Analy-
sis of multiphase ﬂows using dual-
energy densitometry and neural
networks.NuclearInstrumentsand
Methods in Physics Research A327,
580–593.
Bishop, C. and M. Svensén (2003).
Bayesian hierarchical mixtures ofexperts. InUAI.
Bishop, C. and M. Tipping (2000).
Variational relevance vector ma-chines. InUAI.
Bishop, C. M. (1994). Mixture density
networks. Technical Report NCRG4288, Neural Computing ResearchGroup, Department of ComputerScience, Aston University.Bishop, C. M. (1995). Neural Networks
for Pattern Recognition. ClarendonPress.
Bishop, Y., S. Fienberg, and P. Holland
(1975).Discrete Multivariate Analy-
sis: TheoryandPractice. MIT Press.
Bistarelli, S., U. Montanari, and
F. Rossi (1997). Semiring-basedconstraint satisfaction and opti-
mization.J. of the ACM 44 (2), 201–
236.
Blake, A., P. Kohli, and C. Rother (Eds.)
(2011).AdvancesinMarkovRandom
FieldsforVisionandImageProcess-
ing. MIT Press.
Blei, D. and J. Lafferty (2006a). Corre-
lated topic models. In NIPS.
Blei, D. and J. Lafferty (2006b). Dy-
namic topic models. In Intl. Conf.
onMachineLearning, pp. 113–120.
Blei, D. and J. Lafferty (2007). A Corre-
lated Topic Model of "Science". An-
nalsofAppliedStat. 1 (1), 17–35.
Blei, D. and J. McAuliffe (2010, March).
Supervised topic models. Technicalreport, Princeton.
Blei, D., A. Ng, and M. Jordan (2003).
Latent dirichlet allocation. J. of
MachineLearningResearch 3, 993–1022.
Blumensath, T. and M. Davies (2007).
Onthe
difference between Orthog-
onal Matching Pursuit and Orthog-onal Least Squares. Technical re-port, U. Edinburgh.
Bo, L., C. Sminchisescu, A. Kanaujia,
and D. Metaxas (2008). Fast Algo-rithms for Large Scale Conditional3D Prediction. In CVPR.
Bohning, D. (1992). Multinomial logis-
tic regression algorithm. Annals of
theInst.ofStatisticalMath. 44, 197–200.
Bollen, K. (1989). Structural Equation
Models with Latent Variables. JohnWiley & Sons.
Bordes, A., L. Bottou, and P. Galli-
nari (2009, July). Sgd-qn: Care-ful quasi-newton stochastic gradi-
ent descent. J.ofMachineLearning
Research 10, 1737–1754.
Bordes, A., L. Bottou, P. Gallinari,
J. Chang, and S. A. Smith (2010). Er-
ratum: SGDQN is Less Careful than
Expected.J. of Machine Learning
Research 11, 2229–2240.
1018 BIBLIOGRAPHY
Boser, B. E., I. M. Guyon, and V. N.
Vapnik (1992). A training algorithm
for optimal margin classiﬁers. In
Proc.oftheWorkshoponComputa-
tionalLearningTheory.
Bottcher, S. G. and C. Dethlefsen
(2003). deal: A package for learning
bayesian networks. J. of Statistical
Software 8 (20).
Bottolo, L. and S. Richardson (2010).
Evolutionary stochastic search.BayesianAnalysis 5 (3), 583–618.
Bottou, L. (1998). Online algorithms
and stochastic approximations. InD. Saad (Ed.), Online Learning and
NeuralNetworks. Cambridge.
Bottou, L. (2007). Learning with large
datasets (nips tutorial).
Bottou, L., O. Chapelle, D. DeCoste,
and J. Weston (Eds.) (2007). Large
ScaleKernelMachines. MIT Press.
Bouchard, G. (2007). Efficient bounds
for the softmax and applications
to approximate inference in hybrid
models. In NIPS 2007 Workshop
onApproximateInferenceinHybrid
Models.
Bouchard-Cote, A. and M. Jordan
(2009). Optimization of structured
mean ﬁeld objectives. In UAI.
Bowman, A.andA.Azzalini(1997). Ap-
pliedSmoothingTechniquesforData
Analysis. Oxford.
Box, G. and N. Draper (1987). Empir-
ical Model-Building and ResponseSurfaces. Wiley.
Box, G. and G. Tiao (1973). Bayesian
inference in statistical analysis.
Addison-Wesley.
Boyd, S. and L. Vandenberghe (2004).
Convexoptimization. Cambridge.
Boyen, X. and D. Koller (1998).
Tractable inference for complexstochastic processes. In UAI.
Boykov, Y., O. Veksler, and R. Zabih
(2001). Fast approximate energyminimization via graph cuts. IEEE
Trans. on Pattern Analysis and Ma-
chineIntelligence 23 (11).
Brand, M. (1996). Coupled hidden
Markov models for modeling inter-
acting processes. Technical Report405, MIT Lab for Perceptual Com-puting.Brand, M. (1999). Structure learning
in conditional probability modelsvia an entropic prior and param-
eter extinction. Neural Computa-
tion 11, 1155–1182.
Braun, M. and J. McAuliffe (2010). Vari-
ational Inference for Large-ScaleModels of Discrete Choice. J.ofthe
Am.Stat.Assoc. 105 (489), 324–335.
Breiman, L. (1996). Bagging predictors.
MachineLearning 24 , 123–140.
Breiman, L. (1998). Arcing classiﬁers.
AnnalsofStatistics 26, 801–849.
Breiman, L. (2001a). Random forests.
MachineLearning 45 (1), 5–32.
Breiman, L. (2001b). Statistical mod-
eling: the two cultures. Statistical
Science 16 (3), 199–231.
Breiman, L., J. Friedman, and R. Ol-
shen(1984).Clas
siﬁcation and re-
gressiontrees. Wadsworth.
Breslow, N. E. and D. G. Clayton (1993).
Approximate inference in general-ized linear mixed models. J. of the
Am.Stat.Assoc. 88 (421), 9–25.
Briers, M., A. Doucet, and S. Maskel
(2010). Smoothing algorithms forstate-space models. Annals of
theInstituteofStatisticalMathemat-
ics 62(1), 61–89.
Brochu, E., M. Cora, and N. de Fre-
itas (2009, November). A tutorialon Bayesian optimization of expen-sive cost functions, with applica-tion to active user modeling andhierarchical reinforcement learn-ing. Technical Report TR-2009-23,Department of Computer Science,University of British Columbia.
Brooks, S. and G. Roberts (1998).
Assessing convergence of MarkovChain Monte Carlo algorithms.
Statistics and Computing 8, 319–
335.
Brown, L., T. Cai, and A. DasGupta
(2001). Interval estimation for a bi-nomial proportion. Statistical Sci-
ence 16(2), 101–133.
Brown, M. P., R. Hughey, A. Krogh, I. S.
Mian, K. Sjölander, and D. Haus-sler (1993). Using dirichlet mixturespriors to derive hidden Markovmodels for protein families. In
Intl. Conf. on Intelligent Systems for
MolecularBiology, pp. 47–55.Brown, P., M. Vannucci, and T. Fearn
(1998). Multivariate Bayesian vari-
able selection and prediction. J. of
the Royal Statistical Society B 60 (3),
627–641.
Bruckstein, A., D. Donoho, and
M. Elad (2009). From sparse so-
lutions of systems of equations tosparse modeling of signals and im-ages.SIAMReview 51 (1), 34–81.
Bryson, A. and Y.-C. Ho (1969). Applied
optimal control: optimization, esti-
mation, andcontrol. Blaisdell Pub-
lishing Company.
Buhlmann, P. and T. Hothorn (2007).
Boosting Algorithms: Regulariza-tion, Prediction and Model Fitting.
StatisticalScience 22 (4), 477–505.
Buhlmann, P. and S. van de
Geer (2011). Statistics for High-
Dimensional Data: Methodology,
TheoryandApplications. Springer.
Buhlmann, P. and B. Yu (2003). Boost-
ing with the L2 loss: Regression
and classiﬁcation. J.oftheAm.Stat.
Assoc. 98(462), 324–339.
Buhlmann, P. and B. Yu (2006). Sparse
boosting.J. of Machine Learning
Research 7 , 1001–1024.
Bui, H., S. Venkatesh, and G. West
(2002). Policy Recognition in the
Abstract Hidden Markov Model. J.
ofAIResearch 17, 451–499.
Buntine, W. (2002). Variational Exten-
sions to EM and Multinomial PCA.InIntl.Conf.onMachineLearning.
Buntine, W. and A. Jakulin (2004). Ap-
plying Discrete PCA in Data Analy-sis. InUAI.
Buntine,W
. and A. Jakulin (2006). Dis-
crete Component Analysis. In Sub-
space, Latent Structure and Feature
Selection: Statistical and Optimiza-tionPerspectivesWorkshop.
Buntine, W. and A. Weigend (1991).
Bayesian backpropagation. Com-
plexSystems 5, 603–643.
Burges, C. J., T. Shaked, E. Renshaw,
A. Lazier, M. Deeds, N. Hamilton,
and G. Hullender (2005). Learningto rank using gradient descent. In
Intl.Conf.onMachineLearning, pp.
89–96.
Burkard, R., M. Dell’Amico, and
S. Martello (2009). Assignment
Problems. SIAM.
BIBLIOGRAPHY 1019
Byran, K. and T. Leise (2006). The
25,000,000,000 Eigenvector: The
Linear Algebra behind Google.SIAMReview 48 (3).
Calvetti, D. and E. Somersalo (2007).
Introduction to Bayesian ScientiﬁcComputing. Springer.
Candes, E., J. Romberg, and T. Tao
(2006). Robust uncertainty prin-ciples: Exact signal reconstructionfrom highly incomplete frequency
information. IEEE. Trans. Inform.
Theory 52 (2), 489–509.
Candes, E. and M. Wakin (2008,
March). An introduction to com-
pressive sampling. IEEESignalPro-
cessingMagazine 21.
Candes, E., M. Wakin, and S. Boyd
(2008). Enhancing sparsity by
reweighted l1 minimization. J. of
FourierAnalysisandApplications 1,
877–905.
Cannings, C., E. A. Thompson, and
M. H. Skolnick (1978). Probabil-ity functions in complex pedigrees.
Advances in Applied Probability 10,
26–61.
Canny, J. (2004). Gap: a factor model
for discrete data. In Proc. An-
nual Intl. ACM SIGIR Conference,pp. 122–129.
Cao, Z., T. Qin, T.-Y. Liu, M.-F. Tsai,
and H. Li (2007). Learning to rank:From pairwise approach to listwise
approach. In Intl.Conf.onMachine
Learning, pp. 129â ˘A¸S136.
Cappe, O. (2010). Online Expectation
Maximisation. In K. Mengersen,
M. Titterington, and C. Robert(Eds.),Mixtures.
Cappe, O. and E. Mouline (2009, June).
Online EM Algorithm for Latent
Data Models. J. of Royal Stat. Soc.
SeriesB 71 (3), 593–613.
Cappe, O., E. Moulines, and T. Ryden
(2005).Inference in Hidden Markov
Models. Springer.
Carbonetto, P. (2003). Unsupervised
statistical models for general object
recognition. Master’s thesis, Uni-versity of British Columbia.
Carlin, B. P. and T. A. Louis (1996).
BayesandEmpiricalBayesMethods
for Data Analysis. Chapman and
Hall.Caron, F. and A. Doucet (2008).
Sparse Bayesian nonparametric re-
gression. In Intl. Conf. on Machine
Learning.
Carreira-Perpinan, M. and C. Williams
(2003). An isotropic gaussian mix-
ture can have more modes thancomponents. Technical ReportEDI-INF-RR-0185, School of Infor-matics, U. Edinburgh.
Carter, C. and R. Kohn (1994). On
Gibbs sampling for state space
models.Biometrika 81 (3), 541–553.
Carterette, B., P. Bennett, D. Chicker-
ing, and S. Dumais (2008). Here
or There: Preference Judgments forRelevance. In Proc.ECIR.
Caruana, R. (1998). A dozen tricks with
multitask learning. In G. Orr and
K.-R. Mueller (Eds.), Neural Net-
work
s: TricksoftheTrade. Springer-
Verlag.
Caruana, R. and A. Niculescu-Mizil
(2006). An empirical comparison
of supervised learning algorithms.
InIntl.Conf.onMachineLearning.
Carvahlo, C., N. Polson, and J. Scott
(2010). The horseshoe estimator for
sparse signals. Biometrika 97 (2),
465.
Carvahlo, L. and C. Lawrence (2007).
Centroid estimation in discretehigh-dimensional spaces with ap-
plications in biology. Proc. of
the National Academy of Science,
USA 105(4).
Carvalho, C. M. and M. West (2007).
Dynamic matrix-variate graphical
models.BayesianAnalysis 2 (1), 69–
98.
Casella, G. and R. Berger (2002). Statis-
tical inference. Duxbury. 2nd edi-
tion.
Castro, M., M. Coates, and R. D.
Nowak (2004). Likelihood based hi-erarchical clustering. IEEETrans.in
SignalProcessing 52 (8), 230.
Celeux, G. and J. Diebolt (1985).
The SEM algorithm: A probabilis-tic teacher derive from the EMalgorithm for the mixture prob-
lem.ComputationalStatisticsQuar-
terly 2, 73–82.
Cemgil, A. T. (2001). A technique for
painless derivation of kalman ﬁlter-
ing recursions. Technical report, U.Nijmegen.Cesa-Bianchi, N. and G. Lugosi (2006).
Prediction, learning, and games.Cambridge University Press.
Cevher, V. (2009). Learning with com-
pressible priors. In NIPS.
Chai, K. M. A. (2010). Multi-tasklearn-
ing with Gaussian processes. Ph.D.thesis, U. Edinburgh.
Chang, H., Y. Weiss, and W. Freeman
(2009). Informative Sensing. Tech-nical report, Hebrew U. Submittedto IEEE Transactions on Info. The-ory.
Chang, J. and D. Blei (2010). Hierar-
chical relational models for docu-ment networks. The Annals of Ap-
pliedStatistics 4 (1), 124–150.
Chang, J., J. Boyd-Graber, S. Gerrish,
C. Wang, and D. Blei (2009). Read-ing tea leaves: How humans inter-pret topic models. In NIPS.
Chapelle, O. and L. Li (2011). An empir-
ical evaluation of Thompson sam-pling. InNIPS.
Chartrand, R. and W. Yin (2008). It-
eratively reweighted algorithms for
compressive sensing. In Intl. Conf.
on Acoustics, Speech and Signal
Proc.
Chechik, G., A. G. N. Tishby, and
Y. Weiss (2005). Information bot-tleneck for gaussian variables. J.
of Machine Learning Research 6,
165â˘A¸S188.
Cheeseman, P
., J. Kelly, M. Self, J. Stutz,
W. Taylor, and D. Freeman (1988).
Autoclass: A Bayesian classiﬁcation
system. In Proc. of the Fifth Intl.
WorkshoponMachineLearning.
Cheeseman, P. and J. Stutz (1996).
Bayesian classiﬁcation (autoclass):
Theory and results. In Fayyad,Pratetsky-Shapiro, Smyth, and
Uthurasamy (Eds.), Advances in
KnowledgeDiscoveryandDataMin-
ing. MIT Press.
Chen, B., K. Swersky, B. Marlin, and
N. de Freitas (2010). Sparsity priorsand boosting for learning localizeddistributed feature representations.Technical report, UBC.
Chen, B., J.-A. Ting, B. Marlin, and
N. de Freitas (2010). Deep learningof invariant spatio-temporal fea-
tures from video. In NIPSWorkshop
onDeepLearning.
1020 BIBLIOGRAPHY
Chen, M., D. Carlson, A. Zaas,
C. Woods, G. Ginsburg, A. Hero,
J. Lucas, and L. Carin (2011,March). The Bayesian ElasticNet: Classifying Multi-Task Gene-Expression Data. IEEE Trans.
Biomed.Eng. 58 (3), 468–79.
Chen, R. and S. Liu (2000). Mixture
Kalman ﬁlters. J.RoyalStat.Soc.B .
Chen, S. and J. Goodman (1996). An
empirical study of smoothing tech-niques for language modeling. In
Proc.34thACL, pp. 310–318.
Chen, S. and J. Goodman (1998).
An empirical study of smoothing
techniques for language modeling.Technical Report TR-10-98, Dept.Comp. Sci., Harvard.
Chen, S. and J. Wigger (1995, July). Fast
orthogonal least squares algorithmforefficientsubset modelselection.IEEE Trans. Signal Processing 3 (7),
1713–1715.
Chen, S. S., D. L. Donoho, and M. A.
Saunders (1998). Atomic decompo-sition by basis pursuit. SIAM Jour-
nal on Scientiﬁc Computing 20 (1),
33–61.
Chen, X., S. Kim, Q. Lin, J. G.
Carbonell, and E. P. Xing (2010).Graph-Structured Multi-task Re-gression and an Efficient Optimiza-tion Method for General FusedLasso. Technical report, CMU.
Chib, S. (1995). Marginal likelihood
from the Gibbs output. J. of the
Am.Stat.Assoc. 90, 1313–1321.
Chickering, D. (1996). Learning
Bayesian networks is NP-Complete.InAI/StatsV.
Chickering, D. and D. Heckerman
(1997). Efficient approximations forthe marginal likelihood of incom-plete data given a Bayesian net-
work.Machine Learning 29, 181–
212.
Chickering, D. M. (2002). Optimal
structure identiﬁcation with greedysearch.Journal of Machine Learn-
ingResearch 3, 507–554.
Chipman, H., E. George, and R. Mc-
Culloch (1998). Bayesian CARTmodel search. J. of the Am. Stat.
Assoc. 93, 935–960.
Chipman, H., E. George, and R. Mc-
Culloch (2001). The practical imple-
mentation of Bayesian Model Se-
lection.Model Selection . IMS Lec-
ture Notes.Chipman, H., E. George, and R. Mc-
Culloch (2006). Bayesian Ensemble
Learning. In NIPS.
Chipman, H., E. George, and R. Mc-
Culloch (2010). BART: Bayesian ad-
ditive regression trees. Ann. Appl.
Stat. 4(1), 266–298.
Choi, M., V. Tan, A. Anandkumar, and
A. Willsky (2011). Learning latenttree graphical models. J. of Ma-
chineLearningResearch .
Choi, M. J. (2011). Trees and Be-
yond: Exploiting and Improving
Tree-Structured Graphical Models.
Ph.D. thesis, MIT.
Choset, H. and K. Nagatani (2001).
Topological simultaneous localiza-tion and mapping (SLAM): towardex
act localization without explicit
localization. IEEE Trans. Robotics
andAutomation 17 (2).
Chow, C. K. and C. N. Liu (1968).
Approximating discrete probabil-ity distributions with dependence
trees.IEEETrans.onInfo.Theory14,
462–67.
Christensen, O., G. Roberts, and
M. SkÃ˝uld (2006). Robust Markov
chain Monte Carlo methods for
spatial generalized linear mixed
models.J. of Computational and
GraphicalStatistics 15, 1–17.
Chung, F. (1997). Spectral Graph The-
ory. AMS.
Cimiano, P., A. Schultz, S. Sizov,
P. Sorg, and S. Staab (2009). Ex-
plicit versus latent concept modelsfor cross-language information re-
trieval. InIntl.JointConf.onAI.
Cipra, B. (2000). The Ising Model Is
NP-Complete. SIAMNews 33 (6).
Ciresan, D. C., U. Meier, L. M.
Gambardella, and J. Schmidhuber
(2010). Deep big simple neural netsfor handwritten digit recognition.
Neural Computation 22 (12), 3207–
3220.
Clarke, B. (2003). Bayes model av-
eraging and stacking when model
approximation error cannot be ig-
nored.J. of Machine Learning Re-
search, 683–712.
Clarke, B., E. Fokoue, and H. H. Zhang
(2009).Principles and Theory for
Data Mining and Machine Learn-
ing. Springer.Cleveland, W. and S. Devlin (1988).
Locally-weighted regression: Anapproach to regression analysis by
local ﬁtting. J. of the Am. Stat. As-
soc. 83(403), 596–610.
Collins, M. (2002). Discrimina-
tive Training Methods for Hidden
Markov Models: Theory and Exper-iments with Perceptron Algorithms.InEMNLP.
Collins, M., S. Dasgupta, and R. E.
Schapire (2002). A generalizationof principal components analysisto the exponential family. In NIPS-
14.
Collins, M. and N. Duffy (2002). Con-
volution kernels for natural lan-guage. InNIPS.
Collobert, R. and J. Weston (2008).
A Uniﬁed Architecture for NaturalLanguage Processing: Deep NeuralNetworks with Multitask Learning.
InIntl.Conf.onMachineLearning.
Combettes, P. and V. Wajs (2005). Sig-
nal recovery by proximal forward-backward splitting. SIAM J. Multi-
scaleModel.Simul. 4 (4), 1168–1200.
Cook, J. (2005). Exact Calculation
of Beta Inequalities. Technical re-
port, M. D. Anderson Cancer Cen-ter, Dept. Biostatistics.
Cooper, G. and E. Herskovits (1992).
A Bayesian method for the induc-tion of probabilistic networks from
data.MachineLearning 9, 309–347.
Coope
r, G. and C. Yoo (1999). Causal
discovery from a mixture of exper-
imental and observational data. InUAI.
Cover, T. and P. Hart (1967). Near-
est neighbor pattern classiﬁcation.
IEEETrans.Inform.Theory 13 (1), 21–
27.
Cover, T. M. and J. A. Thomas
(1991).ElementsofInformationThe-
ory. John Wiley.
Cover, T. M. and J. A. Thomas
(2006).Elements of Information
Theory. John Wiley. 2nd edition.
Cowles, M. and B. Carlin (1996).
Markov chain monte carlo conver-
gence diagnostics: A comparative
review.J. of the Am. Stat. Assoc. 91,
883–904.
BIBLIOGRAPHY 1021
Crisan, D., P. D. Moral, and T. Lyons
(1999). Discrete ﬁltering using
branching and interacting particle
systems.Markov Processes and Re-
latedFields 5 (3), 293–318.
Cui, Y., X. Z. Fern, and J. G. Dy
(2010). Learning multiple nonre-
dundant clusterings. ACMTransac-
tions on Knowledge Discovery fromData 4(3).
Cukier, K. (2010, February). Data, data
everywhere.
Dagum, P. and M. Luby (1993). Ap-
proximating probabilistic inferencein Bayesian belief networks is NP-
hard.ArtiﬁcialIntelligence 60, 141–
153.
Dahl, J., L. Vandenberghe, and V. Roy-
chowdhury (2008, August). Co-
variance selection for non-chordalgraphs via chordal embedding.
Optimization Methods and Soft-
ware 23(4), 501–502.
Dahlhaus, R. and M. Eichler (2000).
Causality and graphical models fortime series. In P. Green, N. Hjort,
and S. Richardson (Eds.), Highly
structured stochastic systems. Ox-
ford University Press.
Dallal, S. and W. Hall (1983). Approxi-
mating priors by mixtures of natu-
ral conjugate priors. J. of Royal Stat.
Soc.SeriesB 45 , 278–286.
Darwiche, A. (2009). Modeling and
Reasoning with Bayesian Networks.
Cambridge.
Daume, H. (2007a). Fast search for
Dirichlet process mixture models.InAI/Statistics.
Daume, H. (2007b). Frustratingly easy
domain adaptation. In Proc.theAs-
soc.forComp.Ling.
Dawid, A. P. (1992). Applications of a
general propagation algorithm forprobabilistic expert systems. Statis-
ticsandComputing 2, 25–36.
Dawid, A. P. (2002). Inﬂuence dia-
grams for causal modelling and in-
ference.Intl. Stat. Review 70, 161–
189. Corrections p437.
Dawid, A. P. (2010). Beware of the DAG!
J. of Machine Learning Research 6,
59–86.Dawid, A. P. and S. L. Lauritzen
(1993). Hyper-markov laws in thestatistical analysis of decompos-
able graphical models. The Annals
ofStatistics 3, 1272–1317.
de Freitas, N., R. Dearden, F. Hut-
ter, R. Morales-Menendez, J. Mutch,
and D. Poole (2004). Diagnosis bya waiter and a mars explorer. Proc.
IEEE 92(3).
de Freitas, N., M. Niranjan, and A. Gee
(2000). Hierarchical Bayesian mod-els for regularisation in sequential
learning.NeuralComputation12 (4),
955–993.
Dechter, R. (1996). Bucket elimination:
a unifying framework for proba-
bilistic inference. In UAI.
Dechter, R. (2003). Constraint Process-
ing. Morgan Kaufmann.
Decoste, D. and B. Schoelkopf (2002).
Tr
aining invariant support vector
machines.Machinelearnng 41, 161–
190.
Deerwester, S., S. Dumais, G. Fur-
nas, T. Landauer, and R. Harshman(1990). Indexing by latent semantic
analysis.J. of the American Society
for Information Science 41 (6), 391–
407.
DeGroot, M. (1970). OptimalStatistical
Decisions. McGraw-Hill.
Deisenroth, M., C. Rasmussen, and
J. Peters (2009). Gaussian Process
Dynamic Programming. Neurocom-
puting 72 (7), 1508–1524.
Dellaportas, P., P. Giudici, and
G. Roberts (2003). Bayesian infer-ence for nondecomposable graphi-
cal gaussian models. Sankhya, Ser.
A6 5, 43–55.
Dellaportas, P. and A. F. M. Smith
(1993). Bayesian Inference for Gen-
eralized Linear and ProportionalHazards Models via Gibbs Sam-pling.J. of the Royal Statisti-
cal Society. Series C (Applied Statis-tics) 42(3), 443–459.
Delyon, B., M. Lavielle, and
E. Moulines (1999). Convergence ofa stochastic approximation version
of the EM algorithm. Annals of
Statistics 27 (1), 94–128.
Dempster, A. (1972). Covariance selec-
tion.Biometrics 28 (1).Dempster, A. P., N. M. Laird, and D. B.
Rubin (1977). Maximum likelihood
from incomplete data via the EM
algorithm.J. of the Royal Statistical
Society,SeriesB 34, 1–38.
Denison, D., C. Holmes, B. Mallick,
and A. Smith (2002). Bayesian
methodsfornonlinearclassiﬁcation
andregression. Wiley.
Denison, D., B. Mallick, and A. Smith
(1998). A Bayesian CART algorithm.
Biometrika 85, 363–377.
Desjardins, G. and Y. Bengio (2008).
Empirical evaluation of convolu-
tional RBMs for vision. TechnicalReport 1327, U. Montreal.
Dey, D., S. Ghosh, and B. Mallick (Eds.)
(2000).Generalized Linear Models:
ABayesianPerspective. Chapman &Hall/CRC Biostatistics Series.
Diaconis, P., S. Holmes, and R. Mont-
gomery (2007). Dynamical Bias inthe Coin Toss. SIAM Review 49 (2),
211–235.
Diaconis, P. and D. Ylvisaker (1985).
Quantifying prior opinion. InBayesianStatistics2.
Dietterich, T. G. and G. Bakiri (1995).
Solving multiclass learning prob-
lems via ECOCs. J.ofAIResearch2,
263–286.
Diggle, P. and P. Ribeiro (2007). Model-
basedGeostatistics. Springer.
Ding, Y. and R. Harrison (2010). A
sparse multinomial probit modelfor classiﬁcation. Pattern Analysis
andApplications , 1–9.
Dobra, A. (2009). Dependency net-
works for genome-wide data. Tech-
nicalr
eport, U. Washington.
Dobra, A. and H. Massam (2010). The
mode oriented stochastic search(MOSS) algorithm for log-linearmodels with conjugate priors. Sta-
tisticalMethodology 7, 240–253.
Domingos, P. and D. Lowd (2009).
MarkovLogic: AnInterfaceLayerforAI. Morgan & Claypool.
Domingos, P. and M. Pazzani (1997).
On the optimality of the simplebayesian classiﬁer under zero-one
loss.Machine Learning 29, 103–
130.
1022 BIBLIOGRAPHY
Domke, J., A. Karapurkar, and Y. Aloi-
monos (2008). Who killed the di-
rected model? In CVPR.
Doucet, A., N.deFreitas, andN.J.Gor-
don (2001). SequentialMonteCarlo
Methods in Practice. Springer Ver-lag.
Doucet, A., N. Gordon, and V. Krish-
namurthy (2001). Particle Filters forState Estimation of Jump MarkovLinear Systems. IEEETrans.onSig-
nalProcessing 49 (3), 613–624.
Dow, J. and J. Endersby (2004). Multi-
nomial probit and multinomiallogit: a comparison of choice mod-
els for voting research. Electoral
Studies 23 (1), 107–122.
Drineas, P., A. Frieze, R. Kannan,
S. Vempala, and V. Vinay (2004).
Clustering large graphs via the sin-gular value decomposition. Ma-
chineLearning 56, 9–33.
Drugowitsch, J. (2008). Bayesian lin-
ear regression. Technical report, U.Rochester.
Druilhet, P. and J.-M. Marin (2007). In-
variant HPD credible sets and MAPestimators. Bayesian Analysis 2 (4),
681–692.
Duane, S., A. Kennedy, B. Pendle-
ton, and D. Roweth (1987). Hy-
brid Monte Carlo. Physics Letters
B 195(2), 216–222.
Duchi, J., S. Gould, and D. Koller
(2008). Projected subgradient
methods for learning sparse gaus-sians. InUAI.
Duchi, J., E. Hazan, and Y. Singer
(2010). Adaptive Subgradient Meth-ods for Online Learning andStochastic Optimization. In Proc.
of the Workshop on Computational
LearningTheory.
Duchi, J., S. Shalev-Shwartz, Y. Singer,
and T. Chandra (2008). Efficient
projections onto the L1-ball forlearning in high dimensions. In
Intl.Conf.onMachineLearning.
Duchi, J. and Y. Singer (2009). Boost-
ing with structural sparsity. In Intl.
Conf.onMachineLearning.
Duchi, J., D. Tarlow, G. Elidan, and
D. Koller (2007). Using combi-
natorial optimization within max-product belief propagation. InNIPS.Duda, R. O., P. E. Hart, and D. G. Stork
(2001).PatternClassiﬁcation. Wiley
Interscience. 2nd edition.
Dumais, S. and T. Landauer (1997). A
solution to Plato’s problem: Thelatent semantic analysis theory ofacquisition, induction and repre-
sentation of knowledge. Psycholog-
icalReview 104, 211–240.
Dunson, D., J. Palomo, and K. Bollen
(2005). Bayesian Structural Equa-
tion Modeling. Technical Report2005-5, SAMSI.
Durbin, J. and S. J. Koopman (2001).
Time Series Analysis by State Space
Methods. Oxford University Press.
Durbin, R., S. Eddy, A. Krogh, and
G. Mitchison (1998). Biological Se-
quence Analysis: Probabilistic Mod-els of Proteins and Nucleic Acids.
Cambridge: Cambridge UniversityPress.
Earl, D. and M. Deem (2005). Paral-
leltempering: Theory, applications,
and new perspectives. Phy
 s.Chem.
Chem.Phys. 7, 3910.
Eaton, D. and K. Murphy (2007). Exact
Bayesian structure learning from
uncertain interventions. In AI/S-
tatistics.
Edakunni, N., S. Schaal, and S. Vi-
jayakumar (2010). Probabilistic in-cremental locally weighted learn-ing using randomly varying coeffi-cient model. Technical report, USC.
Edwards, D., G. de Abreu, and
R. Labouriau (2010). Selecting high-dimensional mixed graphical mod-els using minimal AIC or BIC
forests.BMCBioinformatics 11 (18).
Efron, B. (1986). Why Isn’t Everyone
a Bayesian? The American Statisti-
cian 40(1).
Efron, B. (2010). Large-Scale Infer-
ence: Empirical Bayes Methods for
Estimation, Testing, and Prediction.
Cambridge.
Efron, B., I. Johnstone, T. Hastie, and
R. Tibshirani (2004). Least angle re-
gression.Annals of Statistics 32 (2),
407–499.
Efron, B. and C. Morris (1975). Data
analysis using stein’s estimator andits generalizations. J.oftheAm.Stat.
Assoc. 70(350), 311–319.Elad, M. and I. Yavnch (2009). A plu-
rality of sparse representations is
better than the sparsest one alone.
IEEE Trans. on Info. Theory 55 (10),
4701–4714.
Elidan, G. and S. Gould (2008). Learn-
ing Bounded Treewidth BayesianNetworks.J. of Machine Learning
Research, 2699–2731.
Elidan, G., N. Lotner, N. Friedman, and
D. Koller (2000). Discovering hid-
den variables: A structure-basedapproach. In NIPS.
Elidan, G., I. McGraw, and D. Koller
(2006). Residual belief propa-gation: Informed scheduling forasynchronous message passing. InUAI.
Elkan, C. (2003). Using the triangle in-
equality to accelerate k-means. In
Intl.Conf.onMachineLearning.
Elkan, C. (2005). Deriving TF-IDF as
a Fisher kernel. In Proc.Intl.Symp.
on String Processing and Informa-
tionRetrieval(SPIRE), pp. 296–301.
Elkan, C. (2006). Clustering docu-
ments with an exponential fmaily
approximation of the Dirichletcompoind multinomial model. In
Intl.Conf.onMachineLearning.
Ellis, B. and W. H. Wong (2008). Learn-
ing causal bayesian network struc-tures from experimental data. J. of
the Am. Stat. Assoc. 103 (482), 778–
789.
Engel, Y., S. Mannor, and R. Meir
(2005). Reinforcement Learningwith Gaussian Processes. In Intl.
Conf.onMachineLearning.
Erhan, D., Y. Bengio, A. Courville, P.-A.
Manzagol, P. Vincent, and S. Ben-
gio (2010). Why Does UnsupervisedPre-training Help Deep Learning?
J. of Machine Learning Research 11,
625–660.
Eroshe
va, E., S. Fienberg, and
C. Joutard (2007). Describingdisability through individual-levelmixture models for multivariate bi-nary data.AnnalsofAppliedStatis-
tics.
Erosheva, E., S. Fienberg, and J. Laf-
ferty (2004). Mixed-membershipmodels of scientiﬁc publications.
Proc. of the National Academy of
Science,USA 101, 5220–2227.
BIBLIOGRAPHY 1023
Escobar, M. D. and M. West (1995).
Bayesian density estimation and
inference using mixtures. J. of the
Am.Stat.Assoc. 90 (430), 577–588.
Ewens, W. (1990). Population genet-
ics theory - the past and the fu-ture. In S.Lessard (Ed.), Mathemeti-
cal and Statistica Developments of
Evolutionary Theory, pp. 177–227.
Reidel.
Fan, J. and R. Z. Li (2001). Variable se-
lection via non-concave penalizedlikelihood and its oracle properties.
J. of the Am. Stat. Assoc. 96 (456),
1348–1360.
Fearnhead, P. (2004). Exact bayesian
curve ﬁtting and signal segmen-tation.IEEE Trans. Signal Process-
ing 53, 2160–2166.
Felzenszwalb, P. and D. Huttenlocher
(2006). Efficient belief propagationfor early vision. Intl. J. Computer
Vision 70(1), 41–54.
Ferrucci, D., E. Brown, J. Chu-Carroll,
J. Fan, D. Gondek, A. Kalyanpur,
A. Lally, J. W. Murdock, E. N.amd J. Prager, N. Schlaefter, andC. Welty (2010). Building Wat-son: An Overview of the DeepQAProject.AIMagazine , 59–79.
Fienberg, S. (1970). An iterative pro-
cedure for estimation in contin-gency tables. Annals of Mathemat-
icalStatistics 41 (3), 907â˘A¸S917.
Figueiredo, M. (2003). Adaptive
sparseness for supervised learn-
ing.IEEE Trans. on Pattern Anal-
ysisandMachineIntelligence 25 (9),
1150–1159.
Figueiredo, M., R. Nowak, and
S. Wright (2007). Gradient pro-
jection for sparse reconstruction:application to compressed sensingand other inverse problems. IEEE.
J. on Selected Topics in Signal Pro-cessing.
Figueiredo, M. A. T. and A. K. Jain
(2002). Unsupervised learning of ﬁ-nite mixture models. IEEETrans.on
PatternAnalysisandMachineIntel-
ligence 24 (3), 381–396. Matlab code
at http://www.lx.it.pt/ mtf/mixture-
code.zip.
Fine, S., Y. Singer, and N. Tishby
(1998). The hierarchical HiddenMarkov Model: Analysis and appli-
cations.MachineLearning 32, 41.Finkel, J. and C. Manning (2009). Hier-
archical bayesian domain adapta-
tion. InProc.NAACL, pp. 602–610.
Fischer, B. and J. Schumann (2003).
Autobayes: A system for generatingdata analysis programs from sta-
tistical models. J. Functional Pro-
gramming 13 (3), 483–508.
Fishelson, M. and D. Geiger (2002).
Exact genetic linkage computations
for general pedigrees. BMC Bioin-
formatics 18.
Fletcher, R. (2005). On the Barzilai-
Borwein Method. Applied Opti-
mization 96, 235–256.
Fokoue, E. (2005). Mixtures of factor
analyzers: an extension with co-
variates.J.MultivariateAnalysis 95,
370–384.
Forbes,
J., T. Huang, K. Kanazawa, and
S. Russell (1995). The BATmobile:
Towards a Bayesian automated taxi.
InIntl.JointConf.onAI.
Forsyth, D. and J. Ponce (2002). Com-
puter vision: a modern approach.
Prentice Hall.
Fraley, C. and A. Raftery (2002).
Model-based clustering, discrimi-nant analysis, and density estima-
tion.J. of the Am. Stat. Assoc. (97),
611–631.
Fraley, C. and A. Raftery (2007).
Bayesian Regularization for Normal
Mixture Estimation and Model-Based Clustering. J. of Classiﬁca-
tion 24, 155–181.
Franc, V., A. Zien, and B. Schoelkopf
(2011). Support vector machines as
probabilistic models. In Intl. Conf.
onMachineLearning.
Frank, I. and J. Friedman (1993). A
statistical view of some chemomet-
rics regression tools. Technomet-
rics 35(2), 109–135.
Fraser, A. (2008). HiddenMarkovMod-
els and Dynamical Systems. SIAMPress.
Freund, Y. and R. R. Schapire (1996).
Experiments with a new boosting
algorithm. In Intl.Conf.onMachine
Learning.
Frey, B. (1998). Graphical Models for
MachineLearningandDigitalCom-
munication. MIT Press.Frey, B. (2003). Extending factor
graphs so as to unify directed andundirected graphical models. InUAI.
Frey, B. and D. Dueck (2007, Febru-
ary). Clustering by Passing Mes-sages Between Data Points. Sci-
ence 315, 972â ˘A¸S976.
Friedman, J. (1991). Multivariate
adaptive regression splines. Ann.
Statist. 19, 1–67.
Friedman, J. (1997a). On bias, variance,
0-1 loss and the curse of dimen-sionality.J.DataMiningandKnowl-
edgeDiscovery 1, 55–77.
Friedman, J. (2001). Greedy function
approximation: a gradient boost-
ing machine. AnnalsofStatistics29,
1189–1232.
Friedman, J., T. Hastie, and R. Tibshi-
rani (2000). Additive logistic regres-
sion: a statistical view of boosting.
Annalsofstatistics 28 (2), 337–374.
Friedman, J., T. Hastie, and R. Tib-
shirani (2008). Sparse inverse co-
variance estimation the graphicallasso.Biostatistics 9 (3), 432–441.
Friedman, J., T. Hastie, and R. Tibshi-
rani (2010, Februrary). Regulariza-tion Paths for Generalized LinearModels via Coordinate Descent. J.
ofStatisticalSoftware 33 (1).
Friedman,
N. (1997b). Learning
Bayesian networks in the presenceof missing values and hidden vari-ables. InUAI.
Friedman, N., D. Geiger, and M. Gold-
szmidt (1997). Bayesian network
classiﬁers.Machine Learning J. 29,
131–163.
Friedman, N., D. Geiger, and N. Lot-
ner (2000). Likelihood computation
with value abstraction. In UAI.
Friedman, N. and D. Koller (2003). Be-
ing Bayesian about Network Struc-ture: A Bayesian Approach toStructure Discovery in Bayesian
Networks. Machine Learning 50,
95–126.
Friedman, N., M. Ninion, I. Pe’er, and
T. Pupko (2002). A Structural EM
Algorithm for Phylogenetic Infer-ence.J.Comp.Bio. 9, 331–353.
Friedman, N. and Y. Singer (1999). Ef-
ﬁcient Bayesian parameter estima-tion in large discrete domains. InNIPS-11.
1024 BIBLIOGRAPHY
Fruhwirth-Schnatter, S. (2007). Fi-
nite Mixture and Markov Switching
Models. Springer.
Fruhwirth-Schnatter, S. and R. Fruh-
wirth (2010). Data Augmentation
and MCMC for Binary and Multi-nomial Logit Models. In T. Kneib
and G. Tutz (Eds.), Statistical Mod-
ellingandRegressionStructures, pp.
111–132. Springer.
Fu, W. (1998). Penalized regressions:
the bridge verus the lasso. J.Com-
putationalandgraphicalstatistics .
Fukushima, K. (1975). Cognitron: a
self-organizing multilayered neu-
ral network. Biological Cybernet-
ics 20(6), 121–136.
Fung, R. and K. Chang (1989). Weight-
ing and integrating evidence for
stochastic simulation in Bayesiannetworks. In UAI.
Gabow, H., Z. Galil, and T. Spencer
(1984). Efficient implementationof graph algorithms using contrac-
tion. InIEEE Symposium on the
FoundationsofComputerScience.
Gales, M. (2002). Maximum like-
lihood multiple subspace projec-
tions for hidden Markov models.IEEE. Trans. on Speech and AudioProcessing 10 (2), 37–47.
Gales, M. J. F. (1999). Semi-tied covari-
ance matrices for hidden Markovmodels.IEEETrans.onSpeechand
AudioProcessing 7 (3), 272–281.
Gamerman, D. (1997). Efficient sam-
pling from the posterior distribu-tion in generalized linear mixed
models.StatisticsandComputing 7,
57–68.
Geiger, D. and D. Heckerman (1994).
Learning Gaussian networks. In
UAI, Volume 10, pp. 235–243.
Geiger, D. and D. Heckerman (1997).
A characterization of Dirchlet dis-tributions through local and global
independence. Annals of Statis-
tics 25, 1344–1368.
Gelfand, A. (1996). Model determina-
tion using sampling-based meth-
ods. In Gilks, Richardson, andSpiegelhalter (Eds.), Markov Chain
Monte Carlo in Practice. Chapman& Hall.
Gelfand, A. and A. Smith (1990).
Sampling-based approaches to cal-
culating marginal densities. J.ofthe
Am.Stat.Assoc. 85, 385–409.Gelman, A., J. Carlin, H. Stern, and
D. Rubin (2004). Bayesian data
analysis. Chapman and Hall. 2nd
edition.
Gelman, A. and J. Hill (2007). Data
analysis using regression and mul-
tilevel/ hierarchical models. Cam-
bridge.
Gelman, A. and X.-L. Meng (1998).
Simulating normalizing constants:from importance sampling tobridge sampling to path sampling.
StatisicalScience 13, 163–185.
Gelman, A. and T. Raghunathan (2001).
Using conditional distributions formissing-data imputation. Statistical
Science.
Gelman,A
. and D. Rubin (1992). Infer-
ence from iterative simulation us-
ing multiple sequences. Statistical
Science 7, 457–511.
Geman, S., E. Bienenstock, and
R. Doursat (1992). Neural networksand the bias-variance dilemma.NeuralComputing 4, 1–58.
Geman, S. and D. Geman (1984).
Stochastic relaxation, Gibbs distri-butions, and the Bayesian restora-tion of images. IEEE Trans. on Pat-
tern Analysis and Machine Intelli-gence 6(6).
Geoffrion, A. (1974). Lagrangian
relaxation for integer program-
ming.Mathematical Programming
Study 2, 82–114.
George, E. and D. Foster (2000). Cal-
ibration and empirical bayes vari-able selection. Biometrika 87 (4),
731–747.
Getoor, L. and B. Taskar (Eds.) (2007).
IntroductiontoRelationalStatistical
Learning. MIT Press.
Geyer, C. (1992). Practical markov
chain monte carlo. Statistical Sci-
ence 7, 473–483.
Ghahramani, Z. and M. Beal (2000).
Variational inference for Bayesianmixtures of factor analysers. InNIPS-12.
Ghahramani, Z. and M. Beal (2001).
Propagation algorithms for varia-tional Bayesian learning. In NIPS-
13.
Ghahramani, Z. and G. Hinton (1996a).
The EM algorithm for mixtures offactor analyzers. Technical report,Dept. of Comp. Sci., Uni. Toronto.Ghahramani, Z. and G. Hinton (1996b).
Parameter estimation for linear dy-namical systems. Technical Re-port CRG-TR-96-2, Dept. Comp.Sci., Univ. Toronto.
Ghahramani, Z. and M. Jordan (1997).
Factorial hidden Markov models.MachineLearning 29, 245–273.
Gilks, W. and C. Berzuini (2001).
Following a moving target –Monte Carlo infernece for dynamic
Bayesian models. J. of Royal Stat.
Soc.SeriesB 63, 127–146.
Gilks, W., N. Best, and K. Tan (1995).
Adaptive rejection Metropolis sam-pling.AppliedStatistics44, 455–472.
Gilks, W. and P. Wild (1992). Adaptive
rejection sampling for Gibbs sam-pling.AppliedStatistics41, 337–348.
Girolami, M., B. Calderhead, and
S. Chin (2010). Riemannian Man-
ifold Hamiltonian Monte Carlo. J.
of Royal Stat. Soc. Series B . To ap-
pear.
Girolami, M. and S. Rogers (2005). Hi-
erarchic bayesian models for kernel
learning. In Intl. Conf. on Machine
Learning, pp. 241–248.
Girolami, M. and S. Rogers (2006).
Variational Bayesian multinomial
probit regression with Gaussian
process priors. Neural Comptua-
tion 18(8), 1790 – 1817.
Girshick, R., P. Felzenszwalb, and
D.McAllest
er (2011). Object de-
tection with grammar models. In
NIPS.
Gittins, J. (1989). Multi-armed Bandit
AllocationIndices. Wiley.
Giudici, P. and P. Green (1999).
Decomposable graphical gaus-sian model determination.Biometrika 86 (4), 785–801.
Givoni, I. E. and B. J. Frey (2009, June).
A binary variable model for affin-
ity propagation. Neural Computa-
tion 21(6), 1589–1600.
Globerson, A. and T. Jaakkola (2008).
Fixing max-product: Convergent
message passing algorithms forMAP LP-relaxations. In NIPS.
Glorot, X. and Y. Bengio (2010, May).
Understanding the difficulty oftraining deep feedforward neuralnetworks. In AI/Statistics, Volume 9,
pp. 249–256.
BIBLIOGRAPHY 1025
Gogate, V., W. A. Webb, and P. Domin-
gos (2010). Learning efficient
Markov networks. In NIPS.
Goldenberg, A., A.X.Zheng, S.E.Fien-
berg, and E. M. Airoldi (2009). ASurvey of Statistical Network Mod-
els.FoundationsandTrendsinMa-
chineLearning , 129–233.
Golub, G. and C. F. van Loan (1996).
Matrix computations. Johns Hop-
kins University Press.
Gonen, M., W. Johnson, Y. Lu, and
P. Westfall (2005, August). The
Bayesian Two-Sample t Test. The
American Statistician 59 (3), 252–
257.
Gonzales, T. (1985). Clustering to
minimize the maximum interclus-
ter distance. Theor. Comp. Sci. 38,
293–306.
Gorder, P. F. (2006, Nov/Dec). Neu-
ral networks show new promise formachine vision. Computing in sci-
ence&engineering 8 (6), 4–8.
Gordon, N. (1993). Novel ap-
proach to nonlinear/non-GaussianBayesian state estimation. IEEPro-
ceedings(F) 140 (2), 107–113.
Graepel, T., J. Quinonero-Candela,
T. Borchert, and R. Herbrich(2010). Web-Scale Bayesian Click-
Through Rate Prediction for Spon-
sored Search Advertising in Mi-
crosoftâ˘A´Zs Bing Search Engine. In
Intl.Conf.onMachineLearning.
Grauman, K. and T. Darrell (2007,
April). The Pyramid Match Kernel:
Efficient Learning with Sets of Fea-
tures.J. of Machine Learning Re-
search 8, 725–760.
Green, P. (1998). Reversible jump
Markov chain Monte Carlo compu-
tation and Bayesian model deter-
mination.Biometrika 82, 711–732.
Green, P. (2003). Tutorial on trans-
dimensional MCMC. In P. Green,
N. Hjort, and S. Richardson (Eds.),
HighlyStructuredStochasticSystems.
OUP.
Green, P. and B. Silverman (1994). Non-
parametric regression and general-
ized linear models. Chapman and
Hall.Greenshtein, E. and J. Park (2009). Ap-
plication of Non Parametric Empir-ical Bayes Estimation to High Di-
mensional Classiﬁcation. J. of Ma-
chine Learning Research 10, 1687–
1704.
Greig, D., B. Porteous, and A. Seheult
(1989). Exact maximum a posteriori
estimation for binary images. J. of
Royal Stat. Soc. Series B 51 (2), 271–
279.
Griffin, J. and P. Brown (2007).
Bayesian adaptive lassos with non-
convex penalization. Technical re-port, U. Kent.
Griffin, J. and P. Brown (2010). In-
ference with normal-gamma priordistributions in regression prob-
lems.Bayesian Analysis 5 (1), 171–
188.
Griffiths, T. . and J. Tenenbaum (2009).
Theory
-Based Causal Induction.
Psychological Review 116 (4), 661–
716.
Griffiths, T. and M. Steyvers (2004).
Finding scientiﬁc topics. Proc. of
the National Academy of Science,
USA 101, 5228–5235.
Griffiths, T., M. Steyvers, D. Blei, and
J. Tenenbaum (2004). Integratingtopics and syntax. In NIPS.
Griffiths, T. and J. Tenenbaum (2001).
Using vocabulary knowledge inbayesian multinomial estimation.InNIPS, pp. 1385–1392.
Griffiths, T. and J. Tenenbaum (2005).
Structure and strength in causal
induction.Cognitive Psychology 51,
334–384.
Grimmett, G. and D. Stirzaker (1992).
Probability and Random Processes.
Oxford.
Guan, Y., J. Dy, D. Niu, and Z. Ghahra-
mani (2010). Variational Inferencefor Nonparametric Multiple Clus-
tering. In 1st Intl. Workshop on
Discovering, Summarizing and Us-
ingMultipleClustering(MultiClust).
Guedon, Y. (2003). Estimating hidden
semi-markov chains from discrete
sequences.J.ofComputationaland
GraphicalStatistics 12, 604–639.
Guo, Y. (2009). Supervised exponential
family principal component anal-ysis via convex optimization. InNIPS.Gustafsson, M. (2001). A proba-
bilistic derivation of the partial
least-squares algorithm. Journal of
Chemical Information and Model-
ing 41, 288–294.
Guyon, I., S. Gunn, M. Nikravesh, and
L. Zadeh (Eds.) (2006). Feature Ex-
traction: Foundations and Applica-tions. Springer.
Hacker, J. and P. Pierson (2010).
Winner-Take-All Politics: HowWashington Made the Rich Richer–
and Turned Its Back on the Middle
Class. Simon & Schuster.
Halevy, A., P. Norvig, and F. Pereira
(2009). The unreasonable effective-ness of data. IEEE Intelligent Sys-
tems 24(2), 8–12.
Hall, P., J. T. Ormerod, and M. P. Wand
(2011). Theory of Gaussian Varia-tional Approximation for a Gener-alised Linear Mixed Model. Statis-
ticaSinica 21, 269–389.
Hamilton, J. (1990). Analysis of time
series subject to changes in regime.J.Econometrics 45 , 39–70.
Hans, C. (2009). Bayesian Lasso re-
gression.Biometrika 96 (4), 835–
845.
Hansen, M. and B. Yu (2001). Model
selection and the principle of min-
imum description length. J. of the
Am.Stat.Assoc..
Hara, H. and A. Takimura (2008).
A Localization Approach to Im-
prove Iterative Proportional Scal-ing in Gaussian Graphical Models.
Communications in Statistics - The-
oryandMethod . to appear.
Hardin,
J. and J. Hilbe (2003). Gener-
alizedEstimatingEquations. Chap-man and Hall/CRC.
Harmeling, S. and C. K. I. Williams
(2011). Greedy learning of binarylatent trees. IEEE Trans. on Pat-
tern Analysis and Machine Intelli-gence 33(6), 1087–1097.
Harnard, S. (1990). The symbol
grounding problem. Physica D 42,
335–346.
Harvey, A. C. (1990). Forecasting,Struc-
tural Time Series Models, and theKalman Filter. Cambridge Univer-ity Press.
1026 BIBLIOGRAPHY
Hastie, T., S. Rosset, R. Tibshirani, and
J. Zhu (2004). The entire regular-
ization path for the support vector
machine.J. of Machine Learning
Research 5, 1391–1415.
Hastie, T. and R. Tibshirani (1990).
Generalizedadditivemodels. Chap-
man and Hall.
Hastie, T., R. Tibshirani, and J. Fried-
man (2001). The Elements of Statis-
ticalLearning. Springer.
Hastie, T., R. Tibshirani, and J. Fried-
man (2009). TheElementsofStatisti-
calLearning. Springer. 2nd edition.
Hastings, W. (1970). Monte carlo
sampling methods using markovchains and their applications.
Biometrika 57 (1), 97–109.
Haykin, S. (1998). Neural Networks: A
Comprehensive Foundation. Pren-
tice Hall. 2nd Edition.
Haykin, S. (Ed.) (2001). Kalman Filter-
ingandNeuralNetworks. Wiley.
Hazan, T. and A. Shashua (2008).
Convergent message-passing algo-rithms for inference over generalgraphs with convex free energy. InUAI.
Hazan, T. and A. Shashua (2010).
Norm-product belief propagation:primal-dual message passing forapproximate inference. IEEE Trans.
onInfo.Theory 56 (12), 6294–6316.
He, Y.-B. and Z. Geng (2009). Active
learning of causal networks withintervention experiments and opti-
mal designs. J.ofMachineLearning
Research 10, 2523–2547.
Heaton, M. and J. Scott (2009).
Bayesian computation and the lin-
ear model. Technical report, Duke.
Heckerman, D., D. Chickering,
C. Meek, R. Rounthwaite, andC. Kadie (2000). Dependencynetworks for density estimation,collaborative ﬁltering, and data vi-
sualization. J. of Machine Learning
Research 1, 49–75.
Heckerman, D., D. Geiger, and
M. Chickering (1995). Learning
Bayesian networks: the combina-tion of knowledge and statistical
data.MachineLearning 20 (3), 197–
243.Heckerman, D., C. Meek, and
G. Cooper (1997, February). A
Bayesian approach to causal dis-covery. Technical Report MSR-TR-97-05, Microsoft Research.
Heckerman, D., C. Meek, and D. Koller
(2004). Probabilistic models forrelational data. Technical Re-port MSR-TR-2004-30, MicrosoftResearch.
Heller, K. and Z. Ghahramani (2005).
BayesianHierarchicalClustering. In
Intl.Conf.onMachineLearning.
Henrion, M. (1988). Propagation of
uncertainty by logic sampling in
Bayes’ networks. In UAI, pp. 149–
164.
Herbrich, R., T. Minka, and T. Graepel
(2007). TrueSkill: A Bayesian skillrating system. In NIPS.
Hertz, J., A. Krogh, and R. G. Palmer
(1991).AnIntroductiontotheTheory
of Neural Comptuation. Addison-
Wesley.
Hillar, C., J. Sohl-Dickstein, and
K. Koepsell (2012, April). Efficientandop
timal binary hopﬁeld asso-
ciative memory storage using min-imum probability ﬂow. Technicalreport.
Hinton, G. (1999). Products of experts.
InProc.9thIntl.Conf.onArtif.Neu-
ralNetworks(ICANN), Volume 1, pp.1–6.
Hinton, G. (2002). Training products of
experts by minimizing contrastive
divergence. NeuralComputation14,
1771–1800.
Hinton, G. (2010). A Practical Guide
to Training Restricted Boltzmann
Machines. Technical report, U.Toronto.
Hinton, G. and D. V. Camp (1993).
Keeping neural networks simple byminimizing the description length
of the weights. In in Proc. of the
6th Ann. ACM Conf. on Computa-
tional Learning Theory, pp. 5–13.
ACM Press.
Hinton, G., S. Osindero, and Y. Teh
(2006). A fast learning algorithm
for deep belief nets. Neural Com-
putation 18, 1527–1554.
Hinton, G.andR.Salakhutdinov(2006,
July). Reducing the dimensionality
of data with neural networks. Sci-
ence 313(5786), 504–507.Hinton, G. E., P. Dayan, and M. Revow
(1997). Modeling the manifolds ofimages of handwritten digits. IEEE
Trans.onNeuralNetworks8, 65–74.
Hinton, G. E. and Y. Teh (2001).
Discovering multiple constraintsthat are frequently approximatelysatisïˇn˛Aed. InUAI.
Hjort, N., C. Holmes, P. Muller, and
S. Walker (Eds.) (2010). Bayesian
Nonparametrics. Cambridge.
Hoeﬂing, H. (2010). A Path Algorithm
for the Fused Lasso Signal Approx-imator. Technical report, Stanford.
Hoeﬂing, H. and R. Tibshirani
(2009). Estimation of Sparse Bi-naryPairwiseMarkovNetworksus-
ing Pseudo-likelihoods. J. of Ma-
chineLearningResearch 10.
Hoeting, J., D. Madigan, A. Raftery,
and C. Volinsky (1999). Bayesian
model averaging: A tutorial. Statis-
ticalScience 4 (4).
Hoff, P. D. (2009, July). A First
Course in Bayesian Statistical Meth-
ods. Springer.
Hoffman, M., D. Blei, and F. Bach
(2010). Online learning for latent
dirichlet allocation. In NIPS.
Hoffman, M. and A. Gelman (2011).
The no-U-turn sampler: Adaptivelysetting path lengths in Hamilto-nianMonteCarlo. Technicalreport,Columbia U.
Hofmann, T. (1999). Probabilistic la-
tent semantic indexing. Research
and Development in Information
Retrieval, 50–57.
Holmes, C. and L. Held (2006).
Bayesian auxiliary variable models
for binary and multinomial regres-
sion.Bayesian Analysis 1 (1),145–
168.
Honk
ela, A. and H. Valpola (2004).
Variational Learning and Bits-Back
Coding: An Information-TheoreticView to Bayesian Learning. IEEE.
Trans.onNeuralNetworks 15 (4).
Honkela, A., H. Valpola, and
J. Karhunen (2003). Accelerat-ing Cyclic Update Algorithms forParameter Estimation by Pattern
Searches. Neural Processing Let-
ters 17, 191–203.
BIBLIOGRAPHY 1027
Hopﬁeld, J. J. (1982, April). Neu-
ral networks and physical systems
with emergent collective computa-
tional abilities. Proc.oftheNational
Academy of Science, USA 79 (8),
2554â˘A¸S2558.
Hornik, K. (1991). Approximation ca-
pabilities of multilayer feedforwardnetworks. Neural Networks 4 (2),
251â˘A¸S257.
Horvitz, E., J. Apacible, R. Sarin, and
L. Liao (2005). Prediction, Expecta-
tion, and Surprise: Methods, De-signs, and Study of a DeployedTraffic Forecasting Service. In UAI.
Howard, R. and J. Matheson (1981). In-
ﬂuence diagrams. In R. Howard
and J. Matheson (Eds.), Readingson
the Principles and Applications of
DecisionAnalysis,volumeII.S t r a t e -
gic Decisions Group.
Hoyer, P. (2004). Non-negative matrix
factorizaton with sparseness con-
straints.J.ofMachineLearningRe-
search 5, 1457–1469.
Hsu, C.-W., C.-C. Chang, and C.-J. Lin
(2009). A practical guide to sup-
port vector classiﬁcation. Technicalreport, Dept. Comp. Sci., NationalTaiwan University.
Hu, D., L. van der Maaten, Y. Cho,
L. Saul, and S. Lerner (2010). LatentVariable Models for Predicting FileDependencies in Large-Scale Soft-ware Development. In NIPS.
Hu, M., C. Ingram, M.Sirski, C. Pal,
S. Swamy, and C. Patten (2000).A Hierarchical HMM Implementa-tion for Vertebrate Gene Splice SitePrediction. Technical report, Dept.Computer Science, Univ. Waterloo.
Huang, J., Q. Morris, and B. Frey
(2007). Bayesian inference of Mi-croRNA targets from sequence andexpression data. J.Comp.Bio..
Hubel, D. and T. Wiesel (1962). Recep-
tive ﬁelds, binocular itneraction,and functional architecture in thecat’s visual cortex. J.Physiology 160,
106–154.
Huber, P. (1964). Robust estimation
of a location parameter. Annals of
Statistics 53, 73â ˘A¸S101.
Hubert, L. and P. Arabie (1985). Com-
paring partitions. J. of Classiﬁca-
tion 2, 193–218.Hunter, D. and R. Li (2005). Variable
selection using MM algorithms.
AnnalsofStatistics 33, 1617–1642.
Hunter, D. R. and K. Lange (2004). A
Tutorial on MM Algorithms. The
AmericanStatistician 58, 30–37.
Hyaﬁl, L. and R. Rivest (1976). Con-
structing Optimal Binary DecisionTrees is NP-complete. Information
ProcessingLetters 5 (1), 15–17.
Hyvarinen, A., J. Hurri, and P. Hoyer
(2009).Natural Image Statistics: a
probabilisticapproachtoearlycom-
putationalvision. Springer.
Hyvarinen,
A. and E. Oja (2000). In-
dependent component analysis: al-
gorithms and applications. Neural
Networks 13, 411–430.
Ilin, A. and T. Raiko (2010). Practi-
cal Approaches to Principal Com-
ponent Analysis in the Presence
of Missing Values. J. of Machine
LearningResearch 11, 1957–2000.
Insua, D. R. and F. Ruggeri (Eds.)
(2000).Robust Bayesian Analysis.
Springer.
Isard, M. (2003). PAMPAS: Real-Valued
Graphical Models for Computer Vi-
sion. InCVPR, Volume 1, pp. 613.
Isard, M. and A. Blake (1998). CON-
DENSATION - conditional densitypropagation for visual tracking.
Intl. J. of Computer Vision 29 (1), 5–
18.
Jaakkola, T. (2001). Tutorial on varia-
tional approximation methods. InM. Opper and D. Saad (Eds.), Ad-
vanced mean ﬁeld methods. MIT
Press.
Jaakkola, T. and D. Haussler (1998). Ex-
ploiting generative models in dis-criminative classiﬁers. In NIPS, pp.
487–493.
Jaakkola, T. and M. Jordan (1996a).
Computing upper and lowerbounds on likelihoods in in-tractable networks. In UAI.
Jaakkola, T. and M. Jordan (1996b).
A variational approach to Bayesianlogistic regression problems andtheir extensions. In AI+Statistics.
Jaakkola, T. S. and M. I. Jordan (2000).
Bayesian parameter estimation via
variational methods. Statistics and
Computing 10, 25–37.Jacob, L., F. Bach, and J.-P. Vert (2008).
Clustered Multi-Task Learning: a
Convex Formulation. In NIPS.
Jain, A. and R. Dubes (1988). Algo-
rithmsforClusteringData. PrenticeHall.
James, G. and T. Hastie (1998). The
error coding method and PICTS.
J. of Computational and Graphical
Statistics 7 (3), 377–387.
Japkowicz, N., S. Hanson, and
M. Gluck (2000). Nonlinear autoas-sociation is not equivalent to PCA.
NeuralComputation 12, 531–545.
Jaynes, E. T. (2003). Probability the-
ory: thelogicofscience. Cambridge
university press.
Jebara, T., R. Kondor, and A. Howard
(2004). Probability product kernels.
J. of Machine Learning Research 5,
819–844.
Jeffreys, H. (1961). TheoryofProbability.
Oxford.
Jelinek, F. (1997). Statisticalmethodsfor
speechrecognition. MIT Press.
Jensen, C. S., A. Kong, and U. Kjaerulff
(1995). Blocking-gibbs samplingin very large probabilistic expert
systems.Intl.J.
 Human-Computer
Studies, 647–666.
Jermyn, I. (2005). Invariant bayesian
estimation on manifolds. Annalsof
Statistics 33 (2), 583–605.
Jerrum, M. and A. Sinclair (1993).
Polynomial-time approximation al-
gorithms for the Ising model. SIAM
J.onComputing 22, 1087–1116.
Jerrum, M. and A. Sinclair (1996).
The markov chain monte carlomethod: an approach to approxi-mate counting and integration. InD. S. Hochbaum (Ed.), Approxima-
tion Algorithms for NP-hard prob-
lems. PWS Publishing.
Jerrum, M., A. Sinclair, and E. Vigoda
(2004). A polynomial-time approx-
imation algorithm for the perma-nent of a matrix with non-negative
entries.Journal of the ACM , 671–
697.
Ji, S., D. Dunson, and L. Carin
(2009). Multi-task compressivesensing.IEEETrans.SignalProcess-
ing 57(1).
1028 BIBLIOGRAPHY
Ji, S., L. Tang, S. Yu, and J. Ye (2010).
A shared-subspace learning frame-
work for multi-label classiﬁcation.ACMTrans.onKnowledgeDiscovery
from Data 4 (2).
Jirousek, R. and S. Preucil (1995). On
the effective implementation of the
iterative proportional ﬁtting proce-
dure.Computational Statistics &
DataAnalysis 19, 177–189.
Joachims, T. (2006). Training Linear
SVMs in Linear Time. In Proc. of
theInt’lConf.onKnowledgeDiscov-
eryandDataMining.
Joachims, T., T. Finley, and C.-N. Yu
(2009). Cutting-Plane Training of
Structural SVMs. Machine Learn-
ing 77(1), 27–59.
Johnson, J. K., D. M. Malioutov, and
A. S. Willsky (2006). Walk-sum in-
terpretation and analysis of gaus-sian belief propagation. In NIPS,
pp. 579–586.
Johnson, M. (2005). Capacity and
complexity of HMM duration mod-
eling techniques. Signal Processing
Letters 12(5), 407–410.
Johnson, N. (2009). A study of the
NIPS feature selection challenge.
Technical report, Stanford.
Johnson, V. and J. Albert (1999). Ordi-
naldatamodeling. Springer.
Jones, B., A. Dobra, C. Carvalho,
C. Hans, C. Carter, and M. West(2005). Experiments in stochasticcomputation for high-dimensional
graphical models. Statistical Sci-
ence 20, 388–400.
Jordan, M. I. (2007). An introduction to
probabilistic graphical models. In
preparation.
Jordan, M. I. (2011). The era of big
data. InISBA Bulletin, Volume 18,
pp. 1–3.
Jordan, M. I., Z. Ghahramani, T. S.
Jaakkola, and L. K. Saul (1998). Anintroduction to variational meth-ods for graphical models. In M. Jor-
dan (Ed.),Learning in Graphical
Models. MIT Press.
Jordan, M. I. and R. A. Jacobs (1994).
Hierarchical mixtures of expertsand the EM algorithm. Neural
Computation 6, 181–214.Journee, M., Y. Nesterov, P. Richtarik,
and R. Sepulchre (2010). General-
ized power method for sparse prin-
cipal components analysis. J. of
MachineLearningResearch 11, 517–
553.
Julier, S. and J. Uhlmann (1997). A
new extension of the Kalman ﬁl-ter to nonlinear systems. In Proc.
ofAeroSense: The11thIntl.Symp.on
Aerospace/Defence Sensing, Simula-tionandControls.
Jurafsky, D. and J. H. Martin (2000).
Speech and language processing:An Introduction to Natural Lan-
guage Processing, Computational
Linguistics,andSpeechRecognition.
Prentice-Hall.
Jurafsky, D. and J. H. Martin (2008).
Speech and language processing:
An Introduction to Natural Lan-
guage Processing, Computational
Linguistics,andSpeechRecognition.
Prentice-Hall. 2nd edition.
Kaariainen,
M. and J. Langford (2005).
A Comparison of Tight Generaliza-
tion Bounds. In Intl. Conf. on Ma-
chineLearning.
Kaelbling, L., M. Littman, and
A. Moore (1996). Reinforcement
learning: A survey. J. of AI Re-
search 4, 237–285.
Kaelbling, L. P., M. Littman, and
A. Cassandra (1998). Planningand acting in partially observable
stochastic domains. ArtiﬁcialIntel-
ligence 101.
Kaiser, H. (1958). The varimax crite-
rion for analytic rotation in factoranalysis.Psychometrika 23 (3).
Kakade, S., Y. W. Teh, and S. Roweis
(2002). An alternate objective func-tion for markovian ﬁelds. In Intl.
Conf.onMachineLearning.
Kanazawa, K., D. Koller, and S. Rus-
sell (1995). Stochastic simulation al-
gorithms for dynamic probabilisticnetworks. In UAI.
Kandel, E., J. Schwarts, and T. Jessell
(2000).PrinciplesofNeuralScience.
McGraw-Hill.
Kappen, H. and F. Rodriguez (1998).
Boltzmann machine learning usingmean ﬁeld theory and linear re-sponse correction. In NIPS.Karhunen, J. and J. Joutsensalo
(1995). Generalizations of princi-pal component analysis, optimiza-tion problems, and neural net-
works.Neural Networks 8 (4), 549–
562.
Kass, R. and L. Wasserman (1995). A
reference bayesian test for nested
hypotheses and its relationship to
the schwarz criterio. J. of the Am.
Stat.Assoc. 90 (431), 928–934.
Katayama, T. (2005). SubspaceMethods
for Systems Identiﬁcation. Springer
Verlag.
Kaufman, L. and P. Rousseeuw (1990).
Finding Groups in Data: An Intro-
ductiontoClusterAnalysis. Wiley.
Kawakatsu, H. and A. Largey (2009).
EM algorithms for ordered probit
models with endogenous regres-
sors.TheEconometricsJournal12 (1),
164–186.
Kearns, M. J. and U. V. Vazirani (1994).
An Introduction to Computational
LearningTheory. MIT Press.
Kelley, J. E. (1960). The cutting-plane
method for solving convex pro-
grams.J. of the Soc. for Industrial
andAppliedMath. 8, 703–712.
Kemp, C., J. Tenenbaum, S. Niyogi, and
T. Griffiths (2010). A probabilistic
model of theory formation. Cogni-
tion 114, 165–196.
Kemp, C., J. Tenenbaum, T. Y. T. Grif-
ﬁths and, and N. Ueda (2006).Learning systems of concepts withan inﬁnite relational model. InAAAI.
Kersting, K., S. Natarajan, and D. Poole
(2011). Statistical Relational AI:Logic, Probability and Computa-tion. Technical report, UBC.
Khan,M.
E., B. Marlin, G. Bouchard,
and K. P. Murphy (2010). Varia-tional bounds for mixed-data fac-tor analysis. In NIPS.
Khan, Z., T. Balch, and F. Dellaert
(2006). MCMC Data Associationand Sparse Factorization Updatingfor Real Time Multitarget Trackingwith Merged and Multiple Mea-surements. IEEE Trans. on Pat-
tern Analysis and Machine Intelli-gence 28(12).
Kirkpatrick, S., C. G. Jr., and M. Vecchi
(1983). Optimization by simulatedannealing.Science 220, 671–680.
BIBLIOGRAPHY 1029
Kitagawa, G. (2004). The two-ﬁlter for-
mula for smoothing and an im-
plementation of the Gaussian-sum
smoother.AnnalsoftheInstituteof
Statistical Mathematics 46 (4), 605–
623.
Kjaerulff, U. (1990). Triangulation of
graphs – algorithms giving small
total state space. Technical ReportR-90-09, Dept. of Math. and Comp.Sci., Aalborg Univ., Denmark.
Kjaerulff, U. and A. Madsen (2008).
Bayesian Networks and Inﬂuence
Diagrams: A Guide to ConstructionandAnalysis. Springer.
Klaassen, C. and J. A. Wellner (1997).
Efficient estimation in the bivari-
ate noramal copula model: Nor-mal margins are least favorable.
Bernoulli 3 (1), 55–77.
Klami, A. and S. Kaski (2008). Proba-
bilistic approach to detecting de-
pendencies between data sets.Neurocomputing 72, 39–46.
Klami, A., S. Virtanen, and S. Kaski
(2010). Bayesian exponential fam-ily projections for coupled datasources. InUAI.
Kleiner, A., A. Talwalkar, P. Sarkar, and
M. I. Jordan (2011). A scalable boot-strap for massive data. Technicalreport, UC Berkeley.
Kneser, R. and H. Ney (1995). Im-
proved backing-off for n-gram lan-
guage modeling. In Intl. Conf. on
Acoustics, Speech and Signal Proc.,
Volume 1, pp. 181–184.
Ko, J. and D. Fox (2009). GP-
BayesFilters: Bayesian Filtering Us-ing Gaussian Process Predictionand Observation Models. Au-
tonomousRobotsJournal .
Kohn, R., M. Smith, and D. Chan
(2001). Nonparametric regressionusing linear combinations of basis
functions.Statistical Computing 11,
313–322.
Koivisto, M. (2006). Advances in ex-
act Bayesian structure discovery in
Bayesian networks. In UAI.
Koivisto, M. and K. Sood (2004). Ex-
act Bayesian structure discovery in
Bayesian networks. J. of Machine
LearningResearch 5, 549–573.
Koller, D. and N. Friedman (2009).
Probabilistic Graphical Models:
Principles and Techniques . MIT
Press.Koller, D. and U. Lerner (2001). Sam-
pling in Factored Dynamic Sys-
tems. In A. Doucet, N. de Fre-itas, and N. Gordon (Eds.), Sequen-
tial Monte Carlo Methods in Prac-tice. Springer.
Kolmogorov, V. (2006, October). Con-
vergent Tree-reweighted MessagePassing for Energy Minimization.
IEEETrans.onPatternAnalysisand
Machine Intelligence 28 (10), 1568–
1583.
Kolmogorov, V. and M. Wainwright
(2005). On optimality properties
of tree-reweighted message pass-ing. InUAI, pp. 316–322.
Kolmogorov, V. and R. Zabin (2004).
What energy functions can be min-imized via graph cuts? IEEETrans.
on Pattern Analysis and Machine
Intelligence 26 (2), 147–159.
Komodakis, N., N. Paragios, and
G. Tziritas (2011). MRF Energy Mini-
mization and Beyond via Dual De-composition. IEEET
 rans. on Pat-
tern Analysis and Machine Intelli-gence 33(3), 531–552.
Koo, T., A. M. Rush, M. Collins,
T. Jaakkola, and D. Sontag (2010).Dual Decomposition for Parsingwith Non-Projective Head Au-tomata. In Proc. EMNLP, pp.
1288â˘A¸S1298.
Koren, Y. (2009a). The bellkor solution
to the netﬂix grand prize. Techni-cal report, Yahoo! Research.
Koren, Y. (2009b). Collaborative ﬁl-
tering with temporal dynamics. In
Proc.oftheInt’lConf.onKnowledge
DiscoveryandDataMining.
Koren, Y., R. Bell, and C. Volinsky
(2009). Matrix factorization tech-
niques for recommender systems.IEEEComputer 42 (8), 30–37.
Krishnapuram, B., L. Carin,
M. Figueiredo, and A. Hartemink(2005). Learning sparse bayesianclassiﬁers: multi-class formulation,fast algorithms, and generalizationbounds. IEEE Transaction on
Pattern Analysis and Machine
Intelligence .
Krizhevsky, A. and G. Hinton (2010).
Using Very Deep Autoencoders
for Content-Based Image Retrieval.Submitted.Kschischang, F., B. Frey, and H.-A.
Loeliger (2001, February). Factorgraphs and the sum-product algo-
rithm.IEEETransInfo.Theory .
Kuan, P., G. Pan, J. A. Thomson,
R. Stewart, and S. Keles (2009).
A hierarchical semi-Markov modelfor detecting enrichment with ap-plication to ChIP-Seq experiments.Technical report, U. Wisconsin.
Kulesza, A. and B. Taskar (2011). Learn-
ing Determinantal Point Processes.InUAI.
Kumar, N. and A. Andreo (1998). Het-
eroscedastic discriminant analysisand reduced rank HMMs for im-proved speech recognition. Speech
Communication 26, 283–297.
Kumar, S. and M. Hebert (2003). Dis-
criminative random ﬁelds: A dis-criminative framework for contex-tual interaction in classiﬁcation. InIntl.Conf.onComputerVision.
Kuo, L. and B. Mallick (1998). Vari-
able selection for regression mod-
els.SankhyaSeriesB 60, 65–81.
Kurihara, K., M. Welling, and N. Vlas-
sis (2006). Accelerated variational
DP mixture models. In NIPS.
Kushner, H. and G. Yin (2003).
Stochasticapproximationandrecur-
sive algorithms and applications.
Springer.
Kuss and C. Rasmussen (2005). As-
sessing approximate inference forbinary gaussian process classiﬁca-
tion.J. of Machine Learning Re-
search 6, 1679–1704.
Kwon, J. and K. Murphy (2000). Mod-
eling freeway traffic with coupled
HMMs. Technical report, Univ. Cal-ifornia, Berkeley.
Kyung, M., J. Gill, M. Ghosh, and
G. Casella (2010). Penalized Regres-sion, Standard Errors and Bayesian
Lassos.BayesianAnalysis5 (2), 369–
412.
Lacoste-Julien, S., F. Huszar, and
Z. Ghahramani (2011). Approximate
inference for the loss-calibratedBay
esian. InAI/Statistics.
Lacoste-Julien, S., F. Sha, and M. I. Jor-
dan (2009). DiscLDA: Discrimina-tive learning for dimensionality re-duction and classiﬁcation. In NIPS.
1030 BIBLIOGRAPHY
Lafferty, J., A. McCallum, and
F. Pereira (2001). Conditional ran-
dom ﬁelds: Probabilistic modelsfor segmenting and labeling se-
quence data. In Intl. Conf. on Ma-
chineLearning.
Lange, K., R. Little, and J. Taylor (1989).
Robust statistical modeling usingthe t disribution. J. of the Am. Stat.
Assoc. 84(408), 881–896.
Langville, A. and C. Meyer (2006).
Updating Markov chains with an
eye on Google’s PageRank. SIAM
J. on Matrix Analysis and Applica-tions 27(4), 968–987.
Larranaga, P., C. M. H. Kuijpers,
M. Poza, and R. H. Murga (1997).Decomposing bayesian networks:triangulation of the moral graphwith genetic algorithms. Statistics
andComputing(UK) 7 (1), 19–34.
Lashkari, D. and P. Golland (2007).
Convex clustering with examplar-based models. In NIPS.
Lasserre, J., C. Bishop, and T. Minka
(2006). Principled hybrids of gen-erative and discriminative models.InCVPR.
Lau, J. and P. Green (2006).
Bayesian model-based clustering
procedures. Journal of Computa-
tional and Graphical Statistics 12,
351–357.
Lauritzen, S. (1996). Graphical Models.
OUP.
Lauritzen, S. (2000). Causal infer-
ence from graphical models. InD. R. C. O. E. Barndoff-Nielsenand C. Klueppelberg (Eds.), Com-
plex stochastic systems. Chapmanand Hall.
Lauritzen, S. and D. Nilsson (2001).
Representing and solving decisionproblems with limited information.ManagementScience 47, 1238–1251.
Lauritzen, S. L. (1992, December).
Propagation of probabilities, meansand variances in mixed graphical
association models. J. of the Am.
Stat.Assoc. 87 (420), 1098–1108.
Lauritzen, S. L. (1995). The EM al-
gorithm for graphical association
models with missing data. Com-
putational Statistics and Data Anal-ysis 19, 191–201.Lauritzen, S. L. and D. J. Spiegelhal-
ter (1988). Local computations withprobabilities on graphical struc-tures and their applications to ex-pert systems. J.R.Stat.Soc.B B (50),
127–224.
Law, E., B. Settles, and T. Mitchell
(2010). Learning to tag from openvocabulary labels. In Proc. Euro-
peanConf.onMachineLearning.
Law, M., M. Figueiredo, and A. Jain
(2004). Simultaneous Feature Se-lection and Clustering Using Mix-ture Models. IEEE Trans. on Pat-
tern Analysis and Machine Intelli-gence 26(4).
Lawrence, N. D. (2005). Probabilis-
tic non-linear principal componentanalysis with gaussian process la-
tent variable models. J.ofMachine
LearningResearch 6, 1783–1816.
Lawrence, N. D. (2012). A unifying
probabilistic
perspective for spec-
tral dimensionality reduction: in-sights and new models. J. of Ma-
chine Learning Research 13, 1609–
1638.
Learned-Miller, E. (2004). Hyperspac-
ings and the estimation of infor-mation theoretic quantities. Tech-nical Report 04-104, U. Mass.Amherst Comp. Sci. Dept.
LeCun, Y., B. Boser, J. S. Denker,
D. Henderson, R. E. Howard,W. Hubbard, and L. D. Jackel (1989,Winter). Backpropagation appliedto handwritten zip code recogni-
tion.NeuralComputation 1 (4), 541–
551.
LeCun, Y., L. Bottou, Y. Bengio,
and P. Haffner (1998, November).
Gradient-based learning applied to
document recognition. Proceedings
oftheIEEE 86 (11), 2278–2324.
LeCun, Y., S. Chopra, R. Hadsell, F.-J.
Huang, and M.-A. Ranzato (2006).
A tutorial on energy-based learn-
ing. In B. et al. (Ed.), Predicting
StructuredOutputs. MIT press.
Ledoit, O. and M. Wolf (2004a). Honey,
I Shrunk the Sample CovarianceMatrix.J. of Portfolio Manage-
ment 31(1).
Ledoit, O. and M. Wolf (2004b). A well-
conditioned estimator for large-
dimensional covariance matrices. J.
of Multivariate Analysis 88 (2), 365–
411.Lee, A., F. Caron, A. Doucet, and
C. Holmes (2010). A hierarchicalbayesian framework for construct-ing sparsity-inducing priors. Tech-nical report, U. Oxford.
Lee, A., F. Caron, A. Doucet, and
C.Holmes(2011). BayesianSparsity-Path-Analysis of Genetic Associ-ation Signal using Generalized tPrior. Technical report, U. Oxford.
Lee, D. and S. Seung (2001). Algo-
rithms for non-negative matrix fac-torization. In NIPS.
Lee, H., R. Grosse, R. Ranganath, and
A. Ng (2009). Convolutional deepbelief networks for scalable un-supervised learning of hierarchical
representations. In Intl. Conf. on
MachineLearning.
Lee, H., Y. Largman, P. Pham, and
A. Ng (2009). Unsupervised feature
learning for audio classiﬁcation us-ing convolutional deep belief net-works. InNIPS.
Lee, S.-I., V. Ganapathi, and D. Koller
(2006). Efficient structure learn-ing of Markov networks using L1-regularization. In NIPS.
Lee, T. S. and D. Mumford (2003). Hi-
erarchical Bayesian inference in the
visual cortex. J.ofOpticalSocietyof
AmericaA 20 (7), 1434–1448.
Lenk, P., W. S. DeSarbo, P. Green,
and M. Young (1996). Hierarchi-
cal Bayes Conjoint Analysis: Re-covery of Partworth Heterogeneityfrom Reduced Experimental De-
signs.MarketingScience 15 (2), 173–
191.
Lenkoski, A. and A. Dobra (2008).
Bayesian structural learning and
estimation in Gaussian graphicalmodels. Technical Report 545, De-partment of Statistics, University ofWashington.
Lepar, V. and P. P. Shenoy (1998).
A Comparison of Lauritzen-Spiegelhalter, Hugin and Shenoy-Shafer Architectures for ComputingMarginals
of Probability Distribu-
tions. In G. Cooper and S. Moral(Eds.),UAI, pp. 328–337. Morgan
Kaufmann.
Lerner, U. and R. Parr (2001). Infer-
ence in hybrid networks: Theoreti-cal limits and practical algorithms.InUAI.
BIBLIOGRAPHY 1031
Leslie, C., E. Eskin, A. Cohen, J. We-
ston, and W. Noble (2003). Mis-
match string kernels for discrimi-native protein classiﬁcation. Bioin-
formatics 1 , 1–10.
Levy, S. (2011). In The Plex: How
Google Thinks, Works, and ShapesOurLives. Simon & Schuster.
Li, L., W. Chu, J. Langford, and
X. Wang (2011). Unbiased offlineevaluation of contextual-bandit-based news article recommenda-tion algorithms. In WSDM.
Liang, F., S. Mukherjee, and M. West
(2007). Understanding the use ofunlabelled data in predictive mod-
elling.Statistical Science 22, 189–
205.
Liang, F., R. Paulo, G. Molina,
M. Clyde, and J. Berger (2008). Mix-
tures of g-priors for Bayesian Vari-
able Selection. J. of the Am. Stat.
Assoc. 103 (481), 410–423.
Liang, P. and M. I. Jordan (2008).
An asymptotic analysis of gen-
erative, discriminative, and pseu-dolikelihood estimators. In In-
ternational Conference on MachineLearning(ICML).
Liang, P. and D. Klein. Online EM
for Unsupervised Models. In Proc.
NAACLConference.
Liao, L., D. J. Patterson, D. Fox, and
H. Kautz (2007). Learning andInferring Transportation Routines.
ArtiﬁcialIntelligence 171 (5), 311–331.
Lindley, D. (1982). Scoring rules and
the inevetability of probability. ISI
Review 50, 1–26.
Lindley, D. V. (1972). BayesianStatistics:
AReview. SIAM.
Lindley, D. V. and L. D. Phillips (1976).
Inference for a Bernoulli Process
(A Bayesian View). The American
Statistician 30 (3), 112–119.
Lindsay, B. (1988). Composite like-
lihood methods. Contemporary
Mathematics 80 (1), 221–239.
Lipton, R. J. and R. E. Tarjan (1979).
A separator theorem for planar
graphs.SIAM Journal of Applied
Math 36, 177–189.
Little., R. J. and D. B. Rubin (1987). Sta-
tistical Analysis with Missing Data.
New York: Wiley and Son.Liu, C. and D. Rubin (1995). ML Esti-
mation of the T distribution usingEM and its extensions, ECM andECME.StatisticaSinica 5, 19–39.
Liu, H., J. Lafferty, and L. Wasserman
(2009). The nonparanormal: Semi-parametric estimation of high di-mensional undirected graphs. J.
of Machine Learning Research 10,2295–2328.
Liu, J. (2001). MonteCarloStrategiesin
ScientiﬁcComputation. Springer.
Liu, J. S., W. H. Wong, and A. Kong
(1994). Covariance structure of thegibbs sampler with applicationsto the comparisons of estima-tors and augmentation schemes.
Biometrika 81 (1), 27–40.
Liu,T
.-Y. (2009). Learning to rank
for information retrieval. Founda-
tionsandTrendsinInformationRe-
trieval 3(3), 225–331.
Lizotte, D. (2008). Practical Bayesian
optimization. Ph.D. thesis, U. Al-
berta.
Ljung, L. (1987). System Identiﬁciation:
TheoryfortheUser. Prentice Hall.
Lo, C. H. (2009). Statistical methods
forhighthroughputgenomics. Ph.D.thesis, UBC.
Lo, K., F. Hahne, R. Brinkman, R. Ryan,
and R. Gottardo (2009, May). ﬂow-clust: a bioconductor package forautomated gating of ﬂow cytome-
try data.BMC Bioinformatics 10,
145+.
Lopes, H. and M. West (2004).
Bayesian model assessment in fac-
tor analysis. StatisicaSinica 14, 41–
67.
Lowe, D. G. (1999). Object recognition
from local scale-invariant features.InProc. of the International Con-
ference on Computer Vision ICCV,
Corfu, pp. 1150–1157.
Luce, R. (1959). Individual choice be-
havior: A theoretical analysis.W i -
ley.
Lunn, D., N. Best, and J. Whit-
taker (2009). Generic reversiblejump MCMC using graphical mod-
els.Statistics and Computing 19 (4),
395–408.Lunn, D., A. Thomas, N. Best, and
D. Spiegelhalter (2000). WinBUGS
– a Bayesian modelling framework:concepts, structure, and extensibil-
ity.Statistics and Computing 10,
325–337.
Ma, H., H. Yang, M. Lyu, and I. King
(2008). SoRec: Social recommenda-
tion using probabilistic matrix fac-
torization. In Proc. of17th Conf.on
Information and Knowledge Man-
agement.
Ma, S., C. Ji, and J. Farmer (1997). An
efficient EM-based training algo-rithm for feedforward neural net-works.NeuralNetworks 10 (2), 243–
256.
Maathuis, M., D. Colombo, M. Kalisch,
and P. BÃijhlmann (2010). Pre-dicting causal effects in large-scalesystems from observational data.
NatureMethods 7, 247–248.
Maathuis, M., M. Kalisch, and
P. BÃijhlmann (2009). Estimating
high-dimensional intervention ef-fects from observational data. An-
nalsofStatistics 37 , 3133–3164.
MacKay, D. (1992). Bayesian interpo-
lation.Neural Computation 4, 415–
447.
MacKay, D. (1995a). Developments in
probabilistic modeling with neuralnetworks — ensemble learning. In
Proc. 3rd Ann. Symp. Neural Net-
works.
MacKay, D. (1995b). Probable net-
works and plausible predictions
— a review of practical Bayesianmethods
for supervised neural net-
works.Network.
MacKay, D. (1997). Ensemble learning
for Hidden Markov Models. Tech-nical report, U. Cambridge.
MacKay, D. (1999). Comparision of
approximate methods for handling
hyperparameters. NeuralComputa-
tion 11(5), 1035–1068.
MacKay, D. (2003). InformationTheory,
Inference,andLearningAlgorithms.
Cambridge University Press.
Macnaughton-Smith, P., W. T.
Williams, M. B. Dale, and G. Mock-ett (1964). Dissimilarity analysis:a new technique of hierarchicalsub-division. Nature 202, 1034 –
1035.
1032 BIBLIOGRAPHY
Madeira, S. C. and A. L. Oliveira
(2004). Biclustering algorithms for
biological data analysis: A survey.IEEE/ACM Transactions on Compu-
tational Biology and Bioinformat-
ics 1(1), 24–45.
Madigan, D. and A. Raftery (1994).
Model selection and accountingfor model uncertainty in graphical
modelsusingOccam’swindow. J.of
theAm.Stat.Assoc. 89, 1535–1546.
Madsen, R., D. Kauchak, and C. Elkan
(2005). Modeling word burstiness
using the Dirichlet distribution. In
Intl.Conf.onMachineLearning.
Mairal, J., F. Bach, J. Ponce, and
G. Sapiro (2010). Online learning
for matrix factorization and sparse
coding.J. of Machine Learning Re-
search 11, 19–60.
Mairal, J., M. Elad, and G. Sapiro
(2008). Sparse representation for
color image restoration. IEEETrans.
onImageProcessing 17 (1), 53–69.
Malioutov, D., J. Johnson, and A. Will-
sky (2006). Walk-sums and beliefpropagation in gaussian graphical
models.J.ofMachineLearningRe-
search 7, 2003–2030.
Mallat, S., G. Davis, and Z. Zhang
(1994, July). Adaptive time-
frequency decompositions. SPIE
Journal of Optical Engineering 33,2183–2919.
Mallat, S. and Z. Zhang (1993). Match-
ing pursuits with time-frequencydictionaries. IEEE Transactions on
SignalProcessing 41 (12), 3397–3415.
Malouf, R. (2002). A comparison of
algorithms for maximum entropyparameter estimation. In Proc.
Sixth Conference on Natural Lan-guage Learning (CoNLL-2002), pp.49–55.
Manning, C., P. Raghavan, and
H. Schuetze (2008). Introduction
toInformationRetrieval. CambridgeUniversity Press.
Manning, C. and H. Schuetze (1999).
Foundations of statistical natural
languageprocessing. MIT Press.
Mansinghka, V., D. Roy, R. Rifkin,
and J. Tenenbaum (2007). AClass:
An online algorithm for generativeclassiﬁcation. In AI/Statistics.Mansinghka, V., P. Shafto, E. Jonas,
C. Petschulat, and J. Tenenbaum(2011). Cross-Categorization: ANonparametric Bayesian Methodfor Modeling Heterogeneous, HighDimensional Data. Technical re-port, MIT.
Margolin, A., I. Nemenman, K. Basso,
C. Wiggins, G. Stolovitzky, and R. F.abd A. Califano (2006). ARACNE:An Algorithm for the Reconstruc-tion of Gene Regulatory Networksin a Mammalian Cellular Context.BMCBionformatics 7 .
Marin, J.-M. and C. Robert (2007).
BayesianCore: apracticalapproach
tocomputationalBayesianstatistics.
Springer.
Marks, T. K. and J. R. Movellan (2001).
Diffusion networks, products of ex-perts, and factor analysis. Techni-cal report, University of CaliforniaSan Diego.
Marlin, B. (2003). Modeling user rat-
ing proﬁles for collaborative ﬁlter-ing. InNIPS.
Marlin, B. (2008). Missing
 Data Prob-
lems in Machine Learning. Ph.D.thesis, U. Toronto.
Marlin, B., E. Khan, and K. Murphy
(2011). Piecewise Bounds for Es-timating Bernoulli-Logistic Latent
Gaussian Models. In Intl. Conf. on
MachineLearning.
Marlin, B. and R. Zemel (2009). Collab-
orative prediction and ranking with
non-random missing data. In Proc.
of the 3rd ACM Conference on Rec-
ommenderSystems.
Marlin, B. M., K. Swersky, B. Chen, and
N. de Freitas (2010). Inductive prin-
ciples for restricted boltzmann ma-chine learning. In AI/Statistics.
Marroquin, J., S. Mitter, and T. Pog-
gio (1987). Probabilistic solutionof ill-posed problems in computa-
tional vision. J. of the Am. Stat. As-
soc. 82(297), 76–89.
Martens, J. (2010). Deep learning via
hessian-free optimization. In Intl.
Conf.onMachineLearning.
Maruyama, Y. and E. George (2008). A
g-prior extension for p>n. Tech-
nical report, U. Tokyo.
Mason, L., J. Baxter, P. Bartlett, and
M. Frean (2000). Boosting algo-
rithms as gradient descent. InNIPS, Volume 12, pp. 512–518.Matthews, R. (1998). Bayesian Critique
of Statistics in Health: The GreatHealth Hoax.
Maybeck, P. (1979). Stochastic models,
estimation, and control. AcademicPress.
Mazumder, R. and T. Hastie (2012).
The Graphical Lasso: New Insightsand Alternatives. Technical report.
McAuliffe, J., D. Blei, and M. Jordan
(2006). Nonparametric empiricalbayes for the dirichlet process mix-
ture model. Statistics and Comput-
ing 16(1), 5–14.
McCallum, A. (2003). Efficiently induc-
ing features of conditional random
ﬁelds. InUAI.
McCallum, A., D. Freitag, and
F. Pereira (2000). Maximum En-tropy Markov Models for Informa-tion Extraction and Segmentation.
InIntl.Conf.onMachineLearning.
McCallum, A. and K. Nigam (1998).
A comparison of event models for
naive Bayes text classiﬁcation. In
AAAI/ICML workshop on Learning
forTextCategorization.
McCray, A. (2003). An upper level
ontology for the biomedical do-
main.Comparative and Functional
Genomics 4, 80–84.
McCullagh, P. and J. Nelder (1989).
Generalized linear models. Chap-
man and Hall. 2nd edition.
McCullich, W. and W. Pitts (1943). A
logical calculus of the ideas imma-
nent in nervous activity. Bulletinof
MathematicalBiophysics 5, 115–137.
McDonald, J. and W. Newey (1988).
Partially Adaptive Estimation of Re-
gression Models via the General-ized t Distribution. Econometric
Theory 4(3),428–445.
McEliece,
R. J., D. J. C. MacKay, and
J. F. Cheng (1998). Turbo decod-ing as an instance of Pearl’s ’beliefpropagation’ algorithm. IEEE J. on
SelectedAreasinComm. 16 (2), 140–
152.
McFadden, D. (1974). Conditional logit
analysis of qualitative choice be-havior. In P. Zarembka (Ed.), Fron-
tiers in econometrics, pp. 105–142.Academic Press.
BIBLIOGRAPHY 1033
McGrayne, S. B. (2011). The the-
ory that would not die: how
Bayes’rulecrackedtheenigmacode,hunted down Russian submarines,
and emerged triumphant from two
centuries of controversy. Yale Uni-
versity Press.
McKay, B. D., F. E. Oggier, G. F. Royle,
N. J. A. Sloane, I. M. Wanless, andH. S. Wilf (2004). Acyclic digraphsand eigenvalues of (0,1)-matrices. J.
IntegerSequences 7 (04.3.3).
McKay, D. and L. C. B. Peto (1995).
A hierarchical dirichlet language
model.NaturalLanguageEngineer-
ing 1(3), 289–307.
McLachlan, G. J. and T. Krishnan
(1997).The EM Algorithm and Ex-
tensions. Wiley.
Meek, C. and D. Heckerman (1997).
Structure and parameter learn-
ing for causal independence andcausal interaction models. In UAI,
pp. 366–375.
Meek, C., B. Thiesson, and D. Hecker-
man (2002). Staged mixture mod-elling and boosting. In UAI, San
Francisco, CA, pp. 335–343. Mor-gan Kaufmann.
Meila, M. (2001). A random walks view
of spectral segmentation. In AI/S-
tatistics.
Meila, M. (2005). Comparing cluster-
ings: an axiomatic view. In Intl.
Conf.onMachineLearning.
Meila, M. and T. Jaakkola (2006).
Tractable Bayesian learning of tree
belief networks. StatisticsandCom-
puting 16, 77–92.
Meila, M. and M. I. Jordan (2000).
Learning with mixtures of trees. J.
of Machine Learning Research 1,1 –
48.
Meinshausen, N. (2005). A note on the
lasso for gaussian graphical modelselection. Technical report, ETHSeminar fur Statistik.
Meinshausen, N. and P. Buhlmann
(2006). High dimensional graphsand variable selection with thelasso.The Annals of Statistics 34,
1436–1462.
Meinshausen, N. and P. BÃijhlmann
(2010). Stability selection. J.ofRoyal
Stat.Soc.SeriesB 72, 417–473.Meltzer, T., C. Yanover, and Y. Weiss
(2005). Globally optimal solu-tions for energy minimization instereo vision using reweighted be-lief propagation. In ICCV, pp. 428–
435.
Meng, X. L. and D. van Dyk (1997).
The EM algorithm — an old folksong sung to a fast new tune (with
Discussion). J.RoyalStat.Soc.B 59,
511–567.
Mesot, B. and D. Barber (2009). A Sim-
ple Alternative Derivation of the
Expectation Correction Algorithm.
IEEE Signal Processing Letters 16 (1),
121–124.
Metropolis, N., A. Rosenbluth,
M. Rosenbluth, A. Teller, and
E. Teller (1953). Equation of statecalculations by fast computing
machines.J.ofChemicalPhysics 21,
1087–1092.
Metz,
C. (2010). Google behavioral ad
targeter is a Smart Ass. The Regis-
ter.
Miller, A. (2002). Subsetselectioninre-
gression. Chapman and Hall. 2nd
edition.
Mimno, D. and A. McCallum (2008).
Topic models conditioned on ar-bitrary features with dirichlet-multinomial regression. In UAI.
Minka, T. (1999). Pathologies of ortho-
dox statisics. Technical report, MITMedia Lab.
Minka, T. (2000a). Automatical choice
of dimensionality for PCA. Techni-cal report, MIT.
Minka, T. (2000b). Bayesian linear re-
gression. Technical report, MIT.
Minka, T. (2000c). Bayesian model av-
eraging is not model combination.Technical report, MIT Media Lab.
Minka, T. (2000d). Empirical risk min-
imization is an incomplete induc-tive principle. Technical report,MIT.
Minka, T. (2000e). Estimating a Dirich-
let distribution. Technical report,MIT.
Minka, T. (2000f). Inferring a Gaussian
distribution. Technical report, MIT.
Minka, T. (2001a). Bayesian inference
of a uniform distribution. Techni-cal report, MIT.Minka, T. (2001b). Empirical Risk Min-
imization is an incomplete induc-tive principle. Technical report,MIT.
Minka, T. (2001c). Expectation propa-
gationforapproximateBayesianin-ference. InUAI.
Minka, T. (2001d). A family of algo-
rithmsforapproximateBayesianin-
ference. Ph.D. thesis, MIT.
Minka, T. (2001e). Statistical ap-
proaches to learning and discovery
10-602: Homework assignment 2,question 5. Technical report, CMU.
Minka, T. (2003). A comparison of nu-
merical optimizers for logistic re-gression. Technical report, MSR.
Minka, T. (2005). Divergence measures
and message passing. Technical re-port, MSR Cambridge.
Minka, T. and Y. Qi (2003). Tree-
structured approximations by ex-pectation propagation. In NIPS.
Minka, T., J. Winn, J. Guiver, and
D. Knowles (2010). Infer.NET 2.4.Microsoft Research Cambridge.http://research.microsoft.com/infernet.
Minsky, M. and S. Papert (1969). Per-
ceptrons. MIT Press.
Mitchell, T. (1997). Machine Learning.
McGraw Hill.
Mitchell, T. and J. Beauchamp (1988).
Bayesian Variable Selection in Lin-
ear Regression. J. of the Am. Stat.
Assoc. 83, 1023–1036.
Mobahi, H., R. Collobert, and J. We-
ston (2009). Deep learning from
temporal coherence in video. In
Intl.Conf.onMachineLearning.
Mockus, J., W. Eddy, A. Mockus,
L. Mockus, and G. Reklaitis (1996).
BayesianHeuristicApproachtoDis-
crete and Global Optimization: Al-gorithms, Visualization, Software,andApplications. Kluwer.
Moghaddam, B., A. Gruber, Y. Weiss,
and S. Avidan (2008). Sparse re-
gression as a sparse eigenvalue
problem. In Information Theory &
ApplicationsWorkshop(ITA’08).
Moghaddam, B., B. Marlin, E. Khan,
andK.
Murphy (2009). Accel-
erating bayesian structural infer-
ence for non-decomposable gaus-sian graphical models. In NIPS.
1034 BIBLIOGRAPHY
Moghaddam, B. and A. Pentland
(1995). Probabilistic visual learning
for object detection. In Intl. Conf.
onComputerVision.
Mohamed, S., K. Heller, and
Z. Ghahramani (2008). Bayesian
Exponential Family PCA. In NIPS.
Moler, C. (2004). NumericalComputing
withMATLAB. SIAM.
Morris, R. D., X. Descombes, and
J. Zerubia (1996). The Ising/Pottsmodel is not well suited to seg-
mentation tasks. In IEEEDSPWork-
shop.
Mosterman, P. J. and G. Biswas (1999).
Diagnosis of continuous valued
systems in transient operating re-gions.IEEETrans.onSystems,Man,
and Cybernetics, Part A 29 (6), 554–
565.
Moulines, E., J.-F. Cardoso, and E. Gas-
siat (1997). Maximum likelihoodfor blind separation and deconvo-lution of noisy signals using mix-ture models. In Proc. IEEE Int.
Conf. on Acoustics, Speech and Sig-
nal Processing (ICASSP’97), Munich,
Germany, pp. 3617–3620.
Muller, P., G. Parmigiani, C. Robert,
and J. Rousseau (2004). Optimalsample size for multiple testing:the case of gene expression mi-
croarrays. J. of the Am. Stat. As-
soc. 99, 990–1001.
Mumford, D. (1994). Neuronal archi-
tectures for pattern-theoretic prob-
lems. In C. Koch and J. Davis (Eds.),LargeScaleNeuronalTheoriesoftheBrain. MIT Press.
Murphy, K. (2000). Bayesian map
learning in dynamic environments.InNIPS, Volume 12.
Murphy, K. and M. Paskin (2001). Lin-
ear time inference in hierarchicalHMMs. InNIPS.
Murphy, K., Y. Weiss, and M. Jordan
(1999). Loopy belief propagation forapproximate inference: an empiri-cal study. In UAI.
Murphy, K. P. (1998). Filtering and
smoothing in linear dynamical sys-tems using the junction tree algo-rithm. Technical report, U.C. Berke-ley, Dept. Comp. Sci.
Murray, I. and Z. Ghahramani (2005).
A note on the evidence andbayesian occam’s razor. Technicalreport, Gatsby.Musso, C., N. Oudjane, and F. LeGland
(2001). Improving regularized par-ticle ﬁlters. In A. Doucet, J. F. G.de Freitas, and N. Gordon (Eds.),Sequential Monte Carlo Methods inPractice. Springer.
Nabney, I. (2001). NETLAB: algorithms
forpatternrecognition. Springer.
Neal, R. (1992). Connectionist learning
of belief networks. ArtiﬁcialIntelli-
gence 56, 71–113.
Neal, R. (1993). Probabilistic Inference
Using Markov Chain Monte CarloMethods. Technical report, Univ.Toronto.
Neal, R. (1996). Bayesian learning for
neuralnetworks. Springer.
Neal, R. (1997). Monte Carlo Im-
plementation of Gaussian ProcessModels for Bayesian Regressionand Classiﬁcation. Technical Re-port
9702, U. Toronto.
Neal, R. (1998). Erroneous Results
in ’Marginal Likelihood from theGibbs Output’. Technical report, U.Toronto.
Neal, R. (2000). Markov Chain Sam-
pling Methods for Dirichlet Process
Mixture Models. J. of Computa-
tional and Graphical Statistics 9 (2),
249–265.
Neal, R. (2003a). Slice sampling. An-
nalsofStatistics 31 (3), 7–5–767.
Neal, R. (2010). MCMC using Hamil-
tonian Dynamics. In S. Brooks,
A. Gelman, G. Jones, and X.-L.Meng (Eds.), Handbook of Markov
Chain Monte Carlo. Chapman &Hall.
Neal, R. and D. MacKay (1998).
Likelihood-based boosting. Techni-cal report, U. Toronto.
Neal, R. and J. Zhang (2006). High
dimensional classiﬁcation Bayesianneural networks and Dirichlet dif-fusion trees. In I. Guyon, S. Gunn,M. Nikravesh, and L. Zadeh (Eds.),FeatureExtraction. Springer.
Neal, R. M. (2001). Annealed impor-
tance sampling. StatisticsandCom-
puting 11, 125–139.
Neal, R. M. (2003b). Density Model-
ing and Clustering using DirichletDiffusion Trees. In J. M. Bernardoet al. (Eds.),BayesianStatistics7, pp.
619–629. Oxford University Press.Neal, R. M. and G. E. Hinton (1998).
A new view of the EM algorithmthat justiﬁes incremental and othervariants. In M. Jordan (Ed.), Learn-
inginGraphicalModels. MIT Press.
Neapolitan, R. (2003). Learning
BayesianNetworks. Prentice Hall.
Neﬁan, A., L. Liang, X. Pi, X. Liu,
and K. Murphy (2002). DynamicBayesian Networks for Audio-
Visual Speech Recognition. J. Ap-
pliedSignalProcessing .
Nemirovski, A. and D. Yudin (1978). On
Cezari’s convergence of the steep-est descent method for approxi-mating saddle points of convex-
concave functions. Soviet Math.
Dokl. 19.
Nesterov, Y. (2004). Introductory Lec-
tures on Convex Optimization. A
basiccourse. Kluwer.
Newton, M., D. Noueiry, D. Sarkar,
and P. Ahlquist (2004). Detecting
differential gene expression witha semiparametric hierarchical mix-ture method. Biostatistics 5, 155–
176.
Newton, M. and A. Raftery (1994). Ap-
proximate Bayesian Inference withthe Weighted Likelihood Bootstrap.
J. of Royal Stat. Soc. Series B 56 (1),
3–48.
Ng, A., M. Jordan, and Y. Weiss (2001).
On Spectral Clustering: Analysis
and an algorithm. In NIPS.
Ng, A. Y. and M. I. Jordan (2002). On
discriminative vs. generative classi-ﬁers: A comparison of logistic re-gression and naive bayes. In NIPS-
14.
Nickisch, H. and C. Rasmussen (2008).
Approximations for binary gaus-
sian process classiﬁcation. J.ofMa-
chineLear
ning Research 9, 2035–
2078.
Nilsson, D. (1998). An efficient algo-
rithm for ﬁnding the M most prob-
able conﬁgurations in a probabilis-
tic expert system. Statistics and
Computing 8 , 159–173.
Nilsson, D. and J. Goldberger (2001).
Sequentially ﬁnding the N-Best Listin Hidden Markov Models. In Intl.
JointConf.onAI, pp. 1280–1285.
Nocedal, J. and S. Wright (2006). Nu-
mericalOptimization. Springer.
BIBLIOGRAPHY 1035
Nowicki, K. and T. A. B. Snijders
(2001). Estimation and prediction
for stochastic blockstructures. Jour-
naloftheAmericanStatisticalAsso-ciation 96 (455), 1077–??
Nowlan, S. and G. Hinton (1992). Sim-
plifying neural networks by soft
weight sharing. Neural Computa-
tion 4(4), 473–493.
Nummiaro, K., E. Koller-Meier, and
L. V. Gool (2003). An adaptive
color-based particle ﬁlter. Image
andVisionComputing 21 (1), 99–110.
Obozinski, G., B. Taskar, and M. I. Jor-
dan (2007). Joint covariate selectionfor grouped classiﬁcation. Techni-cal report, UC Berkeley.
Oh, M.-S. and J. Berger (1992). Adap-
tive importance sampling in Monte
Carlo integration. J. of Statistical
Computation and Simulation 41 (3),
143 – 168.
Oh, S., S. Russell, and S. Sastry (2009).
Markov Chain Monte Carlo Data
Association for Multi-Target Track-ing.IEEETrans.onAutomaticCon-
trol 54(3), 481–497.
O’Hagan, A. (1978). Curve ﬁtting and
optimal design for prediction. J. of
RoyalStat.Soc.SeriesB 40, 1–42.
O’Hara, R. and M. Sillanpaa (2009).
A Review of Bayesian Variable Se-lection Methods: What, How andWhich.Bayesian Analysis 4 (1), 85–
118.
Olshausen, B. A. and D. J. Field (1996).
Emergence of simple cell recep-tive ﬁeld properties by learning asparse code for natural images. Na-
ture 381, 607–609.
Opper, M. (1998). A Bayesian approach
to online learning. In D. Saad
(Ed.),On-line learning in neural
networks. Cambridge.
Opper, M. and C. Archambeau (2009).
The variational Gaussian approxi-mation revisited. Neural Computa-
tion 21(3), 786–792.
Opper, M. and D. Saad (Eds.) (2001).
Advanced mean ﬁeld methods: the-
oryandpractice. MIT Press.
Osborne, M. R., B. Presnell, and B. A.
Turlach (2000a). A new approach to
variable selection in least squares
problems.IMA Journal of Numeri-
calAnalysis 20 (3), 389–403.Osborne, M. R., B. Presnell, and B. A.
Turlach (2000b). On the lasso and
its dual. J. Computational and
graphicalstatistics 9, 319–337.
Ostendorf, M., V. Digalakis, and
O. Kimball (1996). From HMMs tosegment models: a uniﬁed viewof stochastic modeling for speech
recognition. IEEE Trans. on Speech
and Audio Processing 4 (5), 360–
378.
Overschee, P. V. and B. D. Moor
(1996).Subspace Identiﬁcation for
Linear Systems: Theory, Implemen-
tation, Applications . Kluwer Aca-
demic Publishers.
Paatero, P. and U. Tapper (1994). Pos-
itive matrix factorization: A non-
negative factor model with opti-mal utilization of error estimates ofdata values. Environmetrics 5 , 111–
126.
Padadimit
riou, C. and K. Steiglitz
(1982).Combinatorialoptimization:
Algorithms and Complexity. Pren-tice Hall.
Paisley, J. and L. Carin (2009). Non-
parametric factor analysis with
beta process priors. In Intl. Conf.
onMachineLearning.
Palmer, S. (1999). Vision Science: Pho-
tonstoPhenomenology. MIT Press.
Parise, S. and M. Welling (2005).
Learning in Markov Random
Fields: An Empirical Study. In Joint
StatisticalMeeting.
Park, T. and G. Casella (2008). The
Bayesian Lasso. J. of the Am. Stat.
Assoc. 103 (482), 681–686.
Parviainen, P. and M. Koivisto (2011).
Ancestor relations in the presenceof unobserved variables. In Proc.
European Conf. on Machine Learn-ing.
Paskin, M. (2003). Thin junction tree
ﬁlters for simultaneous localizationand mapping. In Intl.JointConf.on
AI.
Pearl, J. (1988). ProbabilisticReasoning
in Intelligent Systems: Networks of
Plausible Inference. Morgan Kauf-
mann.
Pearl, J. (2000). Causality: Models,Rea-
soning and Inference. CambridgeUniv. Press.Pearl, J. and T. Verma (1991). A theory
of inferred causation. In Knowledge
Representation, pp. 441–452.
Pe’er, D. (2005, April). Bayesian net-
work analysis of signaling net-works: a primer. ScienceSTKE 281,
14.
Peng, F., R. Jacobs, and M. Tan-
ner (1996). Bayesian Inferencein Mixtures-of-Experts and Hier-archical Mixtures-of-Experts Mod-els With an Application to Speech
Recognition. J. of the Am. Stat. As-
soc. 91(435), 953–960.
Petris, G., S. Petrone, and P. Campag-
noli (2009). Dynamiclinearmodels
withR. Springer.
Pham, D.-T. and P. Garrat (1997). Blind
separation of mixture of inde-
pendent sources through a quasi-maximum likelihood approach.
IEEE Trans. on Signal Process-
ing 45(7), 1712–1725.
Pietra, S. D., V. D. Pietra, and J. Laf-
ferty (1997). Inducing features ofrandom ﬁelds. IEEE Trans. on Pat-
tern Analysis and Machine Intelli-gence 19(4).
Plackett, R. (1975). The analysis of per-
mutations. Applied Stat. 24, 193–
202.
Platt, J. (1998). Using analytic QP
and sparseness to speed training ofsupport vector machines. In NIPS.
Platt, J. (2000). Probabilities for sv ma-
chines. In A. Smola, P. Bartlett,B. Schoelkopf, and D. Schuurmans
(Eds.),Advances in Large Margin
Classiﬁers. MIT Press.
Pla
tt, J., N. Cristianini, and J. Shawe-
Taylor (2000). Large margin DAGs
for multiclass classiﬁcation. In
NIPS, Volume 12, pp. 547–553.
Plummer, M. (2003). JAGS: A Program
for Analysis of Bayesian Graphi-cal Models Using Gibbs Sampling.
InProc. 3rd Intl. Workshop on Dis-
tributedStatisticalComputing.
Polson, N. and S. Scott (2011). Data
augmentation for support vectormachines. Bayesian Analysis 6 (1),
1–124.
Pontil, M., S. Mukherjee, and F. Girosi
(1998). On the Noise Model of Sup-
port Vector Machine Regression.Technical report, MIT AI Lab.
Poon, H. and P. Domingos (2011). Sum-
product networks: A new deep ar-chitecture. In UAI.
1036 BIBLIOGRAPHY
Pourahmadi, M. (2004). Simultaneous
Modelling of Covariance Matrices:
GLM, Bayesian and Nonparamet-ric Perspectives. Technical report,Northern Illinois University.
Prado, R. and M. West (2010). Time
Series: Modelling, Computation and
Inference. CRC Press.
Press, S. J. (2005). Applied mul-
tivariate analysis, using Bayesianand frequentist methods of infer-
ence. Dover. Second edition.
Press, W., W. Vetterling, S. Teukolosky,
and B. Flannery (1988). Numeri-
cal Recipes in C: The Art of Scien-
tiﬁcComputing (Second ed.). Cam-
bridge University Press.
Prince, S. (2012). Computer Vision:
Models, Learning and Inference.
Cambridge.
Pritchard, J., M. M. Stephens, and
P. Donnelly (2000). Inference ofpopulation structure using multi-locus genotype data. Genetics 155,
945–959.
Qi, Y. and T. Jaakkola (2008). Param-
eter Expanded Variational BayesianMethods. In NIPS.
Qi, Y., M. Szummer, and T. Minka
(2005). Bayesian Conditional Ran-
dom Fields. In 10th Intl. Workshop
onAI/Statistics.
Quinlan, J. (1990). Learning logical def-
initions from relations. Machine
Learning 5, 239–266.
Quinlan, J. R. (1986). Induction of de-
cision trees. Machine Learning 1,
81–106.
Quinlan, J. R. (1993). C4.5Programsfor
Machine Learning. Morgan Kauff-
man.
Quinonero-Candela, J., C. Rasmussen,
and C. Williams (2007). Approxi-mation methods for gaussian pro-cess regression. In L. Bottou,O. Chapelle, D. DeCoste, and J. We-
ston (Eds.),Large Scale Kernel Ma-
chines, pp. 203–223. MIT Press.
Rabiner, L. R. (1989). A tutorial on Hid-
den Markov Models and selected
applications in speech recognition.
Proc.oftheIEEE 77 (2), 257–286.
Rai, P. and H. Daume (2009). Multi-
label prediction via sparse inﬁnite
CCA. InNIPS.Raiffa, H. (1968). DecisionAnalysis.A d -
dison Wesley.
Raina, R., A. Madhavan, and A. Ng
(2009). Large-scale deep unsuper-vised learning using graphics pro-
cessors. In Intl. Conf. on Machine
Learning.
Raina, R., A. Ng, and D. Koller (2005).
Transfer learning by constructing
informative priors. In NIPS.
Rajaraman, A. and J. Ullman (2010).
Mining of massive datasets. Self-published.
Rajaraman, A. and J. Ullman (2011).
Mining of massive datasets. Cam-bridge.
Rakotomamonjy, A., F. Bach, S. Canu,
and Y. Grandvalet (2008). Sim-
pleMKL.J.ofMachineLearningRe-
sear
ch 9, 2491–2521.
Ramage, D., D. Hall, R. Nallapati,
and C. Manning (2009). Labeled
LDA: A supervised topic model forcredit attribution in multi-labeledcorpora. In EMNLP.
Ramage, D., C. Manning, and S. Du-
mais (2011). Partially Labeled TopicModels for Interpretable Text Min-
ing. InProc. of the Int’l Conf. on
KnowledgeDiscoveryandDataMin-
ing.
Ramaswamy, S., P. Tamayo, R. Rifkin,
S. Mukherjee, C. Yeang, M. Angelo,C. Ladd, M. Reich, E. Latulippe,J. Mesirov, T. Poggio, W. Gerald,M. Loda, E. Lander, and T. Golub(2001). Multiclass cancer diagno-sis using tumor gene expression
signature. Proc. of the National
AcademyofScience,USA98, 15149–
15154.
Ranzato, M. and G. Hinton (2010).
Modeling pixel means and covari-ances using factored third-orderBoltzmann machines. In CVPR.
Ranzato, M., F.-J. Huang, Y.-L.
Boureau, and Y. LeCun (2007). Un-supervised Learning of InvariantFeature Hierarchies with Applica-tions to Object Recognition. InCVPR.
Ranzato, M., C. Poultney, S. Chopra,
and Y.LeCun (2006). Efficientlearning of sparse representationswith an energy-based model. InNIPS.Rao, A. and K. Rose (2001, February).
Deterministically Annealed Designof Hidden Markov Model Speech
Recognizers. IEEETrans.onSpeech
andAudioProc. 9 (2), 111–126.
Rasmussen, C. (2000). The inﬁnite
gaussian mixture model. In NIPS.
Rasmussen, C. E. and J. Quiñonero-
Candela (2005). Healing the rele-
vance vector machine by augmen-
tation. InIntl. Conf. on Machine
Learning, pp. 689–696.
Rasmussen, C. E. and C. K. I. Williams
(2006).Gaussian Processes for Ma-
chineLearning. MIT Press.
Ratsch, G., T. Onoda, and K. Muller
(2001). Soft margins for adaboost.MachineLearning 42, 287–320.
Rattray, M., O. Stegle, K. Sharp, and
J. Winn (2009). Inference algo-
rithms and learning theory forBayesian sparse factor analysis. In
Proc. Intl. Workshop on Statistical-
MechanicalInformatics.
Rauch, H. E., F. Tung, and C. T. Striebel
(1965). Maximum likelihood esti-
mates of linear dynamic systems.
AIAAJournal 3 (8), 1445–1450.
Ravikumar, P., J. Lafferty, H. Liu, and
L. Wasserman (2009). Sparse Ad-ditive Models. J. of Royal Stat. Soc.
SeriesB 71 (5), 1009–1030.
Raydan, M. (1997). The barzilai and
borwein gradient method for the
large scale unconstrained mini-mization problem. SIAMJ.onOpti-
mization 7 (1), 26–33.
Rennie, J. (2004). Why sums are bad.
Technical report, MIT.
Rennie,J.,
L. Shih, J. Teevan, and
D. Karger (2003). Tackling the poorassumptions of naive Bayes text
classiﬁers. In Intl.Conf.onMachine
Learning.
Reshed, D., Y. Reshef, H. Finucane,
S. Grossman, G. McVean, P. Turn-
baugh, E. Lander, M. Mitzen-macher, and P. Sabeti (2011, De-cember). Detecting novel associa-tions in large data sets. Science334,
1518–1524.
Resnick, S. I. (1992). Adventures in
StochasticProcesses. Birkhauser.
Rice, J. (1995). Mathematical statistics
and data analysis. Duxbury. 2ndedition.
BIBLIOGRAPHY 1037
Richardson, S. and P. Green (1997). On
Bayesian Analysis of Mixtures With
an Unknown Number of Compo-
nents.J. of Royal Stat. Soc. Series
B5 9, 731–758.
Riesenhuber, M. and T. Poggio
(1999). Hierarchical models of ob-
ject recognition in cortex. Nature
Neuroscience 2, 1019–1025.
Rish, I., G. Grabarnik, G. Cec-
chi, F. Pereira, and G. Gordon(2008). Closed-form supervised di-mensionality reduction with gener-
alized linear models. In Intl. Conf.
onMachineLearning.
Ristic, B., S. Arulampalam, and N. Gor-
don (2004). BeyondtheKalmanFil-
ter: Particle Filters for Tracking Ap-
plications. Artech House Radar Li-
brary.
Robert, C. (1995). Simulation of trun-
cated normal distributions. Statis-
ticsandcomputing 5, 121–125.
Robert, C. and G. Casella (2004).
Monte Carlo Statisical Methods.Springer. 2nd edition.
Roberts, G. and J. Rosenthal (2001).
Optimal scaling for variousMetropolis-Hastings algorithms.
StatisticalScience 16, 351–367.
Roberts, G. O. and S. K. Sahu
(1997). Updating schemes, corre-
lation structure, blocking and pa-rameterization for the gibbs sam-
pler.J. of Royal Stat. Soc. Series
B5 9(2), 291–317.
Robinson, R. W. (1973). Counting la-
beled acyclic digraphs. In F. Harary(Ed.),New Directions in the Theory
of Graphs, pp. 239–273. Academic
Press.
Roch, S. (2006). A short proof
that phylogenetic tree reconstru-tion by maximum likelihood ishard.IEEE/ACM Trans. Comp. Bio.
Bioinformatics 31 (1).
Rodriguez, A. and K. Ghosh
(2011). Modeling relationaldata through nested partition
models.Biometrika . To appear.
Rose, K. (1998, November). Determin-
istic annealing for clustering, com-
pression, classiﬁcation, regression,and related optimization problems.Proc.IEEE 80, 2210–2239.Rosenblatt, F. (1958). The percep-
tron: A probabilistic model forinformation storage and organiza-
tion in the brain. PsychologicalRe-
view 65(6), 386â˘A¸S408.
Ross, S. (1989). Introduction to Proba-
bilityModels. Academic Press.
Rosset, S., J. Zhu, and T. Hastie (2004).
Boosting as a regularized path toa maximum margin classiﬁer. J. of
Machine Learning Research 5, 941–
973.
Rossi, P., G. Allenby, and R. McCulloch
(2006).BayesianStatisticsandMar-
keting. Wiley.
Roth, D. (1996, Apr). On the hardness
of approximate reasoning. Artiﬁcial
Intelligence 82 (1-2),273–302.
Ro
ther, C., P. Kohli, W. Feng, and J. Jia
(2009). Minimizing sparse higherorder energy functions of discretevariables. In CVPR, pp. 1382–1389.
Rouder, J., P. Speckman, D. Sun, and
R. Morey (2009). Bayesian t testsfor accepting and rejecting the null
hypothesis. PyschonomicBulletin&
Review 16 (2), 225–237.
Roverato, A. (2002). Hyper in-
verse Wishart distribution for non-
decomposable graphs and its ap-plication to Bayesian inference for
Gaussian graphical models. Scand.
J.Statistics 29, 391–411.
Roweis, S. (1997). EM algorithms for
PCA and SPCA. In NIPS.
Rubin, D. (1998). Using the SIR algo-
rithm to simulate posterior distri-
butions. InBayesianStatistics3.
Rue, H. and L. Held (2005). Gaus-
sian Markov Random Fields: The-ory and Applications, Volume 104
ofMonographsonStatisticsandAp-
plied Probability. London: Chap-
man & Hall.
Rue, H., S. Martino, and N. Chopin
(2009). Approximate Bayesian In-ference for Latent Gaussian ModelsUsing Integrated Nested Laplace
Approximations. J.ofRoyalStat.Soc.
SeriesB 71, 319–392.
Rumelhart, D., G. Hinton, and
R. Williams (1986). Learning inter-
nal representations by error propa-gation. In D. Rumelhart, J. McClel-land, and the PDD Research Group
(Eds.),Parallel Distributed Process-
ing: Explorations in the Microstruc-
tureofCognition. MIT Press.Ruppert, D., M. Wand, and R. Carroll
(2003).Semiparametric Regression.
Cambridge University Press.
Rush, A. M. and M. Collins (2012). A
tutorial on Lagrangian relaxation
and dual decomposition for NLP.Technical report, Columbia U.
Russell, S., J. Binder, D. Koller, and
K. Kanazawa (1995). Local learningin probabilistic networks with hid-
den variables. In Intl.JointConf.on
AI.
Russell, S. and P. Norvig (1995). Ar-
tiﬁcial Intelligence: A Modern Ap-
proach. Englewood Cliffs, NJ: Pren-
tice Hall.
Russell, S. and P. Norvig (2002). Ar-
tiﬁcial Intelligence: A Modern Ap-
proach. Prentice Hall. 2nd edition.
Russell, S. and P. Norvig (2010). Ar-
tiﬁcial Intelligence: A Modern Ap-proach. Prentice Hall. 3rd edition.
S. and M. Black (2009, April). Fields
of experts. Intl. J. Computer Vi-
sion 82(2), 205–229.
Sachs, K., O. Perez, D. Pe’er,
D. Lauffenburger, and G. Nolan
(2005). Causal protein-signalingnetworks derived from multipa-rameter single-cell data. Sci-
ence 308.
Sahami,M.
and T. Heilman (2006).
A Web-based Kernel Function forMeasuring the Similarity of Short
Text Snippets. In WWWconferenec.
Salakhutdinov, R. (2009). Deep Gen-
erative Models. Ph.D. thesis, U.
Toronto.
Salakhutdinov, R. and G. Hinton
(2009). Deep Boltzmann machines.InAI/Statistics, Volume 5, pp. 448–
455.
Salakhutdinov, R. and G. Hinton
(2010). Replicated Softmax: anUndirected Topic Model. In NIPS.
Salakhutdinov, R. and H. Larochelle
(2010). Efficient Learning of DeepBoltzmann Machines. In AI/Statis-
tics.
Salakhutdinov, R. and A. Mnih (2008).
Probabilistic matrix factorization.InNIPS, Volume 20.
1038 BIBLIOGRAPHY
Salakhutdinov, R. and S. Roweis
(2003). Adaptive overrelaxed bound
optimization methods. In Proceed-
ingsoftheInternationalConference
on Machine Learning, Volume 20,
pp. 664–671.
Salakhutdinov, R., J. Tenenbaum, and
A. Torralba (2011). Learning ToLearn with Compound HD Models.InNIPS.
Salakhutdinov, R. R., A. Mnih, and
G. E. Hinton (2007). Restrictedboltzmann machines for collabo-rative ﬁltering. In Intl. Conf. on
Machine Learning, Volume 24, pp.791–798.
Salojarvi, J., K. Puolamaki, and
S. Klaski (2005). On discriminativejoint density modeling. In Proc.Eu-
ropeanConf.onMachineLearning.
Sampson, F. (1968). A Novitiate in a
Period of Change: An Experimental
and Case Study of Social Relation-ships. Ph.D. thesis, Cornell.
Santner, T., B. Williams, and W. Notz
(2003).The Design and Analysis of
ComputerExperiments. Springer.
Sarkar, J. (1991). One-armed bandit
problems with covariates. The An-
nalsofStatistics 19 (4), 1978–2002.
Sato, M. and S. Ishii (2000). On-line
EM algorithm for the normalized
Gaussian network. Neural Compu-
tation 12, 407–432.
Saul, L., T. Jaakkola, and M. Jordan
(1996). Mean Field Theory for Sig-moid Belief Networks. J. of AI Re-
search 4, 61–76.
Saul, L. and M. Jordan (1995). Exploit-
ing tractable substructures in in-
tractable networks. In NIPS, Vol-
ume 8.
Saul, L. and M. Jordan (2000). Attrac-
tor dynamics in feedforward neural
networks.Neural Computation 12,
1313–1335.
Saunders, C., J. Shawe-Taylor, and
A. Vinokourov (2003). String Ker-
nels, FisherKernelsandFiniteStateAutomata. In NIPS.
Savage, R., K. Heller, Y. Xi, Z. Ghahra-
mani, W. Truman, M. Grant,K. Denby, and D. Wild (2009).R/BHC: fast Bayesian hierarchi-cal clustering for microarray data.
BMCBioinformatics 10 (242).Schaefer, J. and K. Strimmer (2005).
A shrinkage approach to large-
scale covariance matrix estimationand implications for functional ge-
nomics.Statist. Appl. Genet. Mol.
Biol 4(32).
Schapire, R. (1990). The strength of
weak learnability. Machine Learn-
ing 5, 197–227.
Schapire, R. and Y. Freund (2012).
Boosting: Foundations and Algo-
rithms. MIT Press.
Schapire, R., Y. Freund, P. Bartlett, and
W. Lee (1998). Boosting the mar-
gin: a new explanation for the ef-fectiveness of voting methods. An-
nalsofStatistics 5, 1651–1686.
Schar
stein, D. and R. Szeliski (2002). A
taxonomy and evaluation of densetwo-frame stereo correspondence
algorithms. Intl. J. Computer Vi-
sion 47(1), 7–42.
Schaul, T., S. Zhang, and Y. LeCun
(2012). No more pesky learning
rates. Technical report, Courant In-stite of Mathematical Sciences.
Schmee, J. and G. Hahn (1979). A sim-
ple method for regresssion analy-
sis with censored data. Technomet-
rics 21, 417–432.
Schmidt, M. (2010). Graphical model
structure learning with L1 regular-
ization. Ph.D. thesis, UBC.
Schmidt, M., G. Fung, and R. Rosales
(2009). Optimization methods for/lscript−1regularization. Technical re-
port, U. British Columbia.
Schmidt, M. and K. Murphy (2009).
Modeling Discrete InterventionalData using Directed Cyclic Graphi-cal Models. In UAI.
Schmidt, M., K. Murphy, G. Fung, and
R. Rosales (2008). Structure Learn-ing in Random Fields for HeartMotion Abnormality Detection. InCVPR.
Schmidt, M., A. Niculescu-Mizil, and
K. Murphy (2007). Learning Graph-ical Model Structure using L1-Regularization Paths. In AAAI.
Schmidt, M., E. van den Berg,
M. Friedlander, and K. Murphy(2009). Optimizing Costly Func-tions with Simple Constraints: ALimited-Memory Projected Quasi-Newton Algorithm. In AI & Statis-
tics.Schniter, P., L. C. Potter, and J. Ziniel
(2008). Fast Bayesian MatchingPursuit: Model Uncertainty andParameter Estimation for SparseLinear Models. Technical report, U.Ohio. Submitted to IEEE Trans. onSignal Processing.
Schnitzspan, P., S. Roth, and B. Schiele
(2010). Automatic discovery ofmeaningful object parts with latentCRFs. InCVPR.
Schoelkopf, B. and A. Smola (2002).
LearningwithKernels: SupportVec-
tor Machines, Regularization, Opti-mization,andBeyond. MIT Press.
Schoelkopf, B., A. Smola, and K.-R.
Mueller (1998). Nonlinear compo-
nent analysis as a kernel eigen-
value problem. Neural Computa-
tion 10, 1299 – 1319.
Schraudolph, N. N., J. Yu, and S. Gün-
ter (2007). A Stochastic Quasi-
Newton Method for Online ConvexOptimization. In AI/Statistics, pp.
436–443.
Schwarz, G. (1978). Estimating the di-
mension of a model. Annals of
Statistics 6 (2), 461â˘A¸S464.
Schwarz, R. and Y. Chow (1990). The
n-best algorithm: an efficient andexact procedure for ﬁnding the n
most likely hypotheses. In Intl.
Conf. on Acoustics, Speech and Sig-
nalP
roc.
Schweikerta, G., A. Zien, G. Zeller,
J. Behr, C. Dieterich, C. Ong,
P. Philips, F. D. Bona, L. Hartmann,
A. Bohlen, N. KrÃijger, S. Son-
nenburg, and G. RÃd’tsch (2009).
mGene: Accurate SVM-based GeneFinding with an Application to Ne-matode Genomes. Genome Re-
search, 19, 2133–2143.
Scott, D. (1979). On optimal
and data-based histograms.
Biometrika 66 (3), 605–610.
Scott, J. G. and C. M. Carvalho (2008).
Feature-inclusion stochastic search
for gaussian graphical models. J.
of Computational and GraphicalStatistics 17 (4), 790–808.
Scott, S. (2009). Data augmenta-
tion, frequentist estimation, andthe bayesian analysis of multino-
mial logit models. StatisticalPapers .
Scott, S. (2010). A modern Bayesian
look at the multi-armed bandit.
Applied Stochastic Models in Busi-
nessandIndustry 26, 639–658.
BIBLIOGRAPHY 1039
Sedgewick, R. and K. Wayne (2011). Al-
gorithms. Addison Wesley.
Seeger, M. (2008). Bayesian Inference
and Optimal Design in the Sparse
Linear Model. J.ofMachineLearn-
ingResearch 9, 759–813.
Seeger, M. and H. Nickish (2008).
Compressed sensing and bayesianexperimental design. In Intl. Conf.
onMachineLearning.
Segal, D. (2011, 12 February). The dirty
little secrets of search. New York
Times.
Seide, F., G. Li, and D. Yu (2011). Con-
versational Speech Transcription
Using Context-Dependent Deep
Neural Networks. In Interspeech.
Sejnowski, T. and C. Rosenberg (1987).
Parallel networks that learn to pro-nounce english text. Complex Sys-
tems 1, 145–168.
Sellke, T., M. J. Bayarri, and J. Berger
(2001). Calibration of p Values
for Testing Precise Null Hypothe-
ses.TheAmericanStatistician 55 (1),
62–71.
Serre, T., L. Wolf, and T. Poggio (2005).
Object recognition with features
inspired by visual cortex. In CVPR,
pp. 994–1000.
Shachter, R. (1998). Bayes-ball: The
rational pastime (for determiningirrelevance and requisite informa-tion in belief networks and inﬂu-ence diagrams). In UAI.
Shachter, R. and C. R. Kenley
(1989). Gaussian inﬂuence dia-grams.Managment Science 35 (5),
527–550.
Shachter, R. D. and M. A. Peot (1989).
Simulation approaches to generalprobabilistic inference on beliefnetworks. In UAI, Volume 5.
Shafer, G. R. and P. P. Shenoy (1990).
Probability propagation. Annals of
MathematicsandAI 2, 327–352.
Shafto, P., C. Kemp, V. Mansinghka,
M. Gordon, and J. B. Tenenbaum(2006). Learning cross-cutting sys-tems of categories. In CognitiveSci-
enceConference.
Shahaf, D., A. Chechetka, and
C. Guestrin (2009). Learning ThinJunction Trees via Graph Cuts. InAISTATS.Shalev-Shwartz, S., Y. Singer, and
N. Srebro (2007). Pegasos: pri-mal estimated sub-gradient solver
for svm. In Intl. Conf. on Machine
Learning.
Shalizi, C. (2009). Cs 36-350 lecture
10: Principal components: mathe-
matics, example, interpretation.
Shan, H. and A. Banerjee (2010). Resid-
ual Bayesian co-clustering for ma-
trix approximation. In SIAM Intl.
Conf.onDataMining.
Shawe-Taylor, J. and N. Cristianini
(2004).Kernel Methods for Pattern
Analysis. Cambridge.
Sheng, Q., Y. Moreau, and B. D. Moor
(2003). BiclusteringMicroarraydata
by Gibbs sampling. Bioinf
 ormat-
ics 19, ii196–ii205.
Shi, J. and J. Malik (2000). Normal-
ized cuts and image segmentation.
IEEETrans.onPatternAnalysisand
MachineIntelligence .
Shoham, Y. and K. Leyton-Brown
(2009).Multiagent Systems: Algo-
rithmic, Game- Theoretic, and Log-ical Foundations. Cambridge Uni-
versity Press.
Shotton, J., A. Fitzgibbon, M. Cook,
T. Sharp, M. Finocchio, R. Moore,A. Kipman, and A. Blake (2011).Real-time human pose recognitionin parts from a single depth image.InCVPR.
Shwe, M., B. Middleton, D. Heck-
erman, M. Henrion, E. Horvitz,H. Lehmann, and G. Cooper (1991).Probabilistic diagnosis using a re-formulation of the internist-1/qmr
knowledge base. Methods. Inf.
Med 30(4), 241–255.
Siddiqi, S., B. Boots, and G. Gordon
(2007). A constraint generation ap-
proach to learning stable linear dy-namical systems. In NIPS.
Siepel, A. and D. Haussler (2003).
Combining phylogenetic and hid-den markov models in biosequence
analysis. In Proc. 7th Intl. Conf.
on Computational Molecular Biol-
ogy(RECOMB).
Silander, T., P. Kontkanen, and P. Myl-
lymÃd’ki (2007). On Sensitivity ofthe MAP Bayesian Network Struc-ture to the Equivalent Sample SizeParameter. In UAI, pp. 360–367.Silander, T. and P. Myllmaki (2006).
A simple approach for ﬁnding theglobally optimal Bayesian networkstructure. In UAI.
Sill, J., G. Takacs, L. Mackey, and
D. Lin (2009). Feature-weighted lin-ear stacking. Technical report, .
Silverman, B. W. (1984). Spline
smoothing: the equivalent variable
kernel method. Annals of Statis-
tics 12(3), 898–916.
Simard, P., D. Steinkraus, and J. Platt
(2003). Best practices for convolu-
tional neural networks applied to
visual document analysis. In Intl.
Conf. on Document Analysis and
Recognition(ICDAR).
Simon, D. (2006). Optimal State Es-
timation: Kalman, H Inﬁnity, and
NonlinearApproaches. Wiley.
Singliar, T. and M. Hauskrecht (2006).
Noisy-OR Component Analysis and
its Application to Link Analysis. J.
ofMachineLearningResearch 7.
Smidl, V. and A. Quinn (2005). The
Variational Bayes Method in SignalProcessing. Springer.
Smith, A. F. M. and A. E. Gelfand
(1992). Bayesian statistics with-out tears: A sampling-resampling
perspective. The American Statisti-
cian 46(2), 84–88.
Smith, R. and P. Cheeseman (1986).
On the representation and estima-tion of spatial uncertainty. Intl. J.
Robo
ticsResearch 5 (4), 56–68.
Smith, V., J. Yu, T. Smulders,
A. Hartemink, and E. Jarvis (2006).
Computational Inference of NeuralInformation Flow Networks. PLOS
Computational Biology 2, 1436–1439.
Smolensky, P. (1986). Information
processing in dynamical systems:foundations of harmony theory.In D. Rumehart and J. McClel-land (Eds.),ParallelDistributedPro-
cessing: Explorations in the Mi-
crostructure of Cognition. Volume 1.
McGraw-Hill.
Smyth, P., D. Heckerman, and M. I. Jor-
dan (1997). Probabilistic indepen-dence networks for hidden Markovprobability models. NeuralCompu-
tation 9(2), 227–269.
Sohl-Dickstein, J., P. Battaglino, and
M. DeWeese (2011). In Intl. Conf.
onMachineLearning.
1040 BIBLIOGRAPHY
Sollich, P. (2002). Bayesian methods
for support vector machines: evi-
dence and predictive class proba-
bilities.Machine Learning 46, 21–
52.
Sontag, D., A. Globerson, and
T. Jaakkola (2011). Introduction to
dual decomposition for inference.In S. Sra, S. Nowozin, and S. J.Wright (Eds.), OptimizationforMa-
chineLearning. MIT Press.
Sorenson, H. and D. Alspach (1971).
Recursive Bayesian estimation us-ing Gaussian sums. Automatica 7,
465â˘A¸S 479.
Soussen, C., J. Iier, D. Brie, and
J. Duan (2010). From Bernoulli-Gaussian deconvolution to sparsesignal restoration. Technical report,Centre de Recherche en Automa-tique de Nancy.
Spaan, M. and N. Vlassis (2005).
Perseus: Randomized Point-basedValue Iteration for POMDPs. J.ofAI
Research 24, 195–220.
Spall, J. (2003). IntroductiontoStochas-
tic Search and Optimization: Es-
timation, Simulation, and Control.
Wiley.
Speed, T. (2011, December). A cor-
relation for the 21st century. Sci-
ence 334, 152–1503.
Speed, T. and H. Kiiveri (1986). Gaus-
sian Markov distributions over ﬁ-nite graphs. Annals of Statis-
tics 14(1), 138–150.
Spiegelhalter, D. J. and S. L. Lauritzen
(1990). Sequential updating of con-ditional probabilities on directed
graphical structures. Networks 20.
Spirtes, P., C. Glymour, and
R. Scheines (2000). Causa-
tion, Prediction, and Search. MIT
Press. 2nd edition.
Srebro, N.(2001). MaximumLikelihood
Bounded Tree-Width Markov Net-works. InUAI.
Srebro, N. and T. Jaakkola (2003).
Weighted low-rank approxima-
tions. InIntl. Conf. on Machine
Learning.
Steinbach, M., G. Karypis, and V. Ku-
mar (2000). A comparison of doc-
ument clustering techniques. In
KDDWorkshoponTextMining.Stephens, M. (2000). Dealing with
label-switching in mixture mod-els.J.RoyalStatisticalSociety,Series
B6 2, 795–809.
Stern, D., R. Herbrich, and T. Grae-
pel (2009). Matchbox: Large Scale
Bayesian Recommendations. In
Proc. 18th. Intl. World Wide Web
Conference.
Steyvers, M. and T. Griffiths (2007).
Probabilistic topic models. InT. Landauer, D. McNamara, S. Den-nis, and W. Kintsch (Eds.), Latent
SemanticAnalysis: ARoadtoMean-ing. Laurence Erlbaum.
Stigler, S. (1986). The history of statis-
tics. Harvard University press.
Stolc
ke, A. and S. M. Omohundro
(1992). Hidden Markov Model In-duction by Bayesian Model Merg-ing. InNIPS-5.
Stoyanov, V., A. Ropson, and J. Eis-
ner (2011). Empirical risk minimiza-tion of graphical model parametersgiven approximate inference, de-coding, and model structure. InAI/Statistics.
Sudderth, E. (2006). Graphical Models
for Visual Object Recognition and
Tracking. Ph.D. thesis, MIT.
Sudderth, E. and W. Freeman (2008,
March). Signal and Image Process-
ing with Belief Propagation. IEEE
SignalProcessingMagazine .
Sudderth, E., A. Ihler, W. Freeman, and
A. Willsky (2003). NonparametricBelief Propagation. In CVPR.
Sudderth, E., A. Ihler, M. Isard,
W. Freeman, and A. Willsky (2010).Nonparametric Belief Propagation.
Comm.oftheACM 53 (10).
Sudderth, E. and M. Jordan (2008).
Shared Segmentation of Natural
Scenes Using Dependent Pitman-
Yor Processes. In NIPS.
Sudderth, E., M. Wainwright, and
A. Willsky (2008). Loop series andbethe variational bounds for attrac-tive graphical models. In NIPS.
Sun, J., N. Zheng, and H. Shum
(2003). Stereo matching using be-lief propagation. IEEETrans.onPat-
tern Analysis and Machine Intelli-gence 25(7), 787–800.Sun, L., S. Ji, S. Yu, and J. Ye (2009). On
the equivalence between canonicalcorrelation analysis and orthonor-malized partial least squares. In
Intl.JointConf.onAI.
Sunehag, P., J. Trumpf, S. V. N. Vish-
wanathan, and N. N. Schraudolph
(2009). Variable Metric StochasticApproximation Theory. In AI/Statis-
tics, pp. 560–566.
Sutton, C. and A. McCallum (2007).
Improved Dynamic Schedules forBelief Propagation. In UAI.
Sutton, R. and A. Barto (1998). Rein-
forcmentLearning: AnIntroduction.MIT Press.
Swendsen, R. and J.-S. Wang (1987).
Nonuniversal critical dynamics in
Monte Carlo simulations. Physical
ReviewLetters 58 , 86–88.
Swersky, K., B. Chen, B. Marlin, and
N. de Freitas (2010). A Tuto-
rial on Stochastic ApproximationAlgorithms for Training RestrictedBoltzmann Machines and Deep Be-
lief Nets. In InformationTheoryand
Applications(ITA)Workshop.
Szeliski, R. (2010). Computer Vi-
sion: Algorithms and Applications.
Springer.
Szeliski, R., R. Zabih, D. Scharstein,
O. Veksler, V. Kolmogorov, A. Agar-wala, M. Tappen, and C. Rother(2008). A Comparative Studyof Energy Minimization Methodsfor Markov Random Fields withSmoothness-Based
Priors.IEEE
Trans. on Pattern Analysis and Ma-
chineIntelligence 30 (6), 1068–1080.
Szepesvari, C. (2010). Algorithms for
Reinforcement Learning . Morgan
Claypool.
Taleb, N. (2007). The Black Swan:
The Impact of the Highly Improba-ble. Random House.
Talhouk, A., K. Murphy, and A. Doucet
(2011). Efficient Bayesian Inference
for Multivariate Probit Models withSparse Inverse Correlation Matri-
ces.J.Comp.Graph.Statist..
Tanner, M. (1996). Tools for statistical
inference. Springer.
Tanner, M. and W. Wong (1987). The
calculation of posterior distribu-tions by data augmentation. J. of
the Am. Stat. Assoc. 82 (398), 528–
540.
BIBLIOGRAPHY 1041
Tarlow, D., I. Givoni, and R. Zemel
(2010). Hop-map: efficient message
passing with high order potentials.InAI/Statistics.
Taskar, B., C. Guestrin, and D. Koller
(2003). Max-margin markov net-works. InNIPS.
Taskar, B., D. Klein, M. Collins,
D. Koller, and C. Manning (2004).Max-margin parsing. In Proc. Em-
pirical Methods in Natural Lan-guageProcessing.
Teh, Y. W. (2006). A hierarchical
Bayesian language model based on
Pitman-Yor processes. In Proc. of
the Assoc. for Computational Lin-
guistics, pp. 985=992.
Teh, Y.-W., M. Jordan, M. Beal, and
D. Blei (2006). Hierarchical Dirich-let processes. J.oftheAm.Stat.As-
soc. 101(476), 1566–1581.
Tenenbaum, J. (1999). A Bayesian
framework for concept learning.Ph.D. thesis, MIT.
Tenenbaum, J. B. and F. Xu (2000).
Word learning as bayesian infer-
ence. InProc.22ndAnnualConf.of
theCognitiveScienceSociety.
Theocharous, G., K. Murphy, and
L. Kaelbling (2004). Representing
hierarchical POMDPs as DBNs formulti-scale robot localization. InIEEEIntl.Conf.onRoboticsandAu-tomation.
Thiesson, B., C. Meek, D. Chickering,
and D. Heckerman (1998). Learningmixtures of DAG models. In UAI.
Thomas, A. and P. Green (2009).
Enumerating the decomposableneighbours of a decomposablegraph under a simple perturbation
scheme.Comp. Statistics and Data
Analysis 53, 1232–1238.
Thrun, S., W. Burgard, and D. Fox
(2006).Probabilistic Robotics. MIT
Press.
Thrun, S., M. Montemerlo, D. Koller,
B. Wegbreit, J. Nieto, and E. Nebot
(2004). Fastslam: An efficient so-lution to the simultaneous local-ization and mapping problem with
unknown data association. J. of
MachineLearningResearch 2004.
Thrun, S. and L. Pratt (Eds.) (1997).
Learningtolearn. Kluwer.Tibshirani, R. (1996). Regression
shrinkage and selection via thelasso.J. Royal. Statist. Soc B 58 (1),
267–288.
Tibshirani, R., G. Walther, and
T. Hastie (2001). Estimating the
number of clusters in a dataset viathe gap statistic. J.ofRoyalStat.Soc.
SeriesB 32 (2), 411–423.
Tieleman, T. (2008). Training re-
stricted Boltzmann machines us-ing approximations to the likeli-
hood gradient. In Proceedings of
the25thinternationalconferenceon
Machine learning, pp. 1064–1071.
ACM New York, NY, USA.
Ting, J., A. D’Souza, S. Vijayakumar,
and S. Schaal (2010). Efficientlearning and feature selection inhigh-dimensional regression. Neu-
ral
Computation 22 (4), 831–886.
Tipping, M. (1998). Probabilistic visual-
ization of high-dimensional binarydata. InNIPS.
Tipping, M. (2001). Sparse bayesian
learning and the relevance vector
machine.J. of Machine Learning
Research 1, 211–244.
Tipping, M. and C. Bishop (1999).
Probabilistic principal componentanalysis.J. of Royal Stat. Soc. Series
B2 1(3), 611–622.
Tipping, M. and A. Faul (2003). Fast
marginal likelihood maximisation
for sparse bayesian models. In AI/S-
tats.
Tishby, N., F. Pereira, and W. Biale
(1999). The information bottle-neck method. In The 37th an-
nualAllertonConf.onCommunica-
tion, Control, and Computing, pp.
368â˘A¸S377.
Tomas, M., D. Anoop, K. Stefan,
B. Lukas, and C. Jan (2011). Empir-
ical evaluation and combination ofadvanced language modeling tech-
niques. InProc. 12th Annual Conf.
of the Intl. Speech Communication
Association(INTERSPEECH).
Torralba, A., R. Fergus, and Y. Weiss
(2008). Small codes and large im-age databases for recognition. InCVPR.
Train, K. (2009). Discrete choice meth-
ods with simulation. CambridgeUniversity Press. Second edition.Tseng, P. (2008). On Accelerated Proxi-
mal Gradient Methods for Convex-Concave Optimization. Technicalreport, U. Washington.
Tsochantaridis, I., T. Joachims, T. Hof-
mann, and Y. Altun (2005, Septem-ber). Large margin methodsfor structured and interdependent
output variables. J. of Machine
LearningResearch 6, 1453–1484.
Tu, Z. and S. Zhu (2002). Image Seg-
mentation by Data-Driven Markov
Chain Monte Carlo. IEEETrans.on
PatternAnalysisandMachineIntel-
ligence 24 (5), 657–673.
Turian, J., L. Ratinov, and Y. Ben-
gio (2010). Word representations:
a simple and general method forsemi-supervised learning. In Proc.
ACL.
Turlach, B., W. Venables, and S. Wright
(2005). Simultaneous variable se-lection.Technometrics 47 (3), 349–
363.
Turner, R., P. Berkes, M. Sahani, and
D. Mackay (2008). Counterexam-ples to variational free energy com-pactness folk theorems. Technicalreport, U. Cambridge.
Ueda, N. and R. Nakano (1998). Deter-
ministic annealing EM algorithm.
NeuralNetworks 11, 271–282.
Usunier, N., D. Buffoni, and P. Galli-
nari (2009). Ranking with ordered
weighted pairwise classiﬁcation.
Vaithyanathan, S. and B. Dom (1999).
Model selection in unsupervisedlearning with applications to doc-
ument clustering. In Intl. Conf. on
MachineLearning.
van
der Merwe, R., A. Doucet,
N. de Freitas, and E. Wan (2000).
The unscented particle ﬁlter. In
NIPS-13.
van Dyk, D. and X.-L. Meng (2001).
The Art of Data Augmentation.
J. Computational and Graphical
Statistics 10 (1), 1–50.
Vandenberghe, L. (2006). Applied nu-
merical computing: Lecture notes.
Vandenberghe, L. (2011). Ee236c - op-
timization methods for large-scalesystems.
Vanhatalo, J. (2010). Speeding up the
inference in Gaussian process mod-
els. Ph.D. thesis, Helsinki Univ.
Technology.
1042 BIBLIOGRAPHY
Vanhatalo, J., V. PietilÃd’inen, and
A. Vehtari (2010). Approximate in-
ference for disease mapping withsparse gaussian processes. Statis-
ticsinMedicine 29 (15), 1580–1607.
Vapnik, V. (1998). Statistical Learning
Theory. Wiley.
Vapnik, V., S. Golowich, and A. Smola
(1997). Support vector method forfunction approximation, regressionestimation, and signal processing.InNIPS.
Varian, H. (2011). Structural time series
in R: a Tutorial. Technical report,Google.
Verma, T. and J. Pearl (1990). Equiva-
lence and synthesis of causal mod-els. InUAI.
Viinikanoja, J., A. Klami, and S. Kaski
(2010). VariationalBayesianMixtureof Robust CCA Models. In Proc.Eu-
ropeanConf.onMachineLearning.
Vincent, P. (2011). A Connection be-
tween Score Matching and Denois-
ing Autoencoders. Neural Compu-
tation 23(7), 1661–1674.
Vincent, P., H. Larochelle, I. La-
joie, Y. Bengio, and P.-A. Manzagol
(2010). Stacked Denoising Autoen-coders: Learning Useful Represen-tations in a Deep Network with a
Local Denoising Criterion. J.ofMa-
chine Learning Research 11, 3371–
3408.
Vinh, N., J. Epps, and J. Bailey (2009).
Information theoretic measures forclusterings comparison: Is a cor-rection for chance necessary? In
Intl.Conf.onMachineLearning.
Vinyals, M., J. Cerquides, J. Rodriguez-
Aguilar, and A. Farinelli (2010).
Worst-case bounds on the quality
of max-product ﬁxed-points. InNIPS.
Viola, P. and M. Jones (2001). Rapid
object detection using a boostedcascade of simple classiﬁers. InCVPR.
Virtanen, S. (2010). Bayesian expo-
nential family projections. Master’sthesis, Aalto University.
Vishwanathan, S. V. N. and A. Smola
(2003). Fast kernels for string andtree matching. In NIPS.Viterbi, A. (1967). Error bounds
for convolutional codes and anasymptotically optimum decoding
algorithm.IEEE Trans. on Informa-
tionTheory 13 (2), 260â˘A¸S269.
von Luxburg, U. (2007). A tutorial on
spectral clustering. Statistics and
Computing 17 (4), 395–416.
Wagenmakers, E.-J., R. Wetzels,
D. Borsboom, and H. van der
Maas (2011). Why PsychologistsMust Change the Way They Ana-lyze Their Data: The Case of Psi.
Journal of Personality and Social
Psychology .
Wagner, D. and F. Wagner (1993). Be-
tween min cut and graph bisec-
tion. InProc. 18th Intl. Symp. on
Math.Found.ofComp.Sci., pp.744–
750.
Wain
wright, M., T. Jaakkola, and
A. Willsky (2001). Tree-based repa-rameterization for approximate es-
timation on loopy graphs. In NIPS-
14.
Wainwright, M., T. Jaakkola, and
A. Willsky (2005). A new class
of upper bounds on the log parti-
tion function. IEEETrans.Info.The-
ory 51(7), 2313–2335.
Wainwright, M., P. Ravikumar, and
J. Lafferty (2006). Inferring graph-
ical model structure using /lscript−1-
regularized pseudo-likelihood. InNIPS.
Wainwright, M. J., T. S. Jaakkola, and
A. S. Willsky (2003). Tree-basedreparameterization framework foranalysis of sum-product and re-lated algorithms. IEEETrans.onIn-
formationTheory 49 (5), 1120–1146.
Wainwright, M. J. and M. I. Jordan
(2008a). Graphical models, expo-nential families, and variational in-ference.FoundationsandTrendsin
MachineLearning 1–2, 1–305.
Wainwright, M. J. and M. I. Jordan
(2008b). Graphical models, expo-nential families, and variational in-ference.FoundationsandTrendsin
MachineLearning 1–2, 1–305.
Wallach, H., I. Murray, R. Salakhutdi-
nov, and D. Mimno (2009). Evalua-tion methods for topic models. In
Intl.Conf.onMachineLearning.
Wan, E. A. and R. V. der Merwe (2001).
The Unscented Kalman Filter. In
S. Haykin (Ed.), Kalman Filtering
andNeuralNetworks. Wiley.Wand, M. (2009). Semiparametric
regression and graphical models.Aus t .N.Z.J.S t a t .51 (1), 9–41.
Wand, M. P., J. T. Ormerod, S. A.
Padoan, and R. Fruhrwirth (2011).Mean Field Variational Bayes forElaborate Distributions. Bayesian
Analysis 6 (4), 847 – 900.
Wang, C. (2007). Variational Bayesian
Approach to Canonical Correlation
Analysis.IEEETrans.onNeuralNet-
works 18(3), 905–910.
Wasserman, L. (2004). All of statistics.
A concise course in statistical infer-
ence. Springer.
Wei, G. and M. Tanner (1990). A Monte
CarloimplementationoftheEMal-gorithm and the poor man’s data
augmentation algorithms. J. of the
Am.Stat.Assoc. 85 (411), 699–704.
Weinberger, K., A. Dasgupta, J. Atten-
berg, J. Langford, and A. Smola
(2009). Feature hashing for large
scale multitask learning. In Intl.
Conf.onMachineLearning.
Weiss, D., B. Sapp, and B. Taskar
(2010). Sidestepping intractable in-
ference with structured ensemblecascades. In NIPS.
Weiss, Y. (2000). Correctness of local
probability propagation in graph-
ical models with loops. Neural
Computation 12 , 1–41.
Weiss,
Y. (2001). Comparing the mean
ﬁeld method and belief propaga-
tion for approximate inference in
MRFs. In Saad and Opper (Eds.),
AdvancedMeanFieldMethods. MIT
Press.
Weiss, Y. and W. T. Freeman (1999).
Correctness of belief propagationin Gaussian graphical models of ar-bitrary topology. In NIPS-12.
Weiss, Y. and W. T. Freeman (2001a).
Correctness of belief propagationin Gaussian graphical models of ar-
bitrary topology. Neural Computa-
tion 13(10), 2173–2200.
Weiss, Y. and W. T. Freeman (2001b).
On the optimality of solutions of
the max-product belief propaga-tion algorithm in arbitrary graphs.
IEEE Trans. Information Theory,
Special Issue on Codes on GraphsandIterativeAlgorithms 47 (2), 723–
735.
Weiss, Y., A. Torralba, and R. Fergus
(2008). Spectral hashing. In NIPS.
BIBLIOGRAPHY 1043
Welling, M., C. Chemudugunta, and
N. Sutter (2008). Deterministic la-
tent variable models and their pit-
falls. InIntl.Conf.onDataMining.
Welling, M., T. Minka, and Y. W. Teh
(2005). Structured region graphs:
Morphing EP into GBP. In UAI.
Welling, M., M. Rosen-Zvi, and G. Hin-
ton (2004). Exponential family har-moniums with an application toinformation retrieval. In NIPS-14.
Welling, M. and C. Sutton (2005).
Learning in Markov random ﬁeldswith contrastive free energies. In
Tenth International Workshop on
Artiﬁcial Intelligence and Statistics
(AISTATS).
Welling, M. and Y.-W. Teh (2001). Belief
optimization for binary networks:a stable alternative to loopy beliefpropagation. In UAI.
Werbos, P. (1974). Beyond regression:
NewToolsforPredictionandAnaly-
sisintheBehavioralSciences. Ph.D.
thesis, Harvard.
West, M. (1987). On scale mix-
tures of normal distributions.Biometrika 74, 646–648.
West, M. (2003). Bayesian Factor Re-
gression Models in the "Large p,Small n" Paradigm. BayesianStatis-
tics7.
West, M. and J. Harrison (1997).
Bayesian forecasting and dynamic
models. Springer.
Weston, J., S. Bengio, and N. Usunier
(2010). Large Scale Image Annota-
tion: Learning to Rank with JointWord-Image Embeddings. In Proc.
European Conf. on Machine Learn-ing.
Weston, J., F. Ratle, and R. Collobert
(2008). Deep Learning via Semi-
Supervised Embedding. In Intl.
Conf.onMachineLearning.
Weston, J. and C. Watkins (1999).
Multi-lcass support vector ma-
chines. InESANN.
Wiering, M. and M. van Otterlo
(Eds.) (2012). Reinforcement learn-
ing: State-of-the-art. Springer.
Wilkinson, D. and S. Yeung (2002).
Conditional simulation from highlystructured gaussian systems withapplication to blocking-mcmc forthe bayesian analysis of very large
linear models. Statistics and Com-
puting 12, 287–300.Williams, C. (1998). Computation with
inﬁnite networks. NeuralComputa-
tion 10(5), 1203–1216.
Williams, C. (2000). A MCMC ap-
proach to Hierarchical Mixture
Modelling . In S. A. Solla, T. K.Leen, and K.-R. Müller (Eds.), NIPS.
MIT Press.
Williams, C. (2002). On a Connec-
tion between Kernel PCA and Met-ric Multidimensional Scaling. Ma-
chineLearningJ. 46 (1).
Williams, O. and A. Fitzgibbon (2006).
Gaussian process implicit surfaces.InGaussianprocessesinpractice.
Williamson, S. and Z. Ghahramani
(2008). Pr
obabilistic models for
data combination in recommendersystems. In NIPS Workshop on
LearningfromMultipleSources.
Winn, J. and C. Bishop (2005). Varia-
tional message passing. J. of Ma-
chine Learning Research 6, 661–694.
Wipf, D. and S. Nagarajan (2007). A
new view of automatic relevancydetermination. In NIPS.
Wipf, D. and S. Nagarajan (2010, April).
Iterative Reweighted /lscript−1and/lscript−2
Methods for Finding Sparse Solu-
tions.J.ofSelectedTopicsinSignal
Processing (Special Issue on Com-
pressiveSensing) 4 (2).
Wipf, D., B. Rao, and S. Nagarajan
(2010). Latent variable bayesianmodels for promoting sparsity.
IEEE Transactions on Information
Theory.
Witten, D., R. Tibshirani, and T. Hastie
(2009). A penalized matrix de-
composition, with applications tosparse principal components andcanonical correlation analysis. Bio-
statistics 10 (3), 515–534.
Wolpert, D. (1992). Stacked generaliza-
tion.NeuralNetworks5 (2), 241–259.
Wolpert, D. (1996). The lack of a priori
distinctions between learning algo-
rithms.Neural Computation 8 (7),
1341–1390.
Wong, F., C. Carter, and R. Kohn
(2003). Efficient estimation of
covariance selection models.Biometrika 90 (4), 809–830.Wood, F., C. Archambeau, J. Gasthaus,
L. James, and Y. W. Teh (2009). Astochastic memoizer for sequence
data. InIntl. Conf. on Machine
Learning.
Wright, S., R. Nowak, and
M. Figueiredo (2009). Sparse
reconstruction by separable ap-
proximation. IEEE Trans. on Signal
Processing 57 (7), 2479–2493.
Wu, T. T. and K. Lange (2008). Coordi-
nate descent algorithms for lassopenalized regression. Ann. Appl.
Stat 2(1), 224–244.
Wu, Y., H. Tjelmeland, and M. West
(2007). Bayesian CART: Prior struc-
ture and MCMC computations. J.
of Computational and GraphicalStatistics 16 (1), 44–66.
Xu, F. and J. Tenenbaum (2007). Word
learning as Bayesian inference. Psy-
chologicalReview 114 (2).
Xu, Z., V. Tresp, A. Rettinger, and
K. Kersting (2008). Social net-work mining with nonparametric
relational models. In ACM Work-
shoponSocialNetworkMiningand
Analysis(SNA-KDD2008).
Xu, Z., V. Tresp, K. Yu, and H.-P.
Kriegel
(2006). Inﬁnite hidden rela-
tional models. In UAI.
Xu, Z., V. Tresp, S. Yu, K. Yu, and H.-P.
Kriegel (2007). Fast inference in in-
ﬁnite hidden relational models. InWorkshop on Mining and Learning
withGraphs.
Xue, Y., X. Liao, L. Carin, and B. Krish-
napuram (2007). Multi-task learn-
ing for classiﬁcation with dirichlet
process priors. J.ofMachineLearn-
ingResearch 8 , 2007.
Yadollahpour, P., D. Batra, and
G.Shakhnarovich(2011). DiverseM-
best Solutions in MRFs. In NIPS
workshop on Disrete Optimization
inMachineLearning.
Yan, D., L. Huang, and M. I. Jordan
(2009). Fast approximate spectral
clustering. In 15th ACM Conf. on
KnowledgeDiscoveryandDataMin-
ing.
Yang, A., A. Ganesh, S. Sastry, and
Y. Ma (2010, Feb). Fast l1-minimization algorithms and anapplication in robust face recog-nition: A review. Technical Re-port UCB/EECS-2010-13, EECS De-partment, University of California,Berkeley.
1044 BIBLIOGRAPHY
Yang, C., R. Duraiswami, and L. David
(2005). Efficient kernel machines
using the improved fast Gausstransform. In NIPS.
Yang, S., B. Long, A. Smola, H. Zha,
and Z. Zheng (2011). Collaborativecompetitive ﬁltering: learning rec-ommender using context of user
choice. InProc. Annual Intl. ACM
SIGIRConference.
Yanover, C., O. Schueler-Furman, and
Y. Weiss (2007). Minimizing and
Learning Energy Functions for
Side-Chain Prediction. In Recomb.
Yaun, G.-X., K.-W. Chang, C.-J. Hsieh,
and C.-J. Lin (2010). A Comparison
of Optimization Methods and Soft-ware for Large-scale L1-regularized
Linear Classiﬁcation. J. of Machine
LearningResearch 11, 3183–3234.
Yedidia, J., W. T. Freeman, and
Y. Weiss (2001). Understanding be-
lief propagation and its generaliza-
tions. InIntl.JointConf.onAI.
Yoshida, R. and M. West (2010).
Bayesian learning in sparse graphi-
cal factor models via annealed en-tropy.J. of Machine Learning Re-
search 11, 1771–1798.
Younes, L. (1989). Parameter estima-
tion for imperfectly observed Gibb-
sian ﬁelds.Probab.TheoryandRe-
latedFields 82, 625–645.
Yu, C. and T. Joachims (2009). Learn-
ing structural SVMs with latentvariables. In Intl.Conf.onMachine
Learning.
Yu, S., K. Yu, V. Tresp, K. H-P., and
M. Wu (2006). Supervised proba-
bilistic principal component anal-
ysis. InProc. of the Int’l Conf. on
KnowledgeDiscoveryandDataMin-
ing.
Yu, S.-Z. and H. Kobayashi (2006).
Practical implementation of an ef-ﬁcient forward-backward algorithmfor an explicit-duration hiddenMarkov model. IEEE Trans. on Sig-
nalProcessing 54 (5), 1947– 1951.
Yuan, M. and Y. Lin (2006). Model
selection and estimation in re-gression with grouped variables.
J. Royal Statistical Society, Series
B6 8(1), 49–67.
Yuan, M. and Y. Lin (2007).
Model selection and estimationin the gaussian graphical model.
Biometrika 94 (1), 19–35.Yuille, A. (2001). CCCP algorithms
to minimze the Bethe and Kikuchi
free energies: convergent alterna-
tives to belief propagation. Neural
Computation 14, 1691–1722.
Yuille, A. and A. Rangarajan (2003).
The concave-convex procedure.NeuralComputation 15, 915.
Yuille, A. and S. Zheng (2009). Com-
positional noisy-logical learning. InIntl.Conf.onMachineLearning.
Yuille, A. L. and X. He (2011). Proba-
bilistic models of vision and max-
margin methods. Frontiers of
Electrical and Electronic Engineer-ing 7(1).
Zellner, A. (1986). On assessing prior
distributions and bayesian regres-sion analysis with g-prior distri-
butions. In Ba
 yesian inference
and decision techniques, Studies
of Bayesian and Econometrics andStatisticsvolume6. North Holland.
Zhai, C. and J. Lafferty (2004). A
study of smoothing methods for
language models applied to infor-mation retrieval. ACMTrans.onIn-
formationSystems 22 (2), 179–214.
Zhang, N. (2004). Hierarchical latnet
class models for cluster analysis. J.
ofMachineLearningResearch , 301–
308.
Zhang, N. and D. Poole (1996). Ex-
ploiting causal independence in
Bayesian network inference. J. of
AIResearch , 301–328.
Zhang, T. (2008). Adaptive Forward-
Backward Greedy Algorithm for
Sparse Learning with Linear Mod-els. InNIPS.
Zhang, X., T. Graepel, and R. Herbrich
(2010). Bayesian Online Learningfor Multi-label and Multi-variatePerformance Measures. In AI/Statis-
tics.
Zhao, J.-H. and P. L. H. Yu (2008,
November). Fast ML Estimation forthe Mixture of Factor Analyzers viaan ECM Algorithm. IEEE.Trans.on
NeuralNetworks 19 (11).
Zhao, P., G. Rocha, and B. Yu (2005).
Grouped and Hierarchical ModelSelection through Composite Abso-lute Penalties. Technical report, UCBerkeley.Zhao, P. and B. Yu (2007). Stagewise
Lasso.J. of Machine Learning Re-
search 8, 2701–2726.
Zhou, H., D. Karakos, S. Khudanpur,
A. Andreou, and C. Priebe (2009).On Projections of Gaussian Dis-tributions using Maximum Likeli-
hood Criteria. In Proc.oftheWork-
shoponInformationTheoryandits
Applications.
Zhou, M., H. Chen, J. Paisley, L. Ren,
G. Sapiro, and L. Carin (2009).
Non-parametric Bayesian Dictio-nary Learning for Sparse ImageRepresentations. In NIPS.
Zhou, X. and X. Liu (2008). The
EM algorithm for the extended ﬁ-nite mixture of the factor analyz-
ers model.ComputationalStatistics
andDataAnalysis 52, 3939–3953.
Zhu, C. S., N. Y. Wu, and D. Mum-
ford (1997, November). Minimax
entropy principle and its applica-
tion to texture modeling. Neural
Computation 9 (8).
Zhu, J. and E. Xing (2010). Conditional
topic random ﬁelds. In Intl. Conf.
onMachineLearning.
Zhu, L., Y. Chen, A.Yuille, and W. Free-
man (2010). Latent hierarchical
structure learning for object detec-tion. InCVPR.
Zhu, M. and A. Ghodsi (2006). Au-
tomatic dimensionality selectionfrom the scree plot via the use of
proﬁle likelihood. Computational
Statistics & Data Analysis 51, 918–
930.
Zhu, M.andA.Lu(2004). Thecounter-
intuitive non-informative prior for
thebe
rnoulli family. J.StatisticsEd-
ucation.
Zinkevich, M. (2003). Online con-
vex programming and generalized
inﬁnitesimal gradient ascent. In
Intl.Conf.onMachineLearning, pp.
928â˘A¸S936.
Zobay, O. (2009). Mean ﬁeld inference
for the Dirichlet process mixture
model.Electronic J. of Statistics 3,
507–545.
Zoeter, O. (2007). Bayesian generalized
linear models in a terabyte world.InProc. 5th International Sympo-
sium on image and Signal Process-
ingandAnalysis.
BIBLIOGRAPHY 1045
Zou, H. (2006). The adaptive Lasso
and its oracle properties. J. of the
Am.Stat.Assoc., 1418–1429.
Zou, H. and T. Hastie (2005). Regular-
ization and variable selection via
the elastic net. J. of Royal Stat. Soc.
SeriesB 67 (2), 301–320.
Zou, H., T. Hastie, and R. Tibshirani
(2006). Sparse principal compo-nent analysis. J. of Computational
and Graphical Statistics 15 (2), 262–
286.
Zou, H., T. Hastie, and R. Tibshirani
(2007). On the "Degrees of Free-
dom" of the Lasso. AnnalsofStatis-
tics 35(5), 2173–2192.
Zou, H. and R. Li (2008). One-
step sparse estimates in noncon-cave penalized likelihood models.AnnalsofStatistics36 (4), 1509–1533.
Zweig, G. and M. Padmanabhan
(2000). Exact alpha-beta computa-
tion in logarithmic space with ap-plication to map word graph con-
struction. In Proc.Intl.Conf.Spoken
Lang.

Index to code
agglomDemo, 894
amazonSellerDemo, 155arsDemo, 819arsEnvelope, 819
bayesChangeOfVar, 151
bayesLinRegDemo2d, 233bayesTtestDemo, 138beliefPropagation, 768bernoulliEntropyFig, 57besselk, 477betaBinomPostPredDemo, 79betaCredibleInt, 153betaHPD, 153, 154betaPlotDemo, 43biasVarModelComplexity3, 204bimodalDemo, 150binaryFaDemoTipping, 403binomDistPlot, 35binomialBetaPosteriorDemo, 75bleiLDAperplexityPlot, 955bolassoDemo, 440boostingDemo, 555, 558bootstrapDemoBer, 192
cancerHighDimClassifDemo, 110
cancerRatesEb, 172casinoDemo, 606, 607centralLimitDemo, 52changeOfVarsDemo1d, 53chowliuTreeDemo, 913coinsModelSelDemo, 164contoursSSEdemo, 219convexFnHand, 222curseDimensionality, 18
demard, 580
depnetFit, 909dirichlet3dPlot, 48dirichletHistogramDemo, 48discreteProbDistFig, 28discrimAnalysisDboundariesDemo, 103, 105discrimAnalysisFit, 106discrimAnalysisHeightWeightDemo, 145discrimAnalysisPredict, 106dpmGauss2dDemo, 888dpmSampleDemo, 881dtﬁt, 545dtreeDemoIris, 549, 550
elasticDistortionsDemo, 567
emLogLikelihoodMax, 365
faBiplotDemo, 383
ﬁsherDiscrimVowelDemo, 274ﬁsheririsDemo, 6ﬁsherLDAdemo, 272fmGibbs, 843
gammaPlotDemo, 41, 150
gammaRainfallDemo, 41gampdf, 41gaussCondition2Ddemo2, 112gaussHeightWeight, 102gaussImputationDemo, 115, 375gaussInferParamsMean1d, 121gaussInferParamsMean2d, 123gaussInterpDemo, 113gaussInterpNoisyDemo, 125gaussMissingFitEm, 374gaussMissingFitGibbs, 840gaussPlot2d, 142gaussPlot2Ddemo, 47gaussPlotDemo, 19gaussSeqUpdateSigma1D, 131generativeVsDiscrim, 269geomRidge, 229ggmFitDemo, 939ggmFitHtf, 939ggmFitMinfunc, 939ggmLassoDemo, 13, 940ggmLassoHtf, 940gibbsDemoIsing, 670, 873gibbsGaussDemo, 848giniDemo, 548gpcDemo2d, 529gpnnDemo, 536gprDemoArd, 520gprDemoChangeHparams, 519gprDemoMarglik, 522gprDemoNoiseFree, 517gpSpatialDemoLaplace, 532groupLassoDemo, 451
hclustYeastDemo, 894, 896
hingeLossPlot, 211, 556hmmFilter, 609hmmFwdBack, 611hmmLillypadDemo, 604hmmSelfLoopDist, 623hopﬁeldDemo, 670huberLossDemo, 223, 497
icaBasisDemo, 471
icaDemo, 408icaDemoUniform, 409IPFdemo2x2, 683isingImageDenoiseDemo, 739, 839
kalmanFilter, 641
kalmanTrackingDemo, 632kernelBinaryClassifDemo, 489kernelRegrDemo, 490, 491kernelRegressionDemo, 510KLfwdReverseMixGauss, 734KLpqGauss, 734kmeansHeightWeight, 10kmeansModelSel1d, 371kmeansYeastDemo, 341knnClassifyDemo, 17, 23–25knnVor
onoi, 16
kpcaDemo2, 495kpcaScholkopf, 493
lassoPathProstate, 437, 438
LassoShooting, 441leastSquaresProjection, 221linregAllsubsetsGraycodeDemo, 423linregBayesCaterpillar, 237, 238linregCensoredSchmeeHahnDemo, 379
1048 INDEXES
linregDemo1, 241
linregEbModelSelVsN, 158, 159, 749linregFitL1Test, 447linregOnlineDemoKalman, 636linregPolyLassoDemo, 436linregPolyVsDegree, 9, 20, 436linregPolyVsN, 231linregPolyVsRegDemo, 208, 225, 226, 239linregPostPredDemo, 235linregRbfDemo, 487linregRobustDemoCombined, 223linregWedgeDemo2, 19LMSdemo, 265logregFit, 254logregLaplaceGirolamiDemo, 257, 258logregMultinomKernelDemo, 269logregSATdemo, 21logregSATdemoBayes, 259logregSatMhDemo, 852logregXorDemo, 486logsumexp, 86lossFunctionFig, 179lsiCode, 419
marsDemo, 554
mcAccuracyDemo, 55mcEstimatePi, 54mcmcGmmDemo, 851, 860, 861mcQuantileDemo, 153mcStatDist, 598miMixedDemo, 59mixBerMnistEM, 341mixBetaDemo, 170mixexpDemo, 343mixexpDemoOneToMany, 344mixGaussDemoFaithful, 353mixGaussLikSurfaceDemo, 346mixGaussMLvsMAP, 356mixGaussOverRelaxedEmDemo, 369mixGaussPlotDemo, 339mixGaussSingularity, 356mixGaussVbDemoFaithful, 753, 755mixPpcaDemoNetlab, 386mixStudentBankruptcyDemo, 361mlpPriorsDemo, 574mlpRegEvidenceDemo, 579mlpRegHmcDemo, 579mnist1NNdemo, 25, 1002multilevelLinregDemo, 844mutualInfoAllPairsMixed, 59
naiveBayesBowDemo, 84, 88
naiveBayesFit, 83, 277naiveBayesPredict, 86, 277netﬂixResultsPlot, 981newsgroupsVisualize, 5newtonsMethodMinQuad, 250newtonsMethodNonConvex, 250ngramPlot, 592NIXdemo2, 135normalGammaPenaltyPlotDemo, 460normalGammaThresholdPlotDemo, 461numbersGame, 69–71
pagerankDemo, 600, 603
pagerankDemoPmtk, 602paretoPlot, 44parzenWindowDemo2, 509pcaDemo2d, 388pcaDemo3d, 11pcaDemoHeightWeight, 389pcaEmStepByStep, 397pcaImageDemo, 12, 389pcaOverﬁtDemo, 400–402pcaPmtk, 393pfColorTrackerDemo, 830poissonPlotDemo, 37postDensityIntervals, 154ppcaDemo2d, 388PRhand, 182probitPlot, 259probitRegDemo, 259, 294, 363prostateComparison, 436prostateSubsets, 427
quantileDemo, 33randomWalk0to20Demo, 856
rbpfManeuverDemo, 834, 835rbpfSlamDemo, 835rdaFit, 108regtreeSurfaceDemo, 545rejectionSamplingDemo, 818relevanceNetworkNewsgroupDemo, 908residualsDemo, 219ridgePathProstate, 437riskFnGauss, 198robustDemo, 40robustPriorDemo, 168
saDemoPeaks, 869, 870
sampleCdf, 816samplingDistGaussShrinkage, 203sensorFusion2d, 123sensorFusionUnknownPrec, 141seqlogoDemo, 36shrinkageDemoBaseball, 175shrinkcov, 130shrinkcovDemo, 129shrunkenCentroidsFit, 109shrunkenCentroidsSRBCTdemo, 109, 110shuffledDigitsDemo, 7, 25sigmoidLowerBounds, 761sigmoidPlot, 21sigmoidplot2D, 246simpsonsParadoxGraph, 933sliceSamplingDemo1d, 865sliceSamplingDemo2d, 865smoothingKernelPlot, 507softmaxDemo2, 103SpaRSA, 445sparseDictDemo, 471sparseNnetDemo, 575sparsePostPlot, 459sparseSensingDemo, 438spectralClusteringDemo, 893splineBasisDemo, 125ssmTimeSeriesSimple, 638, 639steepestDescentDemo, 247, 248stickBreakingDemo, 883studentLaplacePdfPlo t,
40
subgradientPlot, 432subSuperGaussPlot, 412surfaceFitDemo, 218svdImageDemo, 394svmCgammaDemo, 504
tanhPlot, 570
trueskillDemo, 798
INDEXTOCODE 1049
trueskillPlot, 797
unigaussVbDemo, 745varEMbound, 368
variableElimination, 717visDirichletGui, 48visualizeAlarmNetwork, 314vqDemo, 354
wiPlotDemo, 127
Index to keywords
#P-hard, 727
0-1 loss,177
3-SAT, 727
A star search, 887
absorbing state, 598
accept,848
action, 176action nodes, 328
action space, 176
actions, 176activation, 563
active learning, 230, 234, 938Active set, 441
active set, 442
Activity recognition, 605
Adaboost.M1, 559
adagrad,263
adaline,569
adaptive basis-function model, 543
adaptive importance sampling, 821
adaptive lasso, 460
adaptive MCMC, 853
adaptive rejection Metropolis sampling, 820
adaptive rejection sampling, 820
add-one smoothing, 77, 593
ADF,653, 983
adjacency matrix, 309,970
adjust for, 934
adjusted Rand index, 878
admissible, 197
admixture mixture, 950
AdSense, 928AdWords, 928affinity propagation, 887
agglomerative clustering, 893
agglomerative hierarchical clustering, 927aha,68
AI, 1007AIC,162, 557
Akaike information criterion, 162
alarm network, 313
alignment, 701all pairs,503
alleles,317
alpha divergence, 735
alpha expansion, 803
alpha-beta swap, 804
alternative hypothesis, 163
analysis view, 390
analysis-synthesis, 470
ancestors, 309
ancestral graph, 664
ancestral sampling, 822
and-or graphs, 1007annealed importance sampling, 871, 923
annealing, 853annealing importance sampling, 992ANO
VA, 553
anti-ferromagnets, 668
aperiodic, 598
approximate inference, 727
approximation error, 230
ARD, 238, 463, 520, 580
ARD kernel, 480
area under the curve, 181ARMA,639, 674
array CGH, 454association rules, 15associative, 931
associative Markov network, 668
associative memory, 568,669, 997
associative MRF, 802
assumed density ﬁlter, 267assumed density ﬁltering, 653, 787
asymptotically normal, 194
asymptotically optimal, 201
asynchronous updates, 774
atom,469
atomic bomb, 52attractive MRF, 802
attributes, 2,3
AUC,181
audio-visual speech recognition, 628
augmented DAG, 932
auto-encoder, 1000
auto-encoders, 990auto-regressive HMM, 626
autoclass, 11
autocorrelation function, 862
automatic relevance determination, 463
automatic relevancy determination, 238, 398, 580, 747Automatic speech recognition, 605
automatic speech recognition, 624auxiliary function, 350
auxiliary variables, 863, 868
average link clustering, 897
average precision, 303average precision at K, 183
axis aligned, 47
axis parallel splits, 544
back-propagation, 999backdoor path, 934
backﬁtting, 552, 563, 998
background knowledge, 68backoff smoothing, 594
backpropagation, 570, 970
backpropagation algorithm, 569backslash operator, 228
Backwards selection, 428
bago
f words,5,81,945
bag-of-characters, 483bag-of-words, 483bagging,551
bandwidth, 480,507
barren node removal, 334, 714
BART,551, 586
Barzilai-Borwein, 445
base distribution, 338
base learner, 554
base measure, 882
base rate fallacy, 30
basic feasible solution, 468basis function expansion, 20,217
basis functions, 421basis pursuit denoising, 430
batch,261
Baum-Welch, 618
Bayes ball algorithm, 324
Bayes decision rule, 177,195
Bayes estimator, 177,195
INDEXTOKEYWORDS 1051
Bayes factor, 137, 163, 921
Bayes model averaging, 71,581
Bayes point, 257
Bayes risk, 195
Bayes rule, 29, 340
Bayes Theorem, 29
Bayesian, xxvii, 27
Bayesian adaptive regression trees, 551
Bayesian factor regression, 405
Bayesian hierarchical clustering, 899
Bayesian information criterion, 161
Bayesian IPF, 683
Bayesian lasso, 448
Bayesian model selection, 156
Bayesian network structure learning, 914
Bayesian networks, 310
Bayesian Occam’s razor, 156
Bayesian statistics, 149, 191
BDe,917
BDeu,918
beam search, 428, 887belief networks, 310
belief propagation, 611, 707, 767
belief state, 71,332,607,609
belief state MDP, 332
belief updating, 709
bell curve, 20,38
Berkson’s paradox, 326
Bernoulli, 21,34
Bernoulli product model, 88
Bernoulli-Gaussian, 426
Bessel function, 483beta distribution, 42,7 4
beta function, 42beta process, 470beta-binomial, 78
Bethe,781
Bethe energy functional, 781
Bethe free energy, 781
BFGS,251
Bhattacharya distance, 828
bi-directed graph, 674
bias,20,200, 457
bias term, 669
bias-variance
tradeoff,202
BIC,161, 256, 557, 920
biclustering, 903
big data,1
bigram model, 591
binary classiﬁcation, 3,6 5
binary entropy function, 57
binary independence model, 88
binary mask, 426, 470
binary tree, 895
Bing, 302, 799, 983binomial, 34
binomial coefficient, 34
binomial distribution, 74binomial regression, 292BinomialBoost, 561
BIO,687
biosequence analysis, 36, 170
bipartite graph, 313
biplot,383
birth moves, 370bisecting K-means, 898
bits,56
bits-back, 733black swan paradox, 77,8 4
black-box, 340,585Blackwell-MacQueen, 884
blank slate, 165
blind signal separation, 407
blind source separation, 407
blocked Gibbs sampling, 848
blocking Gibbs sampling, 848
bloodtype, 317BN2O,315
bolasso,439
Boltzmann distribution, 104,869
Boltzmann machine, 568, 669,983
bond variables, 866
Boosting, 554
boosting, 553, 742bootstrap, 192
bootstrap ﬁlter, 827
bootstrap lasso, 439
bootstrap resampling, 439borrow statistical strength, 171, 231, 296, 845
bottleneck, 205, 337,1000
bottleneck layer, 970
boundop
timization, 369
box constraints, 444Box-Muller, 817
boxcar kernel, 508, 508
Boyen-Koller, 654
BP,707
BPDN,430
Bradley Terry, 795branch and bound, 811branching factor, 954
bridge regression, 458
Brownian motion, 483bucket elimination, 715
BUGS, 756, 847
Buried Markov models, 627
burn-in phase, 856
burned in, 838
burstiness, 88
bursty, 480
C4.5,545
calculus of variations, 289
calibration, 724
Candidate method, 872
Canonical correlation analysis, 407
canonical form, 282
canonical link function, 291
canonical parameters, 115,282
Cardinality constraints, 810CART,544, 545
Cartesian, 51cascade,776
case analysis, 260
categorical, 2,35
categorical PCA, 402,947, 961
categorical variables, 876Cauchy,40
causal Markov assumption, 931
Causal models, 931
causal MRF, 661
causal networks, 310
causal sufficiency, 931
causality, 919, 929CCA,407
CCCP,702
CD,989
cdf,32,3 8
Censored regression, 379
censored regression, 380
1052 INDEXES
centering matrix, 494
central composite design, 523
central interval, 152
central limit theorem, 38, 51, 255
central moment, 413
central-limit theorem, 55
centroid, 341
centroids, 486
certainty factors, 675
chain graph, 671
chain rule, 29,307
chance nodes, 328
change of variables, 50
channel coding, 56
Chapman-Kolmogorov, 590
characteristic length scale, 480
Cheeseman-Stutz approximation, 923
Chi-squared distribution, 42
chi-squared statistic, 163, 213
children,309, 310
Chinese restaurant process, 884
chip-Seq, 622Cholesky decomposition, 227, 817
Chomsky normal form, 689chordal,665
chordal graph, 720
Chow-Liu algorithm, 312, 912
CI,308
circuit complexity, 944
city block distance, 876
clamped phase, 987
clamped term, 677
clamping, 319
class imbalance, 503
class-conditional density, 30,6 5
classical, 149classical statistics, 191
classiﬁcation, 2,3
Classiﬁcation and regression trees, 544
clausal form, 675
clause, 727click-through rate, 4
clique,310
cliques, 719, 722closing the loop, 635
closure,662
cluster variational method, 783
Clustering, 875
clustering, 10, 340
clusters, 487clutter problem, 788
co-cluste
ring, 979
co-occurrence matrix, 5co-parents, 327
coarse-to-ﬁne grid, 775cocktail party problem, 407
coclustering, 903
codebook, 354
collaborative ﬁltering, 14, 300, 387, 903, 979
collapsed Gibbs sampler, 841
collapsed Gibbs sampling, 956
collapsed particles, 831
collect evidence, 707
collect-to-root, 723
collider,324
COLT,210
committee method, 580
commutative semi-ring, 717
commutative semiring, 726compactness, 897compelled edges, 915
complementary prior, 997
complete, 322
complete data, 270, 349
complete data assumption, 914
complete data log likelihood, 348,350
complete link clustering, 897
completing the square, 143
composite likelihood, 678
compressed sensing, 472
compressive sensing, 472
computation tree, 772
computational learning theory, 210
computationalism, 569
concave,222, 286
concave-convex procedure, 702
concentration matrix, 46
concentration parameter, 882
concept, 65concept learning, 65
condensation, 827
conditional entropy, 59
conditional Gamma Poisson, 949conditional Gaussian, 920
conditional independence, 308conditional likelihood, 620conditional logit model, 252
conditional probability, 29
conditional probability distribution, 308
conditional probability tables, 308
conditional random ﬁeld, 684
conditional random ﬁelds, 606, 661conditional topic random ﬁeld, 969
conditionally conjugate, 132
conditionally independent, 31
,82
conditioning, 319
conditioning case, 322
conductance, 858
conﬁdence interval, 212
conﬁdence intervals, 153confounder, 674
confounders, 931
confounding variable, 934
confusion matrix, 181
conjoint analysis, 297
conjugate gradients, 249, 524
conjugate prior, 74
conjugate priors, 281, 287conjunctive normal form, 675
connectionism, 569
consensus sequence, 36,606
conservation of probability mass, 157
consistent, 200
consistent estimator, 233consistent estimators, 70constant symbols, 676
constraint satisfaction problems, 717, 726constraint-based approach, 924
content addressable memory, 669
context free grammar, 689
context speciﬁc independence, 321
context-speciﬁc independence, 944contextual bandit, 184, 254
contingency table, 682continuation method, 442,869
contrastive divergence, 569, 989
contrastive term, 677
control signal, 625, 631converge, 857convex, 58, 221, 247, 285, 677
INDEXTOKEYWORDS 1053
convex belief propagation, 785, 943
convex combination, 76, 130, 338
convex hull, 777
convolutional DBNs, 1004
convolutional neural nets, 1004
convolutional neural network, 565
cooling schedule, 870
corpus,953
correlated topic model, 757, 961
correlation coefficient, 45, 876
correlation matrix, 45
correspondence, 658
cosine similarity, 480
cost-beneﬁt analysis, 186
coupled HMM, 628
covariance, 44
covariance graph, 674, 908
covariance matrix, 45,4 6
covariance selection, 938
covariates, 2
CPD,308
CPTs,308
Cramer-Rao inequality, 201Cramer-Rao lower bound, 201
credible interval, 137,152, 212
CRF, 661, 684
critical temperature, 868
critical value, 671
cross entropy, 57, 571
cross over rate, 181
cross validation, 24,206
cross-entropy, 246, 953
cross-language information retrieval, 963crosscat,904
crowd sourcing, 10, 995
CRP,884
CTR,4
cubic spline, 537
cumulant function, 282,284
cumulants, 284
cumulative distribution function, 32,3 8
curse of dimensionality, 18, 487
curved exponential family, 282
cutting plane, 698
CV,24
cycle,310
cyclic
permutation property, 99
d-prime,106
d-separated, 324
DACE, 518DAG,310
damped updates, 739
damping, 773
Dasher, 591data association, 658, 810
data augmentation, 362, 847
data compression, 56
data fragmentation, 546
data fusion, 404
data overwhelms the prior, 69
data-driven MCMC, 853
data-driven proposals, 828
DBM,996
DBN,628,997
DCM,89
DCT, 469death moves, 370debiasing, 439
decision, 176decision boundary, 22decision diagram, 328
decision nodes, 328
decision problem, 176decision procedure, 177
decision rule, 22
decision trees, 544
decoding, 693
decomposable, 665,722, 941
decomposable graphs, 682decomposes, 322,917
DeeBN,628
DeeBNs,997
deep, 929deep auto-encoders, 1000
deep belief network, 997
deep Boltzmann machine, 996
deep directed networks, 996
deep learning, 479, 995
deep networks, 569defender’s fallacy, 61
deﬂated matrix, 418
degeneracy problem, 825
degenerate, 532, 535
degree,310
degrees of freedom, 39,161, 206,229,534
delet
ed interpolation, 593
delta rule, 265
dendrogram, 895
denoising auto-encoder, 1001
dense stereo reconstruction, 690
density estimation, 9
dependency network, 909
dependency networks, 679derivative free ﬁlter, 651
descendants, 309
descriptive, 2
design matrix, 3, 875detailed balance, 854
detailed balance equations, 599
determinism, 944deterministic annealing, 367, 620
deviance, 547
DGM,310
diagonal, 46diagonal covariance LDA, 107diagonal LDA, 108
diameter, 710,897
dictionary, 469
digamma, 361, 752, 958digital cameras, 8dimensionality reduction, 11, 1000
Dirac delta function, 39
Dirac measure, 37,68
Dirchlet process, 903direct posterior probability approach, 184
directed,309
directed acyclic graph, 310
directed graphical model, 310
directed local Markov property, 327
directed mixed graph, 929directed mixed graphical model, 674
Dirichlet, 79Dirichlet Compound Multinomial, 89
Dirichlet distribution, 47
Dirichlet multinomial regression LDA, 969
Dirichlet process, 596, 879,882, 973, 976
Dirichlet process mixture models, 508, 755discontinuity preserving, 691
discounted cumulative gain, 303
1054 INDEXES
discrete,35
discrete AdaBoost, 559
discrete choice modeling, 296
discrete random variable, 28
discrete with probability one, 884
discretize, 59, 691
discriminability, 106
discriminant analysis, 101
discriminant function, 500
discriminative, 245
discriminative classiﬁer, 30
discriminative LDA, 968
discriminative random ﬁeld, 684
disease mapping, 531
disease transmission, 970disparity, 691
dispersion parameter, 290
dissimilarity analysis, 898
dissimilarity matrix, 875
distance matrix, 875
distance transform, 775
distorted, 566
distortion, 354
distribute evidence, 707
distribute-from-root, 724
distributed encoding, 984
distributed representation, 569,627
distributional particles, 831
distributive law, 717
divisive clustering, 893
DNA sequences, 36do calculus, 932
Document classiﬁcation, 87
document classiﬁcation, 5
Domain adaptation, 297
domain adaptation, 297dominates, 197
double loop algorithms, 773
double Pareto distribution, 461double sided exponential, 41
dRUM,294
dual decomposition, 808
dual variables, 492, 499
dummy encoding, 35
dyadic, 976DyBN,628
DyBNs,997
dynamic Bayes net, 653dynamic Bayesian network, 628
dynamic linear model, 636
dynamic programming, 331, 920dynamic topic model, 962
E step,350
e-commer
ce, 11
early stopping, 263,557,572
EB,173
ECM,369, 387
ECME,369
ECOC,581
econometric forecasting, 660
economy sized SVD, 392
edge appearance probability, 786
edges,309
edit distance, 479EER,181
effective sample size, 75,825,862
efficient IPF, 683
efficiently PAC-learnable, 210
eigendecomposition, 98eigenfaces, 12eigengap, 857eigenvalue spectrum, 130
EKF,648
elastic net, 438, 456, 936
elimination order, 718
EM, 271,349, 618, 749
email spam ﬁltering, 5
embedding, 575empirical Bayes, 157, 162,173, 300, 746
empirical distribution, 37, 205
empirical measure, 37
empirical risk, 205, 697
empirical risk minimization, 205, 261
end effector, 344energy based models, 666
energy function, 255
energy functional, 732,778
ensemble, 980Ensemble learning, 580
ensemble learning, 742
entanglement, 629
entanglement problem, 635, 653Entropy,547
entropy,56
EP, 983Epanechnikov kernel, 508
ePCA,947
epigraph, 222
epistemological uncertainty, 973
epoch,264,566
epsilon
insensitive loss function, 497
EPSR,859
equal error rate, 181
equilibrium distribution, 597
equivalence class, 915
equivalent kernel, 512,533
equivalent sample size, 76,917
erf,38
ergodic,599
Erlang distribution, 42
ERM,205, 261
error bar, 76
error correcting codes, 768error correction, 56
error function, 38
error signal, 265error-correcting output codes, 503, 581
ESS,862
essential graph, 915
estimated potential scale reduction, 859
estimator, 191
Euclidean distance, 18evidence, 156, 173
evidence procedure, 173,238, 746
evolutionary MCMC, 429exchangeable, 321, 963
exclusive or, 486
expectation correction, 658
expectation maximization, 349
expectation proagation, 735Expectation propagation, 787
expectation propagation, 525expected complete data log likelihood, 350, 351
expected proﬁt, 330
expected sufficient statistics, 350, 359, 619
expected value, 33
explaining away, 326
explicit duration HMM, 622
exploration-exploitation, 184
INDEXTOKEYWORDS 1055
exploratory data analysis, 7
exponential cooling schedule, 870
Exponential distribution, 42
exponential family, 115, 253, 281, 282, 290, 347
exponential family harmonium, 985
exponential family PCA, 947
exponential loss, 556
exponential power distribution, 458
extended Kalman ﬁlter, 648
extension, 67
external ﬁeld, 668
F score,183
F1 score,183, 699
FA,381
face detection, 8
face detector, 555
face recognition, 8
Facebook, 974factor,665
factor analysis, 381, 402, 931, 947
factor analysis distance, 520
factor graph, 769, 769, 771, 888
factor loading matrix, 381
factorial HMM, 628
factorial prior, 463
factors,382
faithful,936
false alarm, 30,180
false alarm rate, 181
false discovery rate, 184
false negative, 180
false positive, 30,180
false positive rate, 181
family,309
family marginal, 359
fan-in,313
fantasy data, 990
farthest point clustering, 355
fast Fourier transform, 717, 775fast Gauss transform, 524fast ICA,411
fast iterative shrinkage thesholding algorithm, 446
FastSLAM, 635, 835
fat hand, 933
fault diagnosis, 659
feature construction, 564
feature extraction, 6,564
feature function, 667
fea
ture induction, 680
feature maps, 565
feature matrix, 875feature selection, 86
feature-based clustering, 875
features,2,3 ,412
feedback loops, 929
feedforward neural network, 563
ferro-magnets, 668
FFT, 775ﬁelds of experts, 473
ﬁll-in edges, 719
Filtering, 607
ﬁltering,87
ﬁnite difference matrix, 113
ﬁnite mixture model, 879ﬁrst-order logic, 674
Fisher information, 166
Fisher information matrix, 152, 193, 293
Fisher kernel, 485
Fisher scoring method, 293Fisher’s linear discriminant analysis, 271
FISTA,446
ﬁt-predict cycle, 206
ﬁxed effect, 298
Fixed lag smoothing, 608
ﬁxed point, 139ﬂat clustering, 875
FLDA,271
ﬂow cytometry, 936folds,24
forest,310,912
forward stagewise additive modeling, 557
forward stagewise linear regression, 562
forwards KL, 733forwards model, 345
forwards selection, 428
forwards-backwards, 644, 688, 707, 720forwards-backwards algorithm, 428,611
founder model, 317
founder variables, 385
Fourier basis, 472fraction of variance explained, 400
free energy, 988
free-form optimization, 737
frequent itemset mining, 15
frequentist, 27, 149
frequentist statistics, 191
Frobenius norm, 388
frustrated, 868
frustrated system, 668
full, 46full
conditional, 328,838
function approximation, 3
functional data analysis, 124
functional gradient descent, 561
furthest neighbor clustering, 897
fused lasso, 454
fuzzy clustering, 973
fuzzy set theory, 65
g-prior,236, 425
game against nature, 176game theory, 176Gamma, 623gamma distribution, 41
gamma function, 42GaP,949
gap statistic, 372
gating function, 342
Gauss-Seidel, 710Gaussian, 20,3 8
Gaussian approximation, 255, 731
Gaussian Bayes net, 318
Gaussian copulas, 942
Gaussian graphical models, 725Gaussian kernel, 480,507, 517
Gaussian mixture model, 339
Gaussian MRF, 672
Gaussian process, 483, 505, 509, 512, 882Gaussian processes, 515
Gaussian random ﬁelds, 938
Gaussian RBM, 986
Gaussian scale mixture, 359,447, 505
Gaussian sum ﬁlter, 656
GDA, 101GEE,300
GEM,369
Gene ﬁnding, 606
gene ﬁnding, 622gene knockout experiment, 931
1056 INDEXES
gene microarrays, 421
generalization, 3
generalization error, 23,180
generalization gradient, 66
generalize, 3
generalized additive model, 552
generalized belief propagation, 785
generalized cross validation, 207
generalized eigenvalue, 274
generalized EM, 361,369
generalized estimating equations, 300
generalized linear mixed effects model, 298
generalized linear model, 281, 290
generalized linear models, 281generalized pseudo Bayes ﬁlter, 657
generalized t distribution, 461
generate and test, 853
generative approach, 245generative classiﬁer, 30
generative pre-training, 999
generative weights, 410,986
genetic algorithms, 348, 720, 921genetic linkage analysis, 315, 318
genome, 318genotype, 317
geometric distribution, 622
Gibbs distribution, 290,666
Gibbs sampler, 672Gibbs sampling, 328, 669, 736, 838
Gini index, 548
gist, 963Gittins Indices, 184
Glasso,940
Glauber dynamics, 838
GLM,290, 654
GLMM,298
glmnet, 442global balance equations, 597
global convergence, 248
global localization, 828
global Markov property, 661
global minimum, 222global prior parameter independence, 916
globally normalized, 686
GM,308
GMM,339
GP-LVM,540
GPs,515
GPUs, 1006gradient boosting, 560
gradient descent, 247, 445
Gram matrix, 481
gr
ammars, 689, 1007
grandmother cells, 984, 1005
graph,309
graph cuts, 890
graph Laplacian, 891
graph surgery, 932
graph-guided fused lasso, 454
graphcuts, 801
graphical lasso, 940
graphical model, 308, 311
graphical models, xxviii, 13, 31, 32, 308, 337, 909Gray code, 422
greatest common divisor, 598
greedy equivalence search, 936
ground network, 676
ground states, 668
group lasso, 450, 579, 942
grouping effect, 456Gumbel, 295
Hadamard product, 609
Haldane prior, 166
ham, 5
Hamiltonian MCMC, 868
Hammersley-Clifford, 666
hamming distance, 876
handwriting recognition, 7
haplotype, 317
hard clustering, 340
hard EM, 352
hard thresholding, 434, 435
harmonic mean, 183harmonium, 983
Hastings correction, 849
hat matrix, 221
HDI,154
heat bath, 838
heavy ball method, 249
heavy tails, 43,223
Hellinger distance, 735
Helmholtz free energy, 733
Hessian, 193, 852heteroscedastic LDA, 275
heuristics, 727
hidden,10, 349
hidden layer, 563
hidden Markov model, 312,603, 963
hidden nodes, 313
hidden semi-Markov model, 622
hidden units, 564
hidden variable, 312,924
hidden
variables, 319, 914
hierarchical adaptive lasso, 458
hierarchical Bayesian model, 171
hierarchical Bayesian models, 347hierarchical clustering, 875,893
hierarchical Dirichlet process, 621hierarchical HMM, 624
hierarchical latent class model, 926
hierarchical mixture of experts, 344, 551
high throughput, 184, 421high variance estimators, 550highest density interval, 154
highest posterior density, 153
hill climbing, 920hindsight, 607
hinge loss, 211, 477,499
Hinton diagram, 592Hinton diagrams, 399
histogram, 508
hit rate,181
HMM,312,603
HMM ﬁlter, 640HMMs, 685Hoeffding’s inequality, 209
homogeneous, 589
homotopy, 442
Hopﬁeld network, 568,669
horizon,608
Horn clauses, 676
HPD,153
HSMM,622
Huber loss, 224, 561
Hugin,722
Hungarian algorithm, 659, 810
hybrid MCMC, 868
hybrid Monte Carlo, 584hybrid systems, 655
INDEXTOKEYWORDS 1057
hyper-parameters, 74
hypothesis space, 66
I-map,324
I-projection, 733
ICA, 385, 409
ID3,545
IDA,936
identiﬁable, 346
identiﬁable in the limit, 70
iff,68
iid,51,218, 320
ill-conditioned, 106, 129
image classiﬁcation, 7
image compression, 355image denoising, 473
image inpainting, 14,473
image segmentation, 671
image tagging, 968
IMM,658
implicit feedback, 983
importance sampling, 820
importance weights, 821
impression log, 983
improper prior, 166, 168
imputation, 14
Imputation Posterior, 847
in-degree, 310
inclusion probabilities, 423
incremental EM, 365, 366
independence sampler, 848
independent and identically distributed, 51
independent component analysis, 409
indicator function, 17,28, 976
induced width, 719
induction, 66,77
inductive bias, 19, 582
infer.net, 799
inference, 320inﬁnite hidden relational model, 977
inﬁnite HMM, 621inﬁnite mixture models, 841, 879
inﬁnite relational model, 903, 973, 976
inﬂuence diagram, 328, 932
inﬂuence model, 628
infomax, 416
information, 27information arc, 329,331
inf
ormation bottleneck, 405
information extraction, 688
information ﬁlter, 642
information form, 115, 305,672, 711, 725
information gain, 547
Information inequality, 58
information projection, 733
information retrieval, 183, 300, 953information theory, 56
inheritance model, 317
inner approximation, 779
innovation, 641
inside outside, 624inside-outside algorithm, 689
instance-based learning, 17
integrate out, 156integrated likelihood, 156
integrated risk, 195
intensive care unit, 313inter-causal reasoning, 326
interaction effects, 421interactive multiple models, 658interest point detector, 484interpolate, 112
interpolated Kneser-Ney, 595
interpolator, 517
interval censored, 379
interventional data, 936
interventions, 931intrinsic Gaussian random ﬁeld, 113invariant, 8,854
invariant distribution, 597
invariant features, 1004
inverse chi-squared distribution, 131
inverse Gamma, 130inverse gamma, 42
inverse Gaussian, 448
inverse probability transform, 815
inverse problem, 317
inverse problems, 344
inverse reinforcement learning, 186
inverse Wishart, 126, 128
inverted index, 600
inverted indices, 1004IP, 847IPF,682
iris, 6, 548IRLS,251
IRM, 976irreducible, 598
Ising model, 668
isotropic, 46
iterated EKF, 650
iterative conditional modes, 669,804,
 929
iterative proportional ﬁtting, 682, 939
iterative scaling, 683
iterative shrinkage and thresholding algorithm, 445iterative soft thresholding, 445
iteratively reweighted least squares, 251
Jacobi, 710, 773Jacobian, 151, 648, 649Jacobian matrix, 50
JAGS,847
JamBayes, 13James Stein estimator, 174James-Stein estimator, 173, 199JC Penney, 603Jeffreys prior, 166
Jeffreys-Lindley paradox, 165
Jensen’s inequality, 58, 363
Jensen-Shannon divergence, 57
Jeopardy, 4jittered,486
JJ bound, 761
joint distribution, 29,307
joint probability distribution, 44
JTA,720
jump Markov linear system, 655
junction tree, 722
junction tree algorithm, 720, 731
junction trees, 635
K-centers, 887
K-means algorithm, 352
k-means++, 355
K-medoids algorothm, 490
k-spectrum kernel, 484
K2 algorithm, 920
Kalman ﬁlter, 122, 267, 632, 633, 640, 643
Kalman gain matrix, 637, 641
Kalman smoother, 633, 707
1058 INDEXES
Kalman smoothing, 644, 712, 963
Karhunen Loeve, 387
Karl Popper, 77
KDE,508, 510
Kendall’s τ,304
kernel, 565, 600,848
kernel density estimation, 127, 510kernel density estimator, 508
kernel function, 479, 515
kernel machine, 486
kernel PCA, 494, 540, 892
kernel regression, 511
kernel smoothing, 511
kernel trick, 488
kernelised feature vector, 486
Kikuchi free energy, 784
kinect, 551kinematic tracking, 344
kink,372
KL divergence, 57, 732
Kleene star, 483knee,372
KNN,16
knots,537
knowledge base, 676
knowledge discovery, 2,9
knowledge engineering, 313
Kolmogorov Smirnov, 864kriging,516
kronecker product, 253, 760
Kruskal’s algorithm, 912Kullback-Leibler divergence, 57
kurtosis,413, 415
L-BFGS,252
/lscript
0pseudo-norm, 424
/lscript0regularization, 426
/lscript1loss, 179
/lscript1regularization, 430
L1-Adaboost, 563
L1VM,488, 505
/lscript2loss, 179
/lscript2norm,218
/lscript2regularization, 226
L2boosting, 558
L2VM,488
label, 176label bias, 685
label switching, 341,841
label taxonomy, 689
labeled LDA, 953, 969
lag, 608Lagrange multiplier, 80
Lagrange multipliers, 289Lagrangian, 80, 289
Lagrangian relaxation, 808
Lanczos algorithm, 398language model, 300, 953
language modeling, 81, 568
language models, 591
Laplace, 223, 413, 429Laplace approximation, 255, 468
Laplace distribution, 41
Laplace’s rule of succession, 77
LAR,442, 562
large margin classiﬁer, 501
large margin principle, 259LARS,437,442, 558, 562
lasso,431, 470, 562, 936
latent,11latent class model, 926
latent CRF, 701latent Dirichlet allocation, 949, 950
latent factors, 11
latent semantic analysis, 12, 947
latent semantic indexing, 418,947
latent SVMs, 702
latent variable models, 337
lattice, 668Lauritzen-Spiegelhalter, 722
LBP,767
LDA,104, 927, 949, 950
LDA-HMM, 963
LDPC, 768LDS,631
leaf,309
leak node, 315
leapfrog steps, 868
learning, 320learning curve, 230
learning rate, 247
learning to learn, 296
learning to rank, 300
leastf
avorable prior, 197
least mean squares, 265,637
least squares, 219
least squares boosting, 428, 442, 558
leave one out cross validation, 207
leave-one out cross validation, 24
leaves, 895left censored, 379
left-to-right, 612left-to-right transition matrix, 590
LeNet5,566
leptokurtic, 413
LETOR,300
level sets, 47Levenberg Marquardt, 250
Levinson-Durbin, 627LG-SSM,631
likelihood, 319likelihood equivalence, 917
likelihood equivalent, 200likelihood principle, 214
likelihood ratio, 67,163
likelihood weighting, 822
limited memory BFGS, 252
limiting distribution, 598
line minimization, 248
line search, 248
linear discriminant analysis, 104
linear dynamical system, 631
linear Gaussian, 318
linear Gaussian system, 119
linear kernel, 482
linear program, 224
linear programming relaxtion, 800
linear regression, 19
linear smoother, 533
linear threshold unit, 252
linear trend, 660linear-Gaussian CPD, 673linear-Gaussian SSM, 631
linearity of expectation, 49
linearly separable, 22, 252, 266
link farms, 601
link function, 291
LISREL,930
ListNet,302
LMS,265,637
INDEXTOKEYWORDS 1059
local consistency, 780
local evidence, 317,671
local level model, 637
local prior parameter independence, 917
local variational approximation, 756
localist encoding, 984
locally decodable, 811
locally normalized, 686,715
locally weighted regression, 512
LOESS,512
log partition function, 282
log-linear, 667
log-loss,210
log-odds ratio, 283
log-sum-exp, 86,757
logic sampling, 822
logical reasoning problems, 726
logistic,21, 295
logistic distribution, 413, 863
logistic normal, 402, 961
logistic regression, 21, 106
logit,21
logitBoost, 560
long tail, 2, 296
long tails, 43
LOOCV,24, 207
look-ahead RBPF, 832
loop,310
loopy belief propagation, 691, 767, 889
Lorentz,40
loss,176
loss function, 261loss matrix, 185
loss-augmented decoding, 699
loss-calibrated inference, 694
lossy compression, 354low density parity check, 768Low-level vision, 690
LOWESS, 512
LSA,947, 1003
lse,757
LSI,947
LVM,337
M step,350
M-projection, 733
M3nets,693
machine learning, 1
macro-a
veraged F1, 183
Mahalanobis distance, 98mammogram, 29
maneuvering target tracking, 832
manifest, 930
MAP estimate, 4, 178
MAR,270
margin, 563margin re-rescaling), 696
marginal distribution, 29
marginal likelihood, 156, 169
marginal polytope, 777
marginalizing out, 320
marginally independent, 30
marker,317
market basket analysis, 15
Markov,324
Markov assumption, 308
Markov blanket, 327,662, 736, 838
Markov chain, 308,589
Markov Chain Monte Carlo, 815Markov chain Monte Carlo, 52, 600, 837Markov decision process, 331
Markov equivalence, 936Markov equivalent, 915, 917
Markov logic network, 675
Markov mesh, 661
Markov model, 589
Markov models, 32Markov network, 661
Markov random ﬁeld, 661
Markov switching models, 604
MARS, 538, 553, 562
MART,562
master, 810matching pursuit, 562matching pursuits, 428
Matern kernel, 482
MATLAB, xxviiimatrix completion, 14,939
matrix determinant lemma, 118
matrix factorization, 948matrix inversion lemma, 118, 144, 641
matrix permanent, 669matrix tree theorem, 914max ﬂow/min cut, 801
max margin Markov networks, 693
max pooling, 1005
max product linear programming, 810
max-product, 614,713
max-pr
oduct belief propagation, 800
maxent,289
maximal branching, 913
maximal clique, 310
maximal information coefficient, 60
maximal weight bipartite matching, 659maximizer of the posterior marginals, 612maximum a posteriori, 4
maximum entropy, 39, 104,289,667
maximum entropy classiﬁer, 252
maximum entropy Markov model, 685
maximum expected utility principle, 177
maximum likelihood estimate, 69
maximum risk, 196
maximum weight spanning tree, 912MCAR,270
MCEM,368
MCMC, 52, 596, 600, 815, 837
MDL,162
MDP,331
MDS, 496mean,33
mean absolute deviation, 511
mean average precision, 303
mean ﬁeld, 735, 756, 767, 989
mean ﬁeld energy functional, 779
mean function, 291
mean precision, 182mean reciprocal rank, 303
mean squared error, 205,218
Mechanical Turk, 10, 995median,33
median model, 423
MEMM,685
memory-based learning, 17
Mendelian inheritance, 317
Mercer kernel, 481
Mercer’s theorem, 481, 539
message passing, 644, 800metric, 691, 691, 803
metric CRF, 691
metric MRF, 803
1060 INDEXES
Metropolis Hastings, 848, 922
Metropolis-Hastings algorithm, 869
MFCC, 1005MH,848
MI,59
micro-averaged F1, 183
Microsoft, 983mini-batch, 264, 571
minimal, 282
minimal I-map, 324
minimax rule, 196
minimum description length, 162
minimum entropy prior, 621
minimum mean squared error, 179
minimum spanning tree, 897minorize-maximize, 369
misclassiﬁcation loss, 176Misclassiﬁcation rate, 547
misclassiﬁcation rate, 22,205
missed detection, 180
missing, 15missing at random, 270, 372, 982
missing completely at random, 270
missing data, 14, 914, 974missing data problem, 269
mixed directed graphs, 931mixed membership model, 950
mixed membership stochastic block model, 973
mixed model, 298
mixing matrix, 408
mixing time, 857
mixing weights, 169, 338
mixture,72
mixture density network, 344
mixture model, 164, 338
mixture of conjugate priors, 169
mixture of experts, 342, 563, 973, 984
mixture of factor analysers, 386
mixture of Gaussians, 339
mixture of Kalman ﬁlters, 831
mixture of trees, 914
mixture proposal, 853
MLE,69
MLP,563
MM,369
MMSE,179
MNIST,7, 341
Mobious numbers, 784
mode,4
model based clustering, 11
model selection, 10, 24,156
model selection consistent, 439
model-based appr
oach, xxvii
model-based clustering, 879
moderated output, 260
modularity, xxviiiMoE, 342moment matching, 176, 287,653, 658, 677
moment parameters, 115
moment projection, 733
momentum, 248
monks, 974Monte Carlo, 52, 151, 192, 258, 815
Monte Carlo EM, 368
Monte Carlo integration, 53Monte Carlo localization, 828
moralization, 663,715
motes, 218motif,36
mPCA,948MPE,614
MPM,612
MRF,661
MSE,218
multi label classiﬁcation, 970multi net, 627
multi-armed bandit, 184
multi-class logistic regression, 104
multi-clust, 904
multi-grid techniques, 775multi-information, 415
multi-label classiﬁcation, 3, 405
multi-layer perceptron, 563, 999
multi-level model, 171
multi-level modeling, 844multi-stage, 186multi-target tracking, 659
multi-task feature selection, 297
multi-task learning, 172, 231,296, 449, 757
multiclass classiﬁcation, 3
multidimensional scaling, 496multinomial, 35
multinomial coefficient, 35
multinomial logistic regression, 104,252
multinomial PCA, 948, 951
multinomial probit, 295
multinomial regression LDA, 968
multinomial resampling, 826
multinoulli distribution, 35
multiple hypothesis testing, 184
multiple hypothesis tracking, 656
multiple imputation, 115
multiplek
ernel learning, 524, 543
multiple LDA, 276
multiple output model, 3
multiple random restarts, 348, 921
multiple restarts, 620multivariate adaptive regression splines, 553
multivariate Bernoulli naive Bayes, 82
multivariate delta method, 763
multivariate Gamma function, 133multivariate gamma function, 126
multivariate Gaussian, 46,97, 339
multivariate normal, 46,97
multivariate probit, 295
multivariate Student t, 46
mutual information, 46, 59, 87, 547, 912
mutual inhibition, 564
mutually independent, 62MVN,46,97
N-best list, 616
n-gram, 568n-gram models, 591
Nadaraya-Watson, 511
naive Bayes classiﬁer, 82, 88, 311
naive Bayes classiﬁers, 32named entity extraction, 688
NaN,14
nats,56
natural exponential family, 282
natural gradient, 411natural parameters, 115,282
NDCG,304
nearest centroids classiﬁer, 102
nearest medoid classiﬁcation, 491
nearest neighbor, 16
nearest neighbor clustering, 897
nearest neighbor data association, 658
nearest shrunken centroids, 109
INDEXTOKEYWORDS 1061
negative binomial, 624
negative binomial distribution, 214
negative examples, 65negative log likelihood, 218,349
negative transfer, 297
negentropy, 415
neighbors, 309
neocognitron, 566
nested plate, 321
Nesterov’s method, 446
Netﬂix, 15, 580, 979, 981, 987, 993NETtalk,569
neural network, 302, 969neural networks, 344, 535neutral process, 882
Newton’s algorithm, 249, 251
NHST,213
NIW,133
NIX,136
NLL,218,349
NMAR,270
NMF,470,949
no forgetting, 331
no free lunch theorem, 24, 582
nodes,309
nodes that ﬁre together should wire together, 929
noise ﬂoor, 230
noisy-OR, 313, 928
nominal, 2
non-descendants, 327
non-factorial, 466
non-informative, 165
non-negative matrix factorization, 470,949
non-negative sparse coding, 470
non-null recurrent, 599
non-parametric Bayes, 879
non-parametric bootstrap, 192
non-parametric BP, 712
non-parametric model, 16
non-parametric prior, 879
non-serial dynamic programming, 717
non-smooth, 432
non-terminals, 689nonparanormal, 942
norm of a function, 539
normal,20,3 8
normal equation, 220
normal Gamma, 476
normal inverse chi-squared, 136
Normal-in v
erse-wishart, 133
normalized cut, 891
normalized discounted cumulative gain, 304
normalized mutual information, 879
not missing at random, 270
noun phrase chunking, 687
NP-complete, 920NP-hard, 726ν-SVM classiﬁer, 502
nuisance variables, 320
null hypothesis, 163,213
null hypothesis signiﬁcance testing, 213
number game, 65
numerical underﬂow, 86
object detection, 8
object localization, 8
observation, 603
observation model, 312,631
observed data log likelihood, 348
observed information, 167observed information matrix, 193
Occam factor, 255
Occam’s razor, 67,156, 399, 400
occasionally dishonest casino, 606
occupancy grid, 828
Octave,xxviii
offline,261
oil wild-catter, 328
OLS,220
OMP,428
one-armed bandit, 184
one-hot encoding, 35
one-of-C encoding, 252one-shot decision problem, 186
one-standard error rule, 208
one-step-ahead predictive density, 609
one-versus-one, 503
one-versus-the-rest, 503
one-vs-all, 503
online EM, 365
online gradient descent, 262
online learning, 75, 241,261
ontological uncertainty, 973
ontology, 977
open class, 596, 688
Open Directory Project, 600, 689open universe, 676
optimal action, 177optimism of the training error, 206
optimiza
tion, 218
ordered Markov property, 310,327
ordinal, 295ordinal regression, 2,295, 301
ordinal variables, 876ordinary least squares, 220
Ornstein-Uhlenbeck process, 483
orthodox statistics, 191
orthogonal least squares, 427
orthogonal matching pursuits, 428
orthogonal projection, 221
out-degree, 310
out-of-clique query, 722
outer approximation, 780
outliers, 179, 223
over-complete, 282, 1001
overcomplete, 469
overcounting number, 784
overdispersed, 859
overﬁt,22
overﬁtting, 72overrelaxed EM algorithm, 369
p-value, 138, 163, 163,213
PAC,210
PageRank, 301, 596, 600, 601
paired t-test, 137
pairwise independent, 62pairwise Markov property, 662
pairwise MRF, 666
parallel tempering, 858, 871, 922
parameter, 176parameter expansion, 736parameter modularity, 918
parameter sharing, 107
parameter tying, 107,171,589
parametric bootstrap, 192
parametric model, 16,19
parents,309, 310
Pareto distribution, 43
part of speech, 605, 966
1062 INDEXES
Part of speech tagging, 605
partial dependence plot, 586
partial least squares, 406, 975
partially directed acyclic graph, 915
partially labeled LDA, 969
partially observed Markov decision process, 331
partially observed MRF, 672
Particle ﬁltering, 823
particle ﬁltering, 267, 648, 823, 887
partition function, 282,666
partitional clustering, 875
partitioned inverse formula, 116
partitioning, 841partitions of the integers, 885
Parzen window density estimator, 508
passing a ﬂow, 724
path,310
path diagrams, 929
pathologies, 211
pattern,915
pattern completion, 669
pattern recognition, 2
pattern search, 736, 783PCA,12,387, 493, 947
PCFG,689
PDAG, 936pdf,32
pedigree graph, 315
peeling algorithm, 715
Pegasos,701
penalized least squares, 226
penalized log likelihood, 161
penalized splines, 537
penetrance model, 317
perception-action, 331
perceptron, 569perceptron algorithm, 266
perceptual aliasing, 828
perfect intervention, 931
perfect map, 664
period,598
permanent, 942perplexity, 953, 953, 992
persistent CD, 991
persistent contrastive divergence, 680personalized recommendation, 77personalized spam ﬁltering, 296
perturbation theory, 892phase,317
phase transition, 671, 857
phenotypes, 317phone, 624phonemes, 1005phylogenetic HMM, 317
phylogenetic tree, 925piecewise polynomial, 537
pilo
t runs,851
pipeline,687
Pitman-Koopman-Darmois theorem, 286
Pitman-Yor process, 885
Plackett-Luce, 302
plates,321
platykurtic, 413
PLS,406
PLSI,949
plug-in, 147plug-in approximation, 72
plutocracies, 43pmf,28
PMTK,xxviiipoint estimate, 149, 150
pointwise approach, 301
pointwise marginal credibility intervals, 114
pointwise mutual information, 59
Poisson,37
poisson regression, 292
polar, 51policy,177
Polya urn, 89,884
Polyak-Ruppert averaging, 263
polynomial kernel, 481
polynomial regression, 20
polynomial time approximation schemes, 728polysemy, 951
polytree,310
POMDP,331
pooled, 171pooled empirical variance, 108
population minimizer, 556
positive deﬁnite, 125, 222
positive deﬁnite kernel, 481
positive examples, 65posterior expected loss, 177
posterior mean, 179posterior median, 179posterior mode, 178posterior predictive density, 608posterior predictive distribution, 66, 71, 234
potential function, 665
Potts model, 671, 856
power law, 43
power method, 603
PPCA,381,387
precision, 38,182
precision at k, 303, 702
precision matrix, 46, 100
precision
recall curve, 182
predict-update cycle, 609
predict-update-project, 653
predictive, 2
preferences, 185
preposterior risk, 195
prevalence, 183
Prim’s algorithm, 912primal variables, 492, 499
principal component, 388principal components, 1000principal components analysis, 12,387
principal components regression, 230
principle of insufficient reason, 58
probabilistic decision tree, 551probabilistic expert system, 313
probabilistic inference, 319
probabilistic latent semantic indexing, 949
probabilistic matrix factorization, 337, 980
probabilistic PCA, 387
probabilistic principal components analysis, 381
probabilistic relational modeling, 675,976
probability density function, 32
probability mass function, 28
probability of the evidence, 319,609,717
probability product kernel, 485
probability simplex, 47,7 9
probability theory, xxvii, 1probably approximately correct, 210
probe,583
probit,260, 655
probit regression, 293, 362, 380, 795, 864
product of experts, 983
product rule, 29
INDEXTOKEYWORDS 1063
production rules, 689
proﬁle HMM, 606
proﬁle log likelihood, 401
projected gradient descent, 444, 445
projection, 262projection pursuit, 415
Prolog, 676proposal distribution, 817,848, 869
propose, 848prosecutor’s fallacy, 61
Protein sequence alignment, 606
protein-protein interaction networks, 970prototype, 341
proximal operator, 443
pruning,549
pseudo counts, 75
pseudo likelihood, 678
pseudo marginals, 780
pseudo random number generator, 816
pseudo-likelihood, 943pure,546,548
purity,877
pushing sums inside products, 715
pyramid match kernel, 484
QALY,186
QMR,313
QP,431
qq-plot,260
QR decomposition, 228
quadratic discriminant analysis, 102
quadratic loss, 179
quadratic program, 431, 498, 499
quantile,33
quantize, 59
quartiles, 33
Quasi-Newton, 251
query logs, 301query variables, 320
quick medical reference, 313
radar, 658radial basis function, 480
Rand index, 878
random accelerations model, 633
random effects, 298
random effects mixture of experts, 969
random forests, 551, 554
random probability measure, 880
random utility model, 294
random walk Metropolis algorithm, 848
random walk on the integers, 599random walk proposal, 869Rank correlation, 304
rank one update, 118
ranking,87,601,702
RankNe
t,302
Rao-Blackwell, 841Rao-Blackwellisation, 841
Rao-Blackwellised particle ﬁltering, 831
Rao-Blackwellized particle ﬁltering, 659rare event, 182, 820
rate,355
rational behavior, 177
RBF,480
RBF kernel, 517RBF network, 486
RBM,983, 996
RBPF,831
real AdaBoost, 559recall,181, 182
receiver operating characteristic, 181
receptive ﬁelds, 565
recognition weights, 410,986
recombination model, 317
reconstruction error, 354,387
recurrent, 599
recurrent neural network, 568,669
recurrent neural networks, 591recursive, 929
recursive least squares, 265, 636
reﬂecting pair, 553
regime switching, 660
regime switching Markov model, 626
regression, 2
regression spline, 537
regret,262
regular,598
regularization, 227
regularization path, 436, 442, 562
regularized discriminant analysis, 107
regularized estimation, 130
regularized particle ﬁlter, 827
regularized risk minimization, 206
reinforcement learning, 2, 186
reject action, 178
rejection sampling, 817
rejuvenation, 825
relation,975
relational probabilistic models, 676relational topic model, 974
relative entropy, 57
relative importance of predictor variables, 586
rela
tive risk,531
relevance network, 908
relevance vector machine, 463, 488
Rephil,928
replicated softmax model, 992
representer theorem, 539
reproducing kernel Hilbert space, 539
reproducing property, 539
rerank, 616resample-move, 827
residual,641
residual analysis, 260
residual belief propagation, 774
residual error, 19
residual resampling, 826
residual sum of squares, 218
response variable, 2
responsibility, 340,351
restricted Boltzmann machine, 983
reverse KL, 733reversible jump MCMC, 370, 399, 855
reward, 2Ricatti equations, 642
rich get richer, 755,885
ridge regression, 203, 226
right censored, 379
risk,195, 261
risk averse, 4, 178
RJMCMC, 855
RKHS,539
RLS,636
Robbins-Monro, 263, 366, 701
robust, 179robust priors, 168
robustness, 223
ROC,181
rocking,261
1064 INDEXES
root,309, 895
root mean square error, 979
Rosenblatt, 266rotamers, 690RTS smoother, 644
rule of iterated expectation, 141
rule of total probability, 29
rules,550
RUM,294
running intersection property, 722
RVM,488, 505
saddle point approximation, 255
sample impoverishment, 826
sample standard deviation, 136
samples, 52sampling distribution, 191, 191
sampling importance resampling, 823
sampling period, 633
satisfying assignment, 727saturated model, 428
SBL,463
scalar product, 19
scale invariant prior, 168
scale of evidence, 163scatter plot, 6
SCFGs, 624schedule, 263
Schur complement, 116
scientiﬁc method, 71scope,328
score function, 167,193
score matching, 1001score vector, 485
scores,382
scree plot, 400
screening, 87
search engine optimization, 603
second order, 249
second order Markov chain, 312
second-order Markov model, 591self loops, 309
semantic hashing, 1003
semantic network, 977semantic role labeling, 576semi-conjugate, 132
semi-continuous HMM, 630
semi-Markov model, 622
semi-metric, 691
semi-parametric model, 298,524
semi-supervised, 405semi-supervised embedding, 576
semi-supervised learning, 268, 270
sensible PCA, 387
sensitivity, 29,181
sensitivity analy
sis,166
sensor fusion, 122
sentiment analysis, 967
separating set, 723
separation oracle, 699
sequence logo, 36
sequential, 186sequential minimal optimization, 499
sequential TRBP, 801
SGD,262
Shafer-Shenoy, 722
shallow parsing, 687
shared,103
Sherman-Morrison-Woodbury formula, 118
shooting, 441, 940shrinkage, 122,174,230,557
shrinkage estimation, 130
shrinkage factor, 437
side chains, 690side information, 982
SIFT, 484sifting property, 39
sigma points, 650, 651
sigmoid,21, 105
sigmoid belief net, 313,996
sigmoid belief nets, 763sigmoid kernel, 482
signal detection theory, 106signal processing, 421signal-to-noise ratio, 122
signal-to-symbol, 1007
similar, 66, 875similarity-based clustering, 875
simple cells, 413Simple linear regression, 241
simplex factor model, 949
Simpon’s paradox, 933
Simulated annealing, 869
simulated annealing, 262, 348, 853, 921
simulation based, 823
simultaneous localization and mapping, 635
single best replacement, 427
single link clustering, 897
single site updating, 847
singular value decomposition, 392
singular values, 392
SIR, 823size principle, 67
skewness, 413
skip arcs, 568
skip-chain CRF
,688
slack re-scaling, 696
slack variables, 498
SLAM,635, 834
slaves, 810slice sampling, 865
sliding window detector, 8
slippage, 635slot machine, 184smallN, largeD,421
SmartASS, 4SML,680
SMO,499
Smoothing, 607
smoothing kernel, 507, 507
Smoothing splines, 536
social networks, 970soft clustering, 340,973
soft margin constraints, 501
soft thresholding, 434, 435
soft weight sharing, 575
softmax,104, 283
source coding, 56
SpAM,553
spam, 5spanning tree polytope, 786
SpaRSA, 445sparse,15,421, 621, 945, 979
sparse Bayesian learning, 463
sparse boosting, 562
sparse coding, 469
sparse data problem, 77
sparse kernel machine, 421sparse matrix factorization, 469, 470
sparse PCA, 469
INDEXTOKEYWORDS 1065
sparse representation, 421
sparse vector machine, 488
sparsity, 41sparsity-promoting prior, 297spectral,445
spectral clustering, 891
spectral graph theory, 891
speech recognition, 590, 1005sphereing, 142
spherical, 46
spike and slab, 424
spin, 668spline, 298split merge, 621
split variable, 224
square root ﬁlter, 642
squared error, 179
squared exponential kernel, 480,517
squared loss, 176squashing function, 21
SSM,631
SSVMs,693
stability selection, 439
stable,936
stacked denoising auto-encoder, 1001stacking, 580
standard deviation, 34
standard error, 56
standard error of the mean, 137, 208
standard errors, 194
standard model, 995
standard normal, 38
standard overcomplete representation, 776
standardized, 352Standardizing, 142
state, 176state estimation, 313
state space, 28
state space model, 631
state transition diagram, 590, 606
state transition matrix, 308
stationary, 589,631
stationary distribution, 596, 597
statistical learning theory, 209
statistical relational AI, 675
statistical relational learning, 976
statistically signiﬁcant, 213
steepest descent, 247,264
Stein’s paradox, 199
stemming, 81
step size, 247
stepping out, 866
stepwise EM, 365
stick
-breaking construction, 883
sticky,850
stochastic algorithm, 869stochastic approximation, 368stochastic approximation EM, 368
stochastic automaton, 590
stochastic block model, 972
stochastic context free grammars, 624stochastic EM, 368
stochastic gradient boosting, 584
stochastic gradient descent, 262, 570, 868, 981, 987
stochastic matrix, 307,589
stochastic maximum likelihood, 680, 990
stochastic optimization, 262
stochastic process, 953stochastic processes, 589
stochastic search, 429stochastic volatility, 831
stop words, 81,480, 952
stopping rule, 214
stratiﬁed CV, 206
stratiﬁed sampling, 826
streaming data, 261
StreetView, 8strict, 197strictly convex, 222
string kernel, 483
strong local optimum, 804
strong sampling assumption, 67
structural EM, 925
structural equation model, 929
structural equation models, 674structural error, 230
structural risk minimization, 206
structural signatures, 926
structural support vector machines, 693
structural time series, 637
structural zeros, 672
structure learning, 621, 681
structured mean ﬁeld, 740
structured output, 684
structured perceptron algorithm, 700
structured-output classiﬁcation problems, 266Student t, 359Studenttdistribution, 39
sub-Gaussian, 413
subderivative, 432
subdifferential, 432
subgradient, 432, 432
subgraph, 310
subjective, 67
subjective
probability, 310
submodular, 802
subsampling, 566
subspace method, 647
sufficiency principle, 214
sufficient statistics, 74, 79, 281, 282, 348
suffix trees, 483sum of squared errors, 218
sum of squares, 220
sum rule, 29
sum-product, 614,709
sum-product algorithm, 707
super efficient, 820
super-Gaussian, 413
supermodular, 802
supervised LDA, 967
supervised learning, 2
supervised PCA, 405
support,426
support vector machine, 488,496, 569
support vector machines, 211support vectors, 496,498, 499
surrogate loss, 304surrogate loss function, 211
surrogate splits, 550
survival of the ﬁttest, 825
suspicious coincidence, 164suspicious coincidences, 67
SVD, 107, 228, 392, 980
SVM, 211, 488,496
SVMstruct, 698, 700
Swendsen Wang, 866
switching linear dynamical system, 655, 831
switching state space model, 655
symbol grounding, 1007
symmetric, 849
1066 INDEXES
synchronous updates, 773
syntactic sugar, 321
synthesis view, 387
systematic resampling, 826
systems biology, 13
systems identiﬁcation, 646
systolic array, 710
t statistic, 137
t-test,137
tabula rasa, 165
tail area probabilities, 33
tail area probability, 213
TAN,312, 914
TASA, 951Taylor series, 255Taylor series expansion, 648Taylor’s theorem, 248temperature, 104
template, 676
template matching, 543
tensor product, 553tensor product basis, 538
terminals, 689test statistic, 163,213
TF-IDF,480
thin junction tree ﬁlter, 635thin junction trees, 944
thin plate spline, 538
thin SVD, 392
thinning, 862
Thompson sampling, 185
tied,103,565, 997
tied-mixture HMM, 630
Tikhonov regularization, 124
time reversible, 599
time-invariant, 589
time-series forecasting, 637, 673Tobit model, 379
Toeplitz, 627tokens,945
topic,946,951
topic model, 757topological ordering, 310, 310
total ordering, 310
trace,99
trace plot, 859
trace trick, 99
traceback, 614,717
tracking, 823tracking by detection, 830
tractable substructure, 739
trail,310
training set, 2
tr
ans-dimensional MCMC, 855
transfer function, 563,570
transfer learning, 296
transient, 599
transition matrix, 589, 590
transition model, 312,631
translation invariance, 565,1004
translation invariant, 472translation invariant prior, 167
TRBP,787
TRBP-S,801
tree,310
tree EP,793
tree reparameterization, 774
tree reweighted belief propagation, 786
tree-augmented naive Bayes classiﬁer, 312treewidth, 320, 719, 800
trellis, 614trellis diagram, 612
tri-cube kernel, 508
triangle inequality, 352, 875
triangulated, 722
tridiagonal, 114trigram model, 591
true positive rate, 181
TrueSkill, 654, 793
truncated Gaussian, 362
truncated Gaussian potential, 691
truncated Newton, 250
truncated SVD, 393
TRW,787
TRW-S,801
tube,497
tuples, 975turbo codes, 768two-ﬁlter smoothing, 646
two-slice marginal, 611
type I, 213type I error rate, 181
type II maximum likelihood, 157
type-II maximum likelihood, 173
U-shaped curve, 23
UCB,185
UGM,661
UKF,650
unbiased, 200
uncertainty, 27
unclamped phase, 988
unclamped term, 677
unconditionally independent, 30
under
ﬁts,23
undirected, 309
undirected graphical model, 661
undirected local Markov property, 662
unfaithful, 663
unidentiﬁable, 200, 278, 841Uniﬁed Medical Language System, 977uniform distribution, 32
unigram statistics, 591
unigrams, 953uninformative, 165
union bound, 209
unit information prior, 236
universal approximator, 564
unk,81,596
unknown, 15, 81unrolled, 321
unscented Kalman ﬁlter, 523, 650
unscented particle ﬁlter, 828
unscented transform, 650
unstable, 550
unsupervised learning, 2,9, 337
up-down, 998
user rating proﬁle, 949
utilities, 294utility function, 177
utility nodes, 328
v-structure, 324, 326
validation set, 23
value nodes, 328
value of perfect information, 331
vanishing gradient, 999
Vapnik-Chervonenkis, 210
VAR,673
INDEXTOKEYWORDS 1067
variable duration HMM, 622
variable elimination, 318, 331, 715
variance, 33
variance stabilizing transform, 175
variation of information, 879
variational Bayes, 742
variational Bayes EM, 620, 750, 923
variational EM, 368
variational free energy, 733
variational inference, 281, 318, 731
variational message passing, 756
varimax,385, 410
VB,742
VBEM,750
VC,210
VC dimension, 206
vector auto-regressive, 673
vector quantization, 354
version space, 67
vertices,309
VIBES,756
views,904
visible, 349visible nodes, 313
visible variables, 319
visual words, 1007
visualizing, 12
Viterbi,612, 701
Viterbi decoding, 608
Viterbi training, 620
VMP,756
Voronoi tessellation, 18
VQ,354
Wald, 448Wald interval, 212
warm starting, 442
WARP,304
Watson, 4wavelet, 469wavelet transforms, 413weak conditionality, 215
weak learner, 554
weak marginalization, 658
web crawling, 600
web spam, 603
weight decay, 226,572, 987
weight function, 533
weight vector, 19
weighted approximate-rank pairwise, 304
w e i g h t e da v e r a g e ,7 1weighted least squares, 358weighted least squares problem, 251
Whitening,142
w
hitening, 410
Widrow-Hoff rule, 265
Wishart,125
working response, 250
World Health Organization, 60wrapper method, 427
Xbox, 654, 795xor,486
Zellner’s g-prior, 405zero avoiding, 733
zero count problem, 77
zero forcing, 733
zero temperature limit, 800
zig-zag,248Zipf’s law, 43
